{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.object.values.js","webpack:///./node_modules/core-js/modules/es.string.split.js","webpack:///./node_modules/core-js/internals/regexp-exec-abstract.js","webpack:///./node_modules/core-js/modules/web.dom-collections.for-each.js","webpack:///./node_modules/core-js/internals/array-for-each.js","webpack:///./node_modules/core-js/modules/es.string.includes.js","webpack:///./node_modules/node-libs-browser/mock/process.js","webpack:///./node_modules/core-js/internals/is-regexp.js","webpack:///./node_modules/core-js/internals/not-a-regexp.js","webpack:///./node_modules/core-js/internals/array-species-create.js","webpack:///./node_modules/core-js/internals/object-to-array.js","webpack:///./node_modules/core-js/internals/advance-string-index.js","webpack:///./node_modules/core-js/internals/regexp-exec.js","webpack:///./node_modules/core-js/internals/regexp-sticky-helpers.js","webpack:///./node_modules/core-js/modules/es.array.join.js","webpack:///./node_modules/core-js/internals/array-method-is-strict.js","webpack:///./node_modules/core-js/internals/correct-is-regexp-logic.js","webpack:///./node_modules/core-js/modules/es.regexp.exec.js","webpack:///./node_modules/core-js/internals/regexp-flags.js","webpack:///./node_modules/core-js/internals/array-iteration.js","webpack:///./node_modules/core-js/modules/es.array.includes.js","webpack:///./node_modules/mxgraph/javascript/dist/build.js","webpack:///./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","webpack:///./node_modules/path-browserify/index.js","webpack:///./node_modules/core-js/internals/is-array.js","webpack:///./src/graph/index.js"],"names":["$","$values","values","target","stat","O","fixRegExpWellKnownSymbolLogic","isRegExp","anObject","requireObjectCoercible","speciesConstructor","advanceStringIndex","toLength","callRegExpExec","regexpExec","fails","arrayPush","push","min","Math","MAX_UINT32","SUPPORTS_Y","RegExp","SPLIT","nativeSplit","maybeCallNative","internalSplit","split","length","separator","limit","string","String","this","lim","undefined","call","match","lastIndex","lastLength","output","flags","ignoreCase","multiline","unicode","sticky","lastLastIndex","separatorCopy","source","slice","index","apply","test","splitter","regexp","res","done","value","rx","S","C","unicodeMatching","p","q","A","e","z","i","classof","module","exports","R","exec","result","TypeError","global","DOMIterables","forEach","createNonEnumerableProperty","COLLECTION_NAME","Collection","CollectionPrototype","prototype","error","$forEach","arrayMethodIsStrict","STRICT_METHOD","callbackfn","arguments","notARegExp","correctIsRegExpLogic","proto","forced","includes","searchString","indexOf","nextTick","fn","args","Array","shift","setTimeout","platform","arch","execPath","title","pid","browser","env","argv","binding","name","Error","path","cwd","chdir","dir","resolve","exit","kill","umask","dlopen","uptime","memoryUsage","uvCounters","features","isObject","wellKnownSymbol","MATCH","it","isArray","SPECIES","originalArray","constructor","DESCRIPTORS","objectKeys","toIndexedObject","propertyIsEnumerable","f","createMethod","TO_ENTRIES","key","keys","entries","charAt","regexpFlags","stickyHelpers","nativeExec","nativeReplace","replace","patchedExec","UPDATES_LAST_INDEX_WRONG","re1","re2","UNSUPPORTED_Y","BROKEN_CARET","NPCG_INCLUDED","PATCH","str","reCopy","re","charsAdded","strCopy","input","RE","s","IndexedObject","nativeJoin","join","ES3_STRINGS","Object","METHOD_NAME","argument","method","error1","error2","that","dotAll","bind","toObject","arraySpeciesCreate","TYPE","IS_MAP","IS_FILTER","IS_SOME","IS_EVERY","IS_FIND_INDEX","IS_FILTER_OUT","NO_HOLES","$this","specificCreate","self","boundFunction","create","map","filter","some","every","find","findIndex","filterOut","$includes","addToUnscopables","el","opts","__mxOutput","mxClient","VERSION","IS_IE","navigator","userAgent","IS_IE6","IS_IE11","IS_EDGE","IS_QUIRKS","document","documentMode","IS_EM","createElement","VML_PREFIX","OFFICE_PREFIX","IS_NS","IS_OP","IS_OT","IS_SF","vendor","IS_ANDROID","appVersion","IS_IOS","IS_GC","IS_CHROMEAPP","window","chrome","app","runtime","IS_FF","InstallTrigger","IS_MT","IS_VML","appName","toUpperCase","IS_SVG","NO_FO","createElementNS","IS_WIN","IS_MAC","IS_CHROMEOS","IS_TOUCH","documentElement","IS_POINTER","PointerEvent","IS_LOCAL","location","href","defaultBundles","isBrowserSupported","link","rel","doc","id","write","setAttribute","head","getElementsByTagName","appendChild","loadResources","lan","pending","callback","mxResources","add","include","src","mxLoadResources","mxForceIncludes","mxResourceExtension","mxLoadStylesheets","mxBasePath","substring","basePath","mxImageBasePath","imageBasePath","mxLanguage","language","userLanguage","mxDefaultLanguage","defaultLanguage","mxLanguages","languages","namespaces","styleSheets","node","type","styleSheet","cssText","createStyleSheet","mxLog","consoleName","TRACE","DEBUG","WARN","buffer","init","body","table","tbody","tr","td","style","verticalAlign","textarea","height","resize","compatMode","width","addButton","evt","info","content","mxUtils","getInnerHtml","debug","copy","err","alert","popup","h","w","innerHeight","innerWidth","clientHeight","clientWidth","mxWindow","max","setMaximizable","setScrollable","setResizable","setClosable","destroyOnClose","elt","getElement","resizeHandler","sender","offsetHeight","addListener","mxEvent","RESIZE_END","MAXIMIZE","NORMALIZE","writeln","toString","lab","funct","button","isVisible","show","setVisible","visible","enter","Date","getTime","leave","t0","dt","warn","visibility","scrollTop","scrollHeight","mxObjectIdentity","FIELD_NAME","counter","get","obj","ctor","getFunctionName","clear","mxDictionary","put","previous","remove","getKeys","getValues","visit","visitor","resources","extension","resourcesEncoded","loadDefaultBundle","loadSpecialBundle","isLanguageSupported","getDefaultBundle","basename","getSpecialBundle","dash","toLowerCase","mxConstants","NONE","defaultBundle","specialBundle","req","parse","getText","load","isReady","text","lines","idx","charCodeAt","unescape","params","defaultValue","replacePlaceholders","c","parseInt","mxPoint","x","y","mxRectangle","equals","clone","setRect","getCenterX","getCenterY","rect","minX","minY","maxX","maxY","intersect","r1","r2","b1","b2","grow","amount","getPoint","rotate90","t","tmp","fromRectangle","mxEffects","animateChanges","graph","changes","maxStep","step","animate","isRequired","change","mxGeometryChange","mxTerminalChange","mxValueChange","mxChildChange","mxStyleChange","state","getView","getState","cell","child","model","isEdge","setOpacity","shape","scale","dx","geometry","dy","sx","sy","cellRenderer","redraw","cascadeOpacity","delay","opacity","childCount","getChildCount","getChildAt","childState","edges","getEdges","edgeState","fadeOut","from","isEnabled","parentNode","removeChild","errorResource","closeResource","errorImage","removeCursors","element","cursor","children","childNodes","getCurrentStyle","currentStyle","getComputedStyle","parseCssNumber","parseFloat","isNaN","setPrefixedStyle","prefix","hasScrollbars","overflow","scope","eval","expr","_mxJavaScriptExpression","message","findNode","attr","nodeType","NODETYPE_ELEMENT","getAttribute","firstChild","nextSibling","trim","ltrim","idx2","array","splice","isNode","nodeName","attributeName","attributeValue","isAncestorNode","ancestor","parent","getChildNodes","importNode","allChildren","importNodeImplementation","newNode","attributes","createTextNode","nodeValue","createXmlDocument","implementation","createDocument","createMsXmlDocument","ActiveXObject","async","validateOnParse","resolveExternals","parseXml","DOMParser","xml","parser","parseFromString","loadXML","clearSelection","selection","empty","getSelection","removeAllRanges","removeWhitespace","before","previousSibling","NODETYPE_TEXT","next","getTextContent","htmlEntities","newline","isVml","tagUrn","getXml","linefeed","getPrettyXml","XMLSerializer","xmlSerializer","serializeToString","tab","indent","ns","namespaceURI","NODETYPE_DOCUMENT","NODETYPE_DOCUMENT_FRAGMENT","NODETYPE_COMMENT","NODETYPE_CDATA","attrs","val","extractTextWithWhitespace","elems","blocks","ret","doExtract","elts","innerHTML","elem","replaceTrailingNewlines","pattern","postfix","innerText","textContent","setTextContent","serializer","getOuterHtml","outerHTML","ownerDocument","br","count","label","para","addTransparentBackgroundFilter","linkAction","editor","action","pad","execute","linkInvoke","functName","arg","a","color","textDecoration","paddingLeft","getDocumentSize","b","d","fit","ds","left","offsetLeft","offsetWidth","offset","getDocumentScrollOrigin","sl","st","right","top","offsetTop","bottom","url","mxXmlRequest","send","onload","onerror","binary","timeout","ontimeout","headers","setRequestHeaders","request","setRequestHeader","setBinary","getAll","urls","remain","errors","status","getStatus","post","submit","simulate","loadInto","onreadystatechange","readyState","addEventListener","getValue","getNumber","Number","getColor","transients","shallow","equalPoints","equalEntries","removeDuplicates","arr","dict","extend","superCtor","toRadians","deg","PI","toDegree","rad","arcToCurves","x0","y0","angle","largeArcFlag","sweepFlag","fS","psai","abs","sds","ctx","cty","cpsi","cos","spsi","sin","rxd","ryd","rxdd","rydd","r1x","r2y","lamda","sqrt","seif","txd","tyd","tx","ty","atan2","s1","dr","sse","seg","ceil","segr","cpsir1","cpsir2","spsir1","spsir2","mc","ms","x2","y2","x3","y3","n","getBoundingBox","rotation","cx","p1","p2","p3","p4","getRotatedPoint","pt","x1","y1","getPortConstraints","terminal","edge","STYLE_PORT_CONSTRAINT","STYLE_SOURCE_PORT_CONSTRAINT","STYLE_TARGET_PORT_CONSTRAINT","directions","returnValue","DIRECTION_MASK_NONE","constraintRotationEnabled","STYLE_PORT_CONSTRAINT_ROTATION","STYLE_ROTATION","quad","DIRECTION_NORTH","DIRECTION_MASK_NORTH","DIRECTION_MASK_EAST","DIRECTION_MASK_SOUTH","DIRECTION_MASK_WEST","DIRECTION_WEST","DIRECTION_SOUTH","DIRECTION_EAST","reversePortConstraints","constraint","findNearestSegment","absolutePoints","last","current","dist","ptSegDistSq","getDirectedBounds","m","flipH","flipV","STYLE_DIRECTION","STYLE_FLIPH","STYLE_FLIPV","round","m2","getPerimeterPoint","pts","center","point","intersection","ip","distSq","rectangleIntersectsSegment","bounds","contains","intersects","tw","th","rw","rh","ry","intersectsHotspot","hotspot","cy","start","STYLE_STARTSIZE","view","STYLE_HORIZONTAL","alpha","getOffset","container","scrollOffset","fixed","position","r","getBoundingClientRect","scrollLeft","wnd","defaultView","parentWindow","pageXOffset","pageYOffset","getScrollOrigin","includeAncestors","includeDocument","origin","convertPoint","chars","rtrim","isNumeric","isFinite","isInteger","mod","denom","nume_a","nume_b","ua","ub","px","py","projlenSq","dotprod","lenSq","ptLineDist","relativeCcw","ccw","createImage","imageNode","borderStyle","sortCells","cells","ascending","lookup","sort","o1","o2","mxCellPath","PATH_SEPARATOR","comp","compare","getStylename","pairs","stylename","getStylenames","indexOfStylename","tokens","pos","addStylename","removeStylename","removeAllStylenames","setCellStyles","beginUpdate","setStyle","getStyle","endUpdate","isValue","sep","setCellStyleFlags","flag","setStyleFlag","cont","getAlignmentAsPoint","align","valign","ALIGN_LEFT","ALIGN_RIGHT","ALIGN_TOP","ALIGN_BOTTOM","getSizeForString","fontSize","fontFamily","textWidth","fontStyle","DEFAULT_FONTSIZE","DEFAULT_FONTFAMILY","div","lineHeight","LINE_HEIGHT","FONT_BOLD","fontWeight","FONT_ITALIC","txtDecor","FONT_UNDERLINE","FONT_STRIKETHROUGH","display","zoom","whiteSpace","size","getViewXml","getModel","getRoot","eventsEnabled","isEventsEnabled","setEventsEnabled","drawPane","overlayPane","dialect","DIALECT_SVG","NS_SVG","canvas","cloneNode","translate","getTranslate","temp","mxTemporaryCellStates","enc","mxCodec","encode","destroy","getScaleForPageCount","pageCount","pageFormat","border","PAGE_FORMAT_A4_PORTRAIT","availablePageWidth","availablePageHeight","graphBounds","getGraphBounds","sc","getScale","graphWidth","graphHeight","pageFormatAspectRatio","graphAspectRatio","pagesAspectRatio","pageRoot","pagesAspectRatioSqrt","numRowPages","numColumnPages","scaleChange","currentTotalPages","numLoops","roundRowDownProportion","floor","roundColumnDownProportion","posterWidth","open","html","base","close","links","styles","outer","svg","ownerSVGElement","minWidth","minHeight","printScreen","print","focus","isInternalWindow","pre","prompt","confirm","icon","padding","img","makeDraggable","graphF","dragElement","autoscroll","scalePreview","highlightDropTargets","getDropTarget","dragSource","mxDragSource","dragOffset","TOOLTIP_VERTICAL_OFFSET","setGuidesEnabled","getGraphForEvent","createDragElement","createPreviewElement","DEFAULT_HOTSPOT","MIN_HOTSPOT_SIZE","MAX_HOTSPOT_SIZE","RENDERING_HINT_EXACT","RENDERING_HINT_FASTER","RENDERING_HINT_FASTEST","DIALECT_VML","DIALECT_MIXEDHTML","DIALECT_PREFERHTML","DIALECT_STRICTHTML","NS_XHTML","NS_XLINK","SHADOWCOLOR","VML_SHADOWCOLOR","SHADOW_OFFSET_X","SHADOW_OFFSET_Y","SHADOW_OPACITY","NODETYPE_ATTRIBUTE","NODETYPE_ENTITY_REFERENCE","NODETYPE_ENTITY","NODETYPE_PROCESSING_INSTRUCTION","NODETYPE_DOCUMENTTYPE","NODETYPE_NOTATION","DEFAULT_VALID_COLOR","DEFAULT_INVALID_COLOR","OUTLINE_HIGHLIGHT_COLOR","OUTLINE_HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_SIZE","HIGHLIGHT_OPACITY","CURSOR_MOVABLE_VERTEX","CURSOR_MOVABLE_EDGE","CURSOR_LABEL_HANDLE","CURSOR_TERMINAL_HANDLE","CURSOR_BEND_HANDLE","CURSOR_VIRTUAL_BEND_HANDLE","CURSOR_CONNECT","HIGHLIGHT_COLOR","CONNECT_TARGET_COLOR","INVALID_CONNECT_TARGET_COLOR","DROP_TARGET_COLOR","VALID_COLOR","INVALID_COLOR","EDGE_SELECTION_COLOR","VERTEX_SELECTION_COLOR","VERTEX_SELECTION_STROKEWIDTH","EDGE_SELECTION_STROKEWIDTH","VERTEX_SELECTION_DASHED","EDGE_SELECTION_DASHED","GUIDE_COLOR","GUIDE_STROKEWIDTH","OUTLINE_COLOR","OUTLINE_STROKEWIDTH","HANDLE_SIZE","LABEL_HANDLE_SIZE","HANDLE_FILLCOLOR","HANDLE_STROKECOLOR","LABEL_HANDLE_FILLCOLOR","CONNECT_HANDLE_FILLCOLOR","LOCKED_HANDLE_FILLCOLOR","OUTLINE_HANDLE_FILLCOLOR","OUTLINE_HANDLE_STROKECOLOR","DEFAULT_TEXT_DIRECTION","WORD_WRAP","ABSOLUTE_LINE_HEIGHT","DEFAULT_FONTSTYLE","DEFAULT_STARTSIZE","DEFAULT_MARKERSIZE","DEFAULT_IMAGESIZE","ENTITY_SEGMENT","RECTANGLE_ROUNDING_FACTOR","LINE_ARCSIZE","ARROW_SPACING","ARROW_WIDTH","ARROW_SIZE","PAGE_FORMAT_A4_LANDSCAPE","PAGE_FORMAT_LETTER_PORTRAIT","PAGE_FORMAT_LETTER_LANDSCAPE","STYLE_PERIMETER","STYLE_SOURCE_PORT","STYLE_TARGET_PORT","STYLE_OPACITY","STYLE_FILL_OPACITY","STYLE_STROKE_OPACITY","STYLE_TEXT_OPACITY","STYLE_TEXT_DIRECTION","STYLE_OVERFLOW","STYLE_ORTHOGONAL","STYLE_EXIT_X","STYLE_EXIT_Y","STYLE_EXIT_DX","STYLE_EXIT_DY","STYLE_EXIT_PERIMETER","STYLE_ENTRY_X","STYLE_ENTRY_Y","STYLE_ENTRY_DX","STYLE_ENTRY_DY","STYLE_ENTRY_PERIMETER","STYLE_WHITE_SPACE","STYLE_FILLCOLOR","STYLE_POINTER_EVENTS","STYLE_SWIMLANE_FILLCOLOR","STYLE_MARGIN","STYLE_GRADIENTCOLOR","STYLE_GRADIENT_DIRECTION","STYLE_STROKECOLOR","STYLE_SEPARATORCOLOR","STYLE_STROKEWIDTH","STYLE_ALIGN","STYLE_VERTICAL_ALIGN","STYLE_LABEL_WIDTH","STYLE_LABEL_POSITION","STYLE_VERTICAL_LABEL_POSITION","STYLE_IMAGE_ASPECT","STYLE_IMAGE_ALIGN","STYLE_IMAGE_VERTICAL_ALIGN","STYLE_GLASS","STYLE_IMAGE","STYLE_IMAGE_WIDTH","STYLE_IMAGE_HEIGHT","STYLE_IMAGE_BACKGROUND","STYLE_IMAGE_BORDER","STYLE_NOLABEL","STYLE_NOEDGESTYLE","STYLE_LABEL_BACKGROUNDCOLOR","STYLE_LABEL_BORDERCOLOR","STYLE_LABEL_PADDING","STYLE_INDICATOR_SHAPE","STYLE_INDICATOR_IMAGE","STYLE_INDICATOR_COLOR","STYLE_INDICATOR_STROKECOLOR","STYLE_INDICATOR_GRADIENTCOLOR","STYLE_INDICATOR_SPACING","STYLE_INDICATOR_WIDTH","STYLE_INDICATOR_HEIGHT","STYLE_INDICATOR_DIRECTION","STYLE_SHADOW","STYLE_SEGMENT","STYLE_ENDARROW","STYLE_STARTARROW","STYLE_ENDSIZE","STYLE_SWIMLANE_LINE","STYLE_ENDFILL","STYLE_STARTFILL","STYLE_DASHED","STYLE_DASH_PATTERN","STYLE_FIX_DASH","STYLE_ROUNDED","STYLE_CURVED","STYLE_ARCSIZE","STYLE_ABSOLUTE_ARCSIZE","STYLE_SOURCE_PERIMETER_SPACING","STYLE_TARGET_PERIMETER_SPACING","STYLE_PERIMETER_SPACING","STYLE_SPACING","STYLE_SPACING_TOP","STYLE_SPACING_LEFT","STYLE_SPACING_BOTTOM","STYLE_SPACING_RIGHT","STYLE_ANCHOR_POINT_DIRECTION","STYLE_ELBOW","STYLE_FONTCOLOR","STYLE_FONTFAMILY","STYLE_FONTSIZE","STYLE_FONTSTYLE","STYLE_ASPECT","STYLE_AUTOSIZE","STYLE_FOLDABLE","STYLE_EDITABLE","STYLE_BACKGROUND_OUTLINE","STYLE_BENDABLE","STYLE_MOVABLE","STYLE_RESIZABLE","STYLE_RESIZE_WIDTH","STYLE_RESIZE_HEIGHT","STYLE_ROTATABLE","STYLE_CLONEABLE","STYLE_DELETABLE","STYLE_SHAPE","STYLE_EDGE","STYLE_JETTY_SIZE","STYLE_SOURCE_JETTY_SIZE","STYLE_TARGET_JETTY_SIZE","STYLE_LOOP","STYLE_ORTHOGONAL_LOOP","STYLE_ROUTING_CENTER_X","STYLE_ROUTING_CENTER_Y","SHAPE_RECTANGLE","SHAPE_ELLIPSE","SHAPE_DOUBLE_ELLIPSE","SHAPE_RHOMBUS","SHAPE_LINE","SHAPE_IMAGE","SHAPE_ARROW","SHAPE_ARROW_CONNECTOR","SHAPE_LABEL","SHAPE_CYLINDER","SHAPE_SWIMLANE","SHAPE_CONNECTOR","SHAPE_ACTOR","SHAPE_CLOUD","SHAPE_TRIANGLE","SHAPE_HEXAGON","ARROW_CLASSIC","ARROW_CLASSIC_THIN","ARROW_BLOCK","ARROW_BLOCK_THIN","ARROW_OPEN","ARROW_OPEN_THIN","ARROW_OVAL","ARROW_DIAMOND","ARROW_DIAMOND_THIN","ALIGN_CENTER","ALIGN_MIDDLE","TEXT_DIRECTION_DEFAULT","TEXT_DIRECTION_AUTO","TEXT_DIRECTION_LTR","TEXT_DIRECTION_RTL","DIRECTION_MASK_ALL","ELBOW_VERTICAL","ELBOW_HORIZONTAL","EDGESTYLE_ELBOW","EDGESTYLE_ENTITY_RELATION","EDGESTYLE_LOOP","EDGESTYLE_SIDETOSIDE","EDGESTYLE_TOPTOBOTTOM","EDGESTYLE_ORTHOGONAL","EDGESTYLE_SEGMENT","PERIMETER_ELLIPSE","PERIMETER_RECTANGLE","PERIMETER_RHOMBUS","PERIMETER_HEXAGON","PERIMETER_TRIANGLE","mxEventObject","properties","mxMouseEvent","sourceState","mxEventSource","eventSource","setEventSource","consumed","getName","getProperties","getProperty","isConsumed","consume","graphX","graphY","getEvent","getSource","isSource","getX","getClientX","getY","getClientY","getGraphX","getGraphY","getCell","isPopupTrigger","preventDefault","touches","isMouseEvent","eventListeners","getEventSource","removeListener","fireEvent","listen","updateListenerList","eventName","mxListenerList","entry","attachEvent","updateListener","listenerCount","removeEventListener","detachEvent","removeAllListeners","list","addGestureListeners","startListener","moveListener","endListener","removeGestureListeners","redirectMouseEvents","down","move","up","dblClick","fireMouseEvent","MOUSE_DOWN","MOUSE_MOVE","MOUSE_UP","release","addMouseWheelListener","wheelHandler","event","ctrlKey","deltaY","deltaX","diff","evtCache","dx0","dy0","pointerId","clientX","clientY","PINCH_THRESHOLD","disableContextMenu","srcElement","isTouchEvent","pointerType","MSPOINTER_TYPE_TOUCH","mozInputSource","isPenEvent","MSPOINTER_TYPE_PEN","isMultiTouchEvent","MSPOINTER_TYPE_MOUSE","isLeftMouseButton","which","buttons","isMiddleMouseButton","isRightMouseButton","isControlDown","isShiftDown","isMetaDown","isAltDown","shiftKey","altKey","metaKey","getMainEvent","changedTouches","stopPropagation","cancelBubble","LABEL_HANDLE","ROTATION_HANDLE","CUSTOM_HANDLE","VIRTUAL_HANDLE","ACTIVATE","RESIZE_START","RESIZE","MOVE_START","MOVE","MOVE_END","PAN_START","PAN","PAN_END","MINIMIZE","HIDE","SHOW","CLOSE","DESTROY","REFRESH","SIZE","SELECT","FIRED","FIRE_MOUSE_EVENT","GESTURE","TAP_AND_HOLD","GET","RECEIVE","CONNECT","DISCONNECT","SUSPEND","RESUME","MARK","ROOT","POST","OPEN","SAVE","BEFORE_ADD_VERTEX","ADD_VERTEX","AFTER_ADD_VERTEX","DONE","EXECUTE","EXECUTED","BEGIN_UPDATE","START_EDIT","END_UPDATE","END_EDIT","BEFORE_UNDO","UNDO","REDO","CHANGE","NOTIFY","LAYOUT_CELLS","CLICK","SCALE","TRANSLATE","SCALE_AND_TRANSLATE","UP","DOWN","ADD","REMOVE","CLEAR","ADD_CELLS","CELLS_ADDED","MOVE_CELLS","CELLS_MOVED","RESIZE_CELLS","CELLS_RESIZED","TOGGLE_CELLS","CELLS_TOGGLED","ORDER_CELLS","CELLS_ORDERED","REMOVE_CELLS","CELLS_REMOVED","GROUP_CELLS","UNGROUP_CELLS","REMOVE_CELLS_FROM_PARENT","FOLD_CELLS","CELLS_FOLDED","ALIGN_CELLS","LABEL_CHANGED","CONNECT_CELL","CELL_CONNECTED","SPLIT_EDGE","FLIP_EDGE","START_EDITING","EDITING_STARTED","EDITING_STOPPED","ADD_OVERLAY","REMOVE_OVERLAY","UPDATE_CELL_SIZE","ESCAPE","DOUBLE_CLICK","START","RESET","username","password","withCredentials","decodeSimulateValues","isBinary","responseText","getDocumentElement","responseXML","XMLHttpRequest","overrideMimeType","old","onbeforeunload","form","pars","decodeURIComponent","mxClipboard","STEPSIZE","insertCount","setCells","getCells","isEmpty","cut","removeCells","getSelectionCells","getExportableCells","getTopmostCells","cloneCells","paste","getImportableCells","delta","getDefaultParent","importCells","setSelectionCells","minimizable","movable","replaceNode","installMaximizeHandler","installMinimizeHandler","installCloseHandler","setMinimizable","setTitle","installMoveHandler","replaceChild","mxForm","className","mxImage","mxDivResizer","resizeWidth","resizeHeight","handlingResize","dropHandler","mouseDown","eventConsumer","evtName","me","mxToolbar","mxUndoableEdit","significant","mxUndoManager","closeImage","minimizeImage","normalizeImage","maximizeImage","resizeImage","minimumSize","contentHeightCorrection","touchAction","contentWrapper","activator","activate","hide","scrollable","activeWindow","zIndex","previousWindow","isResizable","resizable","startX","startY","dragHandler","setSize","minimize","getMinimumSize","marginLeft","minimized","maxDisplay","maximize","minSize","maximizable","maximized","minDisplay","docHeight","setLocation","closeImg","setImage","image","marginRight","marginTop","insertBefore","closable","getTable","addButtons","okFunct","cancelFunct","addText","addField","addCheckbox","checked","addTextarea","rows","addCombo","isMultiSelect","select","addOption","combo","isSelected","option","getDocumentWidth","getDocumentHeight","l","previewElement","previewOffset","enabled","currentGraph","currentDropTarget","currentPoint","currentGuide","currentHighlight","guidesEnabled","gridEnabled","dragElementZIndex","dragElementOpacity","checkEventSource","setEnabled","isGuidesEnabled","isGridEnabled","setGridEnabled","getCellAt","isActive","mouseMoveHandler","reset","dragExit","removeDragElement","removeListeners","stopDrag","startDrag","mouseMove","mouseUpHandler","mouseUp","pointerEvents","getElementForEvent","elementFromPoint","graphContainsEvent","dragEnter","dragOver","drop","isMouseDown","isMouseTrigger","mxGuide","graphHandler","getGuideStates","mxCellHighlight","panDx","panDy","autoScroll","scrollPointToVisible","autoExtend","isDropEnabled","highlight","isGridEnabledEvent","hideGuide","isEnabledForEvent","off","gridSize","snap","dropTarget","noReset","updateDefaultMode","addItem","pressedIcon","factoryMethod","initialClassName","mouseHandler","backgroundColor","menu","mxPopupMenu","currentImg","isMenuShowing","hideMenu","addActionCombo","options","selectedIndex","addSwitchMode","altIcon","selectedMode","defaultMode","selectMode","addMode","toggle","defaultFunction","domNode","resetMode","addSeparator","addBreak","addLine","hr","undone","redone","isSignificant","notify","die","undo","redo","history","indexOfNextAdd","canUndo","edit","canRedo","undoableEditHappened","undoableEdit","edits","mxUrlConverter","mxPanningManager","thread","active","tdx","tdy","t0x","t0y","scrollbars","mouseListener","stop","addMouseListener","mouseUpListener","createThread","setInterval","panGraph","getDx","getDy","panTo","handleMouseOut","damper","clearInterval","setTranslate","removeMouseListener","mxAutoSaveManager","changeHandler","graphModelChanged","setGraph","mxAnimation","mxMorphing","steps","ease","mxImageBundle","alt","images","mxImageExport","mxAbstractCanvas2D","converter","createUrlConverter","mxXmlCanvas2D","root","writeDefaults","mxSvgCanvas2D","styleEnabled","gradients","defs","createStyle","baseUrl","baseDomain","updateBaseUrl","protocol","host","pathname","lastIndexOf","getBaseUrl","setBaseUrl","getBaseDomain","setBaseDomain","isRelativeUrl","convert","submenuImage","useLeftButtonForPopup","itemCount","autoExpand","smartSeparators","labels","iconCls","noHover","willAddSeparator","containsItems","col1","col2","col3","paddingRight","textAlign","createSubmenu","currentSelection","eventReceiver","activeRow","hideSubmenu","showSubmenu","createRange","addCheckmark","item","backgroundImage","backgroundRepeat","backgroundPosition","row","force","showMenu","autoSaveDelay","autoSaveThrottle","autoSaveThreshold","ignoredChanges","lastSnapshot","save","now","isRunning","startAnimation","updateAnimation","stopAnimation","mxCellStatePreview","animateCell","recurse","getDelta","isVertex","moveState","stopRecursion","getOriginForCell","getParent","geo","getCellGeometry","relative","pgeo","putImage","fallback","getImage","includeOverlays","drawState","visitStatesRecursive","drawCellState","drawOverlays","getLinkForCellState","setLink","drawShape","drawText","mxShape","checkBounds","beforePaint","paint","afterPaint","restore","overlays","states","rotateHtml","lastX","lastY","moveOp","lineOp","quadOp","curveOp","closeOp","createState","fillAlpha","strokeAlpha","fillColor","gradientFillAlpha","gradientColor","gradientAlpha","gradientDirection","strokeColor","strokeWidth","dashed","dashPattern","fixDash","lineCap","lineJoin","miterLimit","fontColor","fontBackgroundColor","fontBorderColor","shadow","shadowColor","shadowAlpha","shadowDx","shadowDy","rotationCx","rotationCy","format","addOp","rotatePoint","theta","pop","rotate","setAlpha","setFillAlpha","setStrokeAlpha","setFillColor","setGradient","color1","color2","direction","alpha1","alpha2","setStrokeColor","setStrokeWidth","setDashed","setDashPattern","setLineCap","setLineJoin","setMiterLimit","setFontColor","setFontBackgroundColor","setFontBorderColor","setFontSize","setFontFamily","setFontStyle","setShadow","setShadowColor","setShadowAlpha","setShadowOffset","begin","moveTo","lineTo","quadTo","curveTo","arcTo","curves","end","textEnabled","compressed","toFixed","roundrect","ellipse","aspect","wrap","clip","stroke","fill","fillAndStroke","useDomParser","useAbsoluteIds","matchHtmlAlignment","foEnabled","foAltText","foOffset","textOffset","imageOffset","strokeTolerance","minStrokeWidth","refCount","lineHeightCorrection","pointerEventsValue","fontMetricsPadding","cacheOffsetSize","hash","tagName","namespace","getAlternateText","fo","createAlternateContent","anchor","createGradientId","getSvgGradient","gradient","tmpId","getElementById","createSvgGradient","op","addNode","filled","stroked","updateFill","updateStroke","transform","createShadow","createTolerance","originalRoot","getCurrentStrokeWidth","sw","updateStrokeAttributes","createDashPattern","pat","tol","removeAttribute","setAttributeNS","convertHtml","xd","xb","adoptNode","ta","createDiv","div2","div3","updateText","updateTextNodes","addForeignObject","group","g","createCss","getTextCss","flex","block","box","yp","bg","ofl","fw","fh","bgc","lh","css","deco","plainText","createClip","updateFont","textHeight","addTextBackground","bbox","getBBox","ie","mxVmlCanvas2D","setStates","stencil","initStyles","mxStencil","desc","parseDescription","parseConstraints","rotatedHtmlBackground","vmlScale","createVmlElement","coordsize","strokeweight","strokecolor","createStroke","createFill","createTransparentFill","flip","endcap","joinstyle","miterlimit","dashstyle","getVmlDashStyle","tok","createShadowStroke","createShadowFill","cpx0","cpy0","qpx1","qpy1","cpx3","cpy3","cpx1","cpy1","cpx2","cpy2","createRect","margin","inner","wordWrap","rot","maxHeight","real_cos","real_sin","sizeDiv","oh","top_fix","left_fix","divParent","textpathok","v","tp","on","horizontal","vertical","guideX","guideY","rounded","tolerance","getGuideTolerance","createGuideShape","guide","mxPolyline","isDashed","isStateIgnored","tt","overrideX","stateX","valueX","overrideY","stateY","valueY","ttX","ttY","middle","snapX","centerAlign","override","getOverlayPane","snapY","snapDelta","points","getGuideColor","scrollWidth","antiAlias","minSvgStrokeWidth","boundingBox","svgStrokeTolerance","svgPointerEvents","shapePointerEvents","stencilPointerEvents","outline","useSvgBoundingBox","strokewidth","fillOpacity","strokeOpacity","isParseVml","isHtmlAllowed","getSvgScreenOffset","createSvg","createHtml","createVml","reconfigure","updateBoundsFromPoints","redrawShape","redrawHtmlShape","updateBoundingBox","lastChild","getLabelBounds","isPaintBoundsInverted","getLabelMargins","createVmlGroup","createCanvas","insertAdjacentHTML","destroyCanvas","createSvgCanvas","updateVmlContainer","createVmlCanvas","updateHtmlBounds","updateHtmlFilters","updateHtmlColors","isShadow","east","south","west","north","borderColor","borderWidth","setTransparentBackgroundImage","mxRefCount","releaseSvgGradients","oldGradients","strokeDrawn","updateTransform","configureCanvas","bb","createBoundingBox","createTransparentSvgRectangle","paintEdgeShape","paintVertexShape","getGradientBounds","getShapeRotation","paintBackground","paintForeground","getArcSize","paintGlassEffect","arc","isRounded","addPoints","arcSize","exclude","initialMove","pe","p0","wp","nx1","ny1","nx2","ny2","resetStyles","spacing","startSize","endSize","startArrow","endArrow","glass","setCursor","getCursor","isRoundable","augmentBoundingBox","getRotation","getTextRotation","mxText","verticalTextRotation","grads","defaultLocalized","allowEval","constraints","w0","h0","bgNode","fgNode","conns","parseConstraint","perimeter","mxConnectionConstraint","evaluateTextAttribute","attribute","evaluateAttribute","loc","stack","computeAspect","minScale","drawChildren","disableShadow","drawNode","inverse","parseRegularly","pointCount","segs","childNode","childName","ps","arcsize","factor","mxStencilRegistry","getStencil","stencils","addStencil","mxMarker","markers","addMarker","createMarker","unitX","unitY","mxActor","mxCloud","mxRectangleShape","mxEllipse","mxDoubleEllipse","mxRhombus","mxArrow","arrowWidth","mxArrowConnector","arrowSpacing","family","spacingTop","spacingRight","spacingBottom","spacingLeft","background","clipped","labelPadding","textDirection","updateMargin","mxTriangle","mxHexagon","mxLine","mxImageShape","mxLabel","mxCylinder","mxConnector","mxSwimlane","mxGraphLayout","WeightedCellSorter","weightedValue","mxStackLayout","mxPartitionLayout","mxCompactTreeLayout","invert","mxRadialTreeLayout","mxFastOrganicLayout","mxCircleLayout","radius","mxParallelEdgeLayout","mxCompositeLayout","layouts","master","mxEdgeLabelLayout","mxGraphAbstractHierarchyCell","mxGraphHierarchyNode","connectsAsTarget","connectsAsSource","mxGraphHierarchyEdge","ids","mxGraphHierarchyModel","layout","vertices","roots","tightenToSource","getGraph","vertexMapper","edgeMapper","maxRank","internalVertices","getChildVertices","SOURCESCANSTARTRANK","createInternalCells","j","internalEdge","realEdges","realEdge","targetCell","getVisibleTerminal","internalTargetCell","mxSwimlaneModel","mxHierarchicalLayoutStage","mxMedianHybridCrossingReduction","MedianCellSorter","mxMinimumCycleRemover","mxCoordinateAssignment","intraCellSpacing","interRankCellSpacing","orientation","initialX","parallelEdgeSpacing","mxSwimlaneOrdering","mxHierarchicalLayout","deterministic","createArrow","widthFactor","endOffsetX","endOffsetY","createOpenArrow","diamond","swFactor","tk","redrawPath","events","hw","hh","prev","paintLine","paintCurvedLine","ix","iy","arrow","nx","ny","basex","basey","floorx","floory","p0x","p0y","p1x","p1y","p2x","p2y","p3x","p3y","p5x","p5y","getEdgeWidth","isMarkerStart","getStartArrowWidth","isMarkerEnd","getEndArrowWidth","startWidth","endWidth","edgeWidth","openEnded","isOpenEnded","markerStart","markerEnd","isArrowRounded","i0","orthx","orthy","fns","startNx","startNy","paintMarker","outStartX","outStartY","inEndX","inEndY","dx1","dy1","dist1","tmp1","dist2","strokeWidthFactor","angleFactor","outX","outY","inX","inY","c1x","c1y","c2x","c2y","inStartX","inStartY","ptX","ptY","widthArrowRatio","spaceX","spaceY","baseSpacingTop","baseSpacingBottom","baseSpacingLeft","baseSpacingRight","replaceLinefeeds","ignoreClippedStringSize","ignoreStringSize","textWidthPadding","lastValue","cacheEnabled","update","realHtml","fmt","getAutoDirection","redrawHtmlShapeWithCss3","updateSize","textDiv","updateHtmlFilter","updateHtmlTransform","getContentNode","ow","updateInnerHtml","divs","unrotatedBoundingBox","getHtmlValue","updateValue","bd","enableWrap","maxWidth","getSpacing","mid","preserveImageAspect","useVml","imageSize","indicatorSize","indicatorSpacing","indicatorShape","indicator","indicatorColor","indicatorStrokeColor","indicatorGradientColor","indicatorDirection","paintImage","paintIndicator","getImageBounds","getIndicatorBounds","indicatorImage","hasChildNodes","getCylinderSize","isForeground","sourceMarker","targetMarker","getTitleSize","isHorizontal","shapeVertical","realHorizontal","realFlipH","realFlipV","getSwimlaneArcSize","swimlaneLine","paintRoundedSwimlane","paintSwimlane","paintSeparator","paintDivider","useBoundingBox","moveCell","resizeCell","getConstraint","getCurrentCellStyle","traverse","vertex","directed","func","visited","edgeCount","getEdgeCount","getEdgeAt","getTerminal","isAncestor","traverseAncestors","isVertexMovable","isCellMovable","isVertexIgnored","isCellVisible","isEdgeIgnored","setEdgeStyleEnabled","setOrthogonalEdge","getParentOffset","parentGeo","getGeometry","setEdgePoints","mxGeometry","setRelative","parentOffset","setGeometry","setVertexLocation","getVertexBounds","arrangeGroups","topBorder","rightBorder","bottomBorder","leftBorder","updateGroupBounds","nudge","rankIndex","marginBottom","keepFirstLocation","resizeParent","resizeParentMax","resizeLast","borderCollapse","allowGaps","pstate","getIndex","getParentSize","isLayer","currentRoot","getLayoutCells","c1","c2","geo1","geo2","fillValue","isSwimlane","getCellStyle","horz","childStyle","setChildGeometry","isCellCollapsed","updateParentGeometry","pgeo2","resizeVertices","other","getStartSize","maintainParentLocation","groupPadding","groupPaddingTop","groupPaddingRight","groupPaddingBottom","groupPaddingLeft","parentsChanged","moveTree","levelDistance","nodeDistance","resetEdges","prefHozEdgeSep","prefVertEdgeOff","minEdgeJetty","channelBuffer","edgeRouting","sortEdges","alignRanks","maxRankHeight","getConnections","findTreeRoots","parentX","parentY","dfs","findRankHeights","setCellHeights","horizontalLayout","verticalLayout","moveNode","adjustParents","localEdgeProcessing","sortOutgoingEdges","e1","e2","end1","end2","rank","createNode","out","attachParent","layoutLeaf","offsetX","offsetY","siblingOffset","contour","upperHead","createLine","lowerHead","upperTail","lowerTail","sum","merge","total","upper","lower","bridge","a1","a2","line1","line2","line","processNodeOutgoing","parentCell","sortedCells","sortingCriterion","availableWidth","requiredWidth","edgeSpacing","currentXOffset","currentYOffset","maxYOffset","parentBounds","childCell","childBounds","getEdgesBetween","newPoints","angleOffset","rootx","rooty","autoRadius","rowMinX","rowMaxX","rowMinCenX","rowMaxCenX","rowRadi","rootBounds","centerX","centerY","vertexBounds","calcRowDims","maxLeftGrad","maxRightGrad","leftGrad","rightGrad","xLeftLimit","xRightLimit","fullWidth","xProportion","totalTheta","averTheta","nextTheta","lastTheta","rowNum","rowHasChildren","useInputOrigin","disableEdgeStyle","forceConstant","forceConstantSquared","minDistanceLimit","maxDistanceLimit","minDistanceLimitSquared","initialTemp","temperature","maxIterations","iteration","vertexArray","dispX","dispY","cellLocation","radiusSquared","isMoveable","neighbours","indices","allowedToRun","initialBounds","getBoundingBoxFromGeometry","getOpposites","resetEdge","calcRepulsion","calcAttraction","calcPositions","reduceTemperature","minx","miny","moveCells","deltaLength","newXDisp","newYDisp","k","xDelta","yDelta","deltaLengthSquared","displacementX","displacementY","vertexCount","random","deltaLengthWithRadius","moveCircle","getRadius","circle","phi","checkOverlap","findParallels","parallels","addCell","getEdgeId","trg","route","scx","scy","tcx","tcy","len","placeLabels","avoid","labRect","dy2","dx2","minRank","nextLayerConnectedCells","previousLayerConnectedCells","getNextLayerConnectedCells","layer","getPreviousLayerConnectedCells","getGeneralPurposeVariable","setGeneralPurposeVariable","setX","setY","hashCode","getRankValue","otherNode","getCoreCell","isReversed","ranks","dfsCount","undirectedEdges","directedEdges","initialRank","startNodes","internalNode","internalNodes","startNodesCopy","edgesToBeMarked","layerDeterminingEdges","allEdgesScanned","minimumLayer","removedCell","currentMaxLayer","fixRanks","rankList","rootsArray","oldRootsArray","seen","parentToCellRankDifference","dfsRoots","trackAncestors","seenNodes","extendedDfs","connectingEdge","rootId","outgoingEdges","targetNode","ancestors","childHash","hashCodeLength","ranksPerGroup","swimlanes","swimlaneIndex","ii","maxChainDfs","lowerRank","upperRank","chainCount","slIndex","incomingEdges","nestedBestRanks","currentBestCrossings","iterationsWithoutImprovement","maxNoImprovementIterations","calculateCrossings","weightedMedian","transpose","candidateCrossings","numRanks","totalCrossings","calculateRankCrossing","previousRank","tmpIndices","rankPosition","connectedCells","nodeIndices","connectedNode","otherCellRankPosition","concat","firstIndex","treeSize","tree","treeIndex","mainLoopIteration","improved","maxCount","orderedCells","tempRank","leftCellAboveConnections","leftCellBelowConnections","rightCellAboveConnections","rightCellBelowConnections","leftAbovePositions","leftBelowPositions","rightAbovePositions","rightBelowPositions","leftCell","rightCell","totalCurrentCrossings","totalSwitchedCrossings","ik","downwardSweep","medianRank","rankValue","numCellsForRank","medianValues","reservedPositions","nextLevelConnectedCells","nextRankValue","sorterEntry","medianValue","arrayCount","medianPoint","leftMedian","rightMedian","unseenNodesArray","unseenNodes","modelRoots","seenNodesCopy","jettyPositions","limitX","currentXDelta","widestRank","rankTopY","rankBottomY","widestRankValue","rankWidths","rankY","fineTuning","nextLayerConnectedCache","previousLayerConnectedCache","printStatus","initialCoords","minNode","bestXDelta","medianPos","minPath","setCellLocations","nodeList","nodeWrapper","maxTries","cellWrapper","numNextLayerConnected","numPreviousLayerConnected","medianNextLevel","medianXValue","medianPreviousLevel","numConnectedNeighbours","currentPosition","cellMedian","positionChanged","leftLimit","rankSize","rightLimit","connectedCell","connectedCellWrapper","rankMedianPosition","weightedValues","cellMap","currentCell","calculatedWeightedValue","numConnectionsNextLevel","leftBuffer","rightBuffer","collection","totalWeight","facade","calculateWidestRank","rankCoordinates","localX","boundsWarning","numEdges","lastRankMaxCellHeight","maxCellHeight","distanceToNextRank","referenceX","edgeStraight","refSegCount","upSegCount","downSegCount","upXPositions","downXPositions","currentX","nextX","repositionValid","rankArray","MAX_VALUE","edgeStyle","mxHierarchicalEdgeStyle","ORTHOGONAL","POLYLINE","CURVE","setEdgePosition","cellIndex","currentCells","currentRank","sorter","connectedEdgeCount","connectedEdges","connections","innerCell","connIndex","numActualEdges","parallelEdgeCount","jettys","layoutReversed","realSource","reversed","arrayOffset","jetty","modelSource","isPort","loopStart","loopLimit","loopDelta","positionX","topChannelY","bottomChannelY","modelTarget","realTarget","processReversedEdge","realCell","positionY","reversedOverSwimlane","cellId","STRAIGHT","mxSwimlaneLayout","mxGraphModel","currentEdit","createUndoableEdit","setRoot","mxRootChange","previousIndex","mxCollapseChange","collapsed","mxVisibleChange","mxCellAttributeChange","mxCell","onInit","moveParent","parentBorder","interHierarchySpacing","edgesCache","edgeSourceTermCache","edgesTargetTermCache","rootsCopy","run","findRoots","best","maxDiff","fanOut","fanIn","cachedEdges","isCollapsed","terminalCache","term","hierarchyVertices","allVertexSet","filledVertexSet","filterDescendants","filledVertexSetEmpty","candidateRoots","vertexSet","cycleStage","layeringStage","crossingStage","placementStage","allVertices","currentComp","vertexID","edgeIsSource","netCount","isSource2","otherTerm","dummyVertexWidth","dummyVertices","getChildCells","insertVertex","layoutBounds","lane","childrenY","maxChildrenY","newGeo","leftGroupBorder","isValidAncestor","laneCounter","otherVertex","otherIndex","maintainEdgeParent","ignoreRelativeEdgeParent","createIds","nextId","updateLevel","endingUpdate","createRoot","isCreateIds","setCreateIds","insert","filterCells","getDescendants","rootChanged","oldRoot","cellAdded","isRoot","parentChanged","updateEdgeParents","getId","setId","createId","collision","updateEdgeParent","getNearestCommonAncestor","origin1","getOrigin","origin2","cell1","cell2","getParentPath","cellRemoved","parentForCellChanged","oldIndex","par","getChildren","getChildEdges","setTerminal","terminalChanged","setTerminals","terminalForCellChanged","insertEdge","removeEdge","getDirectedEdgeCount","outgoing","ignoredEdge","getIncomingEdges","getOutgoingEdges","incoming","includeLoops","tmp2","directedMatch","oppositeMatch","sources","targets","terminals","topmost","isConnectable","setValue","valueForCellChanged","valueChanged","geometryForCellChanged","styleForCellChanged","setCollapsed","collapsedStateForCellChanged","visibleStateForCellChanged","mergeChildren","to","cloneAllEdges","mapping","mergeChildrenImpl","getParents","parents","cloneCell","includeChildren","clones","cloneCellImpl","restoreClone","ident","cellCloned","cloneChild","connect","isConnect","connectable","mxTransient","newValue","setVertex","setEdge","setConnectable","setParent","removeFromParent","getEdgeIndex","isOutgoing","removeFromTerminal","hasAttribute","userObject","cloneValue","TRANSLATE_CONTROL_POINTS","alternateBounds","sourcePoint","targetPoint","swap","getTerminalPoint","setTerminalPoint","ct","fixedAspect","t1","t2","mxPerimeter","RectanglePerimeter","orthogonal","pi","pi2","beta","tan","EllipsePerimeter","det","xout1","xout2","yout1","yout2","pow","xout","yout","RhombusPerimeter","TrianglePerimeter","corner","HexagonPerimeter","mxPrintPreview","pageSelector","pageScale","mxStylesheet","putDefaultVertexStyle","createDefaultVertexStyle","putDefaultEdgeStyle","createDefaultEdgeStyle","mxCellState","absoluteOffset","mxGraphSelectionModel","mxSelectionChange","selectionModel","added","removed","mxCellEditor","zoomHandler","isEditing","editingCell","stopEditing","mxCellRenderer","autoOrigin","printOverlays","printControls","printBackgroundImage","targetWindow","clipping","getWindow","getDoctype","appendGraph","forcePageBreaks","keepOpen","previousInitializeOverlay","initializeOverlay","overlay","getDrawPane","initControl","control","handleEvents","clickHandler","isNewWindow","writeHead","currentScale","availableHeight","hpages","vpages","writePageSelector","createPageSelector","addPage","pageBreakAfter","addPageBreak","cov","getCoverPages","apx","getAppendices","pageNum","renderPage","addGraphFragment","insertBackgroundImage","closeDocument","writePostfix","js","pageNumber","pageBreakInside","innerDiv","viewport","useCssTransforms","previousContainer","getCanvas","backgroundPane","getBackgroundPane","realScale","graphEnabled","tempClip","rendering","orig","svgs","getLinkForCell","putCellStyle","getDefaultVertexStyle","getDefaultEdgeStyle","defaultStyle","tmpStyle","invalidStyle","invalid","visibleSourceState","visibleTargetState","terminalDistance","segments","unscaledWidth","unscaledHeight","getPerimeterBounds","setAbsoluteTerminalPoint","getVisibleTerminalState","setVisibleTerminalState","terminalState","getCellBounds","cellBounds","getPaintBounds","paintBounds","updateCachedBounds","setState","doneResource","updatingSelectionResource","singleSelection","isSingleSelection","setSingleSelection","changeSelection","setCell","getFirstSelectableCell","isCellSelectable","addCells","removeCell","trigger","modified","autoSize","selectText","emptyLabelText","escapeCancelsEditing","textNode","minResize","wordWrapPadding","blurEnabled","initialValue","contentEditable","isLegacyEditor","installListeners","applyValue","labelChanged","setAlign","getInitialValue","getEditingValue","getCurrentValue","isCancelEditingKeyEvent","focusLost","isStopEditingEvent","keyCode","keypressHandler","clearOnChange","getEmptyLabelText","keyupHandler","resizeThread","clearTimeout","isEnterStopsCellEditing","isEventSource","lw","bds","hpos","vpos","legacySpacing","isWrapping","getEditorBounds","isInvokesStopCellEditing","getBackgroundColor","absoluteRoot","startEditing","tooltipHandler","hideTooltip","bold","italic","isHideLabel","isSelectText","execCommand","cancel","initial","blur","prepareTextarea","getEditingCell","defaultShapes","defaultEdgeShape","defaultVertexShape","defaultTextShape","legacyControlPosition","forceControlClickHandler","registerShape","initializeShape","configureShape","createShape","getShapeConstructor","createIndicatorShape","getShape","getIndicatorShape","getIndicatorColor","getIndicatorGradientColor","getIndicatorImage","postConfigureShape","resolveColor","checkPlaceholderStyles","field","referenced","getSwimlane","swimlaneIndicatorColorAttribute","rstate","rshape","getLabelValue","getLabel","createLabel","isForceHtml","isHtmlLabel","getVerticalAlign","isLabelClipped","initializeLabel","forceGetCell","isLabelEvent","nativeDblClickEnabled","createCellOverlays","getCellOverlays","installCellOverlayListeners","createControl","getFoldingImage","foldingEnabled","createControlClickHandler","collapse","foldCells","innerNode","first","isShapeEvent","redrawLabel","wrapping","isTextShapeInvalid","nextScale","getTextScale","isClipping","vis","redrawLabelShape","check","property","rotateLabelBounds","redrawCellOverlays","getBounds","redrawControl","getControlBounds","insertStateAfter","htmlNode","shapes","getShapesForState","shapeChanged","selectionCellsHandler","updateHandler","isShapeInvalid","doRedrawShape","mxEdgeStyle","EntityRelation","segment","isSourceLeft","sourceGeometry","isTargetLeft","targetGeometry","getRoutingCenterY","xe","ye","dep","midY","Loop","transformControlPoint","getRoutingCenterX","ElbowConnector","SideToSide","TopToBottom","SegmentConnector","sourceScaled","targetScaled","controlHints","scalePointArray","scaleCellState","lastPushed","hint","pushPoint","lastInx","hints","currentTerm","currentPt","hozChan","vertChan","currentHint","fixedVertAlign","fixedHozAlign","inHozChan","inVertChan","orthBuffer","orthPointsFallback","dirVectors","wayPoints1","routePatterns","inlineRoutePatterns","vertexSeperations","limits","LEFT_MASK","TOP_MASK","RIGHT_MASK","BOTTOM_MASK","LEFT","TOP","RIGHT","BOTTOM","SIDE_MASK","CENTER_MASK","SOURCE_MASK","TARGET_MASK","VERTEX_MASK","getJettySize","OrthConnector","sourceEdge","targetEdge","sourceX","sourceY","sourceWidth","sourceHeight","targetX","targetY","targetWidth","targetHeight","sourceBuffer","targetBuffer","totalBuffer","tooShort","portConstraint","newRect","sourceCenX","sourceCenY","targetCenX","targetCenY","sourceTopDist","sourceLeftDist","sourceBottomDist","sourceRightDist","dirPref","horPref","vertPref","preferredHorizDist","preferredVertDist","prefOrdering","preferredOrderSet","sourceIndex","targetIndex","routePattern","currentIndex","lastOrientation","initialOrientation","currentOrientation","nextDirection","directionIndex","tar","sou","side","souTar","targetOrientation","sameOrient","getRoutePattern","mxStyleRegistry","putValue","mxGraphView","mxCurrentRootChange","isUp","mxGraph","renderHint","stylesheet","mouseListeners","multiplicities","imageBundles","createCellRenderer","setSelectionModel","createSelectionModel","setStylesheet","createStylesheet","createGraphView","graphModelChangeListener","createHandlers","revalidate","mxCellOverlay","tooltip","mxOutline","mxMultiplicity","validNeighbors","countError","typeError","validNeighborsAllowed","mxLayoutManager","undoHandler","beforeUndo","moveHandler","cellsMoved","cellsResized","mxSwimlaneManager","addEnabled","resizeEnabled","addHandler","isAddEnabled","cellsAdded","isResizeEnabled","isCellVisibleFn","oldValidateCellState","validateCellState","oldBounds","oldStates","getStates","oldScale","oldDoRedrawShape","oldPaint","resurse","setScale","resetValidationState","validateCell","setGraphBounds","deltas","mxGraphHandler","panHandler","suspended","updatePreview","updateHint","escapeHandler","refreshHandler","refreshThread","currentDx","currentDy","pBounds","getPreviewBounds","livePreviewUsed","setHandlesVisibleForCells","getHandledSelectionCells","keyHandler","isCloneEvent","isCellsCloneable","isCloneEnabled","cloning","checkPreview","mxPanningHandler","forcePanningHandler","isForcePanningEvent","gestureHandler","eo","isPinchEnabled","initialScale","mouseDownEvent","zoomGraph","mxPopupMenuHandler","inTolerance","mxCellMarker","validColor","invalidColor","mxSelectionCellsHandler","handlers","refresh","getSelectionModel","mxConnectionHandler","mxConstraintHandler","resetHandler","currentFocus","mxRubberband","forceRubberbandHandler","isForceRubberbandEvent","repaint","mxHandle","mxVertexHandler","livePreview","invalidate","validate","mxEdgeHandler","dirty","isRendering","mxElbowEdgeHandler","mxEdgeSegmentHandler","mxKeyHandler","normalKeys","shiftKeys","controlKeys","controlShiftKeys","keydownHandler","keyDown","mxTooltipHandler","mxCellTracker","highlightColor","repaintHandler","mxDefaultKeyHandler","handler","escape","hideProperties","mxDefaultPopupMenu","config","mxDefaultToolbar","mxEditor","actions","addActions","cycleAttributeValues","popupHandler","undoManager","createGraph","toolbar","createToolbar","configure","cycleAttributeName","EMPTY_POINT","updatingDocumentResource","captureDocumentGesture","optimizeVmlReflows","updateStyle","lastNode","lastHtmlNode","lastForegroundNode","lastForegroundHtmlNode","setCurrentRoot","sizeDidChange","scaleAndTranslate","previousScale","previousTranslate","viewStateChanged","removeState","includeEdges","invalidating","prevDisplay","placeholder","getEmptyBounds","validateBackground","createBackgroundPageShape","validateBackgroundImage","validateBackgroundPage","getBackgroundImage","redrawBackgroundImage","pageVisible","getBackgroundPageBounds","backgroundPageShape","isHideOnHover","updateCellState","stateValidated","pState","getChildOffsetForCell","updateVertexState","updateEdgeState","updateVertexLabelOffset","updateFixedTerminalPoints","updatePoints","updateFloatingTerminalPoints","updateEdgeBounds","updateEdgeLabelOffset","fg","keepEdgesInForeground","keepEdgesInBackground","updateFixedTerminalPoint","getConnectionConstraint","getFixedTerminalPoint","getConnectionPoint","updateBoundsFromStencil","asp","getEdgeStyle","getTerminalPort","srcBounds","trgBounds","ignoreScale","isLoopStyleEnabled","tc","defaultLoopStyle","isAllowEval","updateFloatingTerminalPoint","getFloatingTerminalPoint","getNextPoint","orth","isOrthogonal","getPerimeterFunction","opposite","markerSize","gx","gy","getRelativePoint","totalLength","minDist","xSegment","ySegment","projlen","yDistance","setRendering","setAllowEval","getCellStates","getDecoratorPane","decoratorPane","isContainerEvent","isScrollEvent","outWidth","inWidth","outHeight","inHeight","fireGestureEvent","popupMenuHandler","endHandler","createHtmlPane","updateContainerStyle","onResize","updateHtmlCanvasSize","pane","createVmlPane","getTranslateForRoot","cellEditor","portsEnabled","doubleTapEnabled","doubleTapTimeout","doubleTapTolerance","lastTouchY","lastTouchTime","tapAndHoldEnabled","tapAndHoldDelay","tapAndHoldInProgress","tapAndHoldValid","initialTouchX","initialTouchY","defaultOverlap","defaultParent","alternateEdgeStyle","pageBreaksVisible","pageBreakColor","pageBreakDashed","minPageBreakDist","preferPageSize","escapeEnabled","invokesStopCellEditing","enterStopsCellEditing","useScrollbarsForPanning","exportEnabled","importEnabled","cellsLocked","cellsCloneable","cellsEditable","cellsDeletable","cellsMovable","edgeLabelsMovable","vertexLabelsMovable","dropEnabled","splitEnabled","cellsResizable","cellsBendable","cellsSelectable","cellsDisconnectable","autoSizeCells","autoSizeCellsOnAdd","ignoreScrollbars","translateToScrollPosition","timerAutoScroll","allowAutoPanning","maximumGraphBounds","minimumGraphSize","minimumContainerSize","maximumContainerSize","resizeContainer","allowNegativeCoordinates","constrainChildren","constrainRelativeChildren","extendParents","extendParentsOnAdd","extendParentsOnMove","recursiveResize","collapseToPreferredSize","zoomFactor","keepSelectionVisibleOnZoom","centerZoom","resetViewOnRootChange","resetEdgesOnResize","resetEdgesOnMove","resetEdgesOnConnect","allowLoops","multigraph","connectableEdges","allowDanglingEdges","cloneInvalidEdges","disconnectOnMove","labelsVisible","htmlLabels","swimlaneSelectionEnabled","swimlaneNesting","minFitScale","maxFitScale","collapsedImage","expandedImage","warningImage","alreadyConnectedResource","containsValidationErrorsResource","collapseExpandResource","createCellEditor","relatedTarget","createTooltipHandler","createSelectionCellsHandler","connectionHandler","createConnectionHandler","createGraphHandler","panningHandler","createPanningHandler","panningEnabled","createPopupMenuHandler","getStylesheet","getSelectionCellsForChanges","ignoreFn","processChange","updateSelection","removeSelectionCells","setDefaultParent","removeStateForCell","newParent","home","addCellOverlay","removeCellOverlay","removeCellOverlays","clearCellOverlays","setCellWarning","warning","isSelect","setSelectionCell","startEditingAtCell","getSelectionCell","isCellEditable","convertValueToString","cellLabelChanged","isAutoSizeCell","cellSizeUpdated","click","mxe","isTransparentClickEvent","selected","isCellSelected","isSwimlaneSelectionEnabled","getSwimlaneAt","isToggleEvent","reverse","selectCellForEvent","isSiblingSelected","tapAndHold","panningTrigger","marker","currentColor","markedState","mark","createEdgeState","panningManager","createPanningManager","getBorderSizes","borderLeftStyle","borderLeftWidth","paddingTop","borderTopStyle","borderTopWidth","borderRightStyle","borderRightWidth","paddingBottom","borderBottomStyle","borderBottomWidth","getPreferredPageSize","page","hCount","vCount","keepOrigin","ignoreWidth","ignoreHeight","getBorder","cssBorder","w1","h1","w2","h2","s2","doResizeContainer","updatePageBreaks","gb","horizontalCount","verticalCount","horizontalPageBreaks","verticalPageBreaks","drawPageBreaks","breaks","pageBreak","ignoreState","postProcessCellStyle","getImageFromBundles","encodeURIComponent","comma","setCellStyle","toggleCellStyle","toggleCellStyles","toggleCellStyleFlags","alignCells","param","flipEdge","addImageBundle","bundle","removeImageBundle","orderCells","back","cellsOrdered","groupCells","getCellsForGroup","createGroupCell","getBoundsForGroup","ungroupCells","getCellsForUngroup","removeCellsAfterUngroup","cellsRemoved","addAllEdges","removeCellsFromParent","moveGroup","getActualStartSize","allowInvalidEdges","keepPosition","trans","getEdgeValidationError","createVertex","createEdge","addEdge","absolute","constrain","parentState","zero","oldState","isAllowNegativeCoordinates","autoSizeCell","isExtendParentsOnAdd","isExtendParent","extendParent","constrainChild","cellConnected","updateCellSize","getDeletableCells","getAllEdges","disconnectTerminal","connected","tstate","splitEdge","newEdge","toggleCells","cellsToggled","checkFoldable","getFoldableCells","cellsFolded","isCellFoldable","swapBounds","willCollapse","updateAlternateBounds","getPreferredSizeForCell","allCells","ignoreChildren","cellStyle","gs2","resizeCells","isRecursiveResize","cellResized","ignoreRelative","resizeChildCells","constrainChildCells","scaleCell","isCellResizable","origCells","isCloneInvalidEdges","setAllowNegativeCoordinates","isDisconnectOnMove","isAllowDanglingEdges","isExtendParentsOnMove","disconnect","disconnectGraph","translateCell","getCellContainmentArea","getMaximumGraphBounds","sizeFirst","isConstrainRelativeChildren","isConstrainChild","overlap","getOverlap","getOutlineConstraint","getAllConnectionConstraints","setConnectionConstraint","connectCell","isPortsEnabled","getTerminalForPort","isCellDisconnectable","getCurrentRoot","enterGroup","isValidRoot","exitGroup","includeDescendants","addPoint","ignoreGrid","ignoreHorizontal","ignoreVertical","shiftPreview1","shiftPreview2","zoomIn","zoomOut","zoomActual","zoomTo","cw","ch","sh","scrollRectToVisible","zoomToRect","scaleX","scaleY","aspectFactor","rectRight","rectBottom","newHeight","deltaHeightBuffer","upperBuffer","newWidth","deltaWidthBuffer","newScale","scrollCellToVisible","tr2","isChanged","widthLimit","heightLimit","ddx","ddy","isCellConnectable","isLoop","isConstrainedEvent","isIgnoreTerminalEvent","validationAlert","isEdgeValid","isValidConnection","sourceOut","targetIn","validateEdge","validateGraph","context","isValid","getCellValidationError","outCount","inCount","rule","setBackgroundImage","isHtmlLabels","setHtmlLabels","getTooltip","tip","getHandler","getTooltipForNode","getTooltipForCell","getCursorForMouseEvent","getCursorForCell","swimlane","getSwimlaneDirection","isTransparentState","setBorder","isResizeContainer","setResizeContainer","isEscapeEnabled","setEscapeEnabled","setInvokesStopCellEditing","setEnterStopsCellEditing","isCellLocked","isCellsLocked","setCellsLocked","getCloneableCells","isCellCloneable","setCellsCloneable","canExportCell","canImportCell","isCellsSelectable","setCellsSelectable","isCellDeletable","isCellsDeletable","setCellsDeletable","isLabelMovable","isCellRotatable","getMovableCells","isCellsMovable","setCellsMovable","setPortsEnabled","getGridSize","setGridSize","getTolerance","setTolerance","isVertexLabelsMovable","setVertexLabelsMovable","isEdgeLabelsMovable","setEdgeLabelsMovable","isSwimlaneNesting","setSwimlaneNesting","setSwimlaneSelectionEnabled","isMultigraph","setMultigraph","isAllowLoops","setAllowDanglingEdges","setConnectableEdges","isConnectableEdges","setCloneInvalidEdges","setAllowLoops","setDisconnectOnMove","setDropEnabled","isSplitEnabled","setSplitEnabled","isCellsResizable","setCellsResizable","isTerminalPointMovable","isCellBendable","isCellsBendable","setCellsBendable","isCellsEditable","setCellsEditable","isCellsDisconnectable","setCellsDisconnectable","isValidSource","isValidTarget","setTooltips","setPanning","isAutoSizeCells","setAutoSizeCells","isExtendParents","setExtendParents","setExtendParentsOnAdd","setExtendParentsOnMove","setRecursiveResize","isConstrainChildren","setConstrainChildren","setConstrainRelativeChildren","isAllowOverlapParent","isValidDropTarget","isSplitTarget","hitsSwimlaneContent","getPointForEvent","addOffset","hit","getCellsBeyond","rightHalfpane","bottomHalfpane","isolate","isSelectionEmpty","getSelectionCount","addSelectionCell","addSelectionCells","removeSelectionCell","selectRegion","selectCellsForEvent","selectNextCell","selectCell","selectPreviousCell","selectParentCell","selectChildCell","isNext","isParent","isChild","sel","selectAll","descendants","selectVertices","selectGroups","selectCells","selectEdges","createHandler","createEdgeHandler","createVertexHandler","createElbowEdgeHandler","createEdgeSegmentHandler","listener","updateMouseEvent","getStateForTouchEvent","isEventIgnored","mouseEvent","lastEvent","mouseMoveRedirect","mouseUpRedirect","isSyntheticEventIgnored","detail","lastMouseX","lastMouseY","ignoreMouseEvents","isEventSourceIgnored","candidate","getEventState","currentTime","fireDoubleClick","lastTouchEvent","lastTouchX","doubleClickCounter","doubleClickFired","lastTouchCell","valid","tapAndHoldThread","consumeMouseEvent","destroyed","graphRenderHint","showViewport","sizerSize","updateOnPan","sizerImage","forceVmlHandles","outlineGraphModelChanged","selectionBorder","redirect","redirect2","sizer","createSizer","setZoomEnabled","getSourceContainerSize","getOutlineOffset","getSourceGraphBounds","sourceScale","scaledGraphBounds","unscaledGraphBounds","unscaledFinderBounds","union","completeWidth","completeHeight","outlineScale","navView","scale2","scale3","allowHandleBoundsCheck","getTranslateForEvent","viewRatio","checkTerminal","checkNeighbors","sourceValue","targetValue","checkType","attrValue","bubbling","isBubbling","setBubbling","hasLayout","getLayout","executeLayoutForCells","getCellsForChanges","getCellsForChange","addCellsWithLayout","addDescendantsWithLayout","addAncestorsWithLayout","sorted","layoutCells","bubble","executeLayout","setHorizontal","setAddEnabled","setResizeEnabled","isSwimlaneIgnored","isCellHorizontal","swimlaneAdded","parentHorizontal","resizeSwimlane","addEdges","translateState","revalidateState","maxCells","highlightEnabled","cloneEnabled","moveEnabled","handlesVisible","updateCursor","selectEnabled","removeEmptyParents","connectOnDrop","scrollOnMove","previewColor","htmlPreview","scaleGrid","rotationEnabled","maxLivePreview","allowLivePreview","setCloneEnabled","isMoveEnabled","setMoveEnabled","isSelectEnabled","setSelectEnabled","isRemoveCellsFromParent","setRemoveCellsFromParent","isPropagateSelectionCell","immediate","getInitialCellForEvent","isDelayedSelection","isHandled","selectDelayed","delayedSelection","cellWasClicked","initialCell","createPreviewShape","cellCount","addStates","ignore","opps","isCellMoving","useGuidesForEvent","vector","removeHint","roundLength","livePreviewActive","resetLivePreview","setHighlightColor","remote","updateLivePreview","updatePreviewShape","realState","tempState","originalPointerEvents","pt0","ptn","redrawHandles","resetPreviewStates","suspend","resume","setHandlesVisible","destroyShapes","guides","shouldRemoveCellsFromParent","shouldRemoveParent","useLeftButtonForPanning","usePopupTrigger","ignoreCell","previewEnabled","useGrid","pinchEnabled","maxScale","isPanningEnabled","setPanningEnabled","setPinchEnabled","isPanningTrigger","consumePanningTrigger","selectOnPopup","clearSelectionOnBackground","triggerX","triggerY","screenX","screenY","isSelectOnPopup","popupTrigger","getCellForPopupEvent","hotspotEnabled","validState","setHotspot","getHotspot","setHotspotEnabled","isHotspotEnabled","hasValidState","getValidState","getMarkedState","unmark","process","setCurrentState","isValidState","getMarkerColor","markCell","getStateToMark","maxHandlers","oldHandlers","isHandlerActive","updateParentHighlight","moveIconFront","moveIconBack","connectImage","targetConnectImage","createTarget","constraintHandler","waypointsEnabled","ignoreMouseDown","connectIconOffset","drillHandler","mouseDownCounter","movePreviewAway","outlineConnect","insertBeforeSource","isInsertBefore","isCreateTarget","setCreateTarget","iconState","redrawIcons","icons","isConnectableCell","isConnecting","validateConnection","getConnectImage","isMoveIconToFrontForState","createIcons","currentState","getIconPosition","destroyIcons","selectedIcon","isStartEvent","currentConstraint","sourceConstraint","waypoints","isImmediateConnectSource","isOutlineConnectEvent","clientLeft","clientTop","gridX","gridY","isHighlightAt","updateCurrentState","isCellEnabled","setFocus","convertWaypoint","snapToPreview","pt2","getTargetPerimeterPoint","getSourcePerimeterPoint","originalPoint","drawPreview","hitsIcon","updateIcons","realPoints","targetPerimeter","sourcePerimeter","isStopEvent","addWaypointForEvent","checkConstraints","getEdgeColor","terminalInserted","createTargetVertex","getAlignmentTolerance","pointImage","focusIcons","focusHighlight","currentFocusArea","focusPoints","getImageForConstraint","destroyFocusHighlight","isKeepFocusEvent","getCellForEvent","existingEdge","mouseleaveHandler","grid","mouse","minDistSq","hl","createHighlightShape","cp","defaultOpacity","sharedDiv","currentY","createMouseEvent","getPosition","setPosition","copyStyle","processEvent","getTotalRotation","flipPoint","snapPoint","isHtmlRequired","initShape","singleSizer","handleImage","parentHighlightEnabled","rotationRaster","rotationCursor","movePreviewToFront","manageSizers","constrainGroupByChildren","rotationHandleVSpacing","horizontalOffset","verticalOffset","selectionBounds","getSelectionBounds","createSelectionShape","sizers","labelShape","isRotationHandleVisible","rotationShape","customHandles","createCustomHandles","updateMinBounds","isCenteredEvent","minBounds","createParentHighlightShape","getSelectionColor","getSelectionStrokeWidth","isSelectionDashed","createSizerShape","isSizerVisible","moveSizerTo","getHandleForEvent","checkShape","real","isCustomHandleEvent","handle","isLivePreviewBorder","childOffsetX","childOffsetY","isGhostPreview","ghostPreview","createGhostPreview","preview","getRotationHandlePosition","startAngle","atan","startDist","hideSizers","edgeHandlers","checkTolerance","roundAngle","moveToFront","moveLabel","rotateVertex","resizeVertex","currentAlpha","raster","unscaledBounds","dx3","dy3","dx4","dy4","dx5","dy5","rotateCell","rotateClick","constrained","moveChildren","centered","cdx","cdy","ignoreHandles","getHandlePadding","getSizerBounds","isCustomHandleVisible","crs","da","isParentHighlightVisible","isDestroyed","parentHighlight","getSelectionBorderBounds","bends","removeEnabled","dblClickRemoveEnabled","mergeRemoveEnabled","straightRemoveEnabled","virtualBendsEnabled","virtualBendOpacity","preferHtml","snapToTerminals","manageLabelHandle","abspoints","getSelectionPoints","targetState","createBends","isVirtualBendsEnabled","virtualBends","createVirtualBends","createLabelHandleShape","initBend","isAddPointEvent","isRemovePointEvent","otherCell","isHandleVisible","bend","createHandleShape","removePoint","isHandleEnabled","labelHandleImage","isAddVirtualBendEvent","isTarget","isLabel","clonePreviewState","getSnapToTerminalTolerance","isSnapToTerminalsEvent","snapToPoint","snapToTerminal","getPreviewTerminalState","getPreviewPoints","checkRemove","updatePreviewState","targetConstraint","setPreviewColor","changeTerminalPoint","changePoints","isClone","addPointAt","getHandleFillColor","checkLabelHandle","xn","yn","bn","redrawInnerBends","destroyBends","flipEnabled","doubleClickOrientationResource","createVirtualBend","dblClickHandler","getCursorForBend","getCurrentPoints","pt1","rpts","straight","bindKey","code","bindShiftKey","bindControlKey","bindControlShiftKey","getFunction","isGraphEvent","ignoreTouchEvents","hideOnHover","setHideOnHover","getStateForEvent","stateSource","resetTimer","restart","keepOnTop","drawHighlight","getStrokeWidth","bindAction","createMenu","conditions","createConditions","addItems","condition","as","enabledCond","addAction","isCell","condNodes","insertFunction","pressed","addActionOption","mode","setMode","addPrototype","ptype","factory","installDropHandler","addVertex","horizontalFlow","edgeGeometry","sprite","loader","askZoomResource","lastSavedResource","currentFileResource","propertiesResource","tasksResource","helpResource","outlineResource","dblClickAction","swimlaneRequired","forcedInserting","templates","defaultEdge","defaultEdgeStyle","defaultGroup","groupBorderSize","filename","postParameterName","escapePostData","urlPost","urlImage","layoutDiagram","swimlaneSpacing","maintainSwimlanes","layoutSwimlanes","cycleAttributeIndex","tasks","tasksWindowImage","tasksTop","help","helpWindowImage","urlHelp","helpWidth","helpHeight","propertiesWidth","propertiesHeight","movePropertiesDialog","validating","isModified","setModified","getUrlImage","showProperties","showTasks","showHelp","showOutline","dec","decode","resetHistory","resetFirstTime","cookie","actionname","addTemplate","template","getTemplate","installDblClickHandler","installUndoHandler","installDrillHandler","installChangeHandler","installInsertHandler","createPopupMenu","createSwimlaneManager","createLayoutManager","swimlaneMgr","layoutMgr","swimlaneLayout","createSwimlaneLayout","diagramLayout","createDiagramLayout","setGraphContainer","rubberband","insertHandler","gs","setToolbarContainer","setStatusContainer","tstamp","toLocaleString","setStatus","setTitleContainer","getTitle","treeLayout","getRootTitle","createGroup","readGraphModel","getUrlPost","data","writeGraphModel","postDiagram","swapStyles","second","createProperties","isPropertiesVisible","yField","xField","widthField","heightField","texts","okFunction","cancelFunction","createTasks","refreshTasks","frame","modename","consumeCycleAttribute","cycleAttribute","isConstrainedMoving","mxCodecRegistry","codecs","aliases","register","codec","classname","addAlias","codecname","getCodec","mxObjectCodec","objects","idrefs","elements","encodeDefaults","putObject","getObject","updateElements","addElement","reference","into","encodeCell","isCellCodec","decodeCell","restoreStructures","decoder","insertIntoGraph","cloneTemplate","getFieldName","attributename","mapped","getAttributeName","fieldname","isExcluded","isReference","beforeEncode","encodeObject","afterEncode","encodeValue","writeAttribute","writePrimitiveAttribute","writeComplexAttribute","convertAttributeToXml","isBooleanAttribute","convertAttributeFromXml","isNumericAttribute","beforeDecode","decodeNode","afterDecode","decodeAttributes","decodeChildren","decodeAttribute","isIgnoredAttribute","processInclude","decodeChild","getFieldTemplate","addObjectValue","isWrite","ref","object","mxCellCodec","rootNode","decodeRoot","rootCell","mxModelCodec","mxRootChangeCodec","childRef","mxChildChangeCodec","mxTerminalChangeCodec","mxGenericChangeCodec","variable","mxGraphCodec","mxGraphViewCodec","mxStylesheetCodec","styleNode","getStringValue","mxDefaultKeyHandlerCodec","mxDefaultToolbarCodec","act","inc","mxDefaultPopupMenuCodec","role","decodeTemplates","decodeUi","setMapContainer","mxEditorCodec","redefine","REPLACE_SUPPORTS_NAMED_GROUPS","groups","REPLACE_KEEPS_$0","REPLACE","REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE","SPLIT_WORKS_WITH_OVERWRITTEN_EXEC","originalExec","KEY","sham","SYMBOL","DELEGATES_TO_SYMBOL","DELEGATES_TO_EXEC","execCalled","nativeRegExpMethod","methods","nativeMethod","arg2","forceStringMethod","stringMethod","regexMethod","normalizeArray","parts","allowAboveRoot","unshift","matchedSlash","xs","resolvedPath","resolvedAbsolute","normalize","isAbsolute","trailingSlash","substr","paths","fromParts","toParts","samePartsLength","outputParts","delimiter","dirname","hasRoot","ext","extname","startDot","startPart","preDotState","mx","require","mxgraph","MxCell","MxConstants","MxEvent","MxGraph","MxRubberBand","MxUtils","MxCodec","MxGeometry","MxEditor","MxGraphHandler","MxRectangleShape","MxCellTracker","MxClient","MxPerimeter","MxEventObject","activeXObject"],"mappings":"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","file":"js/my-customToolbar-chunk~renderModel-chunk.2bff1a21.js","sourcesContent":["var $ = require('../internals/export');\nvar $values = require('../internals/object-to-array').values;\n\n// `Object.values` method\n// https://tc39.es/ecma262/#sec-object.values\n$({ target: 'Object', stat: true }, {\n  values: function values(O) {\n    return $values(O);\n  }\n});\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar isRegExp = require('../internals/is-regexp');\nvar anObject = require('../internals/an-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar toLength = require('../internals/to-length');\nvar callRegExpExec = require('../internals/regexp-exec-abstract');\nvar regexpExec = require('../internals/regexp-exec');\nvar fails = require('../internals/fails');\n\nvar arrayPush = [].push;\nvar min = Math.min;\nvar MAX_UINT32 = 0xFFFFFFFF;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    // eslint-disable-next-line regexp/no-empty-group -- required for testing\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    // eslint-disable-next-line regexp/no-assertion-capturing-group, regexp/no-empty-group -- required for testing\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) {\n        return nativeSplit.call(string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output.length > lim ? output.slice(0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.es/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n}, !SUPPORTS_Y);\n","var classof = require('./classof-raw');\nvar regexpExec = require('./regexp-exec');\n\n// `RegExpExec` abstract operation\n// https://tc39.es/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n\n  if (classof(R) !== 'RegExp') {\n    throw TypeError('RegExp#exec called on incompatible receiver');\n  }\n\n  return regexpExec.call(R, S);\n};\n\n","var global = require('../internals/global');\nvar DOMIterables = require('../internals/dom-iterables');\nvar forEach = require('../internals/array-for-each');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  // some Chrome versions have non-configurable methods on DOMTokenList\n  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {\n    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);\n  } catch (error) {\n    CollectionPrototype.forEach = forEach;\n  }\n}\n","'use strict';\nvar $forEach = require('../internals/array-iteration').forEach;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar STRICT_METHOD = arrayMethodIsStrict('forEach');\n\n// `Array.prototype.forEach` method implementation\n// https://tc39.es/ecma262/#sec-array.prototype.foreach\nmodule.exports = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */) {\n  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n} : [].forEach;\n","'use strict';\nvar $ = require('../internals/export');\nvar notARegExp = require('../internals/not-a-regexp');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');\n\n// `String.prototype.includes` method\n// https://tc39.es/ecma262/#sec-string.prototype.includes\n$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~String(requireObjectCoercible(this))\n      .indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","exports.nextTick = function nextTick(fn) {\n    var args = Array.prototype.slice.call(arguments);\n    args.shift();\n    setTimeout(function () {\n        fn.apply(null, args);\n    }, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = require('path');\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n","var isObject = require('../internals/is-object');\nvar classof = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.es/ecma262/#sec-isregexp\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');\n};\n","var isRegExp = require('../internals/is-regexp');\n\nmodule.exports = function (it) {\n  if (isRegExp(it)) {\n    throw TypeError(\"The method doesn't accept regular expressions\");\n  } return it;\n};\n","var isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray, length) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n};\n","var DESCRIPTORS = require('../internals/descriptors');\nvar objectKeys = require('../internals/object-keys');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar propertyIsEnumerable = require('../internals/object-property-is-enumerable').f;\n\n// `Object.{ entries, values }` methods implementation\nvar createMethod = function (TO_ENTRIES) {\n  return function (it) {\n    var O = toIndexedObject(it);\n    var keys = objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {\n        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\nmodule.exports = {\n  // `Object.entries` method\n  // https://tc39.es/ecma262/#sec-object.entries\n  entries: createMethod(true),\n  // `Object.values` method\n  // https://tc39.es/ecma262/#sec-object.values\n  values: createMethod(false)\n};\n","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\n\n// `AdvanceStringIndex` abstract operation\n// https://tc39.es/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? charAt(S, index).length : 1);\n};\n","'use strict';\nvar regexpFlags = require('./regexp-flags');\nvar stickyHelpers = require('./regexp-sticky-helpers');\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/;\n  var re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n})();\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\n// eslint-disable-next-line regexp/no-assertion-capturing-group, regexp/no-empty-group -- required for testing\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n    var sticky = UNSUPPORTED_Y && re.sticky;\n    var flags = regexpFlags.call(re);\n    var source = re.source;\n    var charsAdded = 0;\n    var strCopy = str;\n\n    if (sticky) {\n      flags = flags.replace('y', '');\n      if (flags.indexOf('g') === -1) {\n        flags += 'g';\n      }\n\n      strCopy = String(str).slice(re.lastIndex);\n      // Support anchored sticky behavior.\n      if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\\n')) {\n        source = '(?: ' + source + ')';\n        strCopy = ' ' + strCopy;\n        charsAdded++;\n      }\n      // ^(? + rx + ) is needed, in combination with some str slicing, to\n      // simulate the 'y' flag.\n      reCopy = new RegExp('^(?:' + source + ')', flags);\n    }\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + source + '$(?!\\\\s)', flags);\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n\n    match = nativeExec.call(sticky ? reCopy : re, strCopy);\n\n    if (sticky) {\n      if (match) {\n        match.input = match.input.slice(charsAdded);\n        match[0] = match[0].slice(charsAdded);\n        match.index = re.lastIndex;\n        re.lastIndex += match[0].length;\n      } else re.lastIndex = 0;\n    } else if (UPDATES_LAST_INDEX_WRONG && match) {\n      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n","'use strict';\n\nvar fails = require('./fails');\n\n// babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,\n// so we use an intermediate function.\nfunction RE(s, f) {\n  return RegExp(s, f);\n}\n\nexports.UNSUPPORTED_Y = fails(function () {\n  // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError\n  var re = RE('a', 'y');\n  re.lastIndex = 2;\n  return re.exec('abcd') != null;\n});\n\nexports.BROKEN_CARET = fails(function () {\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687\n  var re = RE('^r', 'gy');\n  re.lastIndex = 2;\n  return re.exec('str') != null;\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar IndexedObject = require('../internals/indexed-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\n\nvar nativeJoin = [].join;\n\nvar ES3_STRINGS = IndexedObject != Object;\nvar STRICT_METHOD = arrayMethodIsStrict('join', ',');\n\n// `Array.prototype.join` method\n// https://tc39.es/ecma262/#sec-array.prototype.join\n$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {\n  join: function join(separator) {\n    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);\n  }\n});\n","'use strict';\nvar fails = require('../internals/fails');\n\nmodule.exports = function (METHOD_NAME, argument) {\n  var method = [][METHOD_NAME];\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing\n    method.call(null, argument || function () { throw 1; }, 1);\n  });\n};\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\nmodule.exports = function (METHOD_NAME) {\n  var regexp = /./;\n  try {\n    '/./'[METHOD_NAME](regexp);\n  } catch (error1) {\n    try {\n      regexp[MATCH] = false;\n      return '/./'[METHOD_NAME](regexp);\n    } catch (error2) { /* empty */ }\n  } return false;\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar exec = require('../internals/regexp-exec');\n\n// `RegExp.prototype.exec` method\n// https://tc39.es/ecma262/#sec-regexp.prototype.exec\n$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {\n  exec: exec\n});\n","'use strict';\nvar anObject = require('../internals/an-object');\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var bind = require('../internals/function-bind-context');\nvar IndexedObject = require('../internals/indexed-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\nvar push = [].push;\n\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation\nvar createMethod = function (TYPE) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var IS_FILTER_OUT = TYPE == 7;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  return function ($this, callbackfn, that, specificCreate) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var create = specificCreate || arraySpeciesCreate;\n    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;\n    var value, result;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (TYPE) {\n        if (IS_MAP) target[index] = result; // map\n        else if (result) switch (TYPE) {\n          case 3: return true;              // some\n          case 5: return value;             // find\n          case 6: return index;             // findIndex\n          case 2: push.call(target, value); // filter\n        } else switch (TYPE) {\n          case 4: return false;             // every\n          case 7: push.call(target, value); // filterOut\n        }\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.forEach` method\n  // https://tc39.es/ecma262/#sec-array.prototype.foreach\n  forEach: createMethod(0),\n  // `Array.prototype.map` method\n  // https://tc39.es/ecma262/#sec-array.prototype.map\n  map: createMethod(1),\n  // `Array.prototype.filter` method\n  // https://tc39.es/ecma262/#sec-array.prototype.filter\n  filter: createMethod(2),\n  // `Array.prototype.some` method\n  // https://tc39.es/ecma262/#sec-array.prototype.some\n  some: createMethod(3),\n  // `Array.prototype.every` method\n  // https://tc39.es/ecma262/#sec-array.prototype.every\n  every: createMethod(4),\n  // `Array.prototype.find` method\n  // https://tc39.es/ecma262/#sec-array.prototype.find\n  find: createMethod(5),\n  // `Array.prototype.findIndex` method\n  // https://tc39.es/ecma262/#sec-array.prototype.findIndex\n  findIndex: createMethod(6),\n  // `Array.prototype.filterOut` method\n  // https://github.com/tc39/proposal-array-filtering\n  filterOut: createMethod(7)\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar $includes = require('../internals/array-includes').includes;\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.includes` method\n// https://tc39.es/ecma262/#sec-array.prototype.includes\n$({ target: 'Array', proto: true }, {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('includes');\n","(function (root, factory) {\nif (typeof define === 'function' && define.amd) {\ndefine([], factory);\n} else if (typeof module === 'object' && module.exports) {\nmodule.exports = factory();\n} else {\nroot.mxgraph = factory();\n}\n}(this, function () {\nreturn function (opts) {\nfor (var name in opts) { this[name] = opts[name]; }\nvar __mxOutput = {};\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\nvar mxClient =\n{\n\t/**\n\t * Class: mxClient\n\t *\n\t * Bootstrapping mechanism for the mxGraph thin client. The production version\n\t * of this file contains all code required to run the mxGraph thin client, as\n\t * well as global constants to identify the browser and operating system in\n\t * use. You may have to load chrome://global/content/contentAreaUtils.js in\n\t * your page to disable certain security restrictions in Mozilla.\n\t * \n\t * Variable: VERSION\n\t *\n\t * Contains the current version of the mxGraph library. The strings that\n\t * communicate versions of mxGraph use the following format.\n\t * \n\t * versionMajor.versionMinor.buildNumber.revisionNumber\n\t * \n\t * Current version is 4.2.2.\n\t */\n\tVERSION: '4.2.2',\n\n\t/**\n\t * Variable: IS_IE\n\t *\n\t * True if the current browser is Internet Explorer 10 or below. Use <mxClient.IS_IE11>\n\t * to detect IE 11.\n\t */\n\tIS_IE: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE') >= 0,\n\n\t/**\n\t * Variable: IS_IE6\n\t *\n\t * True if the current browser is Internet Explorer 6.x.\n\t */\n\tIS_IE6: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE 6') >= 0,\n\n\t/**\n\t * Variable: IS_IE11\n\t *\n\t * True if the current browser is Internet Explorer 11.x.\n\t */\n\tIS_IE11: navigator.userAgent != null && !!navigator.userAgent.match(/Trident\\/7\\./),\n\n\t/**\n\t * Variable: IS_EDGE\n\t *\n\t * True if the current browser is Microsoft Edge.\n\t */\n\tIS_EDGE: navigator.userAgent != null && !!navigator.userAgent.match(/Edge\\//),\n\n\t/**\n\t * Variable: IS_QUIRKS\n\t *\n\t * True if the current browser is Internet Explorer and it is in quirks mode.\n\t */\n\tIS_QUIRKS: navigator.userAgent != null && navigator.userAgent.indexOf('MSIE') >= 0 &&\n\t\t(document.documentMode == null || document.documentMode == 5),\n\n\t/**\n\t * Variable: IS_EM\n\t * \n\t * True if the browser is IE11 in enterprise mode (IE8 standards mode).\n\t */\n\tIS_EM: 'spellcheck' in document.createElement('textarea') && document.documentMode == 8,\n\n\t/**\n\t * Variable: VML_PREFIX\n\t * \n\t * Prefix for VML namespace in node names. Default is 'v'.\n\t */\n\tVML_PREFIX: 'v',\n\n\t/**\n\t * Variable: OFFICE_PREFIX\n\t * \n\t * Prefix for VML office namespace in node names. Default is 'o'.\n\t */\n\tOFFICE_PREFIX: 'o',\n\n\t/**\n\t * Variable: IS_NS\n\t *\n\t * True if the current browser is Netscape (including Firefox).\n\t */\n  \tIS_NS: navigator.userAgent != null &&\n  \t\tnavigator.userAgent.indexOf('Mozilla/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('MSIE') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\n\t/**\n\t * Variable: IS_OP\n\t *\n\t * True if the current browser is Opera.\n\t */\n  \tIS_OP: navigator.userAgent != null &&\n  \t\t(navigator.userAgent.indexOf('Opera/') >= 0 ||\n  \t\tnavigator.userAgent.indexOf('OPR/') >= 0),\n\n\t/**\n\t * Variable: IS_OT\n\t *\n\t * True if -o-transform is available as a CSS style, ie for Opera browsers\n\t * based on a Presto engine with version 2.5 or later.\n\t */\n  \tIS_OT: navigator.userAgent != null &&\n  \t\tnavigator.userAgent.indexOf('Presto/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.4.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.3.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.2.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.0.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/1.') < 0,\n  \t\n\t/**\n\t * Variable: IS_SF\n\t *\n\t * True if the current browser is Safari.\n\t */\n  \tIS_SF: /Apple Computer, Inc/.test(navigator.vendor),\n\n\t/**\n\t * Variable: IS_ANDROID\n\t * \n\t * Returns true if the user agent contains Android.\n\t */\n  \tIS_ANDROID: navigator.appVersion.indexOf('Android') >= 0,\n\n\t/**\n\t * Variable: IS_IOS\n\t * \n\t * Returns true if the user agent is an iPad, iPhone or iPod.\n\t */\n  \tIS_IOS: (/iP(hone|od|ad)/.test(navigator.platform)),\n\n\t/**\n\t * Variable: IS_GC\n\t *\n\t * True if the current browser is Google Chrome.\n\t */\n  \tIS_GC: /Google Inc/.test(navigator.vendor),\n\t\n\t/**\n\t * Variable: IS_CHROMEAPP\n\t *\n\t * True if the this is running inside a Chrome App.\n\t */\n  \tIS_CHROMEAPP: window.chrome != null && chrome.app != null && chrome.app.runtime != null,\n\n\t/**\n\t * Variable: IS_FF\n\t *\n\t * True if the current browser is Firefox.\n\t */\n  \tIS_FF: typeof InstallTrigger !== 'undefined',\n  \t\n\t/**\n\t * Variable: IS_MT\n\t *\n\t * True if -moz-transform is available as a CSS style. This is the case\n\t * for all Firefox-based browsers newer than or equal 3, such as Camino,\n\t * Iceweasel, Seamonkey and Iceape.\n\t */\n  \tIS_MT: (navigator.userAgent.indexOf('Firefox/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Firefox/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Firefox/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceweasel/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('SeaMonkey/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('SeaMonkey/1.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceape/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceape/1.') < 0),\n\n\t/**\n\t * Variable: IS_VML\n\t *\n\t * True if the browser supports VML.\n\t */\n  \tIS_VML: navigator.appName.toUpperCase() == 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: IS_SVG\n\t *\n\t * True if the browser supports SVG.\n\t */\n  \tIS_SVG: navigator.appName.toUpperCase() != 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: NO_FO\n\t *\n\t * True if foreignObject support is not available. This is the case for\n\t * Opera, older SVG-based browsers and all versions of IE.\n\t */\n  \tNO_FO: !document.createElementNS || document.createElementNS('http://www.w3.org/2000/svg',\n  \t\t'foreignObject') != '[object SVGForeignObjectElement]' || navigator.userAgent.indexOf('Opera/') >= 0,\n\n\t/**\n\t * Variable: IS_WIN\n\t *\n\t * True if the client is a Windows.\n\t */\n  \tIS_WIN: navigator.appVersion.indexOf('Win') > 0,\n\n\t/**\n\t * Variable: IS_MAC\n\t *\n\t * True if the client is a Mac.\n\t */\n  \tIS_MAC: navigator.appVersion.indexOf('Mac') > 0,\n\t\n\t/**\n\t * Variable: IS_CHROMEOS\n\t *\n\t * True if the client is a Chrome OS.\n\t */\n  \tIS_CHROMEOS: /\\bCrOS\\b/.test(navigator.appVersion),\n\n\t/**\n\t * Variable: IS_TOUCH\n\t * \n\t * True if this device supports touchstart/-move/-end events (Apple iOS,\n\t * Android, Chromebook and Chrome Browser on touch-enabled devices).\n\t */\n  \tIS_TOUCH: 'ontouchstart' in document.documentElement,\n\n\t/**\n\t * Variable: IS_POINTER\n\t * \n\t * True if this device supports Microsoft pointer events (always false on Macs).\n\t */\n  \tIS_POINTER: window.PointerEvent != null && !(navigator.appVersion.indexOf('Mac') > 0),\n\n\t/**\n\t * Variable: IS_LOCAL\n\t *\n\t * True if the documents location does not start with http:// or https://.\n\t */\n  \tIS_LOCAL: document.location.href.indexOf('http://') < 0 &&\n  \t\t\t  document.location.href.indexOf('https://') < 0,\n\n\t/**\n\t * Variable: defaultBundles\n\t * \n\t * Contains the base names of the default bundles if mxLoadResources is false.\n\t */\n  \tdefaultBundles: [],\n\n\t/**\n\t * Function: isBrowserSupported\n\t *\n\t * Returns true if the current browser is supported, that is, if\n\t * <mxClient.IS_VML> or <mxClient.IS_SVG> is true.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * if (!mxClient.isBrowserSupported())\n\t * {\n\t *   mxUtils.error('Browser is not supported!', 200, false);\n\t * }\n\t * (end)\n\t */\n\tisBrowserSupported: function()\n\t{\n\t\treturn mxClient.IS_VML || mxClient.IS_SVG;\n\t},\n\n\t/**\n\t * Function: link\n\t *\n\t * Adds a link node to the head of the document. Use this\n\t * to add a stylesheet to the page as follows:\n\t *\n\t * (code)\n\t * mxClient.link('stylesheet', filename);\n\t * (end)\n\t *\n\t * where filename is the (relative) URL of the stylesheet. The charset\n\t * is hardcoded to ISO-8859-1 and the type is text/css.\n\t * \n\t * Parameters:\n\t * \n\t * rel - String that represents the rel attribute of the link node.\n\t * href - String that represents the href attribute of the link node.\n\t * doc - Optional parent document of the link node.\n\t * id - unique id for the link element to check if it already exists\n\t */\n\tlink: function(rel, href, doc, id)\n\t{\n\t\tdoc = doc || document;\n\n\t\t// Workaround for Operation Aborted in IE6 if base tag is used in head\n\t\tif (mxClient.IS_IE6)\n\t\t{\n\t\t\tdoc.write('<link rel=\"' + rel + '\" href=\"' + href + '\" charset=\"UTF-8\" type=\"text/css\"/>');\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tvar link = doc.createElement('link');\n\t\t\t\n\t\t\tlink.setAttribute('rel', rel);\n\t\t\tlink.setAttribute('href', href);\n\t\t\tlink.setAttribute('charset', 'UTF-8');\n\t\t\tlink.setAttribute('type', 'text/css');\n\t\t\t\n\t\t\tif (id)\n\t\t\t{\n\t\t\t\tlink.setAttribute('id', id);\n\t\t\t}\n\t\t\t\n\t\t\tvar head = doc.getElementsByTagName('head')[0];\n\t   \t\thead.appendChild(link);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: loadResources\n\t * \n\t * Helper method to load the default bundles if mxLoadResources is false.\n\t * \n\t * Parameters:\n\t * \n\t * fn - Function to call after all resources have been loaded.\n\t * lan - Optional string to pass to <mxResources.add>.\n\t */\n\tloadResources: function(fn, lan)\n\t{\n\t\tvar pending = mxClient.defaultBundles.length;\n\t\t\n\t\tfunction callback()\n\t\t{\n\t\t\tif (--pending == 0)\n\t\t\t{\n\t\t\t\tfn();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < mxClient.defaultBundles.length; i++)\n\t\t{\n\t\t\tmxResources.add(mxClient.defaultBundles[i], lan, callback);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: include\n\t *\n\t * Dynamically adds a script node to the document header.\n\t * \n\t * In production environments, the includes are resolved in the mxClient.js\n\t * file to reduce the number of requests required for client startup. This\n\t * function should only be used in development environments, but not in\n\t * production systems.\n\t */\n\tinclude: function(src)\n\t{\n\t\tdocument.write('<script src=\"'+src+'\"></script>');\n\t}\n};\n\n/**\n * Variable: mxLoadResources\n * \n * Optional global config variable to toggle loading of the two resource files\n * in <mxGraph> and <mxEditor>. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient. If this is false, you can use <mxClient.loadResources>\n * with its callback to load the default bundles asynchronously.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadResources) == 'undefined')\n{\n\tmxLoadResources = true;\n}\n\n/**\n * Variable: mxForceIncludes\n * \n * Optional global config variable to force loading the JavaScript files in\n * development mode. Default is undefined. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = true;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxForceIncludes) == 'undefined')\n{\n\tmxForceIncludes = false;\n}\n\n/**\n * Variable: mxResourceExtension\n * \n * Optional global config variable to specify the extension of resource files.\n * Default is true. NOTE: This is a global variable, not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxResourceExtension = '.txt';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxResourceExtension) == 'undefined')\n{\n\tmxResourceExtension = '.txt';\n}\n\n/**\n * Variable: mxLoadStylesheets\n * \n * Optional global config variable to toggle loading of the CSS files when\n * the library is initialized. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadStylesheets = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadStylesheets) == 'undefined')\n{\n\tmxLoadStylesheets = true;\n}\n\n/**\n * Variable: basePath\n *\n * Basepath for all URLs in the core without trailing slash. Default is '.'.\n * Set mxBasePath prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxBasePath = '/path/to/core/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxBasePath) != 'undefined' && mxBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxBasePath.substring(mxBasePath.length - 1) == '/')\n\t{\n\t\tmxBasePath = mxBasePath.substring(0, mxBasePath.length - 1);\n\t}\n\n\tmxClient.basePath = mxBasePath;\n}\nelse\n{\n\tmxClient.basePath = '.';\n}\n\n/**\n * Variable: imageBasePath\n *\n * Basepath for all images URLs in the core without trailing slash. Default is\n * <mxClient.basePath> + '/images'. Set mxImageBasePath prior to loading the\n * mxClient library as follows to override this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxImageBasePath = '/path/to/image/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxImageBasePath) != 'undefined' && mxImageBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxImageBasePath.substring(mxImageBasePath.length - 1) == '/')\n\t{\n\t\tmxImageBasePath = mxImageBasePath.substring(0, mxImageBasePath.length - 1);\n\t}\n\n\tmxClient.imageBasePath = mxImageBasePath;\n}\nelse\n{\n\tmxClient.imageBasePath = mxClient.basePath + '/images';\t\n}\n\n/**\n * Variable: language\n *\n * Defines the language of the client, eg. en for english, de for german etc.\n * The special value 'none' will disable all built-in internationalization and\n * resource loading. See <mxResources.getSpecialBundle> for handling identifiers\n * with and without a dash.\n * \n * Set mxLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguage = 'en';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * If internationalization is disabled, then the following variables should be\n * overridden to reflect the current language of the system. These variables are\n * cleared when i18n is disabled.\n * <mxEditor.askZoomResource>, <mxEditor.lastSavedResource>,\n * <mxEditor.currentFileResource>, <mxEditor.propertiesResource>,\n * <mxEditor.tasksResource>, <mxEditor.helpResource>, <mxEditor.outlineResource>,\n * <mxElbowEdgeHandler.doubleClickOrientationResource>, <mxUtils.errorResource>,\n * <mxUtils.closeResource>, <mxGraphSelectionModel.doneResource>,\n * <mxGraphSelectionModel.updatingSelectionResource>, <mxGraphView.doneResource>,\n * <mxGraphView.updatingDocumentResource>, <mxCellRenderer.collapseExpandResource>,\n * <mxGraph.containsValidationErrorsResource> and\n * <mxGraph.alreadyConnectedResource>.\n */\nif (typeof(mxLanguage) != 'undefined' && mxLanguage != null)\n{\n\tmxClient.language = mxLanguage;\n}\nelse\n{\n\tmxClient.language = (mxClient.IS_IE) ? navigator.userLanguage : navigator.language;\n}\n\n/**\n * Variable: defaultLanguage\n * \n * Defines the default language which is used in the common resource files. Any\n * resources for this language will only load the common resource file, but not\n * the language-specific resource file. Default is 'en'.\n * \n * Set mxDefaultLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxDefaultLanguage = 'de';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxDefaultLanguage) != 'undefined' && mxDefaultLanguage != null)\n{\n\tmxClient.defaultLanguage = mxDefaultLanguage;\n}\nelse\n{\n\tmxClient.defaultLanguage = 'en';\n}\n\n// Adds all required stylesheets and namespaces\nif (mxLoadStylesheets)\n{\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css');\n}\n\n/**\n * Variable: languages\n *\n * Defines the optional array of all supported language extensions. The default\n * language does not have to be part of this list. See\n * <mxResources.isLanguageSupported>.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguages = ['de', 'it', 'fr'];\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * This is used to avoid unnecessary requests to language files, ie. if a 404\n * will be returned.\n */\nif (typeof(mxLanguages) != 'undefined' && mxLanguages != null)\n{\n\tmxClient.languages = mxLanguages;\n}\n\n// Adds required namespaces, stylesheets and memory handling for older IE browsers\nif (mxClient.IS_VML)\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tmxClient.IS_VML = false;\n\t}\n\telse\n\t{\n\t\t// Enables support for IE8 standards mode. Note that this requires all attributes for VML\n\t\t// elements to be set using direct notation, ie. node.attr = value, not setAttribute.\n\t\tif (document.namespaces != null)\n\t\t{\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml', '#default#VML');\n\t\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office', '#default#VML');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml');\n\t\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office');\n\t\t\t}\n\t\t}\n\n\t\t// Workaround for limited number of stylesheets in IE (does not work in standards mode)\n\t\tif (mxClient.IS_QUIRKS && document.styleSheets.length >= 30)\n\t\t{\n\t\t\t(function()\n\t\t\t{\n\t\t\t\tvar node = document.createElement('style');\n\t\t\t\tnode.type = 'text/css';\n\t\t\t\tnode.styleSheet.cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t        \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t        document.getElementsByTagName('head')[0].appendChild(node);\n\t\t\t})();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t    \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t}\n\t    \n\t    if (mxLoadStylesheets)\n\t    {\n\t    \tmxClient.link('stylesheet', mxClient.basePath + '/css/explorer.css');\n\t    }\n\t}\n}\n\n// PREPROCESSOR-REMOVE-START\n// If script is loaded via CommonJS, do not write <script> tags to the page\n// for dependencies. These are already included in the build.\nif (mxForceIncludes || !(typeof module === 'object' && module.exports != null))\n{\n// PREPROCESSOR-REMOVE-END\n\tmxClient.include(mxClient.basePath+'/js/util/mxLog.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxObjectIdentity.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDictionary.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxResources.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPoint.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxRectangle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEffects.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUtils.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxConstants.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventObject.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMouseEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEventSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxEvent.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlRequest.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxClipboard.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxWindow.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxForm.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImage.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDivResizer.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxDragSource.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoableEdit.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUndoManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxUrlConverter.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPanningManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAutoSaveManager.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAnimation.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxMorphing.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageBundle.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxImageExport.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxAbstractCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxXmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxSvgCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxVmlCanvas2D.js');\n\tmxClient.include(mxClient.basePath+'/js/util/mxGuide.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencil.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxStencilRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxActor.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCloud.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRectangleShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxDoubleEllipse.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxRhombus.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxPolyline.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrow.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxArrowConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxText.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxTriangle.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxHexagon.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLine.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxImageShape.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxLabel.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxCylinder.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxConnector.js');\n\tmxClient.include(mxClient.basePath+'/js/shape/mxSwimlane.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxGraphLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxStackLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxPartitionLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompactTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxRadialTreeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxFastOrganicLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCircleLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxParallelEdgeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxCompositeLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/mxEdgeLabelLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphAbstractHierarchyCell.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyNode.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyEdge.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxGraphHierarchyModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/model/mxSwimlaneModel.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxHierarchicalLayoutStage.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMedianHybridCrossingReduction.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxMinimumCycleRemover.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxCoordinateAssignment.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/stage/mxSwimlaneOrdering.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxHierarchicalLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/layout/hierarchical/mxSwimlaneLayout.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGraphModel.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCell.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxGeometry.js');\n\tmxClient.include(mxClient.basePath+'/js/model/mxCellPath.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPerimeter.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxPrintPreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStylesheet.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellState.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphSelectionModel.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellRenderer.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxEdgeStyle.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxStyleRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraphView.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxGraph.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellOverlay.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxOutline.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxMultiplicity.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxLayoutManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxSwimlaneManager.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxTemporaryCellStates.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxCellStatePreview.js');\n\tmxClient.include(mxClient.basePath+'/js/view/mxConnectionConstraint.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxGraphHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPanningHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxPopupMenuHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellMarker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxSelectionCellsHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConnectionHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxConstraintHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxRubberband.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxHandle.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxVertexHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxElbowEdgeHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxEdgeSegmentHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxTooltipHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellTracker.js');\n\tmxClient.include(mxClient.basePath+'/js/handler/mxCellHighlight.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultKeyHandler.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultPopupMenu.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxDefaultToolbar.js');\n\tmxClient.include(mxClient.basePath+'/js/editor/mxEditor.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodecRegistry.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxObjectCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxCellCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxModelCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxRootChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxChildChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxTerminalChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGenericChangeCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxGraphViewCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxStylesheetCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultKeyHandlerCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultToolbarCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxDefaultPopupMenuCodec.js');\n\tmxClient.include(mxClient.basePath+'/js/io/mxEditorCodec.js');\n// PREPROCESSOR-REMOVE-START\n}\n// PREPROCESSOR-REMOVE-END\n\n__mxOutput.mxClient = typeof mxClient !== 'undefined' ? mxClient : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxLog =\n{\n\t/**\n\t * Class: mxLog\n\t * \n\t * A singleton class that implements a simple console.\n\t * \n\t * Variable: consoleName\n\t * \n\t * Specifies the name of the console window. Default is 'Console'.\n\t */\n\tconsoleName: 'Console',\n\t\n\t/**\n\t * Variable: TRACE\n\t * \n\t * Specified if the output for <enter> and <leave> should be visible in the\n\t * console. Default is false.\n\t */\n\tTRACE: false,\n\n\t/**\n\t * Variable: DEBUG\n\t * \n\t * Specifies if the output for <debug> should be visible in the console.\n\t * Default is true.\n\t */\n\tDEBUG: true,\n\n\t/**\n\t * Variable: WARN\n\t * \n\t * Specifies if the output for <warn> should be visible in the console.\n\t * Default is true.\n\t */\n\tWARN: true,\n\n\t/**\n\t * Variable: buffer\n\t * \n\t * Buffer for pre-initialized content.\n\t */\n\tbuffer: '',\n\t\n\t/**\n\t * Function: init\n\t *\n\t * Initializes the DOM node for the console. This requires document.body to\n\t * point to a non-null value. This is called from within <setVisible> if the\n\t * log has not yet been initialized.\n\t */\n\tinit: function()\n\t{\n\t\tif (mxLog.window == null && document.body != null)\n\t\t{\n\t\t\tvar title = mxLog.consoleName + ' - mxGraph ' + mxClient.VERSION;\n\n\t\t\t// Creates a table that maintains the layout\n\t\t\tvar table = document.createElement('table');\n\t\t\ttable.setAttribute('width', '100%');\n\t\t\ttable.setAttribute('height', '100%');\n\n\t\t\tvar tbody = document.createElement('tbody');\n\t\t\tvar tr = document.createElement('tr');\n\t\t\tvar td = document.createElement('td');\n\t\t\ttd.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t// Adds the actual console as a textarea\n\t\t\tmxLog.textarea = document.createElement('textarea');\n\t\t\tmxLog.textarea.setAttribute('wrap', 'off');\n\t\t\tmxLog.textarea.setAttribute('readOnly', 'true');\n\t\t\tmxLog.textarea.style.height = '100%';\n\t\t\tmxLog.textarea.style.resize = 'none';\n\t\t\tmxLog.textarea.value = mxLog.buffer;\n\n\t\t\t// Workaround for wrong width in standards mode\n\t\t\tif (mxClient.IS_NS && document.compatMode != 'BackCompat')\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '99%';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '100%';\n\t\t\t}\n\t\t\t\n\t\t\ttd.appendChild(mxLog.textarea);\n\t\t\ttr.appendChild(td);\n\t\t\ttbody.appendChild(tr);\n\n\t\t\t// Creates the container div\n\t\t\ttr = document.createElement('tr');\n\t\t\tmxLog.td = document.createElement('td');\n\t\t\tmxLog.td.style.verticalAlign = 'top';\n\t\t\tmxLog.td.setAttribute('height', '30px');\n\t\t\t\n\t\t\ttr.appendChild(mxLog.td);\n\t\t\ttbody.appendChild(tr);\n\t\t\ttable.appendChild(tbody);\n\n\t\t\t// Adds various debugging buttons\n\t\t\tmxLog.addButton('Info', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.info();\n\t\t\t});\n\t\t\n\t\t\tmxLog.addButton('DOM', function (evt)\n\t\t\t{\n\t\t\t\tvar content = mxUtils.getInnerHtml(document.body);\n\t\t\t\tmxLog.debug(content);\n\t\t\t});\n\t\n\t\t\tmxLog.addButton('Trace', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.TRACE = !mxLog.TRACE;\n\t\t\t\t\n\t\t\t\tif (mxLog.TRACE)\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing enabled');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing disabled');\n\t\t\t\t}\n\t\t\t});\t\n\n\t\t\tmxLog.addButton('Copy', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.copy(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\n\t\t\tmxLog.addButton('Show', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.popup(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\n\t\t\t\n\t\t\tmxLog.addButton('Clear', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.textarea.value = '';\n\t\t\t});\n\n\t\t\t// Cross-browser code to get window size\n\t\t\tvar h = 0;\n\t\t\tvar w = 0;\n\t\t\t\n\t\t\tif (typeof(window.innerWidth) === 'number')\n\t\t\t{\n\t\t\t\th = window.innerHeight;\n\t\t\t\tw = window.innerWidth;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\th = (document.documentElement.clientHeight || document.body.clientHeight);\n\t\t\t\tw = document.body.clientWidth;\n\t\t\t}\n\n\t\t\tmxLog.window = new mxWindow(title, table, Math.max(0, w - 320), Math.max(0, h - 210), 300, 160);\n\t\t\tmxLog.window.setMaximizable(true);\n\t\t\tmxLog.window.setScrollable(false);\n\t\t\tmxLog.window.setResizable(true);\n\t\t\tmxLog.window.setClosable(true);\n\t\t\tmxLog.window.destroyOnClose = false;\n\t\t\t\n\t\t\t// Workaround for ignored textarea height in various setups\n\t\t\tif (((mxClient.IS_NS || mxClient.IS_IE) && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_SF && document.compatMode != 'BackCompat') ||\n\t\t\t\tdocument.documentMode == 11)\n\t\t\t{\n\t\t\t\tvar elt = mxLog.window.getElement();\n\t\t\t\t\n\t\t\t\tvar resizeHandler = function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tmxLog.textarea.style.height = Math.max(0, elt.offsetHeight - 70) + 'px';\n\t\t\t\t}; \n\t\t\t\t\n\t\t\t\tmxLog.window.addListener(mxEvent.RESIZE_END, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.MAXIMIZE, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.NORMALIZE, resizeHandler);\n\n\t\t\t\tmxLog.textarea.style.height = '92px';\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: info\n\t * \n\t * Writes the current navigator information to the console.\n\t */\n\tinfo: function()\n\t{\n\t\tmxLog.writeln(mxUtils.toString(navigator));\n\t},\n\t\t\t\n\t/**\n\t * Function: addButton\n\t * \n\t * Adds a button to the console using the given label and function.\n\t */\n\taddButton: function(lab, funct)\n\t{\n\t\tvar button = document.createElement('button');\n\t\tmxUtils.write(button, lab);\n\t\tmxEvent.addListener(button, 'click', funct);\n\t\tmxLog.td.appendChild(button);\n\t},\n\t\t\t\t\n\t/**\n\t * Function: isVisible\n\t * \n\t * Returns true if the console is visible.\n\t */\n\tisVisible: function()\n\t{\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\treturn mxLog.window.isVisible();\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n\t\n\n\t/**\n\t * Function: show\n\t * \n\t * Shows the console.\n\t */\n\tshow: function()\n\t{\n\t\tmxLog.setVisible(true);\n\t},\n\n\t/**\n\t * Function: setVisible\n\t * \n\t * Shows or hides the console.\n\t */\n\tsetVisible: function(visible)\n\t{\n\t\tif (mxLog.window == null)\n\t\t{\n\t\t\tmxLog.init();\n\t\t}\n\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\tmxLog.window.setVisible(visible);\n\t\t}\n\t},\n\n\t/**\n\t * Function: enter\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and returns the current \n\t * time in milliseconds.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * var t0 = mxLog.enter('Hello');\n\t * // Do something\n\t * mxLog.leave('World!', t0);\n\t * (end)\n\t */\n\tenter: function(string)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tmxLog.writeln('Entering '+string);\n\t\t\t\n\t\t\treturn new Date().getTime();\n\t\t}\n\t},\n\n\t/**\n\t * Function: leave\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and computes the difference\n\t * between the current time and t0 in milliseconds.\n\t * See <enter> for an example.\n\t */\n\tleave: function(string, t0)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tvar dt = (t0 != 0) ? ' ('+(new Date().getTime() - t0)+' ms)' : '';\n\t\t\tmxLog.writeln('Leaving '+string+dt);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: debug\n\t * \n\t * Adds all arguments to the console if <DEBUG> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.debug('Hello, World!');\n\t * (end)\n\t */\n\tdebug: function()\n\t{\n\t\tif (mxLog.DEBUG)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: warn\n\t * \n\t * Adds all arguments to the console if <WARN> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.warn('Hello, World!');\n\t * (end)\n\t */\n\twarn: function()\n\t{\n\t\tif (mxLog.WARN)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\n\t/**\n\t * Function: write\n\t * \n\t * Adds the specified strings to the console.\n\t */\n\twrite: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (mxLog.textarea != null)\n\t\t{\n\t\t\tmxLog.textarea.value = mxLog.textarea.value + string;\n\n\t\t\t// Workaround for no update in Presto 2.5.22 (Opera 10.5)\n\t\t\tif (navigator.userAgent != null &&\n\t\t\t\tnavigator.userAgent.indexOf('Presto/2.5') >= 0)\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.visibility = 'hidden';\n\t\t\t\tmxLog.textarea.style.visibility = 'visible';\n\t\t\t}\n\t\t\t\n\t\t\tmxLog.textarea.scrollTop = mxLog.textarea.scrollHeight;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxLog.buffer += string;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Adds the specified strings to the console, appending a linefeed at the\n\t * end of each string.\n\t */\n\twriteln: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\n\t\tmxLog.write(string + '\\n');\n\t}\n\t\n};\n\n__mxOutput.mxLog = typeof mxLog !== 'undefined' ? mxLog : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxObjectIdentity =\n{\n\t/**\n\t * Class: mxObjectIdentity\n\t * \n\t * Identity for JavaScript objects and functions. This is implemented using\n\t * a simple incrementing counter which is stored in each object under\n\t * <FIELD_NAME>.\n\t * \n\t * The identity for an object does not change during its lifecycle.\n\t * \n\t * Variable: FIELD_NAME\n\t * \n\t * Name of the field to be used to store the object ID. Default is\n\t * <code>mxObjectId</code>.\n\t */\n\tFIELD_NAME: 'mxObjectId',\n\n\t/**\n\t * Variable: counter\n\t * \n\t * Current counter.\n\t */\n\tcounter: 0,\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the ID for the given object or function or null if no object\n\t * is specified.\n\t */\n\tget: function(obj)\n\t{\n\t\tif (obj != null)\n\t\t{\n\t\t\tif (obj[mxObjectIdentity.FIELD_NAME] == null)\n\t\t\t{\n\t\t\t\tif (typeof obj === 'object')\n\t\t\t\t{\n\t\t\t\t\tvar ctor = mxUtils.getFunctionName(obj.constructor);\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = ctor + '#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t\telse if (typeof obj === 'function')\n\t\t\t\t{\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = 'Function#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: clear\n\t * \n\t * Deletes the ID from the given object or function.\n\t */\n\tclear: function(obj)\n\t{\n\t\tif (typeof(obj) === 'object' || typeof obj === 'function')\n\t\t{\n\t\t\tdelete obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxObjectIdentity = typeof mxObjectIdentity !== 'undefined' ? mxObjectIdentity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDictionary\n *\n * A wrapper class for an associative array with object keys. Note: This\n * implementation uses <mxObjectIdentitiy> to turn object keys into strings.\n * \n * Constructor: mxEventSource\n *\n * Constructs a new dictionary which allows object to be used as keys.\n */\nfunction mxDictionary()\n{\n\tthis.clear();\n};\n\n/**\n * Function: map\n *\n * Stores the (key, value) pairs in this dictionary.\n */\nmxDictionary.prototype.map = null;\n\n/**\n * Function: clear\n *\n * Clears the dictionary.\n */\nmxDictionary.prototype.clear = function()\n{\n\tthis.map = {};\n};\n\n/**\n * Function: get\n *\n * Returns the value for the given key.\n */\nmxDictionary.prototype.get = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\t\n\treturn this.map[id];\n};\n\n/**\n * Function: put\n *\n * Stores the value under the given key and returns the previous\n * value for that key.\n */\nmxDictionary.prototype.put = function(key, value)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tthis.map[id] = value;\n\t\n\treturn previous;\n};\n\n/**\n * Function: remove\n *\n * Removes the value for the given key and returns the value that\n * has been removed.\n */\nmxDictionary.prototype.remove = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tdelete this.map[id];\n\t\n\treturn previous;\n};\n\n/**\n * Function: getKeys\n *\n * Returns all keys as an array.\n */\nmxDictionary.prototype.getKeys = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(key);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getValues\n *\n * Returns all values as an array.\n */\nmxDictionary.prototype.getValues = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(this.map[key]);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: visit\n *\n * Visits all entries in the dictionary using the given function with the\n * following signature: function(key, value) where key is a string and\n * value is an object.\n * \n * Parameters:\n * \n * visitor - A function that takes the key and value as arguments.\n */\nmxDictionary.prototype.visit = function(visitor)\n{\n\tfor (var key in this.map)\n\t{\n\t\tvisitor(key, this.map[key]);\n\t}\n};\n\n__mxOutput.mxDictionary = typeof mxDictionary !== 'undefined' ? mxDictionary : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\nvar mxResources =\n{\n\t/**\n\t * Class: mxResources\n\t * \n\t * Implements internationalization. You can provide any number of \n\t * resource files on the server using the following format for the \n\t * filename: name[-en].properties. The en stands for any lowercase \n\t * 2-character language shortcut (eg. de for german, fr for french).\n\t *\n\t * If the optional language extension is omitted, then the file is used as a \n\t * default resource which is loaded in all cases. If a properties file for a \n\t * specific language exists, then it is used to override the settings in the \n\t * default resource. All entries in the file are of the form key=value. The\n\t * values may then be accessed in code via <get>. Lines without \n\t * equal signs in the properties files are ignored.\n\t *\n\t * Resource files may either be added programmatically using\n\t * <add> or via a resource tag in the UI section of the \n\t * editor configuration file, eg:\n\t * \n\t * (code)\n\t * <mxEditor>\n\t *   <ui>\n\t *     <resource basename=\"examples/resources/mxWorkflow\"/>\n\t * (end)\n\t * \n\t * The above element will load examples/resources/mxWorkflow.properties as well\n\t * as the language specific file for the current language, if it exists.\n\t * \n\t * Values may contain placeholders of the form {1}...{n} where each placeholder\n\t * is replaced with the value of the corresponding array element in the params\n\t * argument passed to <mxResources.get>. The placeholder {1} maps to the first\n\t * element in the array (at index 0).\n\t * \n\t * See <mxClient.language> for more information on specifying the default\n\t * language or disabling all loading of resources.\n\t * \n\t * Lines that start with a # sign will be ignored.\n\t * \n\t * Special characters\n\t * \n\t * To use unicode characters, use the standard notation (eg. \\u8fd1) or %u as a\n\t * prefix (eg. %u20AC will display a Euro sign). For normal hex encoded strings,\n\t * use % as a prefix, eg. %F6 will display a \"o umlaut\" (&ouml;).\n\t * \n\t * See <resourcesEncoded> to disable this. If you disable this, make sure that\n\t * your files are UTF-8 encoded.\n\t * \n\t * Asynchronous loading\n\t * \n\t * By default, the core adds two resource files synchronously at load time.\n\t * To load these files asynchronously, set <mxLoadResources> to false\n\t * before loading mxClient.js and use <mxResources.loadResources> instead.\n\t * \n\t * Variable: resources\n\t * \n\t * Object that maps from keys to values.\n\t */\n\tresources: {},\n\n\t/**\n\t * Variable: extension\n\t * \n\t * Specifies the extension used for language files. Default is <mxResourceExtension>.\n\t */\n\textension: mxResourceExtension,\n\n\t/**\n\t * Variable: resourcesEncoded\n\t * \n\t * Specifies whether or not values in resource files are encoded with \\u or\n\t * percentage. Default is false.\n\t */\n\tresourcesEncoded: false,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the default file for a given basename should be loaded.\n\t * Default is true.\n\t */\n\tloadDefaultBundle: true,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the specific language file file for a given basename should\n\t * be loaded. Default is true.\n\t */\n\tloadSpecialBundle: true,\n\n\t/**\n\t * Function: isLanguageSupported\n\t * \n\t * Hook for subclassers to disable support for a given language. This\n\t * implementation returns true if lan is in <mxClient.languages>.\n\t * \n\t * Parameters:\n\t *\n\t * lan - The current language.\n\t */\n\tisLanguageSupported: function(lan)\n\t{\n\t\tif (mxClient.languages != null)\n\t\t{\n\t\t\treturn mxUtils.indexOf(mxClient.languages, lan) >= 0;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getDefaultBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + <extension> or null if\n\t * <loadDefaultBundle> is false.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The current language.\n\t */\n\tgetDefaultBundle: function(basename, lan)\n\t{\n\t\tif (mxResources.loadDefaultBundle || !mxResources.isLanguageSupported(lan))\n\t\t{\n\t\t\treturn basename + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: getSpecialBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + '_' + lan + <extension> or null if\n\t * <loadSpecialBundle> is false or lan equals <mxClient.defaultLanguage>.\n\t * \n\t * If <mxResources.languages> is not null and <mxClient.language> contains\n\t * a dash, then this method checks if <isLanguageSupported> returns true\n\t * for the full language (including the dash). If that returns false the\n\t * first part of the language (up to the dash) will be tried as an extension.\n\t * \n\t * If <mxResources.language> is null then the first part of the language is\n\t * used to maintain backwards compatibility.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t */\n\tgetSpecialBundle: function(basename, lan)\n\t{\n\t\tif (mxClient.languages == null || !this.isLanguageSupported(lan))\n\t\t{\n\t\t\tvar dash = lan.indexOf('-');\n\t\t\t\n\t\t\tif (dash > 0)\n\t\t\t{\n\t\t\t\tlan = lan.substring(0, dash);\n\t\t\t}\n\t\t}\n\n\t\tif (mxResources.loadSpecialBundle && mxResources.isLanguageSupported(lan) && lan != mxClient.defaultLanguage)\n\t\t{\n\t\t\treturn basename + '_' + lan + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: add\n\t * \n\t * Adds the default and current language properties file for the specified\n\t * basename. Existing keys are overridden as new files are added. If no\n\t * callback is used then the request is synchronous.\n\t *\n\t * Example:\n\t * \n\t * At application startup, additional resources may be \n\t * added using the following code:\n\t * \n\t * (code)\n\t * mxResources.add('resources/editor');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t * callback - Optional callback for asynchronous loading.\n\t */\n\tadd: function(basename, lan, callback)\n\t{\n\t\tlan = (lan != null) ? lan : ((mxClient.language != null) ?\n\t\t\tmxClient.language.toLowerCase() : mxConstants.NONE);\n\t\t\n\t\tif (lan != mxConstants.NONE)\n\t\t{\n\t\t\tvar defaultBundle = mxResources.getDefaultBundle(basename, lan);\n\t\t\tvar specialBundle = mxResources.getSpecialBundle(basename, lan);\n\t\t\t\n\t\t\tvar loadSpecialBundle = function()\n\t\t\t{\n\t\t\t\tif (specialBundle != null)\n\t\t\t\t{\n\t\t\t\t\tif (callback)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxUtils.get(specialBundle, function(req)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t}, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t   \t\tvar req = mxUtils.load(specialBundle);\n\t\t\t\t\t   \t\t\n\t\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t\t   \t\t{\n\t\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t\t   \t\t}\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\tcatch (e)\n\t\t\t\t   \t\t{\n\t\t\t\t   \t\t\t// ignore\n\t\t\t\t\t   \t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (callback != null)\n\t\t\t\t{\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (defaultBundle != null)\n\t\t\t{\n\t\t\t\tif (callback)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.get(defaultBundle, function(req)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t}, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t   \t\tvar req = mxUtils.load(defaultBundle);\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t   \t\t{\n\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tloadSpecialBundle();\n\t\t\t\t  \t}\n\t\t\t\t  \tcatch (e)\n\t\t\t\t  \t{\n\t\t\t\t  \t\t// ignore\n\t\t\t\t  \t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Overlays the language specific file (_lan-extension)\n\t\t\t\tloadSpecialBundle();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: parse\n\t * \n\t * Parses the key, value pairs in the specified\n\t * text and stores them as local resources.\n\t */\n\tparse: function(text)\n\t{\n\t\tif (text != null)\n\t\t{\n\t\t\tvar lines = text.split('\\n');\n\t\t\t\n\t\t\tfor (var i = 0; i < lines.length; i++)\n\t\t\t{\n\t\t\t\tif (lines[i].charAt(0) != '#')\n\t\t\t\t{\n\t\t\t\t\tvar index = lines[i].indexOf('=');\n\t\t\t\t\t\n\t\t\t\t\tif (index > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar key = lines[i].substring(0, index);\n\t\t\t\t\t\tvar idx = lines[i].length;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (lines[i].charCodeAt(idx - 1) == 13)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tidx--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar value = lines[i].substring(index + 1, idx);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.resourcesEncoded)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue = value.replace(/\\\\(?=u[a-fA-F\\d]{4})/g,\"%\");\n\t\t\t\t\t\t\tmxResources.resources[key] = unescape(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.resources[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the value for the specified resource key.\n\t *\n\t * Example:\n\t * To read the value for 'welomeMessage', use the following:\n\t * (code)\n\t * var result = mxResources.get('welcomeMessage') || '';\n\t * (end)\n\t *\n\t * This would require an entry of the following form in\n\t * one of the English language resource files:\n\t * (code)\n\t * welcomeMessage=Welcome to mxGraph!\n\t * (end)\n\t * \n\t * The part behind the || is the string value to be used if the given\n\t * resource is not available.\n\t * \n\t * Parameters:\n\t * \n\t * key - String that represents the key of the resource to be returned.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t * defaultValue - Optional string that specifies the default return value.\n\t */\n\tget: function(key, params, defaultValue)\n\t{\n\t\tvar value = mxResources.resources[key];\n\t\t\n\t\t// Applies the default value if no resource was found\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\t\n\t\t// Replaces the placeholders with the values in the array\n\t\tif (value != null && params != null)\n\t\t{\n\t\t\tvalue = mxResources.replacePlaceholders(value, params);\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: replacePlaceholders\n\t * \n\t * Replaces the given placeholders with the given parameters.\n\t * \n\t * Parameters:\n\t * \n\t * value - String that contains the placeholders.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t */\n\treplacePlaceholders: function(value, params)\n\t{\n\t\tvar result = [];\n\t\tvar index = null;\n\t\t\n\t\tfor (var i = 0; i < value.length; i++)\n\t\t{\n\t\t\tvar c = value.charAt(i);\n\n\t\t\tif (c == '{')\n\t\t\t{\n\t\t\t\tindex = '';\n\t\t\t}\n\t\t\telse if (index != null && \tc == '}')\n\t\t\t{\n\t\t\t\tindex = parseInt(index)-1;\n\t\t\t\t\n\t\t\t\tif (index >= 0 && index < params.length)\n\t\t\t\t{\n\t\t\t\t\tresult.push(params[index]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tindex = null;\n\t\t\t}\n\t\t\telse if (index != null)\n\t\t\t{\n\t\t\t\tindex += c;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(c);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\n\t/**\n\t * Function: loadResources\n\t * \n\t * Loads all required resources asynchronously. Use this to load the graph and\n\t * editor resources if <mxLoadResources> is false.\n\t * \n\t * Parameters:\n\t * \n\t * callback - Callback function for asynchronous loading.\n\t */\n\tloadResources: function(callback)\n\t{\n\t\tmxResources.add(mxClient.basePath+'/resources/editor', null, function()\n\t\t{\n\t\t\tmxResources.add(mxClient.basePath+'/resources/graph', null, callback);\n\t\t});\n\t}\n\n};\n\n__mxOutput.mxResources = typeof mxResources !== 'undefined' ? mxResources : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPoint\n *\n * Implements a 2-dimensional vector with double precision coordinates.\n * \n * Constructor: mxPoint\n *\n * Constructs a new point for the optional x and y coordinates. If no\n * coordinates are given, then the default values for <x> and <y> are used.\n */\nfunction mxPoint(x, y)\n{\n\tthis.x = (x != null) ? x : 0;\n\tthis.y = (y != null) ? y : 0;\n};\n\n/**\n * Variable: x\n *\n * Holds the x-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.x = null;\n\n/**\n * Variable: y\n *\n * Holds the y-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.y = null;\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this point.\n */\nmxPoint.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxPoint.prototype.clone = function()\n{\n\t// Handles subclasses as well\n\treturn mxUtils.clone(this);\n};\n\n__mxOutput.mxPoint = typeof mxPoint !== 'undefined' ? mxPoint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangle\n *\n * Extends <mxPoint> to implement a 2-dimensional rectangle with double\n * precision coordinates.\n * \n * Constructor: mxRectangle\n *\n * Constructs a new rectangle for the optional parameters. If no parameters\n * are given then the respective default values are used.\n */\nfunction mxRectangle(x, y, width, height)\n{\n\tmxPoint.call(this, x, y);\n\n\tthis.width = (width != null) ? width : 0;\n\tthis.height = (height != null) ? height : 0;\n};\n\n/**\n * Extends mxPoint.\n */\nmxRectangle.prototype = new mxPoint();\nmxRectangle.prototype.constructor = mxRectangle;\n\n/**\n * Variable: width\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxRectangle.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxRectangle.prototype.height = null;\n\n/**\n * Function: setRect\n * \n * Sets this rectangle to the specified values\n */\nmxRectangle.prototype.setRect = function(x, y, w, h)\n{\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n};\n\n/**\n * Function: getCenterX\n * \n * Returns the x-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterX = function ()\n{\n\treturn this.x + this.width/2;\n};\n\n/**\n * Function: getCenterY\n * \n * Returns the y-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterY = function ()\n{\n\treturn this.y + this.height/2;\n};\n\n/**\n * Function: add\n *\n * Adds the given rectangle to this rectangle.\n */\nmxRectangle.prototype.add = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar minX = Math.min(this.x, rect.x);\n\t\tvar minY = Math.min(this.y, rect.y);\n\t\tvar maxX = Math.max(this.x + this.width, rect.x + rect.width);\n\t\tvar maxY = Math.max(this.y + this.height, rect.y + rect.height);\n\t\t\n\t\tthis.x = minX;\n\t\tthis.y = minY;\n\t\tthis.width = maxX - minX;\n\t\tthis.height = maxY - minY;\n\t}\n};\n\n/**\n * Function: intersect\n * \n * Changes this rectangle to where it overlaps with the given rectangle.\n */\nmxRectangle.prototype.intersect = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar r1 = this.x + this.width;\n\t\tvar r2 = rect.x + rect.width;\n\t\t\n\t\tvar b1 = this.y + this.height;\n\t\tvar b2 = rect.y + rect.height;\n\t\t\n\t\tthis.x = Math.max(this.x, rect.x);\n\t\tthis.y = Math.max(this.y, rect.y);\n\t\tthis.width = Math.min(r1, r2) - this.x;\n\t\tthis.height = Math.min(b1, b2) - this.y;\n\t}\n};\n\n/**\n * Function: grow\n *\n * Grows the rectangle by the given amount, that is, this method subtracts\n * the given amount from the x- and y-coordinates and adds twice the amount\n * to the width and height.\n */\nmxRectangle.prototype.grow = function(amount)\n{\n\tthis.x -= amount;\n\tthis.y -= amount;\n\tthis.width += 2 * amount;\n\tthis.height += 2 * amount;\n\t\n\treturn this;\n};\n\n/**\n * Function: getPoint\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxRectangle.prototype.getPoint = function()\n{\n\treturn new mxPoint(this.x, this.y);\n};\n\n/**\n * Function: rotate90\n * \n * Rotates this rectangle by 90 degree around its center point.\n */\nmxRectangle.prototype.rotate90 = function()\n{\n\tvar t = (this.width - this.height) / 2;\n\tthis.x += t;\n\tthis.y -= t;\n\tvar tmp = this.width;\n\tthis.width = this.height;\n\tthis.height = tmp;\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this rectangle.\n */\nmxRectangle.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y &&\n\t\tobj.width == this.width && obj.height == this.height;\n};\n\n/**\n * Function: fromRectangle\n * \n * Returns a new <mxRectangle> which is a copy of the given rectangle.\n */\nmxRectangle.fromRectangle = function(rect)\n{\n\treturn new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n};\n\n__mxOutput.mxRectangle = typeof mxRectangle !== 'undefined' ? mxRectangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEffects =\n{\n\n\t/**\n\t * Class: mxEffects\n\t * \n\t * Provides animation effects.\n\t */\n\n\t/**\n\t * Function: animateChanges\n\t * \n\t * Asynchronous animated move operation. See also: <mxMorphing>.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n\t * {\n\t *   var changes = evt.getProperty('edit').changes;\n\t * \n\t *   if (changes.length < 10)\n\t *   {\n\t *     mxEffects.animateChanges(graph, changes);\n\t *   }\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that received the changes.\n\t * changes - Array of changes to be animated.\n\t * done - Optional function argument that is invoked after the\n\t * last step of the animation.\n\t */\n\tanimateChanges: function(graph, changes, done)\n\t{\n\t\tvar maxStep = 10;\n\t\tvar step = 0;\n\n\t\tvar animate = function() \n\t\t{\n\t\t\tvar isRequired = false;\n\t\t\t\n\t\t\tfor (var i = 0; i < changes.length; i++)\n\t\t\t{\n\t\t\t\tvar change = changes[i];\n\t\t\t\t\n\t\t\t\tif (change instanceof mxGeometryChange ||\n\t\t\t\t\tchange instanceof mxTerminalChange ||\n\t\t\t\t\tchange instanceof mxValueChange ||\n\t\t\t\t\tchange instanceof mxChildChange ||\n\t\t\t\t\tchange instanceof mxStyleChange)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.getView().getState(change.cell || change.child, false);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tisRequired = true;\n\t\t\t\t\t\n\t\t\t\t\t\tif (change.constructor != mxGeometryChange || graph.model.isEdge(change.cell))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxUtils.setOpacity(state.shape.node, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar scale = graph.getView().scale;\t\t\t\t\t\n\n\t\t\t\t\t\t\tvar dx = (change.geometry.x - change.previous.x) * scale;\n\t\t\t\t\t\t\tvar dy = (change.geometry.y - change.previous.y) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar sx = (change.geometry.width - change.previous.width) * scale;\n\t\t\t\t\t\t\tvar sy = (change.geometry.height - change.previous.height) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (step == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x -= dx;\n\t\t\t\t\t\t\t\tstate.y -= dy;\n\t\t\t\t\t\t\t\tstate.width -= sx;\n\t\t\t\t\t\t\t\tstate.height -= sy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x += dx / maxStep;\n\t\t\t\t\t\t\t\tstate.y += dy / maxStep;\n\t\t\t\t\t\t\t\tstate.width += sx / maxStep;\n\t\t\t\t\t\t\t\tstate.height += sy / maxStep;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tgraph.cellRenderer.redraw(state);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Fades all connected edges and children\n\t\t\t\t\t\t\tmxEffects.cascadeOpacity(graph, change.cell, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (step < maxStep && isRequired)\n\t\t\t{\n\t\t\t\tstep++;\n\t\t\t\twindow.setTimeout(animate, delay);\n\t\t\t}\n\t\t\telse if (done != null)\n\t\t\t{\n\t\t\t\tdone();\n\t\t\t}\n\t\t};\n\t\t\n\t\tvar delay = 30;\n\t\tanimate();\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * Sets the opacity on the given cell and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells.\n\t * cell - <mxCell> to set the opacity for.\n\t * opacity - New value for the opacity in %.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\t// Fades all children\n\t\tvar childCount = graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar child = graph.model.getChildAt(cell, i);\n\t\t\tvar childState = graph.getView().getState(child);\n\t\t\t\n\t\t\tif (childState != null)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(childState.shape.node, opacity);\n\t\t\t\tmxEffects.cascadeOpacity(graph, child, opacity);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Fades all connected edges\n\t\tvar edges = graph.model.getEdges(cell);\n\t\t\n\t\tif (edges != null)\n\t\t{\n\t\t\tfor (var i=0; i<edges.length; i++)\n\t\t\t{\n\t\t\t\tvar edgeState = graph.getView().getState(edges[i]);\n\t\t\t\t\n\t\t\t\tif (edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.setOpacity(edgeState.shape.node, opacity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * Asynchronous fade-out operation.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tstep = step || 40;\n\t\tdelay = delay || 30;\n\t\t\n\t\tvar opacity = from || 100;\n\t\t\n\t\tmxUtils.setOpacity(node, opacity);\n\t\t\n\t\tif (isEnabled || isEnabled == null)\n\t\t{\n\t\t\tvar f = function()\n\t\t\t{\n\t\t\t    opacity = Math.max(opacity-step, 0);\n\t\t\t\tmxUtils.setOpacity(node, opacity);\n\t\t\t\t\n\t\t\t\tif (opacity > 0)\n\t\t\t\t{\n\t\t\t\t\twindow.setTimeout(f, delay);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\t\t\n\t\t\t\t\tif (remove && node.parentNode)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\twindow.setTimeout(f, delay);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\n\t\t\tif (remove && node.parentNode)\n\t\t\t{\n\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t}\n\t\t}\n\t}\n\n};\n\n__mxOutput.mxEffects = typeof mxEffects !== 'undefined' ? mxEffects : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxUtils =\n{\n\t/**\n\t * Class: mxUtils\n\t * \n\t * A singleton class that provides cross-browser helper methods.\n\t * This is a global functionality. To access the functions in this\n\t * class, use the global classname appended by the functionname.\n\t * You may have to load chrome://global/content/contentAreaUtils.js\n\t * to disable certain security restrictions in Mozilla for the <open>,\n\t * <save>, <saveAs> and <copy> function.\n\t * \n\t * For example, the following code displays an error message:\n\t * \n\t * (code)\n\t * mxUtils.error('Browser is not supported!', 200, false);\n\t * (end)\n\t * \n\t * Variable: errorResource\n\t * \n\t * Specifies the resource key for the title of the error window. If the\n\t * resource for this key does not exist then the value is used as\n\t * the title. Default is 'error'.\n\t */\n\terrorResource: (mxClient.language != 'none') ? 'error' : '',\n\t\n\t/**\n\t * Variable: closeResource\n\t * \n\t * Specifies the resource key for the label of the close button. If the\n\t * resource for this key does not exist then the value is used as\n\t * the label. Default is 'close'.\n\t */\n\tcloseResource: (mxClient.language != 'none') ? 'close' : '',\n\n\t/**\n\t * Variable: errorImage\n\t * \n\t * Defines the image used for error dialogs.\n\t */\n\terrorImage: mxClient.imageBasePath + '/error.gif',\n\t\n\t/**\n\t * Function: removeCursors\n\t * \n\t * Removes the cursors from the style of the given DOM node and its\n\t * descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the cursor style from.\n\t */\n\tremoveCursors: function(element)\n\t{\n\t\tif (element.style != null)\n\t\t{\n\t\t\telement.style.cursor = '';\n\t\t}\n\t\t\n\t\tvar children = element.childNodes;\n\t\t\n\t\tif (children != null)\n\t\t{\n\t        var childCount = children.length;\n\t        \n\t        for (var i = 0; i < childCount; i += 1)\n\t        {\n\t            mxUtils.removeCursors(children[i]);\n\t        }\n\t    }\n\t},\n\n\t/**\n\t * Function: getCurrentStyle\n\t * \n\t * Returns the current style of the specified element.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node whose current style should be returned.\n\t */\n\tgetCurrentStyle: function()\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 9))\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ? element.currentStyle : null;\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ?\n\t\t\t\t\twindow.getComputedStyle(element, '') :\n\t\t\t\t\tnull;\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: parseCssNumber\n\t * \n\t * Parses the given CSS numeric value adding handling for the values thin,\n\t * medium and thick (2, 4 and 6).\n\t */\n\tparseCssNumber: function(value)\n\t{\n\t\tif (value == 'thin')\n\t\t{\n\t\t\tvalue = '2';\n\t\t}\n\t\telse if (value == 'medium')\n\t\t{\n\t\t\tvalue = '4';\n\t\t}\n\t\telse if (value == 'thick')\n\t\t{\n\t\t\tvalue = '6';\n\t\t}\n\t\t\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: setPrefixedStyle\n\t * \n\t * Adds the given style with the standard name and an optional vendor prefix for the current\n\t * browser.\n\t * \n\t * (code)\n\t * mxUtils.setPrefixedStyle(node.style, 'transformOrigin', '0% 0%');\n\t * (end)\n\t */\n\tsetPrefixedStyle: function()\n\t{\n\t\tvar prefix = null;\n\t\t\n\t\tif (mxClient.IS_OT)\n\t\t{\n\t\t\tprefix = 'O';\n\t\t}\n\t\telse if (mxClient.IS_SF || mxClient.IS_GC)\n\t\t{\n\t\t\tprefix = 'Webkit';\n\t\t}\n\t\telse if (mxClient.IS_MT)\n\t\t{\n\t\t\tprefix = 'Moz';\n\t\t}\n\t\telse if (mxClient.IS_IE && document.documentMode >= 9 && document.documentMode < 10)\n\t\t{\n\t\t\tprefix = 'ms';\n\t\t}\n\n\t\treturn function(style, name, value)\n\t\t{\n\t\t\tstyle[name] = value;\n\t\t\t\n\t\t\tif (prefix != null && name.length > 0)\n\t\t\t{\n\t\t\t\tname = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);\n\t\t\t\tstyle[name] = value;\n\t\t\t}\n\t\t};\n\t}(),\n\t\n\t/**\n\t * Function: hasScrollbars\n\t * \n\t * Returns true if the overflow CSS property of the given node is either\n\t * scroll or auto.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose style should be checked for scrollbars.\n\t */\n\thasScrollbars: function(node)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(node);\n\n\t\treturn style != null && (style.overflow == 'scroll' || style.overflow == 'auto');\n\t},\n\t\n\t/**\n\t * Function: bind\n\t * \n\t * Returns a wrapper function that locks the execution scope of the given\n\t * function to the specified scope. Inside funct, the \"this\" keyword\n\t * becomes a reference to that scope.\n\t */\n\tbind: function(scope, funct)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\treturn funct.apply(scope, arguments);\n\t\t};\n\t},\n\t\n\t/**\n\t * Function: eval\n\t * \n\t * Evaluates the given expression using eval and returns the JavaScript\n\t * object that represents the expression result. Supports evaluation of\n\t * expressions that define functions and returns the function object for\n\t * these expressions.\n\t * \n\t * Parameters:\n\t * \n\t * expr - A string that represents a JavaScript expression.\n\t */\n\teval: function(expr)\n\t{\n\t\tvar result = null;\n\n\t\tif (expr.indexOf('function') >= 0)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\teval('var _mxJavaScriptExpression='+expr);\n\t\t\t\tresult = _mxJavaScriptExpression;\n\t\t\t\t// TODO: Use delete here?\n\t\t\t\t_mxJavaScriptExpression = null;\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tresult = eval(expr);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNode\n\t * \n\t * Returns the first node where attr equals value.\n\t * This implementation does not use XPath.\n\t */\n\tfindNode: function(node, attr, value)\n\t{\n\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\tvar tmp = node.getAttribute(attr);\n\t\n\t\t\tif (tmp != null && tmp == value)\n\t\t\t{\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tvar result = mxUtils.findNode(node, attr, value);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: getFunctionName\n\t * \n\t * Returns the name for the given function.\n\t * \n\t * Parameters:\n\t * \n\t * f - JavaScript object that represents a function.\n\t */\n\tgetFunctionName: function(f)\n\t{\n\t\tvar str = null;\n\n\t\tif (f != null)\n\t\t{\n\t\t\tif (f.name != null)\n\t\t\t{\n\t\t\t\tstr = f.name;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstr = mxUtils.trim(f.toString());\n\t\t\t\t\n\t\t\t\tif (/^function\\s/.test(str))\n\t\t\t\t{\n\t\t\t\t\tstr = mxUtils.ltrim(str.substring(9));\n\t\t\t\t\tvar idx2 = str.indexOf('(');\n\t\t\t\t\t\n\t\t\t\t\tif (idx2 > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstr = str.substring(0, idx2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn str;\n\t},\n\n\t/**\n\t * Function: indexOf\n\t * \n\t * Returns the index of obj in array or -1 if the array does not contain\n\t * the given object.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array to check for the given obj.\n\t * obj - Object to find in the given array.\n\t */\n\tindexOf: function(array, obj)\n\t{\n\t\tif (array != null && obj != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tif (array[i] == obj)\n\t\t\t\t{\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn -1;\n\t},\n\n\t/**\n\t * Function: forEach\n\t * \n\t * Calls the given function for each element of the given array and returns\n\t * the array.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array that contains the elements.\n\t * fn - Function to be called for each object.\n\t */\n\tforEach: function(array, fn)\n\t{\n\t\tif (array != null && fn != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tfn(array[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn array;\n\t},\n\n\t/**\n\t * Function: remove\n\t * \n\t * Removes all occurrences of the given object in the given array or\n\t * object. If there are multiple occurrences of the object, be they\n\t * associative or as an array entry, all occurrences are removed from\n\t * the array or deleted from the object. By removing the object from\n\t * the array, all elements following the removed element are shifted\n\t * by one step towards the beginning of the array.\n\t * \n\t * The length of arrays is not modified inside this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to find in the given array.\n\t * array - Array to check for the given obj.\n\t */\n\tremove: function(obj, array)\n\t{\n\t\tvar result = null;\n\t\t\n\t\tif (typeof(array) == 'object')\n\t\t{\n\t\t\tvar index = mxUtils.indexOf(array, obj);\n\t\t\t\n\t\t\twhile (index >= 0)\n\t\t\t{\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\tresult = obj;\n\t\t\t\tindex = mxUtils.indexOf(array, obj);\n\t\t\t}\n\t\t}\n\n\t\tfor (var key in array)\n\t\t{\n\t\t\tif (array[key] == obj)\n\t\t\t{\n\t\t\t\tdelete array[key];\n\t\t\t\tresult = obj;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNode\n\t * \n\t * Returns true if the given value is an XML node with the node name\n\t * and if the optional attribute has the specified value.\n\t * \n\t * This implementation assumes that the given value is a DOM node if the\n\t * nodeType property is numeric, that is, if isNaN returns false for\n\t * value.nodeType.\n\t * \n\t * Parameters:\n\t * \n\t * value - Object that should be examined as a node.\n\t * nodeName - String that specifies the node name.\n\t * attributeName - Optional attribute name to check.\n\t * attributeValue - Optional attribute value to check.\n\t */\n\t isNode: function(value, nodeName, attributeName, attributeValue)\n\t {\n\t \tif (value != null && !isNaN(value.nodeType) && (nodeName == null ||\n\t \t\tvalue.nodeName.toLowerCase() == nodeName.toLowerCase()))\n \t\t{\n \t\t\treturn attributeName == null ||\n \t\t\t\tvalue.getAttribute(attributeName) == attributeValue;\n \t\t}\n\t \t\n\t \treturn false;\n\t },\n\t\n\t/**\n\t * Function: isAncestorNode\n\t * \n\t * Returns true if the given ancestor is an ancestor of the\n\t * given DOM node in the DOM. This also returns true if the\n\t * child is the ancestor.\n\t * \n\t * Parameters:\n\t * \n\t * ancestor - DOM node that represents the ancestor.\n\t * child - DOM node that represents the child.\n\t */\n\t isAncestorNode: function(ancestor, child)\n\t {\n\t \tvar parent = child;\n\t \t\n\t \twhile (parent != null)\n\t \t{\n\t \t\tif (parent == ancestor)\n\t \t\t{\n\t \t\t\treturn true;\n\t \t\t}\n\n\t \t\tparent = parent.parentNode;\n\t \t}\n\t \t\n\t \treturn false;\n\t },\n\n\t/**\n\t * Function: getChildNodes\n\t * \n\t * Returns an array of child nodes that are of the given node type.\n\t * \n\t * Parameters:\n\t * \n\t * node - Parent DOM node to return the children from.\n\t * nodeType - Optional node type to return. Default is\n\t * <mxConstants.NODETYPE_ELEMENT>.\n\t */\n\tgetChildNodes: function(node, nodeType)\n\t{\n\t\tnodeType = nodeType || mxConstants.NODETYPE_ELEMENT;\n\t\t\n\t\tvar children = [];\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == nodeType)\n\t\t\t{\n\t\t\t\tchildren.push(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t\t\n\t\treturn children;\n\t},\n\n\t/**\n\t * Function: importNode\n\t * \n\t * Cross browser implementation for document.importNode. Uses document.importNode\n\t * in all browsers but IE, where the node is cloned by creating a new node and\n\t * copying all attributes and children into it using importNode, recursively.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNode: function(doc, node, allChildren)\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 10))\n\t\t{\n\t\t\treturn mxUtils.importNodeImplementation(doc, node, allChildren);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn doc.importNode(node, allChildren);\n\t\t}\n\t},\n\n\t/**\n\t * Function: importNodeImplementation\n\t * \n\t * Full DOM API implementation for importNode without using importNode API call.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNodeImplementation: function(doc, node, allChildren)\n\t{\n\t\tswitch (node.nodeType)\n\t\t{\n\t\t\tcase 1: /* element */\n\t\t\t{\n\t\t\t\tvar newNode = doc.createElement(node.nodeName);\n\t\t\t\t\n\t\t\t\tif (node.attributes && node.attributes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < node.attributes.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewNode.setAttribute(node.attributes[i].nodeName,\n\t\t\t\t\t\t\tnode.getAttribute(node.attributes[i].nodeName));\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (allChildren && node.childNodes && node.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < node.childNodes.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewNode.appendChild(mxUtils.importNodeImplementation(doc, node.childNodes[i], allChildren));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn newNode;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3: /* text */\n\t\t    case 4: /* cdata-section */\n\t\t    case 8: /* comment */\n\t\t    {\n\t\t    \treturn doc.createTextNode((node.nodeValue != null) ? node.nodeValue : node.value);\n\t\t    \tbreak;\n\t\t    }\n\t\t};\n\t},\n\n\t/**\n\t * Function: createXmlDocument\n\t * \n\t * Returns a new, empty XML document.\n\t */\n\tcreateXmlDocument: function()\n\t{\n\t\tvar doc = null;\n\t\t\n\t\tif (document.implementation && document.implementation.createDocument)\n\t\t{\n\t\t\tdoc = document.implementation.createDocument('', '', null);\n\t\t}\n\t\telse if (\"ActiveXObject\" in window)\n\t\t{\n\t\t\tdoc = mxUtils.createMsXmlDocument();\n\t \t}\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: createMsXmlDocument\n\t * \n\t * Returns a new, empty Microsoft.XMLDOM document using ActiveXObject.\n\t */\n\tcreateMsXmlDocument: function()\n\t{\n\t\tvar doc = new ActiveXObject('Microsoft.XMLDOM');\n\t\tdoc.async = false;\n\n\t\t// Workaround for parsing errors with SVG DTD\n\t\tdoc.validateOnParse = false;\n\t\tdoc.resolveExternals = false;\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: parseXml\n\t * \n\t * Parses the specified XML string into a new XML document and returns the\n\t * new document.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var doc = mxUtils.parseXml(\n\t *   '<mxGraphModel><root><MyDiagram id=\"0\"><mxCell/></MyDiagram>'+\n\t *   '<MyLayer id=\"1\"><mxCell parent=\"0\" /></MyLayer><MyObject id=\"2\">'+\n\t *   '<mxCell style=\"strokeColor=blue;fillColor=red\" parent=\"1\" vertex=\"1\">'+\n\t *   '<mxGeometry x=\"10\" y=\"10\" width=\"80\" height=\"30\" as=\"geometry\"/>'+\n\t *   '</mxCell></MyObject></root></mxGraphModel>');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * xml - String that contains the XML data.\n\t */\n\tparseXml: function()\n\t{\n\t\tif (window.DOMParser)\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\n\t\t\t\treturn parser.parseFromString(xml, 'text/xml');\n\t\t\t};\n\t\t}\n\t\telse // IE<=9\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar doc = mxUtils.createMsXmlDocument();\n\t\t\t\tdoc.loadXML(xml);\n\t\t\t\t\n\t\t\t\treturn doc;\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: clearSelection\n\t * \n\t * Clears the current selection in the page.\n\t */\n\tclearSelection: function()\n\t{\n\t\tif (document.selection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tdocument.selection.empty();\n\t\t\t};\n\t\t}\n\t\telse if (window.getSelection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tif (window.getSelection().empty)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().empty();\n\t\t\t\t}\n\t\t\t\telse if (window.getSelection().removeAllRanges)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function() { };\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeWhitespace\n\t * \n\t * Removes the sibling text nodes for the given node that only consists\n\t * of tabs, newlines and spaces.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose siblings should be removed.\n\t * before - Optional boolean that specifies the direction of the traversal.\n\t */\n\tremoveWhitespace: function(node, before)\n\t{\n\t\tvar tmp = (before) ? node.previousSibling : node.nextSibling;\n\t\t\n\t\twhile (tmp != null && tmp.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tvar next = (before) ? tmp.previousSibling : tmp.nextSibling;\n\t\t\tvar text = mxUtils.getTextContent(tmp);\n\t\t\t\n\t\t\tif (mxUtils.trim(text).length == 0)\n\t\t\t{\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = next;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: htmlEntities\n\t * \n\t * Replaces characters (less than, greater than, newlines and quotes) with\n\t * their HTML entities in the given string and returns the result.\n\t * \n\t * Parameters:\n\t * \n\t * s - String that contains the characters to be converted.\n\t * newline - If newlines should be replaced. Default is true.\n\t */\n\thtmlEntities: function(s, newline)\n\t{\n\t\ts = String(s || '');\n\t\t\n\t\ts = s.replace(/&/g,'&amp;'); // 38 26\n\t\ts = s.replace(/\"/g,'&quot;'); // 34 22\n\t\ts = s.replace(/\\'/g,'&#39;'); // 39 27\n\t\ts = s.replace(/</g,'&lt;'); // 60 3C\n\t\ts = s.replace(/>/g,'&gt;'); // 62 3E\n\n\t\tif (newline == null || newline)\n\t\t{\n\t\t\ts = s.replace(/\\n/g, '&#xa;');\n\t\t}\n\t\t\n\t\treturn s;\n\t},\n\t\n\t/**\n\t * Function: isVml\n\t * \n\t * Returns true if the given node is in the VML namespace.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose tag urn should be checked.\n\t */\n\tisVml: function(node)\n\t{\n\t\treturn node != null && node.tagUrn == 'urn:schemas-microsoft-com:vml';\n\t},\n\n\t/**\n\t * Function: getXml\n\t * \n\t * Returns the XML content of the specified node. For Internet Explorer,\n\t * all \\r\\n\\t[\\t]* are removed from the XML string and the remaining \\r\\n\n\t * are replaced by \\n. All \\n are then replaced with linefeed, or &#xa; if\n\t * no linefeed is defined.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * linefeed - Optional string that linefeeds are converted into. Default is\n\t * &#xa;\n\t */\n\tgetXml: function(node, linefeed)\n\t{\n\t\tvar xml = '';\n\t\t\n\t\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t\t{\n\t\t\txml = mxUtils.getPrettyXml(node, '', '', '');\n\t\t}\n\t\telse if (window.XMLSerializer != null)\n\t\t{\n\t\t\tvar xmlSerializer = new XMLSerializer();\n\t\t\txml = xmlSerializer.serializeToString(node);     \n\t\t}\n\t\telse if (node.xml != null)\n\t\t{\n\t\t\txml = node.xml.replace(/\\r\\n\\t[\\t]*/g, '').\n\t\t\t\treplace(/>\\r\\n/g, '>').\n\t\t\t\treplace(/\\r\\n/g, '\\n');\n\t\t}\n\n\t\t// Replaces linefeeds with HTML Entities.\n\t\tlinefeed = linefeed || '&#xa;';\n\t\txml = xml.replace(/\\n/g, linefeed);\n\t\t  \n\t\treturn xml;\n\t},\n\t\n\t/**\n\t * Function: getPrettyXML\n\t * \n\t * Returns a pretty printed string that represents the XML tree for the\n\t * given node. This method should only be used to print XML for reading,\n\t * use <getXml> instead to obtain a string for processing.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * tab - Optional string that specifies the indentation for one level.\n\t * Default is two spaces.\n\t * indent - Optional string that represents the current indentation.\n\t * Default is an empty string.\n\t * newline - Option string that represents a linefeed. Default is '\\n'.\n\t */\n\tgetPrettyXml: function(node, tab, indent, newline, ns)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (node != null)\n\t\t{\n\t\t\ttab = (tab != null) ? tab : '  ';\n\t\t\tindent = (indent != null) ? indent : '';\n\t\t\tnewline = (newline != null) ? newline : '\\n';\n\t\t\t\n\t\t\tif (node.namespaceURI != null && node.namespaceURI != ns)\n\t\t\t{\n\t\t\t\tns = node.namespaceURI;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('xmlns') == null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('xmlns', node.namespaceURI);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (node.nodeType == mxConstants.NODETYPE_DOCUMENT)\n\t\t\t{\n\t\t\t\tresult.push(mxUtils.getPrettyXml(node.documentElement, tab, indent, newline, ns));\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_DOCUMENT_FRAGMENT)\n\t\t\t{\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent, newline, ns));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_COMMENT)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.getTextContent(node);\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + '<!--' + value + '-->' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.trim(mxUtils.getTextContent(node));\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + mxUtils.htmlEntities(value, false) + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (node.nodeType == mxConstants.NODETYPE_CDATA)\n\t\t\t{\n\t\t\t\tvar value = mxUtils.getTextContent(node);\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + '<![CDATA[' + value + ']]' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(indent + '<' + node.nodeName);\n\t\t\t\t\n\t\t\t\t// Creates the string with the node attributes\n\t\t\t\t// and converts all HTML entities in the values\n\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\n\t\t\t\tif (attrs != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar val = mxUtils.htmlEntities(attrs[i].value);\n\t\t\t\t\t\tresult.push(' ' + attrs[i].nodeName + '=\"' + val + '\"');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Recursively creates the XML string for each child\n\t\t\t\t// node and appends it here with an indentation\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tresult.push('>' + newline);\n\t\t\t\t\t\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent + tab, newline, ns));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresult.push(indent + '</'+ node.nodeName + '>' + newline);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult.push(' />' + newline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\t\n\t/**\n\t * Function: extractTextWithWhitespace\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * elems - DOM nodes to return the text for.\n\t */\n\textractTextWithWhitespace: function(elems)\n\t{\n\t    // Known block elements for handling linefeeds (list is not complete)\n\t\tvar blocks = ['BLOCKQUOTE', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'OL', 'P', 'PRE', 'TABLE', 'UL'];\n\t\tvar ret = [];\n\t\t\n\t\tfunction doExtract(elts)\n\t\t{\n\t\t\t// Single break should be ignored\n\t\t\tif (elts.length == 1 && (elts[0].nodeName == 'BR' ||\n\t\t\t\telts[0].innerHTML == '\\n'))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t    for (var i = 0; i < elts.length; i++)\n\t\t    {\n\t\t        var elem = elts[i];\n\n\t\t\t\t// DIV with a br or linefeed forces a linefeed\n\t\t\t\tif (elem.nodeName == 'BR' || elem.innerHTML == '\\n' ||\n\t\t\t\t\t((elts.length == 1 || i == 0) && (elem.nodeName == 'DIV' &&\n\t\t\t\t\telem.innerHTML.toLowerCase() == '<br>')))\n\t\t    \t{\n\t    \t\t\tret.push('\\n');\n\t\t    \t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t        if (elem.nodeType === 3 || elem.nodeType === 4)\n\t\t\t        {\n\t\t\t        \tif (elem.nodeValue.length > 0)\n\t\t\t        \t{\n\t\t\t        \t\tret.push(elem.nodeValue);\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        else if (elem.nodeType !== 8 && elem.childNodes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdoExtract(elem.childNodes);\n\t\t\t\t\t}\n\t\t\t        \n\t        \t\tif (i < elts.length - 1 && mxUtils.indexOf(blocks, elts[i + 1].nodeName) >= 0)\n\t        \t\t{\n\t        \t\t\tret.push('\\n');\t\t\n\t        \t\t}\n\t\t\t\t}\n\t\t    }\n\t\t};\n\t\t\n\t\tdoExtract(elems);\n\t    \n\t    return ret.join('');\n\t},\n\n\t/**\n\t * Function: replaceTrailingNewlines\n\t * \n\t * Replaces each trailing newline with the given pattern.\n\t */\n\treplaceTrailingNewlines: function(str, pattern)\n\t{\n\t\t// LATER: Check is this can be done with a regular expression\n\t\tvar postfix = '';\n\t\t\n\t\twhile (str.length > 0 && str.charAt(str.length - 1) == '\\n')\n\t\t{\n\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\tpostfix += pattern;\n\t\t}\n\t\t\n\t\treturn str + postfix;\n\t},\n\n\t/**\n\t * Function: getTextContent\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the text content for.\n\t */\n\tgetTextContent: function(node)\n\t{\n\t\t// Only IE10-\n\t\tif (mxClient.IS_IE && node.innerText !== undefined)\n\t\t{\n\t\t\treturn node.innerText;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (node != null) ? node[(node.textContent === undefined) ? 'text' : 'textContent'] : '';\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setTextContent\n\t * \n\t * Sets the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the text content for.\n\t * text - String that represents the text content.\n\t */\n\tsetTextContent: function(node, text)\n\t{\n\t\tif (node.innerText !== undefined)\n\t\t{\n\t\t\tnode.innerText = text;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode[(node.textContent === undefined) ? 'text' : 'textContent'] = text;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getInnerHtml\n\t * \n\t * Returns the inner HTML for the given node as a string or an empty string\n\t * if no node was specified. The inner HTML is the text representing all\n\t * children of the node, but not the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the inner HTML for.\n\t */\n\tgetInnerHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\treturn node.innerHTML;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getOuterHtml\n\t * \n\t * Returns the outer HTML for the given node as a string or an empty\n\t * string if no node was specified. The outer HTML is the text representing\n\t * all children of the node including the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the outer HTML for.\n\t */\n\tgetOuterHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tif (node.outerHTML != null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn node.outerHTML;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = [];\n\t\t\t\t\t\ttmp.push('<'+node.nodeName);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (attrs != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar value = attrs[i].value;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (value != null && value.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.push(' ');\n\t\t\t\t\t\t\t\t\ttmp.push(attrs[i].nodeName);\n\t\t\t\t\t\t\t\t\ttmp.push('=\"');\n\t\t\t\t\t\t\t\t\ttmp.push(value);\n\t\t\t\t\t\t\t\t\ttmp.push('\"');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (node.innerHTML.length == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('/>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('>');\n\t\t\t\t\t\t\ttmp.push(node.innerHTML);\n\t\t\t\t\t\t\ttmp.push('</'+node.nodeName+'>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn tmp.join('');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: write\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twrite: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent with an additional linefeed. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twriteln: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t\tparent.appendChild(document.createElement('br'));\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: br\n\t * \n\t * Appends a linebreak to the given parent and returns the linebreak.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the linebreak to.\n\t */\n\tbr: function(parent, count)\n\t{\n\t\tcount = count || 1;\n\t\tvar br = null;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tif (parent != null)\n\t\t\t{\n\t\t\t\tbr = parent.ownerDocument.createElement('br');\n\t\t\t\tparent.appendChild(br);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn br;\n\t},\n\t\t\n\t/**\n\t * Function: button\n\t * \n\t * Returns a new button with the given level and function as an onclick\n\t * event handler.\n\t * \n\t * (code)\n\t * document.body.appendChild(mxUtils.button('Test', function(evt)\n\t * {\n\t *   alert('Hello, World!');\n\t * }));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * label - String that represents the label of the button.\n\t * funct - Function to be called if the button is pressed.\n\t * doc - Optional document to be used for creating the button. Default is the\n\t * current document.\n\t */\n\tbutton: function(label, funct, doc)\n\t{\n\t\tdoc = (doc != null) ? doc : document;\n\t\t\n\t\tvar button = doc.createElement('button');\n\t\tmxUtils.write(button, label);\n\n\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t{\n\t\t\tfunct(evt);\n\t\t});\n\t\t\n\t\treturn button;\n\t},\n\t\n\t/**\n\t * Function: para\n\t * \n\t * Appends a new paragraph with the given text to the specified parent and\n\t * returns the paragraph.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text for the new paragraph.\n\t */\n\tpara: function(parent, text)\n\t{\n\t\tvar p = document.createElement('p');\n\t\tmxUtils.write(p, text);\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(p);\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: addTransparentBackgroundFilter\n\t * \n\t * Adds a transparent background to the filter of the given node. This\n\t * background can be used in IE8 standards mode (native IE8 only) to pass\n\t * events through the node.\n\t */\n\taddTransparentBackgroundFilter: function(node)\n\t{\n\t\tnode.style.filter += 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\\'' +\n\t\t\tmxClient.imageBasePath + '/transparent.gif\\', sizingMethod=\\'scale\\')';\n\t},\n\n\t/**\n\t * Function: linkAction\n\t * \n\t * Adds a hyperlink to the specified parent that invokes action on the\n\t * specified editor.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> that will execute the action.\n\t * action - String that defines the name of the action to be executed.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkAction: function(parent, text, editor, action, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor.execute(action);\n\t\t}, pad);\n\t},\n\n\t/**\n\t * Function: linkInvoke\n\t * \n\t * Adds a hyperlink to the specified parent that invokes the specified\n\t * function on the editor passing along the specified argument. The\n\t * function name is the name of a function of the editor instance,\n\t * not an action name.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> instance to execute the function on.\n\t * functName - String that represents the name of the function.\n\t * arg - Object that represents the argument to the function.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkInvoke: function(parent, text, editor, functName, arg, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor[functName](arg);\n\t\t}, pad);\n\t},\n\t\n\t/**\n\t * Function: link\n\t * \n\t * Adds a hyperlink to the specified parent and invokes the given function\n\t * when the link is clicked.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * funct - Function to execute when the link is clicked.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlink: function(parent, text, funct, pad)\n\t{\n\t\tvar a = document.createElement('span');\n\t\t\n\t\ta.style.color = 'blue';\n\t\ta.style.textDecoration = 'underline';\n\t\ta.style.cursor = 'pointer';\n\t\t\n\t\tif (pad != null)\n\t\t{\n\t\t\ta.style.paddingLeft = pad+'px';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(a, 'click', funct);\n\t\tmxUtils.write(a, text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(a);\n\t\t}\n\t\t\n\t\treturn a;\n\t},\n\n\t/**\n\t * Function: getDocumentSize\n\t * \n\t * Returns the client size for the current document as an <mxRectangle>.\n\t */\n\tgetDocumentSize: function()\n\t{\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\ttry\n\t\t{\n\t\t\treturn new mxRectangle(0, 0, b.clientWidth || d.clientWidth, Math.max(b.clientHeight || 0, d.clientHeight));\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\treturn new mxRectangle();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: fit\n\t * \n\t * Makes sure the given node is inside the visible area of the window. This\n\t * is done by setting the left and top in the style. \n\t */\n\tfit: function(node)\n\t{\n\t\tvar ds = mxUtils.getDocumentSize();\n\t\tvar left = parseInt(node.offsetLeft);\n\t\tvar width = parseInt(node.offsetWidth);\n\t\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(node.ownerDocument);\n\t\tvar sl = offset.x;\n\t\tvar st = offset.y;\n\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\tvar right = (sl) + ds.width;\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\tnode.style.left = Math.max(sl, right - width) + 'px';\n\t\t}\n\t\t\n\t\tvar top = parseInt(node.offsetTop);\n\t\tvar height = parseInt(node.offsetHeight);\n\t\t\n\t\tvar bottom = st + ds.height;\n\t\t\n\t\tif (top + height > bottom)\n\t\t{\n\t\t\tnode.style.top = Math.max(st, bottom - height) + 'px';\n\t\t}\n\t},\n\n\t/**\n\t * Function: load\n\t * \n\t * Loads the specified URL *synchronously* and returns the <mxXmlRequest>.\n\t * Throws an exception if the file cannot be loaded. See <mxUtils.get> for\n\t * an asynchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * try\n\t * {\n\t *   var req = mxUtils.load(filename);\n\t *   var root = req.getDocumentElement();\n\t *   // Process XML DOM...\n\t * }\n\t * catch (ex)\n\t * {\n\t *   mxUtils.alert('Cannot load '+filename+': '+ex);\n\t * }\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t */\n\tload: function(url)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET', false);\n\t\treq.send();\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Loads the specified URL *asynchronously* and invokes the given functions\n\t * depending on the request status. Returns the <mxXmlRequest> in use. Both\n\t * functions take the <mxXmlRequest> as the only parameter. See\n\t * <mxUtils.load> for a synchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *    var node = req.getDocumentElement();\n\t *    // Process XML DOM...\n\t * });\n\t * (end)\n\t * \n\t * So for example, to load a diagram into an existing graph model, the\n\t * following code is used.\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *   var node = req.getDocumentElement();\n\t *   var dec = new mxCodec(node.ownerDocument);\n\t *   dec.decode(node, graph.getModel());\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t * binary - Optional boolean parameter that specifies if the request is\n\t * binary.\n\t * timeout - Optional timeout in ms before calling ontimeout.\n\t * ontimeout - Optional function to execute on timeout.\n\t * headers - Optional with headers, eg. {'Authorization': 'token xyz'}\n\t */\n\tget: function(url, onload, onerror, binary, timeout, ontimeout, headers)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET');\n\t\tvar setRequestHeaders = req.setRequestHeaders;\n\t\t\n\t\tif (headers)\n\t\t{\n\t\t\treq.setRequestHeaders = function(request, params)\n\t\t\t{\n\t\t\t\tsetRequestHeaders.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tfor (var key in headers)\n\t\t\t\t{\n\t\t\t\t\trequest.setRequestHeader(key, headers[key]);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (binary != null)\n\t\t{\n\t\t\treq.setBinary(binary);\n\t\t}\n\t\t\n\t\treq.send(onload, onerror, timeout, ontimeout);\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: getAll\n\t * \n\t * Loads the URLs in the given array *asynchronously* and invokes the given function\n\t * if all requests returned with a valid 2xx status. The error handler is invoked\n\t * once on the first error or invalid response.\n\t *\n\t * Parameters:\n\t * \n\t * urls - Array of URLs to be loaded.\n\t * onload - Callback with array of <mxXmlRequests>.\n\t * onerror - Optional function to execute on error.\n\t */\n\tgetAll: function(urls, onload, onerror)\n\t{\n\t\tvar remain = urls.length;\n\t\tvar result = [];\n\t\tvar errors = 0;\n\t\tvar err = function()\n\t\t{\n\t\t\tif (errors == 0 && onerror != null)\n\t\t\t{\n\t\t\t\tonerror();\n\t\t\t}\n\n\t\t\terrors++;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < urls.length; i++)\n\t\t{\n\t\t\t(function(url, index)\n\t\t\t{\n\t\t\t\tmxUtils.get(url, function(req)\n\t\t\t\t{\n\t\t\t\t\tvar status = req.getStatus();\n\t\t\t\t\t\n\t\t\t\t\tif (status < 200 || status > 299)\n\t\t\t\t\t{\n\t\t\t\t\t\terr();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult[index] = req;\n\t\t\t\t\t\tremain--;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (remain == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonload(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, err);\n\t\t\t})(urls[i], i);\n\t\t}\n\t\t\n\t\tif (remain == 0)\n\t\t{\n\t\t\tonload(result);\t\t\t\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: post\n\t * \n\t * Posts the specified params to the given URL *asynchronously* and invokes\n\t * the given functions depending on the request status. Returns the\n\t * <mxXmlRequest> in use. Both functions take the <mxXmlRequest> as the\n\t * only parameter. Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.post(url, 'key=value', function(req)\n\t * {\n\t * \tmxUtils.alert('Ready: '+req.isReady()+' Status: '+req.getStatus());\n\t *  // Process req.getDocumentElement() using DOM API if OK...\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the post request.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t */\n\tpost: function(url, params, onload, onerror)\n\t{\n\t\treturn new mxXmlRequest(url, params).send(onload, onerror);\n\t},\n\t\n\t/**\n\t * Function: submit\n\t * \n\t * Submits the given parameters to the specified URL using\n\t * <mxXmlRequest.simulate> and returns the <mxXmlRequest>.\n\t * Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the form.\n\t * doc - Document to create the form in.\n\t * target - Target to send the form result to.\n\t */\n\tsubmit: function(url, params, doc, target)\n\t{\n\t\treturn new mxXmlRequest(url, params).simulate(doc, target);\n\t},\n\t\n\t/**\n\t * Function: loadInto\n\t * \n\t * Loads the specified URL *asynchronously* into the specified document,\n\t * invoking onload after the document has been loaded. This implementation\n\t * does not use <mxXmlRequest>, but the document.load method.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * doc - The document to load the URL into.\n\t * onload - Function to execute when the URL has been loaded.\n\t */\n\tloadInto: function(url, doc, onload)\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tdoc.onreadystatechange = function ()\n\t\t\t{\n\t\t\t\tif (doc.readyState == 4)\n\t\t\t\t{\n\t\t\t\t\tonload();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.addEventListener('load', onload, false);\n\t\t}\n\t\t\n\t\tdoc.load(url);\n\t},\n\t\n\t/**\n\t * Function: getValue\n\t * \n\t * Returns the value for the given key in the given associative array or\n\t * the given default value if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null.\n\t */\n\tgetValue: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\t\t\t\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: getNumber\n\t * \n\t * Returns the numeric value for the given key in the given associative\n\t * array or the given default value (or 0) if the value is null. The value\n\t * is converted to a numeric value using the Number function.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is 0.\n\t */\n\tgetNumber: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue || 0;\t\t\t\n\t\t}\n\t\t\n\t\treturn Number(value);\n\t},\n\t\n\t/**\n\t * Function: getColor\n\t * \n\t * Returns the color value for the given key in the given associative\n\t * array or the given default value if the value is null. If the value\n\t * is <mxConstants.NONE> then null is returned.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is null.\n\t */\n\tgetColor: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\telse if (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: clone\n\t * \n\t * Recursively clones the specified object ignoring all fieldnames in the\n\t * given array of transient fields. <mxObjectIdentity.FIELD_NAME> is always\n\t * ignored by this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to be cloned.\n\t * transients - Optional array of strings representing the fieldname to be\n\t * ignored.\n\t * shallow - Optional boolean argument to specify if a shallow clone should\n\t * be created, that is, one where all object references are not cloned or,\n\t * in other words, one where only atomic (strings, numbers) values are\n\t * cloned. Default is false.\n\t */\n\tclone: function(obj, transients, shallow)\n\t{\n\t\tshallow = (shallow != null) ? shallow : false;\n\t\tvar clone = null;\n\t\t\n\t\tif (obj != null && typeof(obj.constructor) == 'function')\n\t\t{\n\t\t\tclone = new obj.constructor();\n\t\t\t\n\t\t    for (var i in obj)\n\t\t    {\n\t\t    \tif (i != mxObjectIdentity.FIELD_NAME && (transients == null ||\n\t\t    \t\tmxUtils.indexOf(transients, i) < 0))\n\t\t    \t{\n\t\t\t    \tif (!shallow && typeof(obj[i]) == 'object')\n\t\t\t    \t{\n\t\t\t            clone[i] = mxUtils.clone(obj[i]);\n\t\t\t        }\n\t\t\t        else\n\t\t\t        {\n\t\t\t            clone[i] = obj[i];\n\t\t\t        }\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t    return clone;\n\t},\n\n\t/**\n\t * Function: equalPoints\n\t * \n\t * Compares all mxPoints in the given lists.\n\t * \n\t * Parameters:\n\t * \n\t * a - Array of <mxPoints> to be compared.\n\t * b - Array of <mxPoints> to be compared.\n\t */\n\tequalPoints: function(a, b)\n\t{\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var i = 0; i < a.length; i++)\n\t\t\t{\n\t\t\t\tif ((a[i] != null && b[i] == null) ||\n\t\t\t\t\t(a[i] == null && b[i] != null) ||\n\t\t\t\t\t(a[i] != null && b[i] != null &&\n\t\t\t\t\t(a[i].x != b[i].x || a[i].y != b[i].y)))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: equalEntries\n\t * \n\t * Returns true if all properties of the given objects are equal. Values\n\t * with NaN are equal to NaN and unequal to any other value.\n\t * \n\t * Parameters:\n\t * \n\t * a - First object to be compared.\n\t * b - Second object to be compared.\n\t */\n\tequalEntries: function(a, b)\n\t{\n\t\t// Counts keys in b to check if all values have been compared\n\t\tvar count = 0;\n\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var key in b)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tfor (var key in a)\n\t\t\t{\n\t\t\t\tcount--\n\t\t\t\t\n\t\t\t\tif ((!mxUtils.isNaN(a[key]) || !mxUtils.isNaN(b[key])) && a[key] != b[key])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn count == 0;\n\t},\n\t\n\t/**\n\t * Function: removeDuplicates\n\t * \n\t * Removes all duplicates from the given array.\n\t */\n\tremoveDuplicates: function(arr)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tif (!dict.get(arr[i]))\n\t\t\t{\n\t\t\t\tresult.push(arr[i]);\n\t\t\t\tdict.put(arr[i], true);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNaN\n\t *\n\t * Returns true if the given value is of type number and isNaN returns true.\n\t */\n\tisNaN: function(value)\n\t{\n\t\treturn typeof(value) == 'number' && isNaN(value);\n\t},\n\t\n\t/**\n\t * Function: extend\n\t *\n\t * Assigns a copy of the superclass prototype to the subclass prototype.\n\t * Note that this does not call the constructor of the superclass at this\n\t * point, the superclass constructor should be called explicitely in the\n\t * subclass constructor. Below is an example.\n\t * \n\t * (code)\n\t * MyGraph = function(container, model, renderHint, stylesheet)\n\t * {\n\t *   mxGraph.call(this, container, model, renderHint, stylesheet);\n\t * }\n\t * \n\t * mxUtils.extend(MyGraph, mxGraph);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * ctor - Constructor of the subclass.\n\t * superCtor - Constructor of the superclass.\n\t */\n\textend: function(ctor, superCtor)\n\t{\n\t\tvar f = function() {};\n\t\tf.prototype = superCtor.prototype;\n\t\t\n\t\tctor.prototype = new f();\n\t\tctor.prototype.constructor = ctor;\n\t},\n\n\t/**\n\t * Function: toString\n\t * \n\t * Returns a textual representation of the specified object.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to return the string representation for.\n\t */\n\ttoString: function(obj)\n\t{\n\t    var output = '';\n\t    \n\t    for (var i in obj)\n\t    {\n\t    \ttry\n\t    \t{\n\t\t\t    if (obj[i] == null)\n\t\t\t    {\n\t\t            output += i + ' = [null]\\n';\n\t\t\t    }\n\t\t\t    else if (typeof(obj[i]) == 'function')\n\t\t\t    {\n\t\t            output += i + ' => [Function]\\n';\n\t\t        }\n\t\t        else if (typeof(obj[i]) == 'object')\n\t\t        {\n\t\t        \tvar ctor = mxUtils.getFunctionName(obj[i].constructor); \n\t\t            output += i + ' => [' + ctor + ']\\n';\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            output += i + ' = ' + obj[i] + '\\n';\n\t\t        }\n\t    \t}\n\t    \tcatch (e)\n\t    \t{\n\t    \t\toutput += i + '=' + e.message;\n\t    \t}\n\t    }\n\t    \n\t    return output;\n\t},\n\n\t/**\n\t * Function: toRadians\n\t * \n\t * Converts the given degree to radians.\n\t */\n\ttoRadians: function(deg)\n\t{\n\t\treturn Math.PI * deg / 180;\n\t},\n\n\t/**\n\t * Function: toDegree\n\t * \n\t * Converts the given radians to degree.\n\t */\n\ttoDegree: function(rad)\n\t{\n\t\treturn rad * 180 / Math.PI;\n\t},\n\t\n\t/**\n\t * Function: arcToCurves\n\t * \n\t * Converts the given arc to a series of curves.\n\t */\n\tarcToCurves: function(x0, y0, r1, r2, angle, largeArcFlag, sweepFlag, x, y)\n\t{\n\t\tx -= x0;\n\t\ty -= y0;\n\t\t\n        if (r1 === 0 || r2 === 0) \n        {\n        \treturn result;\n        }\n        \n        var fS = sweepFlag;\n        var psai = angle;\n        r1 = Math.abs(r1);\n        r2 = Math.abs(r2);\n        var ctx = -x / 2;\n        var cty = -y / 2;\n        var cpsi = Math.cos(psai * Math.PI / 180);\n        var spsi = Math.sin(psai * Math.PI / 180);\n        var rxd = cpsi * ctx + spsi * cty;\n        var ryd = -1 * spsi * ctx + cpsi * cty;\n        var rxdd = rxd * rxd;\n        var rydd = ryd * ryd;\n        var r1x = r1 * r1;\n        var r2y = r2 * r2;\n        var lamda = rxdd / r1x + rydd / r2y;\n        var sds;\n        \n        if (lamda > 1) \n        {\n        \tr1 = Math.sqrt(lamda) * r1;\n        \tr2 = Math.sqrt(lamda) * r2;\n        \tsds = 0;\n        }  \n        else\n        {\n        \tvar seif = 1;\n            \n        \tif (largeArcFlag === fS) \n        \t{\n        \t\tseif = -1;\n        \t}\n            \n        \tsds = seif * Math.sqrt((r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd));\n        }\n        \n        var txd = sds * r1 * ryd / r2;\n        var tyd = -1 * sds * r2 * rxd / r1;\n        var tx = cpsi * txd - spsi * tyd + x / 2;\n        var ty = spsi * txd + cpsi * tyd + y / 2;\n        var rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);\n        var s1 = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        rad = Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) - Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);\n        var dr = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        \n        if (fS == 0 && dr > 0) \n        {\n        \tdr -= 2 * Math.PI;\n        }\n        else if (fS != 0 && dr < 0) \n        {\n        \tdr += 2 * Math.PI;\n        }\n        \n        var sse = dr * 2 / Math.PI;\n        var seg = Math.ceil(sse < 0 ? -1 * sse : sse);\n        var segr = dr / seg;\n        var t = 8/3 * Math.sin(segr / 4) * Math.sin(segr / 4) / Math.sin(segr / 2);\n        var cpsir1 = cpsi * r1;\n        var cpsir2 = cpsi * r2;\n        var spsir1 = spsi * r1;\n        var spsir2 = spsi * r2;\n        var mc = Math.cos(s1);\n        var ms = Math.sin(s1);\n        var x2 = -t * (cpsir1 * ms + spsir2 * mc);\n        var y2 = -t * (spsir1 * ms - cpsir2 * mc);\n        var x3 = 0;\n        var y3 = 0;\n\n\t\tvar result = [];\n        \n        for (var n = 0; n < seg; ++n) \n        {\n            s1 += segr;\n            mc = Math.cos(s1);\n            ms = Math.sin(s1);\n            \n            x3 = cpsir1 * mc - spsir2 * ms + tx;\n            y3 = spsir1 * mc + cpsir2 * ms + ty;\n            var dx = -t * (cpsir1 * ms + spsir2 * mc);\n            var dy = -t * (spsir1 * ms - cpsir2 * mc);\n            \n            // CurveTo updates x0, y0 so need to restore it\n            var index = n * 6;\n            result[index] = Number(x2 + x0);\n            result[index + 1] = Number(y2 + y0);\n            result[index + 2] = Number(x3 - dx + x0);\n            result[index + 3] = Number(y3 - dy + y0);\n            result[index + 4] = Number(x3 + x0);\n            result[index + 5] = Number(y3 + y0);\n            \n\t\t\tx2 = x3 + dx;\n            y2 = y3 + dy;\n        }\n        \n        return result;\n\t},\n\n\t/**\n\t * Function: getBoundingBox\n\t * \n\t * Returns the bounding box for the rotated rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * rect - <mxRectangle> to be rotated.\n\t * angle - Number that represents the angle (in degrees).\n\t * cx - Optional <mxPoint> that represents the rotation center. If no\n\t * rotation center is given then the center of rect is used.\n\t */\n\tgetBoundingBox: function(rect, rotation, cx)\n\t{\n        var result = null;\n\n        if (rect != null && rotation != null && rotation != 0)\n        {\n            var rad = mxUtils.toRadians(rotation);\n            var cos = Math.cos(rad);\n            var sin = Math.sin(rad);\n\n            cx = (cx != null) ? cx : new mxPoint(rect.x + rect.width / 2, rect.y + rect.height / 2);\n\n            var p1 = new mxPoint(rect.x, rect.y);\n            var p2 = new mxPoint(rect.x + rect.width, rect.y);\n            var p3 = new mxPoint(p2.x, rect.y + rect.height);\n            var p4 = new mxPoint(rect.x, p3.y);\n\n            p1 = mxUtils.getRotatedPoint(p1, cos, sin, cx);\n            p2 = mxUtils.getRotatedPoint(p2, cos, sin, cx);\n            p3 = mxUtils.getRotatedPoint(p3, cos, sin, cx);\n            p4 = mxUtils.getRotatedPoint(p4, cos, sin, cx);\n\n            result = new mxRectangle(p1.x, p1.y, 0, 0);\n            result.add(new mxRectangle(p2.x, p2.y, 0, 0));\n            result.add(new mxRectangle(p3.x, p3.y, 0, 0));\n            result.add(new mxRectangle(p4.x, p4.y, 0, 0));\n        }\n\n        return result;\n\t},\n\n\t/**\n\t * Function: getRotatedPoint\n\t * \n\t * Rotates the given point by the given cos and sin.\n\t */\n\tgetRotatedPoint: function(pt, cos, sin, c)\n\t{\n\t\tc = (c != null) ? c : new mxPoint();\n\t\tvar x = pt.x - c.x;\n\t\tvar y = pt.y - c.y;\n\n\t\tvar x1 = x * cos - y * sin;\n\t\tvar y1 = y * cos + x * sin;\n\n\t\treturn new mxPoint(x1 + c.x, y1 + c.y);\n\t},\n\t\n\t/**\n\t * Returns an integer mask of the port constraints of the given map\n\t * @param dict the style map to determine the port constraints for\n\t * @param defaultValue Default value to return if the key is undefined.\n\t * @return the mask of port constraint directions\n\t * \n\t * Parameters:\n\t * \n\t * terminal - <mxCelState> that represents the terminal.\n\t * edge - <mxCellState> that represents the edge.\n\t * source - Boolean that specifies if the terminal is the source terminal.\n\t * defaultValue - Default value to be returned.\n\t */\n\tgetPortConstraints: function(terminal, edge, source, defaultValue)\n\t{\n\t\tvar value = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT,\n\t\t\tmxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_SOURCE_PORT_CONSTRAINT :\n\t\t\t\tmxConstants.STYLE_TARGET_PORT_CONSTRAINT, null));\n\t\t\n\t\tif (value == null)\n\t\t{\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar directions = value.toString();\n\t\t\tvar returnValue = mxConstants.DIRECTION_MASK_NONE;\n\t\t\tvar constraintRotationEnabled = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT_ROTATION, 0);\n\t\t\tvar rotation = 0;\n\t\t\t\n\t\t\tif (constraintRotationEnabled == 1)\n\t\t\t{\n\t\t\t\trotation = mxUtils.getValue(terminal.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tvar quad = 0;\n\n\t\t\tif (rotation > 45)\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t\t\n\t\t\t\tif (rotation >= 135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (rotation < -45)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\tif (rotation <= -135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_NORTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_WEST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_SOUTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_EAST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: reversePortConstraints\n\t * \n\t * Reverse the port constraint bitmask. For example, north | east\n\t * becomes south | west\n\t */\n\treversePortConstraints: function(constraint)\n\t{\n\t\tvar result = 0;\n\t\t\n\t\tresult = (constraint & mxConstants.DIRECTION_MASK_WEST) << 3;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_NORTH) << 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_SOUTH) >> 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_EAST) >> 3;\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNearestSegment\n\t * \n\t * Finds the index of the nearest segment on the given cell state for\n\t * the specified coordinate pair.\n\t */\n\tfindNearestSegment: function(state, x, y)\n\t{\n\t\tvar index = -1;\n\t\t\n\t\tif (state.absolutePoints.length > 0)\n\t\t{\n\t\t\tvar last = state.absolutePoints[0];\n\t\t\tvar min = null;\n\t\t\t\n\t\t\tfor (var i = 1; i < state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tvar current = state.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(last.x, last.y,\n\t\t\t\t\tcurrent.x, current.y, x, y);\n\t\t\t\t\n\t\t\t\tif (min == null || dist < min)\n\t\t\t\t{\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t}\n\n\t\t\t\tlast = current;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn index;\n\t},\n\n\t/**\n\t * Function: getDirectedBounds\n\t * \n\t * Adds the given margins to the given rectangle and rotates and flips the\n\t * rectangle according to the respective styles in style.\n\t */\n\tgetDirectedBounds: function (rect, m, style, flipH, flipV)\n\t{\n\t\tvar d = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\tflipH = (flipH != null) ? flipH : mxUtils.getValue(style, mxConstants.STYLE_FLIPH, false);\n\t\tflipV = (flipV != null) ? flipV : mxUtils.getValue(style, mxConstants.STYLE_FLIPV, false);\n\n\t\tm.x = Math.round(Math.max(0, Math.min(rect.width, m.x)));\n\t\tm.y = Math.round(Math.max(0, Math.min(rect.height, m.y)));\n\t\tm.width = Math.round(Math.max(0, Math.min(rect.width, m.width)));\n\t\tm.height = Math.round(Math.max(0, Math.min(rect.height, m.height)));\n\t\t\n\t\tif ((flipV && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipH && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.width;\n\t\t\tm.width = tmp;\n\t\t}\n\t\t\t\n\t\tif ((flipH && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipV && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.y;\n\t\t\tm.y = m.height;\n\t\t\tm.height = tmp;\n\t\t}\n\t\t\n\t\tvar m2 = mxRectangle.fromRectangle(m);\n\t\t\n\t\tif (d == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tm2.y = m.x;\n\t\t\tm2.x = m.height;\n\t\t\tm2.width = m.y;\n\t\t\tm2.height = m.width;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tm2.y = m.height;\n\t\t\tm2.x = m.width;\n\t\t\tm2.width = m.x;\n\t\t\tm2.height = m.y;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tm2.y = m.width;\n\t\t\tm2.x = m.y;\n\t\t\tm2.width = m.height;\n\t\t\tm2.height = m.x;\n\t\t}\n\t\t\n\t\treturn new mxRectangle(rect.x + m2.x, rect.y + m2.y, rect.width - m2.width - m2.x, rect.height - m2.height - m2.y);\n\t},\n\n\t/**\n\t * Function: getPerimeterPoint\n\t * \n\t * Returns the intersection between the polygon defined by the array of\n\t * points and the line between center and point.\n\t */\n\tgetPerimeterPoint: function (pts, center, point)\n\t{\n\t\tvar min = null;\n\t\t\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tvar pt = mxUtils.intersection(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y,\n\t\t\t\tcenter.x, center.y, point.x, point.y);\n\t\t\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar dx = point.x - pt.x;\n\t\t\t\tvar dy = point.y - pt.y;\n\t\t\t\tvar ip = {p: pt, distSq: dy * dy + dx * dx};\n\t\t\t\t\n\t\t\t\tif (ip != null && (min == null || min.distSq > ip.distSq))\n\t\t\t\t{\n\t\t\t\t\tmin = ip;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (min != null) ? min.p : null;\n\t},\n\n\t/**\n\t * Function: rectangleIntersectsSegment\n\t * \n\t * Returns true if the given rectangle intersects the given segment.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the rectangle.\n\t * p1 - <mxPoint> that represents the first point of the segment.\n\t * p2 - <mxPoint> that represents the second point of the segment.\n\t */\n\trectangleIntersectsSegment: function(bounds, p1, p2)\n\t{\n\t\tvar top = bounds.y;\n\t\tvar left = bounds.x;\n\t\tvar bottom = top + bounds.height;\n\t\tvar right = left + bounds.width;\n\t\t\t\n\t\t// Find min and max X for the segment\n\t\tvar minX = p1.x;\n\t\tvar maxX = p2.x;\n\t\t\n\t\tif (p1.x > p2.x)\n\t\t{\n\t\t  minX = p2.x;\n\t\t  maxX = p1.x;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's x-projections\n\t\tif (maxX > right)\n\t\t{\n\t\t  maxX = right;\n\t\t}\n\t\t\n\t\tif (minX < left)\n\t\t{\n\t\t  minX = left;\n\t\t}\n\t\t\n\t\tif (minX > maxX) // If their projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\t// Find corresponding min and max Y for min and max X we found before\n\t\tvar minY = p1.y;\n\t\tvar maxY = p2.y;\n\t\tvar dx = p2.x - p1.x;\n\t\t\n\t\tif (Math.abs(dx) > 0.0000001)\n\t\t{\n\t\t  var a = (p2.y - p1.y) / dx;\n\t\t  var b = p1.y - a * p1.x;\n\t\t  minY = a * minX + b;\n\t\t  maxY = a * maxX + b;\n\t\t}\n\t\t\n\t\tif (minY > maxY)\n\t\t{\n\t\t  var tmp = maxY;\n\t\t  maxY = minY;\n\t\t  minY = tmp;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's y-projections\n\t\tif (maxY > bottom)\n\t\t{\n\t\t  maxY = bottom;\n\t\t}\n\t\t\n\t\tif (minY < top)\n\t\t{\n\t\t  minY = top;\n\t\t}\n\t\t\n\t\tif (minY > maxY) // If Y-projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\t\n\t/**\n\t * Function: contains\n\t * \n\t * Returns true if the specified point (x, y) is contained in the given rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the area.\n\t * x - X-coordinate of the point.\n\t * y - Y-coordinate of the point.\n\t */\n\tcontains: function(bounds, x, y)\n\t{\n\t\treturn (bounds.x <= x && bounds.x + bounds.width >= x &&\n\t\t\t\tbounds.y <= y && bounds.y + bounds.height >= y);\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersects: function(a, b)\n\t{\n\t\tvar tw = a.width;\n\t\tvar th = a.height;\n\t\tvar rw = b.width;\n\t\tvar rh = b.height;\n\t\t\n\t\tif (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0)\n\t\t{\n\t\t    return false;\n\t\t}\n\t\t\n\t\tvar tx = a.x;\n\t\tvar ty = a.y;\n\t\tvar rx = b.x;\n\t\tvar ry = b.y;\n\t\t\n\t\trw += rx;\n\t\trh += ry;\n\t\ttw += tx;\n\t\tth += ty;\n\n\t\treturn ((rw < rx || rw > tx) &&\n\t\t\t(rh < ry || rh > ty) &&\n\t\t\t(tw < tx || tw > rx) &&\n\t\t\t(th < ty || th > ry));\n\t},\n\n\t/**\n\t * Function: intersectsHotspot\n\t * \n\t * Returns true if the state and the hotspot intersect.\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState>\n\t * x - X-coordinate.\n\t * y - Y-coordinate.\n\t * hotspot - Optional size of the hostpot.\n\t * min - Optional min size of the hostpot.\n\t * max - Optional max size of the hostpot.\n\t */\n\tintersectsHotspot: function(state, x, y, hotspot, min, max)\n\t{\n\t\thotspot = (hotspot != null) ? hotspot : 1;\n\t\tmin = (min != null) ? min : 0;\n\t\tmax = (max != null) ? max : 0;\n\t\t\n\t\tif (hotspot > 0)\n\t\t{\n\t\t\tvar cx = state.getCenterX();\n\t\t\tvar cy = state.getCenterY();\n\t\t\tvar w = state.width;\n\t\t\tvar h = state.height;\n\t\t\t\n\t\t\tvar start = mxUtils.getValue(state.style, mxConstants.STYLE_STARTSIZE) * state.view.scale;\n\n\t\t\tif (start > 0)\n\t\t\t{\n\t\t\t\tif (mxUtils.getValue(state.style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tcy = state.y + start / 2;\n\t\t\t\t\th = start;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcx = state.x + start / 2;\n\t\t\t\t\tw = start;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw = Math.max(min, w * hotspot);\n\t\t\th = Math.max(min, h * hotspot);\n\t\t\t\n\t\t\tif (max > 0)\n\t\t\t{\n\t\t\t\tw = Math.min(w, max);\n\t\t\t\th = Math.min(h, max);\n\t\t\t}\n\t\t\t\n\t\t\tvar rect = new mxRectangle(cx - w / 2, cy - h / 2, w, h);\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\treturn mxUtils.contains(rect, x, y);\t\t\t\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getOffset\n\t * \n\t * Returns the offset for the specified container as an <mxPoint>. The\n\t * offset is the distance from the top left corner of the container to the\n\t * top left corner of the document.\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to return the offset for.\n\t * scollOffset - Optional boolean to add the scroll offset of the document.\n\t * Default is false.\n\t */\n\tgetOffset: function(container, scrollOffset)\n\t{\n\t\tvar offsetLeft = 0;\n\t\tvar offsetTop = 0;\n\t\t\n\t\t// Ignores document scroll origin for fixed elements\n\t\tvar fixed = false;\n\t\tvar node = container;\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\n\t\twhile (node != null && node != b && node != d && !fixed)\n\t\t{\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tif (!scrollOffset && !fixed)\n\t\t{\n\t\t\tvar offset = mxUtils.getDocumentScrollOrigin(container.ownerDocument);\n\t\t\toffsetLeft += offset.x;\n\t\t\toffsetTop += offset.y;\n\t\t}\n\t\t\n\t\tvar r = container.getBoundingClientRect();\n\t\t\n\t\tif (r != null)\n\t\t{\n\t\t\toffsetLeft += r.left;\n\t\t\toffsetTop += r.top;\n\t\t}\n\t\t\n\t\treturn new mxPoint(offsetLeft, offsetTop);\n\t},\n\n\t/**\n\t * Function: getDocumentScrollOrigin\n\t * \n\t * Returns the scroll origin of the given document or the current document\n\t * if no document is given.\n\t */\n\tgetDocumentScrollOrigin: function(doc)\n\t{\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\treturn new mxPoint(doc.body.scrollLeft, doc.body.scrollTop);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar wnd = doc.defaultView || doc.parentWindow;\n\t\t\t\n\t\t\tvar x = (wnd != null && window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;\n\t\t\tvar y = (wnd != null && window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getScrollOrigin\n\t * \n\t * Returns the top, left corner of the viewrect as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose scroll origin should be returned.\n\t * includeAncestors - Whether the scroll origin of the ancestors should be\n\t * included. Default is false.\n\t * includeDocument - Whether the scroll origin of the document should be\n\t * included. Default is true.\n\t */\n\tgetScrollOrigin: function(node, includeAncestors, includeDocument)\n\t{\n\t\tincludeAncestors = (includeAncestors != null) ? includeAncestors : false;\n\t\tincludeDocument = (includeDocument != null) ? includeDocument : true;\n\t\t\n\t\tvar doc = (node != null) ? node.ownerDocument : document;\n\t\tvar b = doc.body;\n\t\tvar d = doc.documentElement;\n\t\tvar result = new mxPoint();\n\t\tvar fixed = false;\n\n\t\twhile (node != null && node != b && node != d)\n\t\t{\n\t\t\tif (!isNaN(node.scrollLeft) && !isNaN(node.scrollTop))\n\t\t\t{\n\t\t\t\tresult.x += node.scrollLeft;\n\t\t\t\tresult.y += node.scrollTop;\n\t\t\t}\n\t\t\t\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\n\t\t\tnode = (includeAncestors) ? node.parentNode : null;\n\t\t}\n\n\t\tif (!fixed && includeDocument)\n\t\t{\n\t\t\tvar origin = mxUtils.getDocumentScrollOrigin(doc);\n\n\t\t\tresult.x += origin.x;\n\t\t\tresult.y += origin.y;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: convertPoint\n\t * \n\t * Converts the specified point (x, y) using the offset of the specified\n\t * container and returns a new <mxPoint> with the result.\n\t * \n\t * (code)\n\t * var pt = mxUtils.convertPoint(graph.container,\n\t *   mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to use for the offset.\n\t * x - X-coordinate of the point to be converted.\n\t * y - Y-coordinate of the point to be converted.\n\t */\n\tconvertPoint: function(container, x, y)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(container, false);\n\t\tvar offset = mxUtils.getOffset(container);\n\n\t\toffset.x -= origin.x;\n\t\toffset.y -= origin.y;\n\t\t\n\t\treturn new mxPoint(x - offset.x, y - offset.y);\n\t},\n\t\n\t/**\n\t * Function: ltrim\n\t * \n\t * Strips all whitespaces from the beginning of the string. Without the\n\t * second parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\tltrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"^[\" + chars + \"]+\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: rtrim\n\t * \n\t * Strips all whitespaces from the end of the string. Without the second\n\t * parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\trtrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"[\" + chars + \"]+$\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: trim\n\t * \n\t * Strips all whitespaces from both end of the string.\n\t * Without the second parameter, Javascript function will trim these\n\t * characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\ttrim: function(str, chars)\n\t{\n\t\treturn mxUtils.ltrim(mxUtils.rtrim(str, chars), chars);\n\t},\n\t\n\t/**\n\t * Function: isNumeric\n\t * \n\t * Returns true if the specified value is numeric, that is, if it is not\n\t * null, not an empty string, not a HEX number and isNaN returns false.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisNumeric: function(n)\n\t{\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n) && (typeof(n) != 'string' || n.toLowerCase().indexOf('0x') < 0);\n\t},\n\n\t/**\n\t * Function: isInteger\n\t * \n\t * Returns true if the given value is an valid integer number.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisInteger: function(n)\n\t{\n\t\treturn String(parseInt(n)) === String(n);\n\t},\n\n\t/**\n\t * Function: mod\n\t * \n\t * Returns the remainder of division of n by m. You should use this instead\n\t * of the built-in operation as the built-in operation does not properly\n\t * handle negative numbers.\n\t */\n\tmod: function(n, m)\n\t{\n\t\treturn ((n % m) + m) % m;\n\t},\n\n\t/**\n\t * Function: intersection\n\t * \n\t * Returns the intersection of two lines as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * x0 - X-coordinate of the first line's startpoint.\n\t * y0 - X-coordinate of the first line's startpoint.\n\t * x1 - X-coordinate of the first line's endpoint.\n\t * y1 - Y-coordinate of the first line's endpoint.\n\t * x2 - X-coordinate of the second line's startpoint.\n\t * y2 - Y-coordinate of the second line's startpoint.\n\t * x3 - X-coordinate of the second line's endpoint.\n\t * y3 - Y-coordinate of the second line's endpoint.\n\t */\n\tintersection: function (x0, y0, x1, y1, x2, y2, x3, y3)\n\t{\n\t\tvar denom = ((y3 - y2) * (x1 - x0)) - ((x3 - x2) * (y1 - y0));\n\t\tvar nume_a = ((x3 - x2) * (y0 - y2)) - ((y3 - y2) * (x0 - x2));\n\t\tvar nume_b = ((x1 - x0) * (y0 - y2)) - ((y1 - y0) * (x0 - x2));\n\n\t\tvar ua = nume_a / denom;\n\t\tvar ub = nume_b / denom;\n\t\t\n\t\tif(ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0)\n\t\t{\n\t\t\t// Get the intersection point\n\t\t\tvar x = x0 + ua * (x1 - x0);\n\t\t\tvar y = y0 + ua * (y1 - y0);\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t\t\n\t\t// No intersection\n\t\treturn null;\n\t},\n\t\n\t/**\n\t * Function: ptSegDistSq\n\t * \n\t * Returns the square distance between a segment and a point. To get the\n\t * distance between a point and a line (with infinite length) use\n\t * <mxUtils.ptLineDist>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\tptSegDistSq: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\n\t\tpx -= x1;\n\t\tpy -= y1;\n\n\t\tvar dotprod = px * x2 + py * y2;\n\t\tvar projlenSq;\n\n\t\tif (dotprod <= 0.0)\n\t\t{\n\t\t    projlenSq = 0.0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    px = x2 - px;\n\t\t    py = y2 - py;\n\t\t    dotprod = px * x2 + py * y2;\n\n\t\t    if (dotprod <= 0.0)\n\t\t    {\n\t\t\t\tprojlenSq = 0.0;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\t\tprojlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);\n\t\t    }\n\t\t}\n\n\t\tvar lenSq = px * px + py * py - projlenSq;\n\t\t\n\t\tif (lenSq < 0)\n\t\t{\n\t\t    lenSq = 0;\n\t\t}\n\t\t\n\t\treturn lenSq;\n    },\n\t\n\t/**\n\t * Function: ptLineDist\n\t * \n\t * Returns the distance between a line defined by two points and a point.\n\t * To get the distance between a point and a segment (with a specific\n\t * length) use <mxUtils.ptSeqDistSq>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of point 1 of the line.\n\t * y1 - Y-coordinate of point 1 of the line.\n\t * x2 - X-coordinate of point 1 of the line.\n\t * y2 - Y-coordinate of point 1 of the line.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n    ptLineDist: function(x1, y1, x2, y2, px, py)\n    {\n\t\treturn Math.abs((y2 - y1) * px - (x2 - x1) * py + x2 * y1 - y2 * x1) /\n\t\t\tMath.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n    },\n    \t\n\t/**\n\t * Function: relativeCcw\n\t * \n\t * Returns 1 if the given point on the right side of the segment, 0 if its\n\t * on the segment, and -1 if the point is on the left side of the segment.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\trelativeCcw: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\t\tpx -= x1;\n\t\tpy -= y1;\n\t\tvar ccw = px * y2 - py * x2;\n\t\t\n\t\tif (ccw == 0.0)\n\t\t{\n\t\t    ccw = px * x2 + py * y2;\n\t\t    \n\t\t    if (ccw > 0.0)\n\t\t    {\n\t\t\t\tpx -= x2;\n\t\t\t\tpy -= y2;\n\t\t\t\tccw = px * x2 + py * y2;\n\t\t\t\t\n\t\t\t\tif (ccw < 0.0)\n\t\t\t\t{\n\t\t\t\t    ccw = 0.0;\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t\treturn (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);\n    },\n    \n\t/**\n\t * Function: animateChanges\n\t * \n\t * See <mxEffects.animateChanges>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tanimateChanges: function(graph, changes)\n\t{\n\t\t// LATER: Deprecated, remove this function\n    \tmxEffects.animateChanges.apply(this, arguments);\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * See <mxEffects.cascadeOpacity>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\tmxEffects.cascadeOpacity.apply(this, arguments);\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * See <mxEffects.fadeOut>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tmxEffects.fadeOut.apply(this, arguments);\n\t},\n\t\n\t/**\n\t * Function: setOpacity\n\t * \n\t * Sets the opacity of the specified DOM node to the given value in %.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the opacity for.\n\t * value - Opacity in %. Possible values are between 0 and 100.\n\t */\n\tsetOpacity: function(node, value)\n\t{\n\t\tif (mxUtils.isVml(node))\n\t\t{\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\t// TODO: Why is the division by 5 needed in VML?\n\t\t\t    node.style.filter = 'alpha(opacity=' + (value/5) + ')';\n\t    \t}\n\t\t}\n\t\telse if (mxClient.IS_IE && (typeof(document.documentMode) === 'undefined' || document.documentMode < 9))\n\t    {\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t\t\t    node.style.filter = 'alpha(opacity=' + value + ')';\n\t    \t}\n\t\t}\n\t\telse\n\t\t{\n\t\t    node.style.opacity = (value / 100);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createImage\n\t * \n\t * Creates and returns an image (IMG node) or VML image (v:image) in IE6 in\n\t * quirks mode.\n\t * \n\t * Parameters:\n\t * \n\t * src - URL that points to the image to be displayed.\n\t */\n\tcreateImage: function(src)\n\t{\n        var imageNode = null;\n        \n\t\tif (mxClient.IS_IE6 && document.compatMode != 'CSS1Compat')\n\t\t{\n        \timageNode = document.createElement(mxClient.VML_PREFIX + ':image');\n        \timageNode.setAttribute('src', src);\n        \timageNode.style.borderStyle = 'none';\n        }\n\t\telse\n\t\t{\n\t\t\timageNode = document.createElement('img');\n\t\t\timageNode.setAttribute('src', src);\n\t\t\timageNode.setAttribute('border', '0');\n\t\t}\n\t\t\n\t\treturn imageNode;\n\t},\n\n\t/**\n\t * Function: sortCells\n\t * \n\t * Sorts the given cells according to the order in the cell hierarchy.\n\t * Ascending is optional and defaults to true.\n\t */\n\tsortCells: function(cells, ascending)\n\t{\n\t\tascending = (ascending != null) ? ascending : true;\n\t\tvar lookup = new mxDictionary();\n\t\tcells.sort(function(o1, o2)\n\t\t{\n\t\t\tvar p1 = lookup.get(o1);\n\t\t\t\n\t\t\tif (p1 == null)\n\t\t\t{\n\t\t\t\tp1 = mxCellPath.create(o1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o1, p1);\n\t\t\t}\n\t\t\t\n\t\t\tvar p2 = lookup.get(o2);\n\t\t\t\n\t\t\tif (p2 == null)\n\t\t\t{\n\t\t\t\tp2 = mxCellPath.create(o2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o2, p2);\n\t\t\t}\n\t\t\t\n\t\t\tvar comp = mxCellPath.compare(p1, p2);\n\t\t\t\n\t\t\treturn (comp == 0) ? 0 : (((comp > 0) == ascending) ? 1 : -1);\n\t\t});\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: getStylename\n\t * \n\t * Returns the stylename in a style of the form [(stylename|key=value);] or\n\t * an empty string if the given style does not contain a stylename.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylename: function(style)\n\t{\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\tvar stylename = pairs[0];\n\t\t\t\n\t\t\tif (stylename.indexOf('=') < 0)\n\t\t\t{\n\t\t\t\treturn stylename;\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn '';\n\t},\n\n\t/**\n\t * Function: getStylenames\n\t * \n\t * Returns the stylenames in a style of the form [(stylename|key=value);]\n\t * or an empty array if the given style does not contain any stylenames.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < pairs.length; i++)\n\t\t\t{\n\t\t\t\tif (pairs[i].indexOf('=') < 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(pairs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: indexOfStylename\n\t * \n\t * Returns the index of the given stylename in the given style. This\n\t * returns -1 if the given stylename does not occur (as a stylename) in the\n\t * given style, otherwise it returns the index of the first character.\n\t */\n\tindexOfStylename: function(style, stylename)\n\t{\n\t\tif (style != null && stylename != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\tvar pos = 0;\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] == stylename)\n\t\t\t\t{\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpos += tokens[i].length + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\t\n\t/**\n\t * Function: addStylename\n\t * \n\t * Adds the specified stylename to the given style if it does not already\n\t * contain the stylename.\n\t */\n\taddStylename: function(style, stylename)\n\t{\n\t\tif (mxUtils.indexOfStylename(style, stylename) < 0)\n\t\t{\n\t\t\tif (style == null)\n\t\t\t{\n\t\t\t\tstyle = '';\n\t\t\t}\n\t\t\telse if (style.length > 0 && style.charAt(style.length - 1) != ';')\n\t\t\t{\n\t\t\t\tstyle += ';';\n\t\t\t}\n\t\t\t\n\t\t\tstyle += stylename;\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: removeStylename\n\t * \n\t * Removes all occurrences of the specified stylename in the given style\n\t * and returns the updated style. Trailing semicolons are not preserved.\n\t */\n\tremoveStylename: function(style, stylename)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] != stylename)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\t\n\t/**\n\t * Function: removeAllStylenames\n\t * \n\t * Removes all stylenames from the given style and returns the updated\n\t * style.\n\t */\n\tremoveAllStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\t// Keeps the key, value assignments\n\t\t\t\tif (tokens[i].indexOf('=') >= 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\n\t/**\n\t * Function: setCellStyles\n\t * \n\t * Assigns the value for the given key in the styles of the given cells, or\n\t * removes the key from the styles if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> to execute the transaction in.\n\t * cells - Array of <mxCells> to be updated.\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetCellStyles: function(model, cells, key, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyle(model.getStyle(cells[i]), key, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyle\n\t * \n\t * Adds or removes the given key, value pair to the style and returns the\n\t * new style. If value is null or zero length then the key is removed from\n\t * the style. This is for cell styles, not for CSS styles.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetStyle: function(style, key, value)\n\t{\n\t\tvar isValue = value != null && (typeof(value.length) == 'undefined' || value.length > 0);\n\t\t\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (isValue)\n\t\t\t{\n\t\t\t\tstyle = key + '=' + value + ';';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (style.substring(0, key.length + 1) == key + '=')\n\t\t\t{\n\t\t\t\tvar next = style.indexOf(';');\n\t\t\t\t\n\t\t\t\tif (isValue)\n\t\t\t\t{\n\t\t\t\t\tstyle = key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = (next < 0 || next == style.length - 1) ? '' : style.substring(next + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar index = style.indexOf(';' + key + '=');\n\t\t\t\t\n\t\t\t\tif (index < 0)\n\t\t\t\t{\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sep = (style.charAt(style.length - 1) == ';') ? '' : ';';\n\t\t\t\t\t\tstyle = style + sep + key + '=' + value + ';';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar next = style.indexOf(';', index + 1);\n\t\t\t\t\t\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index + 1) + key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index) + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\n\t/**\n\t * Function: setCellStyleFlags\n\t * \n\t * Sets or toggles the flag bit for the given key in the cell's styles.\n\t * If value is null then the flag is toggled.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var cells = graph.getSelectionCells();\n\t * mxUtils.setCellStyleFlags(graph.model,\n\t * \t\t\tcells,\n\t * \t\t\tmxConstants.STYLE_FONTSTYLE,\n\t * \t\t\tmxConstants.FONT_BOLD);\n\t * (end)\n\t * \n\t * Toggles the bold font style.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> that contains the cells.\n\t * cells - Array of <mxCells> to change the style for.\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the flag.\n\t */\n\tsetCellStyleFlags: function(model, cells, key, flag, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyleFlag(\n\t\t\t\t\t\t\tmodel.getStyle(cells[i]),\n\t\t\t\t\t\t\tkey, flag, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyleFlag\n\t * \n\t * Sets or removes the given key from the specified style and returns the\n\t * new style. If value is null then the flag is toggled.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the given flag.\n\t */\n\tsetStyleFlag: function(style, key, flag, value)\n\t{\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (value || value == null)\n\t\t\t{\n\t\t\t\tstyle = key+'='+flag;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle = key+'=0';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar index = style.indexOf(key+'=');\n\t\t\t\n\t\t\tif (index < 0)\n\t\t\t{\n\t\t\t\tvar sep = (style.charAt(style.length-1) == ';') ? '' : ';';\n\n\t\t\t\tif (value || value == null)\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=' + flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=0';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar cont = style.indexOf(';', index);\n\t\t\t\tvar tmp = '';\n\t\t\t\t\n\t\t\t\tif (cont < 0)\n\t\t\t\t{\n\t\t\t\t\ttmp  = style.substring(index+key.length+1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = style.substring(index+key.length+1, cont);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value == null)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) ^ flag;\n\t\t\t\t}\n\t\t\t\telse if (value)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) | flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) & ~flag;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstyle = style.substring(0, index) + key + '=' + tmp +\n\t\t\t\t\t((cont >= 0) ? style.substring(cont) : '');\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: getAlignmentAsPoint\n\t * \n\t * Returns an <mxPoint> that represents the horizontal and vertical alignment\n\t * for numeric computations. X is -0.5 for center, -1 for right and 0 for\n\t * left alignment. Y is -0.5 for middle, -1 for bottom and 0 for top\n\t * alignment. Default values for missing arguments is top, left.\n\t */\n\tgetAlignmentAsPoint: function(align, valign)\n\t{\n\t\tvar dx = -0.5;\n\t\tvar dy = -0.5;\n\t\t\n\t\t// Horizontal alignment\n\t\tif (align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx = -1;\n\t\t}\n\n\t\t// Vertical alignment\n\t\tif (valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy = -1;\n\t\t}\n\t\t\n\t\treturn new mxPoint(dx, dy);\n\t},\n\t\n\t/**\n\t * Function: getSizeForString\n\t * \n\t * Returns an <mxRectangle> with the size (width and height in pixels) of\n\t * the given string. The string may contain HTML markup. Newlines should be\n\t * converted to <br> before calling this method. The caller is responsible\n\t * for sanitizing the HTML markup.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var label = graph.getLabel(cell).replace(/\\n/g, \"<br>\");\n\t * var size = graph.getSizeForString(label);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * text - String whose size should be returned.\n\t * fontSize - Integer that specifies the font size in pixels. Default is\n\t * <mxConstants.DEFAULT_FONTSIZE>.\n\t * fontFamily - String that specifies the name of the font family. Default\n\t * is <mxConstants.DEFAULT_FONTFAMILY>.\n\t * textWidth - Optional width for text wrapping.\n\t * fontStyle - Optional font style.\n\t */\n\tgetSizeForString: function(text, fontSize, fontFamily, textWidth, fontStyle)\n\t{\n\t\tfontSize = (fontSize != null) ? fontSize : mxConstants.DEFAULT_FONTSIZE;\n\t\tfontFamily = (fontFamily != null) ? fontFamily : mxConstants.DEFAULT_FONTFAMILY;\n\t\tvar div = document.createElement('div');\n\t\t\n\t\t// Sets the font size and family\n\t\tdiv.style.fontFamily = fontFamily;\n\t\tdiv.style.fontSize = Math.round(fontSize) + 'px';\n\t\tdiv.style.lineHeight = Math.round(fontSize * mxConstants.LINE_HEIGHT) + 'px';\n\t\t\n\t\t// Sets the font style\n\t\tif (fontStyle != null)\n\t\t{\n\t\t\tif ((fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tvar txtDecor = [];\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t\t{\n\t\t\t\ttxtDecor.push('underline');\n\t\t\t}\n\t\t\t\n\t\t\tif ((fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t\t{\n\t\t\t\ttxtDecor.push('line-through');\n\t\t\t}\n\t\t\t\n\t\t\tif (txtDecor.length > 0)\n\t\t\t{\n\t\t\t\tdiv.style.textDecoration = txtDecor.join(' ');\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Disables block layout and outside wrapping and hides the div\n\t\tdiv.style.position = 'absolute';\n\t\tdiv.style.visibility = 'hidden';\n\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tdiv.style.zoom = '1';\n\t\t\n\t\tif (textWidth != null)\n\t\t{\n\t\t\tdiv.style.width = textWidth + 'px';\n\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\t// Adds the text and inserts into DOM for updating of size\n\t\tdiv.innerHTML = text;\n\t\tdocument.body.appendChild(div);\n\t\t\n\t\t// Gets the size and removes from DOM\n\t\tvar size = new mxRectangle(0, 0, div.offsetWidth, div.offsetHeight);\n\t\tdocument.body.removeChild(div);\n\t\t\n\t\treturn size;\n\t},\n\t\n\t/**\n\t * Function: getViewXml\n\t */\n\tgetViewXml: function(graph, scale, cells, x0, y0)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\tscale = (scale != null) ? scale : 1;\n\n\t\tif (cells == null)\n\t\t{\n\t\t\tvar model = graph.getModel();\n\t\t\tcells = [model.getRoot()];\n\t\t}\n\t\t\n\t\tvar view = graph.getView();\n\t\tvar result = null;\n\n\t\t// Disables events on the view\n\t\tvar eventsEnabled = view.isEventsEnabled();\n\t\tview.setEventsEnabled(false);\n\n\t\t// Workaround for label bounds not taken into account for image export.\n\t\t// Creates a temporary draw pane which is used for rendering the text.\n\t\t// Text rendering is required for finding the bounds of the labels.\n\t\tvar drawPane = view.drawPane;\n\t\tvar overlayPane = view.overlayPane;\n\n\t\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tview.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.drawPane);\n\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tview.drawPane = view.drawPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.drawPane);\n\t\t\t\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = view.overlayPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\n\t\t// Resets the translation\n\t\tvar translate = view.getTranslate();\n\t\tview.translate = new mxPoint(x0, y0);\n\n\t\t// Creates the temporary cell states in the view\n\t\tvar temp = new mxTemporaryCellStates(graph.getView(), scale, cells);\n\n\t\ttry\n\t\t{\n\t\t\tvar enc = new mxCodec();\n\t\t\tresult = enc.encode(graph.getView());\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttemp.destroy();\n\t\t\tview.translate = translate;\n\t\t\tview.canvas.removeChild(view.drawPane);\n\t\t\tview.canvas.removeChild(view.overlayPane);\n\t\t\tview.drawPane = drawPane;\n\t\t\tview.overlayPane = overlayPane;\n\t\t\tview.setEventsEnabled(eventsEnabled);\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getScaleForPageCount\n\t * \n\t * Returns the scale to be used for printing the graph with the given\n\t * bounds across the specifies number of pages with the given format. The\n\t * scale is always computed such that it given the given amount or fewer\n\t * pages in the print output. See <mxPrintPreview> for an example.\n\t * \n\t * Parameters:\n\t * \n\t * pageCount - Specifies the number of pages in the print output.\n\t * graph - <mxGraph> that should be printed.\n\t * pageFormat - Optional <mxRectangle> that specifies the page format.\n\t * Default is <mxConstants.PAGE_FORMAT_A4_PORTRAIT>.\n\t * border - The border along each side of every page.\n\t */\n\tgetScaleForPageCount: function(pageCount, graph, pageFormat, border)\n\t{\n\t\tif (pageCount < 1)\n\t\t{\n\t\t\t// We can't work with less than 1 page, return no scale\n\t\t\t// change\n\t\t\treturn 1;\n\t\t}\n\t\t\n\t\tpageFormat = (pageFormat != null) ? pageFormat : mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\t\tborder = (border != null) ? border : 0;\n\t\t\n\t\tvar availablePageWidth = pageFormat.width - (border * 2);\n\t\tvar availablePageHeight = pageFormat.height - (border * 2);\n\n\t\t// Work out the number of pages required if the\n\t\t// graph is not scaled.\n\t\tvar graphBounds = graph.getGraphBounds().clone();\n\t\tvar sc = graph.getView().getScale();\n\t\tgraphBounds.width /= sc;\n\t\tgraphBounds.height /= sc;\n\t\tvar graphWidth = graphBounds.width;\n\t\tvar graphHeight = graphBounds.height;\n\n\t\tvar scale = 1;\n\t\t\n\t\t// The ratio of the width/height for each printer page\n\t\tvar pageFormatAspectRatio = availablePageWidth / availablePageHeight;\n\t\t// The ratio of the width/height for the graph to be printer\n\t\tvar graphAspectRatio = graphWidth / graphHeight;\n\t\t\n\t\t// The ratio of horizontal pages / vertical pages for this \n\t\t// graph to maintain its aspect ratio on this page format\n\t\tvar pagesAspectRatio = graphAspectRatio / pageFormatAspectRatio;\n\t\t\n\t\t// Factor the square root of the page count up and down \n\t\t// by the pages aspect ratio to obtain a horizontal and \n\t\t// vertical page count that adds up to the page count\n\t\t// and has the correct aspect ratio\n\t\tvar pageRoot = Math.sqrt(pageCount);\n\t\tvar pagesAspectRatioSqrt = Math.sqrt(pagesAspectRatio);\n\t\tvar numRowPages = pageRoot * pagesAspectRatioSqrt;\n\t\tvar numColumnPages = pageRoot / pagesAspectRatioSqrt;\n\n\t\t// These value are rarely more than 2 rounding downs away from\n\t\t// a total that meets the page count. In cases of one being less \n\t\t// than 1 page, the other value can be too high and take more iterations \n\t\t// In this case, just change that value to be the page count, since \n\t\t// we know the other value is 1\n\t\tif (numRowPages < 1 && numColumnPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numColumnPages / pageCount;\n\t\t\tnumColumnPages = pageCount;\n\t\t\tnumRowPages /= scaleChange;\n\t\t}\n\t\t\n\t\tif (numColumnPages < 1 && numRowPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numRowPages / pageCount;\n\t\t\tnumRowPages = pageCount;\n\t\t\tnumColumnPages /= scaleChange;\n\t\t}\t\t\n\n\t\tvar currentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\n\t\tvar numLoops = 0;\n\t\t\n\t\t// Iterate through while the rounded up number of pages comes to\n\t\t// a total greater than the required number\n\t\twhile (currentTotalPages > pageCount)\n\t\t{\n\t\t\t// Round down the page count (rows or columns) that is\n\t\t\t// closest to its next integer down in percentage terms.\n\t\t\t// i.e. Reduce the page total by reducing the total\n\t\t\t// page area by the least possible amount\n\n\t\t\tvar roundRowDownProportion = Math.floor(numRowPages) / numRowPages;\n\t\t\tvar roundColumnDownProportion = Math.floor(numColumnPages) / numColumnPages;\n\t\t\t\n\t\t\t// If the round down proportion is, work out the proportion to\n\t\t\t// round down to 1 page less\n\t\t\tif (roundRowDownProportion == 1)\n\t\t\t{\n\t\t\t\troundRowDownProportion = Math.floor(numRowPages-1) / numRowPages;\n\t\t\t}\n\t\t\tif (roundColumnDownProportion == 1)\n\t\t\t{\n\t\t\t\troundColumnDownProportion = Math.floor(numColumnPages-1) / numColumnPages;\n\t\t\t}\n\t\t\t\n\t\t\t// Check which rounding down is smaller, but in the case of very small roundings\n\t\t\t// try the other dimension instead\n\t\t\tvar scaleChange = 1;\n\t\t\t\n\t\t\t// Use the higher of the two values\n\t\t\tif (roundRowDownProportion > roundColumnDownProportion)\n\t\t\t{\n\t\t\t\tscaleChange = roundRowDownProportion;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tscaleChange = roundColumnDownProportion;\n\t\t\t}\n\n\t\t\tnumRowPages = numRowPages * scaleChange;\n\t\t\tnumColumnPages = numColumnPages * scaleChange;\n\t\t\tcurrentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\t\t\t\n\t\t\tnumLoops++;\n\t\t\t\n\t\t\tif (numLoops > 10)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Work out the scale from the number of row pages required\n\t\t// The column pages will give the same value\n\t\tvar posterWidth = availablePageWidth * numRowPages;\n\t\tscale = posterWidth / graphWidth;\n\t\t\n\t\t// Allow for rounding errors\n\t\treturn scale * 0.99999;\n\t},\n\t\n\t/**\n\t * Function: show\n\t * \n\t * Copies the styles and the markup from the graph's container into the\n\t * given document and removes all cursor styles. The document is returned.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * If you experience problems with missing stylesheets in IE then try adding\n\t * the domain to the trusted sites.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be copied.\n\t * doc - Document where the new graph is created.\n\t * x0 - X-coordinate of the graph view origin. Default is 0.\n\t * y0 - Y-coordinate of the graph view origin. Default is 0.\n\t * w - Optional width of the graph view.\n\t * h - Optional height of the graph view.\n\t */\n\tshow: function(graph, doc, x0, y0, w, h)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\t\n\t\tif (doc == null)\n\t\t{\n\t\t\tvar wnd = window.open();\n\t\t\tdoc = wnd.document;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.open();\n\t\t}\n\n\t\t// Workaround for missing print output in IE9 standards\n\t\tif (document.documentMode == 9)\n\t\t{\n\t\t\tdoc.writeln('<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"><![endif]-->');\n\t\t}\n\t\t\n\t\tvar bounds = graph.getGraphBounds();\n\t\tvar dx = Math.ceil(x0 - bounds.x);\n\t\tvar dy = Math.ceil(y0 - bounds.y);\n\t\t\n\t\tif (w == null)\n\t\t{\n\t\t\tw = Math.ceil(bounds.width + x0) + Math.ceil(Math.ceil(bounds.x) - bounds.x);\n\t\t}\n\t\t\n\t\tif (h == null)\n\t\t{\n\t\t\th = Math.ceil(bounds.height + y0) + Math.ceil(Math.ceil(bounds.y) - bounds.y);\n\t\t}\n\t\t\n\t\t// Needs a special way of creating the page so that no click is required\n\t\t// to refresh the contents after the external CSS styles have been loaded.\n\t\t// To avoid a click or programmatic refresh, the styleSheets[].cssText\n\t\t// property is copied over from the original document.\n\t\tif (mxClient.IS_IE || document.documentMode == 11)\n\t\t{\n\t\t\tvar html = '<html><head>';\n\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\thtml += base[i].outerHTML;\n\t\t\t}\n\n\t\t\thtml += '<style>';\n\n\t\t\t// Copies the stylesheets without having to load them again\n\t\t\tfor (var i = 0; i < document.styleSheets.length; i++)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\thtml += document.styleSheets[i].cssText;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore security exception\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thtml += '</style></head><body style=\"margin:0px;\">';\n\t\t\t\n\t\t\t// Copies the contents of the graph container\n\t\t\thtml += '<div style=\"position:absolute;overflow:hidden;width:' + w + 'px;height:' + h + 'px;\"><div style=\"position:relative;left:' + dx + 'px;top:' + dy + 'px;\">';\n\t\t\thtml += graph.container.innerHTML;\n\t\t\thtml += '</div></div></body><html>';\n\n\t\t\tdoc.writeln(html);\n\t\t\tdoc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.writeln('<html><head>');\n\t\t\t\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(base[i]));\n\t\t\t}\n\t\t\t\n\t\t\tvar links = document.getElementsByTagName('link');\n\t\t\t\n\t\t\tfor (var i = 0; i < links.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(links[i]));\n\t\t\t}\n\t\n\t\t\tvar styles = document.getElementsByTagName('style');\n\t\t\t\n\t\t\tfor (var i = 0; i < styles.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(styles[i]));\n\t\t\t}\n\n\t\t\tdoc.writeln('</head><body style=\"margin:0px;\"></body></html>');\n\t\t\tdoc.close();\n\n\t\t\tvar outer = doc.createElement('div');\n\t\t\touter.position = 'absolute';\n\t\t\touter.overflow = 'hidden';\n\t\t\touter.style.width = w + 'px';\n\t\t\touter.style.height = h + 'px';\n\n\t\t\t// Required for HTML labels if foreignObjects are disabled\n\t\t\tvar div = doc.createElement('div');\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.left = dx + 'px';\n\t\t\tdiv.style.top = dy + 'px';\n\n\t\t\tvar node = graph.container.firstChild;\n\t\t\tvar svg = null;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tvar clone = node.cloneNode(true);\n\t\t\t\t\n\t\t\t\tif (node == graph.view.drawPane.ownerSVGElement)\n\t\t\t\t{\n\t\t\t\t\touter.appendChild(clone);\n\t\t\t\t\tsvg = clone;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdiv.appendChild(clone);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\n\t\t\tdoc.body.appendChild(outer);\n\t\t\t\n\t\t\tif (div.firstChild != null)\n\t\t\t{\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif (svg != null)\n\t\t\t{\n\t\t\t\tsvg.style.minWidth = '';\n\t\t\t\tsvg.style.minHeight = '';\n\t\t\t\tsvg.firstChild.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t}\n\t\t}\n\t\t\n\t\tmxUtils.removeCursors(doc.body);\n\t\n\t\treturn doc;\n\t},\n\t\n\t/**\n\t * Function: printScreen\n\t * \n\t * Prints the specified graph using a new window and the built-in print\n\t * dialog.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be printed.\n\t */\n\tprintScreen: function(graph)\n\t{\n\t\tvar wnd = window.open();\n\t\tvar bounds = graph.getGraphBounds();\n\t\tmxUtils.show(graph, wnd.document);\n\t\t\n\t\tvar print = function()\n\t\t{\n\t\t\twnd.focus();\n\t\t\twnd.print();\n\t\t\twnd.close();\n\t\t};\n\t\t\n\t\t// Workaround for Google Chrome which needs a bit of a\n\t\t// delay in order to render the SVG contents\n\t\tif (mxClient.IS_GC)\n\t\t{\n\t\t\twnd.setTimeout(print, 500);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: popup\n\t * \n\t * Shows the specified text content in a new <mxWindow> or a new browser\n\t * window if isInternalWindow is false.\n\t * \n\t * Parameters:\n\t * \n\t * content - String that specifies the text to be displayed.\n\t * isInternalWindow - Optional boolean indicating if an mxWindow should be\n\t * used instead of a new browser window. Default is false.\n\t */\n\tpopup: function(content, isInternalWindow)\n\t{\n\t   \tif (isInternalWindow)\n\t   \t{\n\t\t\tvar div = document.createElement('div');\n\t\t\t\n\t\t\tdiv.style.overflow = 'scroll';\n\t\t\tdiv.style.width = '636px';\n\t\t\tdiv.style.height = '460px';\n\t\t\t\n\t\t\tvar pre = document.createElement('pre');\n\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t\n\t\t\tdiv.appendChild(pre);\n\t\t\t\n\t\t\tvar w = document.body.clientWidth;\n\t\t\tvar h = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight)\n\t\t\tvar wnd = new mxWindow('Popup Window', div,\n\t\t\t\tw/2-320, h/2-240, 640, 480, false, true);\n\n\t\t\twnd.setClosable(true);\n\t\t\twnd.setVisible(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Wraps up the XML content in a textarea\n\t\t\tif (mxClient.IS_NS)\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t\twnd.document.writeln('<pre>'+mxUtils.htmlEntities(content)+'</pre');\n\t\t\t   \twnd.document.close();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t    var pre = wnd.document.createElement('pre');\n\t\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t   \twnd.document.body.appendChild(pre);\n\t\t\t}\n\t   \t}\n\t},\n\t\n\t/**\n\t * Function: alert\n\t * \n\t * Displayss the given alert in a new dialog. This implementation uses the\n\t * built-in alert function. This is used to display validation errors when\n\t * connections cannot be changed or created.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\talert: function(message)\n\t{\n\t\talert(message);\n\t},\n\t\n\t/**\n\t * Function: prompt\n\t * \n\t * Displays the given message in a prompt dialog. This implementation uses\n\t * the built-in prompt function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * defaultValue - Optional string specifying the default value.\n\t */\n\tprompt: function(message, defaultValue)\n\t{\n\t\treturn prompt(message, (defaultValue != null) ? defaultValue : '');\n\t},\n\t\n\t/**\n\t * Function: confirm\n\t * \n\t * Displays the given message in a confirm dialog. This implementation uses\n\t * the built-in confirm function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\tconfirm: function(message)\n\t{\n\t\treturn confirm(message);\n\t},\n\n\t/**\n\t * Function: error\n\t * \n\t * Displays the given error message in a new <mxWindow> of the given width.\n\t * If close is true then an additional close button is added to the window.\n\t * The optional icon specifies the icon to be used for the window. Default\n\t * is <mxUtils.errorImage>.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * width - Integer specifying the width of the window.\n\t * close - Optional boolean indicating whether to add a close button.\n\t * icon - Optional icon for the window decoration.\n\t */\n\terror: function(message, width, close, icon)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '20px';\n\n\t\tvar img = document.createElement('img');\n\t\timg.setAttribute('src', icon || mxUtils.errorImage);\n\t\timg.setAttribute('valign', 'bottom');\n\t\timg.style.verticalAlign = 'middle';\n\t\tdiv.appendChild(img);\n\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tmxUtils.write(div, message);\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\tvar warn = new mxWindow(mxResources.get(mxUtils.errorResource) ||\n\t\t\tmxUtils.errorResource, div, (w-width)/2, h/4, width, null,\n\t\t\tfalse, true);\n\n\t\tif (close)\n\t\t{\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\tvar tmp = document.createElement('p');\n\t\t\tvar button = document.createElement('button');\n\n\t\t\tif (mxClient.IS_IE)\n\t\t\t{\n\t\t\t\tbutton.style.cssText = 'float:right';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbutton.setAttribute('style', 'float:right');\n\t\t\t}\n\n\t\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t\t{\n\t\t\t\twarn.destroy();\n\t\t\t});\n\n\t\t\tmxUtils.write(button, mxResources.get(mxUtils.closeResource) ||\n\t\t\t\tmxUtils.closeResource);\n\t\t\t\n\t\t\ttmp.appendChild(button);\n\t\t\tdiv.appendChild(tmp);\n\t\t\t\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\twarn.setClosable(true);\n\t\t}\n\t\t\n\t\twarn.setVisible(true);\n\t\t\n\t\treturn warn;\n\t},\n\n\t/**\n\t * Function: makeDraggable\n\t * \n\t * Configures the given DOM element to act as a drag source for the\n\t * specified graph. Returns a a new <mxDragSource>. If\n\t * <mxDragSource.guideEnabled> is enabled then the x and y arguments must\n\t * be used in funct to match the preview location.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var funct = function(graph, evt, cell, x, y)\n\t * {\n\t *   if (graph.canImportCell(cell))\n\t *   {\n\t *     var parent = graph.getDefaultParent();\n\t *     var vertex = null;\n\t *     \n\t *     graph.getModel().beginUpdate();\n\t *     try\n\t *     {\n\t * \t     vertex = graph.insertVertex(parent, null, 'Hello', x, y, 80, 30);\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.getModel().endUpdate();\n\t *     }\n\t *\n\t *     graph.setSelectionCell(vertex);\n\t *   }\n\t * }\n\t * \n\t * var img = document.createElement('img');\n\t * img.setAttribute('src', 'editors/images/rectangle.gif');\n\t * img.style.position = 'absolute';\n\t * img.style.left = '0px';\n\t * img.style.top = '0px';\n\t * img.style.width = '16px';\n\t * img.style.height = '16px';\n\t * \n\t * var dragImage = img.cloneNode(true);\n\t * dragImage.style.width = '32px';\n\t * dragImage.style.height = '32px';\n\t * mxUtils.makeDraggable(img, graph, funct, dragImage);\n\t * document.body.appendChild(img);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM element to make draggable.\n\t * graphF - <mxGraph> that acts as the drop target or a function that takes a\n\t * mouse event and returns the current <mxGraph>.\n\t * funct - Function to execute on a successful drop.\n\t * dragElement - Optional DOM node to be used for the drag preview.\n\t * dx - Optional horizontal offset between the cursor and the drag\n\t * preview.\n\t * dy - Optional vertical offset between the cursor and the drag\n\t * preview.\n\t * autoscroll - Optional boolean that specifies if autoscroll should be\n\t * used. Default is mxGraph.autoscroll.\n\t * scalePreview - Optional boolean that specifies if the preview element\n\t * should be scaled according to the graph scale. If this is true, then\n\t * the offsets will also be scaled. Default is false.\n\t * highlightDropTargets - Optional boolean that specifies if dropTargets\n\t * should be highlighted. Default is true.\n\t * getDropTarget - Optional function to return the drop target for a given\n\t * location (x, y). Default is mxGraph.getCellAt.\n\t */\n\tmakeDraggable: function(element, graphF, funct, dragElement, dx, dy, autoscroll,\n\t\t\tscalePreview, highlightDropTargets, getDropTarget)\n\t{\n\t\tvar dragSource = new mxDragSource(element, funct);\n\t\tdragSource.dragOffset = new mxPoint((dx != null) ? dx : 0,\n\t\t\t(dy != null) ? dy : mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\t\tdragSource.autoscroll = autoscroll;\n\t\t\n\t\t// Cannot enable this by default. This needs to be enabled in the caller\n\t\t// if the funct argument uses the new x- and y-arguments.\n\t\tdragSource.setGuidesEnabled(false);\n\t\t\n\t\tif (highlightDropTargets != null)\n\t\t{\n\t\t\tdragSource.highlightDropTargets = highlightDropTargets;\n\t\t}\n\t\t\n\t\t// Overrides function to find drop target cell\n\t\tif (getDropTarget != null)\n\t\t{\n\t\t\tdragSource.getDropTarget = getDropTarget;\n\t\t}\n\t\t\n\t\t// Overrides function to get current graph\n\t\tdragSource.getGraphForEvent = function(evt)\n\t\t{\n\t\t\treturn (typeof(graphF) == 'function') ? graphF(evt) : graphF;\n\t\t};\n\t\t\n\t\t// Translates switches into dragSource customizations\n\t\tif (dragElement != null)\n\t\t{\n\t\t\tdragSource.createDragElement = function()\n\t\t\t{\n\t\t\t\treturn dragElement.cloneNode(true);\n\t\t\t};\n\t\t\t\n\t\t\tif (scalePreview)\n\t\t\t{\n\t\t\t\tdragSource.createPreviewElement = function(graph)\n\t\t\t\t{\n\t\t\t\t\tvar elt = dragElement.cloneNode(true);\n\n\t\t\t\t\tvar w = parseInt(elt.style.width);\n\t\t\t\t\tvar h = parseInt(elt.style.height);\n\t\t\t\t\telt.style.width = Math.round(w * graph.view.scale) + 'px';\n\t\t\t\t\telt.style.height = Math.round(h * graph.view.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\treturn elt;\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dragSource;\n\t}\n\n};\n\n__mxOutput.mxUtils = typeof mxUtils !== 'undefined' ? mxUtils : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n var mxConstants =\n {\n\t/**\n\t * Class: mxConstants\n\t * \n\t * Defines various global constants.\n\t * \n\t * Variable: DEFAULT_HOTSPOT\n\t * \n\t * Defines the portion of the cell which is to be used as a connectable\n\t * region. Default is 0.3. Possible values are 0 < x <= 1. \n\t */\n\tDEFAULT_HOTSPOT: 0.3,\n\n\t/**\n\t * Variable: MIN_HOTSPOT_SIZE\n\t * \n\t * Defines the minimum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Default is 8.\n\t */\n\tMIN_HOTSPOT_SIZE: 8,\n\n\t/**\n\t * Variable: MAX_HOTSPOT_SIZE\n\t * \n\t * Defines the maximum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Use 0 for no maximum. Default is 0.\n\t */\n\tMAX_HOTSPOT_SIZE: 0,\n\n\t/**\n\t * Variable: RENDERING_HINT_EXACT\n\t * \n\t * Defines the exact rendering hint.\n\t */\n\tRENDERING_HINT_EXACT: 'exact',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTER\n\t * \n\t * Defines the faster rendering hint.\n\t */\n\tRENDERING_HINT_FASTER: 'faster',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTEST\n\t * \n\t * Defines the fastest rendering hint.\n\t */\n\tRENDERING_HINT_FASTEST: 'fastest',\n\n\t/**\n\t * Variable: DIALECT_SVG\n\t * \n\t * Defines the SVG display dialect name.\n\t */\n\tDIALECT_SVG: 'svg',\n\n\t/**\n\t * Variable: DIALECT_VML\n\t * \n\t * Defines the VML display dialect name.\n\t */\n\tDIALECT_VML: 'vml',\n\n\t/**\n\t * Variable: DIALECT_MIXEDHTML\n\t * \n\t * Defines the mixed HTML display dialect name.\n\t */\n\tDIALECT_MIXEDHTML: 'mixedHtml',\n\n\t/**\n\t * Variable: DIALECT_PREFERHTML\n\t * \n\t * Defines the preferred HTML display dialect name.\n\t */\n\tDIALECT_PREFERHTML: 'preferHtml',\n\n\t/**\n\t * Variable: DIALECT_STRICTHTML\n\t * \n\t * Defines the strict HTML display dialect.\n\t */\n\tDIALECT_STRICTHTML: 'strictHtml',\n\n\t/**\n\t * Variable: NS_SVG\n\t * \n\t * Defines the SVG namespace.\n\t */\n\tNS_SVG: 'http://www.w3.org/2000/svg',\n\n\t/**\n\t * Variable: NS_XHTML\n\t * \n\t * Defines the XHTML namespace.\n\t */\n\tNS_XHTML: 'http://www.w3.org/1999/xhtml',\n\n\t/**\n\t * Variable: NS_XLINK\n\t * \n\t * Defines the XLink namespace.\n\t */\n\tNS_XLINK: 'http://www.w3.org/1999/xlink',\n\n\t/**\n\t * Variable: SHADOWCOLOR\n\t * \n\t * Defines the color to be used to draw shadows in shapes and windows.\n\t * Default is gray.\n\t */\n\tSHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: VML_SHADOWCOLOR\n\t * \n\t * Used for shadow color in filters where transparency is not supported\n\t * (Microsoft Internet Explorer). Default is gray.\n\t */\n\tVML_SHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: SHADOW_OFFSET_X\n\t * \n\t * Specifies the x-offset of the shadow. Default is 2.\n\t */\n\tSHADOW_OFFSET_X: 2,\n\n\t/**\n\t * Variable: SHADOW_OFFSET_Y\n\t * \n\t * Specifies the y-offset of the shadow. Default is 3.\n\t */\n\tSHADOW_OFFSET_Y: 3,\n\t\n\t/**\n\t * Variable: SHADOW_OPACITY\n\t * \n\t * Defines the opacity for shadows. Default is 1.\n\t */\n\tSHADOW_OPACITY: 1,\n \n\t/**\n\t * Variable: NODETYPE_ELEMENT\n\t * \n\t * DOM node of type ELEMENT.\n\t */\n\tNODETYPE_ELEMENT: 1,\n\n\t/**\n\t * Variable: NODETYPE_ATTRIBUTE\n\t * \n\t * DOM node of type ATTRIBUTE.\n\t */\n\tNODETYPE_ATTRIBUTE: 2,\n\n\t/**\n\t * Variable: NODETYPE_TEXT\n\t * \n\t * DOM node of type TEXT.\n\t */\n\tNODETYPE_TEXT: 3,\n\n\t/**\n\t * Variable: NODETYPE_CDATA\n\t * \n\t * DOM node of type CDATA.\n\t */\n\tNODETYPE_CDATA: 4,\n\t\n\t/**\n\t * Variable: NODETYPE_ENTITY_REFERENCE\n\t * \n\t * DOM node of type ENTITY_REFERENCE.\n\t */\n\tNODETYPE_ENTITY_REFERENCE: 5,\n\n\t/**\n\t * Variable: NODETYPE_ENTITY\n\t * \n\t * DOM node of type ENTITY.\n\t */\n\tNODETYPE_ENTITY: 6,\n\n\t/**\n\t * Variable: NODETYPE_PROCESSING_INSTRUCTION\n\t * \n\t * DOM node of type PROCESSING_INSTRUCTION.\n\t */\n\tNODETYPE_PROCESSING_INSTRUCTION: 7,\n\n\t/**\n\t * Variable: NODETYPE_COMMENT\n\t * \n\t * DOM node of type COMMENT.\n\t */\n\tNODETYPE_COMMENT: 8,\n\t\t\n\t/**\n\t * Variable: NODETYPE_DOCUMENT\n\t * \n\t * DOM node of type DOCUMENT.\n\t */\n\tNODETYPE_DOCUMENT: 9,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENTTYPE\n\t * \n\t * DOM node of type DOCUMENTTYPE.\n\t */\n\tNODETYPE_DOCUMENTTYPE: 10,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENT_FRAGMENT\n\t * \n\t * DOM node of type DOCUMENT_FRAGMENT.\n\t */\n\tNODETYPE_DOCUMENT_FRAGMENT: 11,\n\n\t/**\n\t * Variable: NODETYPE_NOTATION\n\t * \n\t * DOM node of type NOTATION.\n\t */\n\tNODETYPE_NOTATION: 12,\n\t\n\t/**\n\t * Variable: TOOLTIP_VERTICAL_OFFSET\n\t * \n\t * Defines the vertical offset for the tooltip.\n\t * Default is 16.\n\t */\n\tTOOLTIP_VERTICAL_OFFSET: 16,\n\n\t/**\n\t * Variable: DEFAULT_VALID_COLOR\n\t * \n\t * Specifies the default valid color. Default is #0000FF.\n\t */\n\tDEFAULT_VALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: DEFAULT_INVALID_COLOR\n\t * \n\t * Specifies the default invalid color. Default is #FF0000.\n\t */\n\tDEFAULT_INVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Specifies the default highlight color for shape outlines.\n\t * Default is #0000FF. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Defines the strokewidth to be used for shape outlines.\n\t * Default is 5. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_STROKEWIDTH: 5,\n\n\t/**\n\t * Variable: HIGHLIGHT_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the highlights.\n\t * Default is 3.\n\t */\n\tHIGHLIGHT_STROKEWIDTH: 3,\n\n\t/**\n\t * Variable: CONSTRAINT_HIGHLIGHT_SIZE\n\t * \n\t * Size of the constraint highlight (in px). Default is 2.\n\t */\n\tHIGHLIGHT_SIZE: 2,\n\t\n\t/**\n\t * Variable: HIGHLIGHT_OPACITY\n\t * \n\t * Opacity (in %) used for the highlights (including outline).\n\t * Default is 100.\n\t */\n\tHIGHLIGHT_OPACITY: 100,\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_VERTEX\n\t * \n\t * Defines the cursor for a movable vertex. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_VERTEX: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_EDGE\n\t * \n\t * Defines the cursor for a movable edge. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_EDGE: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_LABEL_HANDLE\n\t * \n\t * Defines the cursor for a movable label. Default is 'default'.\n\t */\n\tCURSOR_LABEL_HANDLE: 'default',\n\t\n\t/**\n\t * Variable: CURSOR_TERMINAL_HANDLE\n\t * \n\t * Defines the cursor for a terminal handle. Default is 'pointer'.\n\t */\n\tCURSOR_TERMINAL_HANDLE: 'pointer',\n\t\n\t/**\n\t * Variable: CURSOR_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_BEND_HANDLE: 'crosshair',\n\n\t/**\n\t * Variable: CURSOR_VIRTUAL_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_VIRTUAL_BEND_HANDLE: 'crosshair',\n\t\n\t/**\n\t * Variable: CURSOR_CONNECT\n\t * \n\t * Defines the cursor for a connectable state. Default is 'pointer'.\n\t */\n\tCURSOR_CONNECT: 'pointer',\n\n\t/**\n\t * Variable: HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for the cell highlighting.\n\t * Use 'none' for no color. Default is #00FF00.\n\t */\n\tHIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: TARGET_HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for highlighting a target cell for a new\n\t * or changed connection. Note that this may be either a source or\n\t * target terminal in the graph. Use 'none' for no color.\n\t * Default is #0000FF.\n\t */\n\tCONNECT_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: INVALID_CONNECT_TARGET_COLOR\n\t * \n\t * Defines the color to be used for highlighting a invalid target cells\n\t * for a new or changed connections. Note that this may be either a source\n\t * or target terminal in the graph. Use 'none' for no color. Default is\n\t * #FF0000.\n\t */\n\tINVALID_CONNECT_TARGET_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: DROP_TARGET_COLOR\n\t * \n\t * Defines the color to be used for the highlighting target parent cells\n\t * (for drag and drop). Use 'none' for no color. Default is #0000FF.\n\t */\n\tDROP_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: VALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring valid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tVALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: INVALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring invalid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tINVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: EDGE_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of edges. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tEDGE_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of vertices. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tVERTEX_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for vertex selections.\n\t * Default is 1.\n\t */\n\tVERTEX_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: EDGE_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for edge selections.\n\t * Default is 1.\n\t */\n\tEDGE_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the vertex selection\n\t * border. Default is true.\n\t */\n\tVERTEX_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the edge selection\n\t * border. Default is true.\n\t */\n\tEDGE_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: GUIDE_COLOR\n\t * \n\t * Defines the color to be used for the guidelines in mxGraphHandler.\n\t * Default is #FF0000.\n\t */\n\tGUIDE_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: GUIDE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the guidelines in mxGraphHandler.\n\t * Default is 1.\n\t */\n\tGUIDE_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: OUTLINE_COLOR\n\t * \n\t * Defines the color to be used for the outline rectangle\n\t * border.  Use 'none' for no color. Default is #0099FF.\n\t */\n\tOUTLINE_COLOR: '#0099FF',\n\n\t/**\n\t * Variable: OUTLINE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the outline rectangle\n\t * stroke width. Default is 3.\n\t */\n\tOUTLINE_STROKEWIDTH: (mxClient.IS_IE) ? 2 : 3,\n\n\t/**\n\t * Variable: HANDLE_SIZE\n\t * \n\t * Defines the default size for handles. Default is 6.\n\t */\n\tHANDLE_SIZE: 6,\n\n\t/**\n\t * Variable: LABEL_HANDLE_SIZE\n\t * \n\t * Defines the default size for label handles. Default is 4.\n\t */\n\tLABEL_HANDLE_SIZE: 4,\n\n\t/**\n\t * Variable: HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the handle fill color. Use 'none' for\n\t * no color. Default is #00FF00 (green).\n\t */\n\tHANDLE_FILLCOLOR: '#00FF00',\n\n\t/**\n\t * Variable: HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the handle stroke color. Use 'none' for\n\t * no color. Default is black.\n\t */\n\tHANDLE_STROKECOLOR: 'black',\n\n\t/**\n\t * Variable: LABEL_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the label handle fill color. Use 'none'\n\t * for no color. Default is yellow.\n\t */\n\tLABEL_HANDLE_FILLCOLOR: 'yellow',\n\n\t/**\n\t * Variable: CONNECT_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the connect handle fill color. Use\n\t * 'none' for no color. Default is #0000FF (blue).\n\t */\n\tCONNECT_HANDLE_FILLCOLOR: '#0000FF',\n\n\t/**\n\t * Variable: LOCKED_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the locked handle fill color. Use\n\t * 'none' for no color. Default is #FF0000 (red).\n\t */\n\tLOCKED_HANDLE_FILLCOLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the outline sizer fill color. Use\n\t * 'none' for no color. Default is #00FFFF.\n\t */\n\tOUTLINE_HANDLE_FILLCOLOR: '#00FFFF',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the outline sizer stroke color. Use\n\t * 'none' for no color. Default is #0033FF.\n\t */\n\tOUTLINE_HANDLE_STROKECOLOR: '#0033FF',\n\n\t/**\n\t * Variable: DEFAULT_FONTFAMILY\n\t * \n\t * Defines the default family for all fonts. Default is Arial,Helvetica.\n\t */\n\tDEFAULT_FONTFAMILY: 'Arial,Helvetica',\n\n\t/**\n\t * Variable: DEFAULT_FONTSIZE\n\t * \n\t * Defines the default size (in px). Default is 11.\n\t */\n\tDEFAULT_FONTSIZE: 11,\n\n\t/**\n\t * Variable: DEFAULT_TEXT_DIRECTION\n\t * \n\t * Defines the default value for the <STYLE_TEXT_DIRECTION> if no value is\n\t * defined for it in the style. Default value is an empty string which means\n\t * the default system setting is used and no direction is set.\n\t */\n\tDEFAULT_TEXT_DIRECTION: '',\n\n\t/**\n\t * Variable: LINE_HEIGHT\n\t * \n\t * Defines the default line height for text labels. Default is 1.2.\n\t */\n\tLINE_HEIGHT: 1.2,\n\n\t/**\n\t * Variable: WORD_WRAP\n\t * \n\t * Defines the CSS value for the word-wrap property. Default is \"normal\".\n\t * Change this to \"break-word\" to allow long words to be able to be broken\n\t * and wrap onto the next line.\n\t */\n\tWORD_WRAP: 'normal',\n\n\t/**\n\t * Variable: ABSOLUTE_LINE_HEIGHT\n\t * \n\t * Specifies if absolute line heights should be used (px) in CSS. Default\n\t * is false. Set this to true for backwards compatibility.\n\t */\n\tABSOLUTE_LINE_HEIGHT: false,\n\n\t/**\n\t * Variable: DEFAULT_FONTSTYLE\n\t * \n\t * Defines the default style for all fonts. Default is 0. This can be set\n\t * to any combination of font styles as follows.\n\t * \n\t * (code)\n\t * mxConstants.DEFAULT_FONTSTYLE = mxConstants.FONT_BOLD | mxConstants.FONT_ITALIC;\n\t * (end)\n\t */\n\tDEFAULT_FONTSTYLE: 0,\n\n\t/**\n\t * Variable: DEFAULT_STARTSIZE\n\t * \n\t * Defines the default start size for swimlanes. Default is 40.\n\t */\n\tDEFAULT_STARTSIZE: 40,\n\n\t/**\n\t * Variable: DEFAULT_MARKERSIZE\n\t * \n\t * Defines the default size for all markers. Default is 6.\n\t */\n\tDEFAULT_MARKERSIZE: 6,\n\n\t/**\n\t * Variable: DEFAULT_IMAGESIZE\n\t * \n\t * Defines the default width and height for images used in the\n\t * label shape. Default is 24.\n\t */\n\tDEFAULT_IMAGESIZE: 24,\n\n\t/**\n\t * Variable: ENTITY_SEGMENT\n\t * \n\t * Defines the length of the horizontal segment of an Entity Relation.\n\t * This can be overridden using <mxConstants.STYLE_SEGMENT> style.\n\t * Default is 30.\n\t */\n\tENTITY_SEGMENT: 30,\n\n\t/**\n\t * Variable: RECTANGLE_ROUNDING_FACTOR\n\t * \n\t * Defines the rounding factor for rounded rectangles in percent between\n\t * 0 and 1. Values should be smaller than 0.5. Default is 0.15.\n\t */\n\tRECTANGLE_ROUNDING_FACTOR: 0.15,\n\n\t/**\n\t * Variable: LINE_ARCSIZE\n\t * \n\t * Defines the size of the arcs for rounded edges. Default is 20.\n\t */\n\tLINE_ARCSIZE: 20,\n\n\t/**\n\t * Variable: ARROW_SPACING\n\t * \n\t * Defines the spacing between the arrow shape and its terminals. Default is 0.\n\t */\n\tARROW_SPACING: 0,\n\n\t/**\n\t * Variable: ARROW_WIDTH\n\t * \n\t * Defines the width of the arrow shape. Default is 30.\n\t */\n\tARROW_WIDTH: 30,\n\n\t/**\n\t * Variable: ARROW_SIZE\n\t * \n\t * Defines the size of the arrowhead in the arrow shape. Default is 30.\n\t */\n\tARROW_SIZE: 30,\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_PORTRAIT: new mxRectangle(0, 0, 827, 1169),\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_LANDSCAPE: new mxRectangle(0, 0, 1169, 827),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The\n\t * dimensions of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_PORTRAIT: new mxRectangle(0, 0, 850, 1100),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The dimensions\n\t * of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_LANDSCAPE: new mxRectangle(0, 0, 1100, 850),\n\n\t/**\n\t * Variable: NONE\n\t * \n\t * Defines the value for none. Default is \"none\".\n\t */\n\tNONE: 'none',\n\n\t/**\n\t * Variable: STYLE_PERIMETER\n\t * \n\t * Defines the key for the perimeter style. This is a function that defines\n\t * the perimeter around a particular shape. Possible values are the\n\t * functions defined in <mxPerimeter>. Alternatively, the constants in this\n\t * class that start with \"PERIMETER_\" may be used to access\n\t * perimeter styles in <mxStyleRegistry>. Value is \"perimeter\".\n\t */\n\tSTYLE_PERIMETER: 'perimeter',\n\t\n\t/**\n\t * Variable: STYLE_SOURCE_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the source for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"sourcePort\".\n\t */\n\tSTYLE_SOURCE_PORT: 'sourcePort',\n\t\n\t/**\n\t * Variable: STYLE_TARGET_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the target for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"targetPort\".\n\t */\n\tSTYLE_TARGET_PORT: 'targetPort',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to cells in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, \n\t * DIRECTION_EAST\" and \"DIRECTION_WEST\". Value is\n\t * \"portConstraint\".\n\t */\n\tSTYLE_PORT_CONSTRAINT: 'portConstraint',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT_ROTATION\n\t * \n\t * Define whether port constraint directions are rotated with vertex\n\t * rotation. 0 (default) causes port constraints to remain absolute, \n\t * relative to the graph, 1 causes the constraints to rotate with\n\t * the vertex. Value is \"portConstraintRotation\".\n\t */\n\tSTYLE_PORT_CONSTRAINT_ROTATION: 'portConstraintRotation',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to sources in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"sourcePortConstraint\".\n\t */\n\tSTYLE_SOURCE_PORT_CONSTRAINT: 'sourcePortConstraint',\n\n\t/**\n\t * Variable: STYLE_TARGET_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to targets in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"targetPortConstraint\".\n\t */\n\tSTYLE_TARGET_PORT_CONSTRAINT: 'targetPortConstraint',\n\n\t/**\n\t * Variable: STYLE_OPACITY\n\t * \n\t * Defines the key for the opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"opacity\".\n\t */\n\tSTYLE_OPACITY: 'opacity',\n\n\t/**\n\t * Variable: STYLE_FILL_OPACITY\n\t * \n\t * Defines the key for the fill opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"fillOpacity\".\n\t */\n\tSTYLE_FILL_OPACITY: 'fillOpacity',\n\n\t/**\n\t * Variable: STYLE_STROKE_OPACITY\n\t * \n\t * Defines the key for the stroke opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"strokeOpacity\".\n\t */\n\tSTYLE_STROKE_OPACITY: 'strokeOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_OPACITY\n\t * \n\t * Defines the key for the text opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"textOpacity\".\n\t */\n\tSTYLE_TEXT_OPACITY: 'textOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_DIRECTION\n\t * \n\t * Defines the key for the text direction style. Possible values are\n\t * \"TEXT_DIRECTION_DEFAULT, TEXT_DIRECTION_AUTO, TEXT_DIRECTION_LTR\"\n\t * and \"TEXT_DIRECTION_RTL\". Value is \"textDirection\".\n\t * The default value for the style is defined in <DEFAULT_TEXT_DIRECTION>.\n\t * It is used is no value is defined for this key in a given style. This is\n\t * an experimental style that is currently ignored in the backends.\n\t */\n\tSTYLE_TEXT_DIRECTION: 'textDirection',\n\n\t/**\n\t * Variable: STYLE_OVERFLOW\n\t * \n\t * Defines the key for the overflow style. Possible values are 'visible',\n\t * 'hidden', 'fill' and 'width'. The default value is 'visible'. This value\n\t * specifies how overlapping vertex labels are handled. A value of\n\t * 'visible' will show the complete label. A value of 'hidden' will clip\n\t * the label so that it does not overlap the vertex bounds. A value of\n\t * 'fill' will use the vertex bounds and a value of 'width' will use the\n\t * vertex width for the label. See <mxGraph.isLabelClipped>. Note that\n\t * the vertical alignment is ignored for overflow fill and for horizontal\n\t * alignment, left should be used to avoid pixel offsets in Internet Explorer\n\t * 11 and earlier or if foreignObjects are disabled. Value is \"overflow\".\n\t */\n\tSTYLE_OVERFLOW: 'overflow',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL\n\t * \n\t * Defines if the connection points on either end of the edge should be\n\t * computed so that the edge is vertical or horizontal if possible and\n\t * if the point is not at a fixed location. Default is false. This is\n\t * used in <mxGraph.isOrthogonal>, which also returns true if the edgeStyle\n\t * of the edge is an elbow or entity. Value is \"orthogonal\".\n\t */\n\tSTYLE_ORTHOGONAL: 'orthogonal',\n\n\t/**\n\t * Variable: STYLE_EXIT_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitX\".\n\t */\n\tSTYLE_EXIT_X: 'exitX',\n\n\t/**\n\t * Variable: STYLE_EXIT_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitY\".\n\t */\n\tSTYLE_EXIT_Y: 'exitY',\n\n\t\n\t/**\n\t* Variable: STYLE_EXIT_DX\n\t* \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDx\".\n\t*/\n\tSTYLE_EXIT_DX: 'exitDx',\n\n\t/**\n\t* Variable: STYLE_EXIT_DY\n\t* \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDy\".\n\t*/\n\tSTYLE_EXIT_DY: 'exitDy',\n\t\n\t/**\n\t * Variable: STYLE_EXIT_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the source. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"exitPerimeter\".\n\t */\n\tSTYLE_EXIT_PERIMETER: 'exitPerimeter',\n\n\t/**\n\t * Variable: STYLE_ENTRY_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryX\".\n\t */\n\tSTYLE_ENTRY_X: 'entryX',\n\n\t/**\n\t * Variable: STYLE_ENTRY_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryY\".\n\t */\n\tSTYLE_ENTRY_Y: 'entryY',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DX\n\t * \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDx\".\n\t*/\n\tSTYLE_ENTRY_DX: 'entryDx',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DY\n\t * \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDy\".\n\t*/\n\tSTYLE_ENTRY_DY: 'entryDy',\n\n\t/**\n\t * Variable: STYLE_ENTRY_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the target. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"entryPerimeter\".\n\t */\n\tSTYLE_ENTRY_PERIMETER: 'entryPerimeter',\n\n\t/**\n\t * Variable: STYLE_WHITE_SPACE\n\t * \n\t * Defines the key for the white-space style. Possible values are 'nowrap'\n\t * and 'wrap'. The default value is 'nowrap'. This value specifies how\n\t * white-space inside a HTML vertex label should be handled. A value of\n\t * 'nowrap' means the text will never wrap to the next line until a\n\t * linefeed is encountered. A value of 'wrap' means text will wrap when\n\t * necessary. This style is only used for HTML labels.\n\t * See <mxGraph.isWrapping>. Value is \"whiteSpace\".\n\t */\n\tSTYLE_WHITE_SPACE: 'whiteSpace',\n\n\t/**\n\t * Variable: STYLE_ROTATION\n\t * \n\t * Defines the key for the rotation style. The type of the value is \n\t * numeric and the possible range is 0-360. Value is \"rotation\".\n\t */\n\tSTYLE_ROTATION: 'rotation',\n\n\t/**\n\t * Variable: STYLE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. Value is \"fillColor\".\n\t */\n\tSTYLE_FILLCOLOR: 'fillColor',\n\n\t/**\n\t * Variable: STYLE_POINTER_EVENTS\n\t * \n\t * Specifies if pointer events should be fired on transparent backgrounds.\n\t * This style is currently only supported in <mxRectangleShape>. Default\n\t * is true. Value is \"pointerEvents\". This is typically set to\n\t * false in groups where the transparent part should allow any underlying\n\t * cells to be clickable.\n\t */\n\tSTYLE_POINTER_EVENTS: 'pointerEvents',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color of the swimlane background. Possible\n\t * values are all HTML color names or HEX codes. Default is no background.\n\t * Value is \"swimlaneFillColor\".\n\t */\n\tSTYLE_SWIMLANE_FILLCOLOR: 'swimlaneFillColor',\n\n\t/**\n\t * Variable: STYLE_MARGIN\n\t * \n\t * Defines the key for the margin between the ellipses in the double ellipse shape.\n\t * Possible values are all positive numbers. Value is \"margin\".\n\t */\n\tSTYLE_MARGIN: 'margin',\n\n\t/**\n\t * Variable: STYLE_GRADIENTCOLOR\n\t * \n\t * Defines the key for the gradient color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. This is ignored if no fill color is defined. Value is\n\t * \"gradientColor\".\n\t */\n\tSTYLE_GRADIENTCOLOR: 'gradientColor',\n\n\t/**\n\t * Variable: STYLE_GRADIENT_DIRECTION\n\t * \n\t * Defines the key for the gradient direction. Possible values are\n\t * <DIRECTION_EAST>, <DIRECTION_WEST>, <DIRECTION_NORTH> and\n\t * <DIRECTION_SOUTH>. Default is <DIRECTION_SOUTH>. Generally, and by\n\t * default in mxGraph, gradient painting is done from the value of\n\t * <STYLE_FILLCOLOR> to the value of <STYLE_GRADIENTCOLOR>. Taking the\n\t * example of <DIRECTION_NORTH>, this means <STYLE_FILLCOLOR> color at the \n\t * bottom of paint pattern and <STYLE_GRADIENTCOLOR> at top, with a\n\t * gradient in-between. Value is \"gradientDirection\".\n\t */\n\tSTYLE_GRADIENT_DIRECTION: 'gradientDirection',\n\n\t/**\n\t * Variable: STYLE_STROKECOLOR\n\t * \n\t * Defines the key for the strokeColor style. Possible values are all HTML\n\t * color names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit', 'indicated' to use the color code of a related cell or the\n\t * indicator shape or 'none' for no color. Value is \"strokeColor\".\n\t */\n\tSTYLE_STROKECOLOR: 'strokeColor',\n\n\t/**\n\t * Variable: STYLE_SEPARATORCOLOR\n\t * \n\t * Defines the key for the separatorColor style. Possible values are all\n\t * HTML color names or HEX codes. This style is only used for\n\t * <SHAPE_SWIMLANE> shapes. Value is \"separatorColor\".\n\t */\n\tSTYLE_SEPARATORCOLOR: 'separatorColor',\n\n\t/**\n\t * Variable: STYLE_STROKEWIDTH\n\t * \n\t * Defines the key for the strokeWidth style. The type of the value is \n\t * numeric and the possible range is any non-negative value larger or equal\n\t * to 1. The value defines the stroke width in pixels. Note: To hide a\n\t * stroke use strokeColor none. Value is \"strokeWidth\".\n\t */\n\tSTYLE_STROKEWIDTH: 'strokeWidth',\n\n\t/**\n\t * Variable: STYLE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. This value defines how the lines of\n\t * the label are horizontally aligned. <ALIGN_LEFT> mean label text lines\n\t * are aligned to left of the label bounds, <ALIGN_RIGHT> to the right of\n\t * the label bounds and <ALIGN_CENTER> means the center of the text lines\n\t * are aligned in the center of the label bounds. Note this value doesn't\n\t * affect the positioning of the overall label bounds relative to the\n\t * vertex, to move the label bounds horizontally, use\n\t * <STYLE_LABEL_POSITION>. Value is \"align\".\n\t */\n\tSTYLE_ALIGN: 'align',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. This value defines how\n\t * the lines of the label are vertically aligned. <ALIGN_TOP> means the\n\t * topmost label text line is aligned against the top of the label bounds,\n\t * <ALIGN_BOTTOM> means the bottom-most label text line is aligned against\n\t * the bottom of the label bounds and <ALIGN_MIDDLE> means there is equal\n\t * spacing between the topmost text label line and the top of the label\n\t * bounds and the bottom-most text label line and the bottom of the label\n\t * bounds. Note this value doesn't affect the positioning of the overall\n\t * label bounds relative to the vertex, to move the label bounds\n\t * vertically, use <STYLE_VERTICAL_LABEL_POSITION>. Value is \"verticalAlign\".\n\t */\n\tSTYLE_VERTICAL_ALIGN: 'verticalAlign',\n\n\t/**\n\t * Variable: STYLE_LABEL_WIDTH\n\t * \n\t * Defines the key for the width of the label if the label position is not\n\t * center. Value is \"labelWidth\".\n\t */\n\tSTYLE_LABEL_WIDTH: 'labelWidth',\n\n\t/**\n\t * Variable: STYLE_LABEL_POSITION\n\t * \n\t * Defines the key for the horizontal label position of vertices. Possible\n\t * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>. Default is\n\t * <ALIGN_CENTER>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_LEFT> means the entire label bounds is\n\t * placed completely just to the left of the vertex, <ALIGN_RIGHT> means\n\t * adjust to the right and <ALIGN_CENTER> means the label bounds are\n\t * vertically aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label horizontally within the label bounds, use <STYLE_ALIGN>.\n\t * Value is \"labelPosition\".\n\t */\n\tSTYLE_LABEL_POSITION: 'labelPosition',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_LABEL_POSITION\n\t * \n\t * Defines the key for the vertical label position of vertices. Possible\n\t * values are <ALIGN_TOP>, <ALIGN_BOTTOM> and <ALIGN_MIDDLE>. Default is\n\t * <ALIGN_MIDDLE>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_TOP> means the entire label bounds is\n\t * placed completely just on the top of the vertex, <ALIGN_BOTTOM> means\n\t * adjust on the bottom and <ALIGN_MIDDLE> means the label bounds are\n\t * horizontally aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label vertically within the label bounds, use\n\t * <STYLE_VERTICAL_ALIGN>. Value is \"verticalLabelPosition\".\n\t */\n\tSTYLE_VERTICAL_LABEL_POSITION: 'verticalLabelPosition',\n\t\n\t/**\n\t * Variable: STYLE_IMAGE_ASPECT\n\t * \n\t * Defines the key for the image aspect style. Possible values are 0 (do\n\t * not preserve aspect) or 1 (keep aspect). This is only used in\n\t * <mxImageShape>. Default is 1. Value is \"imageAspect\".\n\t */\n\tSTYLE_IMAGE_ASPECT: 'imageAspect',\n\n\t/**\n\t * Variable: STYLE_IMAGE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. The value defines how any image in the\n\t * vertex label is aligned horizontally within the label bounds of a\n\t * <SHAPE_LABEL> shape. Value is \"imageAlign\".\n\t */\n\tSTYLE_IMAGE_ALIGN: 'imageAlign',\n\n\t/**\n\t * Variable: STYLE_IMAGE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. The value defines how\n\t * any image in the vertex label is aligned vertically within the label\n\t * bounds of a <SHAPE_LABEL> shape. Value is \"imageVerticalAlign\".\n\t */\n\tSTYLE_IMAGE_VERTICAL_ALIGN: 'imageVerticalAlign',\n\n\t/**\n\t * Variable: STYLE_GLASS\n\t * \n\t * Defines the key for the glass style. Possible values are 0 (disabled) and\n\t * 1(enabled). The default value is 0. This is used in <mxLabel>. Value is\n\t * \"glass\".\n\t */\n\tSTYLE_GLASS: 'glass',\n\n\t/**\n\t * Variable: STYLE_IMAGE\n\t * \n\t * Defines the key for the image style. Possible values are any image URL,\n\t * the type of the value is String. This is the path to the image that is\n\t * to be displayed within the label of a vertex. Data URLs should use the\n\t * following format: data:image/png,xyz where xyz is the base64 encoded\n\t * data (without the \"base64\"-prefix). Note that Data URLs are only\n\t * supported in modern browsers. Value is \"image\".\n\t */\n\tSTYLE_IMAGE: 'image',\n\n\t/**\n\t * Variable: STYLE_IMAGE_WIDTH\n\t * \n\t * Defines the key for the imageWidth style. The type of this value is\n\t * int, the value is the image width in pixels and must be greater than 0.\n\t * Value is \"imageWidth\".\n\t */\n\tSTYLE_IMAGE_WIDTH: 'imageWidth',\n\n\t/**\n\t * Variable: STYLE_IMAGE_HEIGHT\n\t * \n\t * Defines the key for the imageHeight style. The type of this value is\n\t * int, the value is the image height in pixels and must be greater than 0.\n\t * Value is \"imageHeight\".\n\t */\n\tSTYLE_IMAGE_HEIGHT: 'imageHeight',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BACKGROUND\n\t * \n\t * Defines the key for the image background color. This style is only used\n\t * in <mxImageShape>. Possible values are all HTML color names or HEX\n\t * codes. Value is \"imageBackground\".\n\t */\n\tSTYLE_IMAGE_BACKGROUND: 'imageBackground',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BORDER\n\t * \n\t * Defines the key for the image border color. This style is only used in\n\t * <mxImageShape>. Possible values are all HTML color names or HEX codes.\n\t * Value is \"imageBorder\".\n\t */\n\tSTYLE_IMAGE_BORDER: 'imageBorder',\n\n\t/**\n\t * Variable: STYLE_FLIPH\n\t * \n\t * Defines the key for the horizontal image flip. This style is only used\n\t * in <mxImageShape>. Possible values are 0 and 1. Default is 0. Value is\n\t * \"flipH\".\n\t */\n\tSTYLE_FLIPH: 'flipH',\n\n\t/**\n\t * Variable: STYLE_FLIPV\n\t * \n\t * Defines the key for the vertical flip. Possible values are 0 and 1.\n\t * Default is 0. Value is \"flipV\".\n\t */\n\tSTYLE_FLIPV: 'flipV',\n\n\t/**\n\t * Variable: STYLE_NOLABEL\n\t * \n\t * Defines the key for the noLabel style. If this is true then no label is\n\t * visible for a given cell. Possible values are true or false (1 or 0).\n\t * Default is false. Value is \"noLabel\".\n\t */\n\tSTYLE_NOLABEL: 'noLabel',\n\n\t/**\n\t * Variable: STYLE_NOEDGESTYLE\n\t * \n\t * Defines the key for the noEdgeStyle style. If this is true then no edge\n\t * style is applied for a given edge. Possible values are true or false\n\t * (1 or 0). Default is false. Value is \"noEdgeStyle\".\n\t */\n\tSTYLE_NOEDGESTYLE: 'noEdgeStyle',\n\n\t/**\n\t * Variable: STYLE_LABEL_BACKGROUNDCOLOR\n\t * \n\t * Defines the key for the label background color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBackgroundColor\".\n\t */\n\tSTYLE_LABEL_BACKGROUNDCOLOR: 'labelBackgroundColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_BORDERCOLOR\n\t * \n\t * Defines the key for the label border color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBorderColor\".\n\t */\n\tSTYLE_LABEL_BORDERCOLOR: 'labelBorderColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_PADDING\n\t * \n\t * Defines the key for the label padding, ie. the space between the label\n\t * border and the label. Value is \"labelPadding\".\n\t */\n\tSTYLE_LABEL_PADDING: 'labelPadding',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SHAPE\n\t * \n\t * Defines the key for the indicator shape used within an <mxLabel>.\n\t * Possible values are all SHAPE_* constants or the names of any new\n\t * shapes. The indicatorShape has precedence over the indicatorImage.\n\t * Value is \"indicatorShape\".\n\t */\n\tSTYLE_INDICATOR_SHAPE: 'indicatorShape',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_IMAGE\n\t * \n\t * Defines the key for the indicator image used within an <mxLabel>.\n\t * Possible values are all image URLs. The indicatorShape has\n\t * precedence over the indicatorImage. Value is \"indicatorImage\".\n\t */\n\tSTYLE_INDICATOR_IMAGE: 'indicatorImage',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_COLOR\n\t * \n\t * Defines the key for the indicatorColor style. Possible values are all\n\t * HTML color names or HEX codes, as well as the special 'swimlane' keyword\n\t * to refer to the color of the parent swimlane if one exists. Value is\n\t * \"indicatorColor\".\n\t */\n\tSTYLE_INDICATOR_COLOR: 'indicatorColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_STROKECOLOR\n\t * \n\t * Defines the key for the indicator stroke color in <mxLabel>.\n\t * Possible values are all color codes. Value is \"indicatorStrokeColor\".\n\t */\n\tSTYLE_INDICATOR_STROKECOLOR: 'indicatorStrokeColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_GRADIENTCOLOR\n\t * \n\t * Defines the key for the indicatorGradientColor style. Possible values\n\t * are all HTML color names or HEX codes. This style is only supported in\n\t * <SHAPE_LABEL> shapes. Value is \"indicatorGradientColor\".\n\t */\n\tSTYLE_INDICATOR_GRADIENTCOLOR: 'indicatorGradientColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SPACING\n\t * \n\t * The defines the key for the spacing between the label and the\n\t * indicator in <mxLabel>. Possible values are in pixels. Value is\n\t * \"indicatorSpacing\".\n\t */\n\tSTYLE_INDICATOR_SPACING: 'indicatorSpacing',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_WIDTH\n\t * \n\t * Defines the key for the indicator width. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorWidth\".\n\t */\n\tSTYLE_INDICATOR_WIDTH: 'indicatorWidth',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_HEIGHT\n\t * \n\t * Defines the key for the indicator height. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorHeight\".\n\t */\n\tSTYLE_INDICATOR_HEIGHT: 'indicatorHeight',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_DIRECTION\n\t * \n\t * Defines the key for the indicatorDirection style. The direction style is\n\t * used to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"indicatorDirection\".\n\t */\n\tSTYLE_INDICATOR_DIRECTION: 'indicatorDirection',\n\n\t/**\n\t * Variable: STYLE_SHADOW\n\t * \n\t * Defines the key for the shadow style. The type of the value is Boolean.\n\t * Value is \"shadow\".\n\t */\n\tSTYLE_SHADOW: 'shadow',\n\t\n\t/**\n\t * Variable: STYLE_SEGMENT\n\t * \n\t * Defines the key for the segment style. The type of this value is float\n\t * and the value represents the size of the horizontal segment of the\n\t * entity relation style. Default is ENTITY_SEGMENT. Value is \"segment\".\n\t */\n\tSTYLE_SEGMENT: 'segment',\n\t\n\t/**\n\t * Variable: STYLE_ENDARROW\n\t *\n\t * Defines the key for the end arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * Value is \"endArrow\".\n\t *\n\t * Example:\n\t * (code)\n\t * style[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\t * (end)\n\t */\n\tSTYLE_ENDARROW: 'endArrow',\n\n\t/**\n\t * Variable: STYLE_STARTARROW\n\t * \n\t * Defines the key for the start arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * See <STYLE_ENDARROW>. Value is \"startArrow\".\n\t */\n\tSTYLE_STARTARROW: 'startArrow',\n\n\t/**\n\t * Variable: STYLE_ENDSIZE\n\t * \n\t * Defines the key for the endSize style. The type of this value is numeric\n\t * and the value represents the size of the end marker in pixels. Value is\n\t * \"endSize\".\n\t */\n\tSTYLE_ENDSIZE: 'endSize',\n\n\t/**\n\t * Variable: STYLE_STARTSIZE\n\t * \n\t * Defines the key for the startSize style. The type of this value is\n\t * numeric and the value represents the size of the start marker or the\n\t * size of the swimlane title region depending on the shape it is used for.\n\t * Value is \"startSize\".\n\t */\n\tSTYLE_STARTSIZE: 'startSize',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_LINE\n\t * \n\t * Defines the key for the swimlaneLine style. This style specifies whether\n\t * the line between the title regio of a swimlane should be visible. Use 0\n\t * for hidden or 1 (default) for visible. Value is \"swimlaneLine\".\n\t */\n\tSTYLE_SWIMLANE_LINE: 'swimlaneLine',\n\n\t/**\n\t * Variable: STYLE_ENDFILL\n\t * \n\t * Defines the key for the endFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"endFill\".\n\t */\n\tSTYLE_ENDFILL: 'endFill',\n\n\t/**\n\t * Variable: STYLE_STARTFILL\n\t * \n\t * Defines the key for the startFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"startFill\".\n\t */\n\tSTYLE_STARTFILL: 'startFill',\n\n\t/**\n\t * Variable: STYLE_DASHED\n\t * \n\t * Defines the key for the dashed style. Use 0 (default) for non-dashed or 1\n\t * for dashed. Value is \"dashed\".\n\t */\n\tSTYLE_DASHED: 'dashed',\n\n\t/**\n\t * Variable: STYLE_DASH_PATTERN\n\t * \n\t * Defines the key for the dashed pattern style in SVG and image exports.\n\t * The type of this value is a space separated list of numbers that specify\n\t * a custom-defined dash pattern. Dash styles are defined in terms of the\n\t * length of the dash (the drawn part of the stroke) and the length of the\n\t * space between the dashes. The lengths are relative to the line width: a\n\t * length of \"1\" is equal to the line width. VML ignores this style and\n\t * uses dashStyle instead as defined in the VML specification. This style\n\t * is only used in the <mxConnector> shape. Value is \"dashPattern\".\n\t */\n\tSTYLE_DASH_PATTERN: 'dashPattern',\n\n\t/**\n\t * Variable: STYLE_FIX_DASH\n\t * \n\t * Defines the key for the fixDash style. Use 0 (default) for dash patterns\n\t * that depend on the linewidth and 1 for dash patterns that ignore the\n\t * line width. Value is \"fixDash\".\n\t */\n\tSTYLE_FIX_DASH: 'fixDash',\n\n\t/**\n\t * Variable: STYLE_ROUNDED\n\t * \n\t * Defines the key for the rounded style. The type of this value is\n\t * Boolean. For edges this determines whether or not joins between edges\n\t * segments are smoothed to a rounded finish. For vertices that have the\n\t * rectangle shape, this determines whether or not the rectangle is\n\t * rounded. Use 0 (default) for non-rounded or 1 for rounded. Value is\n\t * \"rounded\".\n\t */\n\tSTYLE_ROUNDED: 'rounded',\n\n\t/**\n\t * Variable: STYLE_CURVED\n\t * \n\t * Defines the key for the curved style. The type of this value is\n\t * Boolean. It is only applicable for connector shapes. Use 0 (default)\n\t * for non-curved or 1 for curved. Value is \"curved\".\n\t */\n\tSTYLE_CURVED: 'curved',\n\n\t/**\n\t * Variable: STYLE_ARCSIZE\n\t * \n\t * Defines the rounding factor for a rounded rectangle in percent (without\n\t * the percent sign). Possible values are between 0 and 100. If this value\n\t * is not specified then RECTANGLE_ROUNDING_FACTOR * 100 is used. For\n\t * edges, this defines the absolute size of rounded corners in pixels. If\n\t * this values is not specified then LINE_ARCSIZE is used.\n\t * (This style is only exported via <mxImageExport>.) Value is \"arcSize\".\n\t */\n\tSTYLE_ARCSIZE: 'arcSize',\n\n\t/**\n\t * Variable: STYLE_ABSOLUTE_ARCSIZE\n\t * \n\t * Defines the key for the absolute arc size style. This specifies if\n\t * arcSize for rectangles is abolute or relative. Possible values are 1\n\t * and 0 (default). Value is \"absoluteArcSize\".\n\t */\n\tSTYLE_ABSOLUTE_ARCSIZE: 'absoluteArcSize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the source perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the source connection point of\n\t * an edge and the perimeter of the source vertex in pixels. This style\n\t * only applies to edges. Value is \"sourcePerimeterSpacing\".\n\t */\n\tSTYLE_SOURCE_PERIMETER_SPACING: 'sourcePerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_TARGET_PERIMETER_SPACING\n\t * \n\t * Defines the key for the target perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the target connection point of\n\t * an edge and the perimeter of the target vertex in pixels. This style\n\t * only applies to edges. Value is \"targetPerimeterSpacing\".\n\t */\n\tSTYLE_TARGET_PERIMETER_SPACING: 'targetPerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the perimeter spacing. This is the distance between\n\t * the connection point and the perimeter in pixels. When used in a vertex\n\t * style, this applies to all incoming edges to floating ports (edges that\n\t * terminate on the perimeter of the vertex). When used in an edge style,\n\t * this spacing applies to the source and target separately, if they\n\t * terminate in floating ports (on the perimeter of the vertex). Value is\n\t * \"perimeterSpacing\".\n\t */\n\tSTYLE_PERIMETER_SPACING: 'perimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_SPACING\n\t * \n\t * Defines the key for the spacing. The value represents the spacing, in\n\t * pixels, added to each side of a label in a vertex (style applies to\n\t * vertices only). Value is \"spacing\".\n\t */\n\tSTYLE_SPACING: 'spacing',\n\n\t/**\n\t * Variable: STYLE_SPACING_TOP\n\t * \n\t * Defines the key for the spacingTop style. The value represents the\n\t * spacing, in pixels, added to the top side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingTop\".\n\t */\n\tSTYLE_SPACING_TOP: 'spacingTop',\n\n\t/**\n\t * Variable: STYLE_SPACING_LEFT\n\t * \n\t * Defines the key for the spacingLeft style. The value represents the\n\t * spacing, in pixels, added to the left side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingLeft\".\n\t */\n\tSTYLE_SPACING_LEFT: 'spacingLeft',\n\n\t/**\n\t * Variable: STYLE_SPACING_BOTTOM\n\t * \n\t * Defines the key for the spacingBottom style The value represents the\n\t * spacing, in pixels, added to the bottom side of a label in a vertex\n\t * (style applies to vertices only). Value is \"spacingBottom\".\n\t */\n\tSTYLE_SPACING_BOTTOM: 'spacingBottom',\n\n\t/**\n\t * Variable: STYLE_SPACING_RIGHT\n\t * \n\t * Defines the key for the spacingRight style The value represents the\n\t * spacing, in pixels, added to the right side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingRight\".\n\t */\n\tSTYLE_SPACING_RIGHT: 'spacingRight',\n\n\t/**\n\t * Variable: STYLE_HORIZONTAL\n\t * \n\t * Defines the key for the horizontal style. Possible values are\n\t * true or false. This value only applies to vertices. If the <STYLE_SHAPE>\n\t * is \"SHAPE_SWIMLANE\" a value of false indicates that the\n\t * swimlane should be drawn vertically, true indicates to draw it\n\t * horizontally. If the shape style does not indicate that this vertex is a\n\t * swimlane, this value affects only whether the label is drawn\n\t * horizontally or vertically. Value is \"horizontal\".\n\t */\n\tSTYLE_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: STYLE_DIRECTION\n\t * \n\t * Defines the key for the direction style. The direction style is used\n\t * to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"direction\".\n\t */\n\tSTYLE_DIRECTION: 'direction',\n\n\t/**\n\t * Variable: STYLE_ANCHOR_POINT_DIRECTION\n\t * \n\t * Defines the key for the anchorPointDirection style. The defines if the\n\t * direction style should be taken into account when computing the fixed\n\t * point location for connected edges. Default is 1 (yes). Set this to 0\n\t * to ignore the direction style for fixed connection points. Value is\n\t * \"anchorPointDirection\".\n\t */\n\tSTYLE_ANCHOR_POINT_DIRECTION: 'anchorPointDirection',\n\n\t/**\n\t * Variable: STYLE_ELBOW\n\t * \n\t * Defines the key for the elbow style. Possible values are\n\t * <ELBOW_HORIZONTAL> and <ELBOW_VERTICAL>. Default is <ELBOW_HORIZONTAL>.\n\t * This defines how the three segment orthogonal edge style leaves its\n\t * terminal vertices. The vertical style leaves the terminal vertices at\n\t * the top and bottom sides. Value is \"elbow\".\n\t */\n\tSTYLE_ELBOW: 'elbow',\n\n\t/**\n\t * Variable: STYLE_FONTCOLOR\n\t * \n\t * Defines the key for the fontColor style. Possible values are all HTML\n\t * color names or HEX codes. Value is \"fontColor\".\n\t */\n\tSTYLE_FONTCOLOR: 'fontColor',\n\n\t/**\n\t * Variable: STYLE_FONTFAMILY\n\t * \n\t * Defines the key for the fontFamily style. Possible values are names such\n\t * as Arial; Dialog; Verdana; Times New Roman. The value is of type String.\n\t * Value is fontFamily.\n\t */\n\tSTYLE_FONTFAMILY: 'fontFamily',\n\n\t/**\n\t * Variable: STYLE_FONTSIZE\n\t * \n\t * Defines the key for the fontSize style (in px). The type of the value\n\t * is int. Value is \"fontSize\".\n\t */\n\tSTYLE_FONTSIZE: 'fontSize',\n\n\t/**\n\t * Variable: STYLE_FONTSTYLE\n\t * \n\t * Defines the key for the fontStyle style. Values may be any logical AND\n\t * (sum) of <FONT_BOLD>, <FONT_ITALIC> and <FONT_UNDERLINE>.\n\t * The type of the value is int. Value is \"fontStyle\".\n\t */\n\tSTYLE_FONTSTYLE: 'fontStyle',\n\t\n\t/**\n\t * Variable: STYLE_ASPECT\n\t * \n\t * Defines the key for the aspect style. Possible values are empty or fixed.\n\t * If fixed is used then the aspect ratio of the cell will be maintained\n\t * when resizing. Default is empty. Value is \"aspect\".\n\t */\n\tSTYLE_ASPECT: 'aspect',\n\n\t/**\n\t * Variable: STYLE_AUTOSIZE\n\t * \n\t * Defines the key for the autosize style. This specifies if a cell should be\n\t * resized automatically if the value has changed. Possible values are 0 or 1.\n\t * Default is 0. See <mxGraph.isAutoSizeCell>. This is normally combined with\n\t * <STYLE_RESIZABLE> to disable manual sizing. Value is \"autosize\".\n\t */\n\tSTYLE_AUTOSIZE: 'autosize',\n\n\t/**\n\t * Variable: STYLE_FOLDABLE\n\t * \n\t * Defines the key for the foldable style. This specifies if a cell is foldable\n\t * using a folding icon. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellFoldable>. Value is \"foldable\".\n\t */\n\tSTYLE_FOLDABLE: 'foldable',\n\n\t/**\n\t * Variable: STYLE_EDITABLE\n\t * \n\t * Defines the key for the editable style. This specifies if the value of\n\t * a cell can be edited using the in-place editor. Possible values are 0 or\n\t * 1. Default is 1. See <mxGraph.isCellEditable>. Value is \"editable\".\n\t */\n\tSTYLE_EDITABLE: 'editable',\n\n\t/**\n\t * Variable: STYLE_BACKGROUND_OUTLINE\n\t * \n\t * Defines the key for the backgroundOutline style. This specifies if a\n\t * only the background of a cell should be painted when it is highlighted.\n\t * Possible values are 0 or 1. Default is 0. Value is \"backgroundOutline\".\n\t */\n\tSTYLE_BACKGROUND_OUTLINE: 'backgroundOutline',\n\n\t/**\n\t * Variable: STYLE_BENDABLE\n\t * \n\t * Defines the key for the bendable style. This specifies if the control\n\t * points of an edge can be moved. Possible values are 0 or 1. Default is\n\t * 1. See <mxGraph.isCellBendable>. Value is \"bendable\".\n\t */\n\tSTYLE_BENDABLE: 'bendable',\n\n\t/**\n\t * Variable: STYLE_MOVABLE\n\t * \n\t * Defines the key for the movable style. This specifies if a cell can\n\t * be moved. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellMovable>. Value is \"movable\".\n\t */\n\tSTYLE_MOVABLE: 'movable',\n\n\t/**\n\t * Variable: STYLE_RESIZABLE\n\t * \n\t * Defines the key for the resizable style. This specifies if a cell can\n\t * be resized. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellResizable>. Value is \"resizable\".\n\t */\n\tSTYLE_RESIZABLE: 'resizable',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeWidth style. This specifies if a cell's\n\t * width is resized if the parent is resized. If this is 1 then the width\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's width will not be resized. Default is not defined. Value\n\t * is \"resizeWidth\".\n\t */\n\tSTYLE_RESIZE_WIDTH: 'resizeWidth',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeHeight style. This specifies if a cell's\n\t * height if resize if the parent is resized. If this is 1 then the height\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's height will not be resized. Default is not defined. Value\n\t * is \"resizeHeight\".\n\t */\n\tSTYLE_RESIZE_HEIGHT: 'resizeHeight',\n\n\t/**\n\t * Variable: STYLE_ROTATABLE\n\t * \n\t * Defines the key for the rotatable style. This specifies if a cell can\n\t * be rotated. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellRotatable>. Value is \"rotatable\".\n\t */\n\tSTYLE_ROTATABLE: 'rotatable',\n\n\t/**\n\t * Variable: STYLE_CLONEABLE\n\t * \n\t * Defines the key for the cloneable style. This specifies if a cell can\n\t * be cloned. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellCloneable>. Value is \"cloneable\".\n\t */\n\tSTYLE_CLONEABLE: 'cloneable',\n\n\t/**\n\t * Variable: STYLE_DELETABLE\n\t * \n\t * Defines the key for the deletable style. This specifies if a cell can be\n\t * deleted. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellDeletable>. Value is \"deletable\".\n\t */\n\tSTYLE_DELETABLE: 'deletable',\n\n\t/**\n\t * Variable: STYLE_SHAPE\n\t * \n\t * Defines the key for the shape. Possible values are all constants with\n\t * a SHAPE-prefix or any newly defined shape names. Value is \"shape\".\n\t */\n\tSTYLE_SHAPE: 'shape',\n\n\t/**\n\t * Variable: STYLE_EDGE\n\t * \n\t * Defines the key for the edge style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"edgeStyle\".\n\t */\n\tSTYLE_EDGE: 'edgeStyle',\n\n\t/**\n\t * Variable: STYLE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are all numeric values or \"auto\".\n\t * Jetty size is the minimum length of the orthogonal segment before\n\t * it attaches to a shape.\n\t * Value is \"jettySize\".\n\t */\n\tSTYLE_JETTY_SIZE: 'jettySize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"sourceJettySize\".\n\t */\n\tSTYLE_SOURCE_JETTY_SIZE: 'sourceJettySize',\n\n\t/**\n\t * Variable: targetJettySize\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"targetJettySize\".\n\t */\n\tSTYLE_TARGET_JETTY_SIZE: 'targetJettySize',\n\n\t/**\n\t * Variable: STYLE_LOOP\n\t * \n\t * Defines the key for the loop style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"loopStyle\". Default is\n\t * <mxGraph.defaultLoopStylean>.\n\t */\n\tSTYLE_LOOP: 'loopStyle',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL_LOOP\n\t * \n\t * Defines the key for the orthogonal loop style. Possible values are 0 and\n\t * 1. Default is 0. Value is \"orthogonalLoop\". Use this style to specify\n\t * if loops with no waypoints and defined anchor points should be routed\n\t * using <STYLE_LOOP> or not routed.\n\t */\n\tSTYLE_ORTHOGONAL_LOOP: 'orthogonalLoop',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_X\n\t * \n\t * Defines the key for the horizontal routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterX\".\n\t */\n\tSTYLE_ROUTING_CENTER_X: 'routingCenterX',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_Y\n\t * \n\t * Defines the key for the vertical routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterY\".\n\t */\n\tSTYLE_ROUTING_CENTER_Y: 'routingCenterY',\n\n\t/**\n\t * Variable: FONT_BOLD\n\t * \n\t * Constant for bold fonts. Default is 1.\n\t */\n\tFONT_BOLD: 1,\n\n\t/**\n\t * Variable: FONT_ITALIC\n\t * \n\t * Constant for italic fonts. Default is 2.\n\t */\n\tFONT_ITALIC: 2,\n\n\t/**\n\t * Variable: FONT_UNDERLINE\n\t * \n\t * Constant for underlined fonts. Default is 4.\n\t */\n\tFONT_UNDERLINE: 4,\n\n\t/**\n\t * Variable: FONT_STRIKETHROUGH\n\t * \n\t * Constant for strikthrough fonts. Default is 8.\n\t */\n\tFONT_STRIKETHROUGH: 8,\n\t\n\t/**\n\t * Variable: SHAPE_RECTANGLE\n\t * \n\t * Name under which <mxRectangleShape> is registered in <mxCellRenderer>.\n\t * Default is rectangle.\n\t */\n\tSHAPE_RECTANGLE: 'rectangle',\n\n\t/**\n\t * Variable: SHAPE_ELLIPSE\n\t * \n\t * Name under which <mxEllipse> is registered in <mxCellRenderer>.\n\t * Default is ellipse.\n\t */\n\tSHAPE_ELLIPSE: 'ellipse',\n\n\t/**\n\t * Variable: SHAPE_DOUBLE_ELLIPSE\n\t * \n\t * Name under which <mxDoubleEllipse> is registered in <mxCellRenderer>.\n\t * Default is doubleEllipse.\n\t */\n\tSHAPE_DOUBLE_ELLIPSE: 'doubleEllipse',\n\n\t/**\n\t * Variable: SHAPE_RHOMBUS\n\t * \n\t * Name under which <mxRhombus> is registered in <mxCellRenderer>.\n\t * Default is rhombus.\n\t */\n\tSHAPE_RHOMBUS: 'rhombus',\n\n\t/**\n\t * Variable: SHAPE_LINE\n\t * \n\t * Name under which <mxLine> is registered in <mxCellRenderer>.\n\t * Default is line.\n\t */\n\tSHAPE_LINE: 'line',\n\n\t/**\n\t * Variable: SHAPE_IMAGE\n\t * \n\t * Name under which <mxImageShape> is registered in <mxCellRenderer>.\n\t * Default is image.\n\t */\n\tSHAPE_IMAGE: 'image',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW\n\t * \n\t * Name under which <mxArrow> is registered in <mxCellRenderer>.\n\t * Default is arrow.\n\t */\n\tSHAPE_ARROW: 'arrow',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW_CONNECTOR\n\t * \n\t * Name under which <mxArrowConnector> is registered in <mxCellRenderer>.\n\t * Default is arrowConnector.\n\t */\n\tSHAPE_ARROW_CONNECTOR: 'arrowConnector',\n\t\n\t/**\n\t * Variable: SHAPE_LABEL\n\t * \n\t * Name under which <mxLabel> is registered in <mxCellRenderer>.\n\t * Default is label.\n\t */\n\tSHAPE_LABEL: 'label',\n\t\n\t/**\n\t * Variable: SHAPE_CYLINDER\n\t * \n\t * Name under which <mxCylinder> is registered in <mxCellRenderer>.\n\t * Default is cylinder.\n\t */\n\tSHAPE_CYLINDER: 'cylinder',\n\t\n\t/**\n\t * Variable: SHAPE_SWIMLANE\n\t * \n\t * Name under which <mxSwimlane> is registered in <mxCellRenderer>.\n\t * Default is swimlane.\n\t */\n\tSHAPE_SWIMLANE: 'swimlane',\n\t\t\n\t/**\n\t * Variable: SHAPE_CONNECTOR\n\t * \n\t * Name under which <mxConnector> is registered in <mxCellRenderer>.\n\t * Default is connector.\n\t */\n\tSHAPE_CONNECTOR: 'connector',\n\n\t/**\n\t * Variable: SHAPE_ACTOR\n\t * \n\t * Name under which <mxActor> is registered in <mxCellRenderer>.\n\t * Default is actor.\n\t */\n\tSHAPE_ACTOR: 'actor',\n\t\t\n\t/**\n\t * Variable: SHAPE_CLOUD\n\t * \n\t * Name under which <mxCloud> is registered in <mxCellRenderer>.\n\t * Default is cloud.\n\t */\n\tSHAPE_CLOUD: 'cloud',\n\t\t\n\t/**\n\t * Variable: SHAPE_TRIANGLE\n\t * \n\t * Name under which <mxTriangle> is registered in <mxCellRenderer>.\n\t * Default is triangle.\n\t */\n\tSHAPE_TRIANGLE: 'triangle',\n\t\t\n\t/**\n\t * Variable: SHAPE_HEXAGON\n\t * \n\t * Name under which <mxHexagon> is registered in <mxCellRenderer>.\n\t * Default is hexagon.\n\t */\n\tSHAPE_HEXAGON: 'hexagon',\n\n\t/**\n\t * Variable: ARROW_CLASSIC\n\t * \n\t * Constant for classic arrow markers.\n\t */\n\tARROW_CLASSIC: 'classic',\n\n\t/**\n\t * Variable: ARROW_CLASSIC_THIN\n\t * \n\t * Constant for thin classic arrow markers.\n\t */\n\tARROW_CLASSIC_THIN: 'classicThin',\n\n\t/**\n\t * Variable: ARROW_BLOCK\n\t * \n\t * Constant for block arrow markers.\n\t */\n\tARROW_BLOCK: 'block',\n\n\t/**\n\t * Variable: ARROW_BLOCK_THIN\n\t * \n\t * Constant for thin block arrow markers.\n\t */\n\tARROW_BLOCK_THIN: 'blockThin',\n\n\t/**\n\t * Variable: ARROW_OPEN\n\t * \n\t * Constant for open arrow markers.\n\t */\n\tARROW_OPEN: 'open',\n\n\t/**\n\t * Variable: ARROW_OPEN_THIN\n\t * \n\t * Constant for thin open arrow markers.\n\t */\n\tARROW_OPEN_THIN: 'openThin',\n\n\t/**\n\t * Variable: ARROW_OVAL\n\t * \n\t * Constant for oval arrow markers.\n\t */\n\tARROW_OVAL: 'oval',\n\n\t/**\n\t * Variable: ARROW_DIAMOND\n\t * \n\t * Constant for diamond arrow markers.\n\t */\n\tARROW_DIAMOND: 'diamond',\n\n\t/**\n\t * Variable: ARROW_DIAMOND_THIN\n\t * \n\t * Constant for thin diamond arrow markers.\n\t */\n\tARROW_DIAMOND_THIN: 'diamondThin',\n\n\t/**\n\t * Variable: ALIGN_LEFT\n\t * \n\t * Constant for left horizontal alignment. Default is left.\n\t */\n\tALIGN_LEFT: 'left',\n\n\t/**\n\t * Variable: ALIGN_CENTER\n\t * \n\t * Constant for center horizontal alignment. Default is center.\n\t */\n\tALIGN_CENTER: 'center',\n\n\t/**\n\t * Variable: ALIGN_RIGHT\n\t * \n\t * Constant for right horizontal alignment. Default is right.\n\t */\n\tALIGN_RIGHT: 'right',\n\n\t/**\n\t * Variable: ALIGN_TOP\n\t * \n\t * Constant for top vertical alignment. Default is top.\n\t */\n\tALIGN_TOP: 'top',\n\n\t/**\n\t * Variable: ALIGN_MIDDLE\n\t * \n\t * Constant for middle vertical alignment. Default is middle.\n\t */\n\tALIGN_MIDDLE: 'middle',\n\n\t/**\n\t * Variable: ALIGN_BOTTOM\n\t * \n\t * Constant for bottom vertical alignment. Default is bottom.\n\t */\n\tALIGN_BOTTOM: 'bottom',\n\n\t/**\n\t * Variable: DIRECTION_NORTH\n\t * \n\t * Constant for direction north. Default is north.\n\t */\n\tDIRECTION_NORTH: 'north',\n\n\t/**\n\t * Variable: DIRECTION_SOUTH\n\t * \n\t * Constant for direction south. Default is south.\n\t */\n\tDIRECTION_SOUTH: 'south',\n\n\t/**\n\t * Variable: DIRECTION_EAST\n\t * \n\t * Constant for direction east. Default is east.\n\t */\n\tDIRECTION_EAST: 'east',\n\n\t/**\n\t * Variable: DIRECTION_WEST\n\t * \n\t * Constant for direction west. Default is west.\n\t */\n\tDIRECTION_WEST: 'west',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_DEFAULT\n\t * \n\t * Constant for text direction default. Default is an empty string. Use\n\t * this value to use the default text direction of the operating system. \n\t */\n\tTEXT_DIRECTION_DEFAULT: '',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_AUTO\n\t * \n\t * Constant for text direction automatic. Default is auto. Use this value\n\t * to find the direction for a given text with <mxText.getAutoDirection>. \n\t */\n\tTEXT_DIRECTION_AUTO: 'auto',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_LTR\n\t * \n\t * Constant for text direction left to right. Default is ltr. Use this\n\t * value for left to right text direction.\n\t */\n\tTEXT_DIRECTION_LTR: 'ltr',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_RTL\n\t * \n\t * Constant for text direction right to left. Default is rtl. Use this\n\t * value for right to left text direction.\n\t */\n\tTEXT_DIRECTION_RTL: 'rtl',\n\n\t/**\n\t * Variable: DIRECTION_MASK_NONE\n\t * \n\t * Constant for no direction.\n\t */\n\tDIRECTION_MASK_NONE: 0,\n\n\t/**\n\t * Variable: DIRECTION_MASK_WEST\n\t * \n\t * Bitwise mask for west direction.\n\t */\n\tDIRECTION_MASK_WEST: 1,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_NORTH\n\t * \n\t * Bitwise mask for north direction.\n\t */\n\tDIRECTION_MASK_NORTH: 2,\n\n\t/**\n\t * Variable: DIRECTION_MASK_SOUTH\n\t * \n\t * Bitwise mask for south direction.\n\t */\n\tDIRECTION_MASK_SOUTH: 4,\n\n\t/**\n\t * Variable: DIRECTION_MASK_EAST\n\t * \n\t * Bitwise mask for east direction.\n\t */\n\tDIRECTION_MASK_EAST: 8,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_ALL\n\t * \n\t * Bitwise mask for all directions.\n\t */\n\tDIRECTION_MASK_ALL: 15,\n\n\t/**\n\t * Variable: ELBOW_VERTICAL\n\t * \n\t * Constant for elbow vertical. Default is horizontal.\n\t */\n\tELBOW_VERTICAL: 'vertical',\n\n\t/**\n\t * Variable: ELBOW_HORIZONTAL\n\t * \n\t * Constant for elbow horizontal. Default is horizontal.\n\t */\n\tELBOW_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: EDGESTYLE_ELBOW\n\t * \n\t * Name of the elbow edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ELBOW: 'elbowEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ENTITY_RELATION\n\t * \n\t * Name of the entity relation edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ENTITY_RELATION: 'entityRelationEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_LOOP\n\t * \n\t * Name of the loop edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_LOOP: 'loopEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SIDETOSIDE\n\t * \n\t * Name of the side to side edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SIDETOSIDE: 'sideToSideEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_TOPTOBOTTOM\n\t * \n\t * Name of the top to bottom edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_TOPTOBOTTOM: 'topToBottomEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ORTHOGONAL\n\t * \n\t * Name of the generic orthogonal edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ORTHOGONAL: 'orthogonalEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SEGMENT\n\t * \n\t * Name of the generic segment edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SEGMENT: 'segmentEdgeStyle',\n \n\t/**\n\t * Variable: PERIMETER_ELLIPSE\n\t * \n\t * Name of the ellipse perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_ELLIPSE: 'ellipsePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RECTANGLE\n\t *\n\t * Name of the rectangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RECTANGLE: 'rectanglePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RHOMBUS\n\t * \n\t * Name of the rhombus perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RHOMBUS: 'rhombusPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_HEXAGON\n\t * \n\t * Name of the hexagon perimeter. Can be used as a string value \n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_HEXAGON: 'hexagonPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_TRIANGLE\n\t * \n\t * Name of the triangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_TRIANGLE: 'trianglePerimeter'\n};\n\n__mxOutput.mxConstants = typeof mxConstants !== 'undefined' ? mxConstants : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventObject\n * \n * The mxEventObject is a wrapper for all properties of a single event.\n * Additionally, it also offers functions to consume the event and check if it\n * was consumed as follows:\n * \n * (code)\n * evt.consume();\n * INV: evt.isConsumed() == true\n * (end)\n * \n * Constructor: mxEventObject\n *\n * Constructs a new event object with the specified name. An optional\n * sequence of key, value pairs can be appended to define properties.\n * \n * Example:\n *\n * (code)\n * new mxEventObject(\"eventName\", key1, val1, .., keyN, valN)\n * (end)\n */\nfunction mxEventObject(name)\n{\n\tthis.name = name;\n\tthis.properties = [];\n\t\n\tfor (var i = 1; i < arguments.length; i += 2)\n\t{\n\t\tif (arguments[i + 1] != null)\n\t\t{\n\t\t\tthis.properties[arguments[i]] = arguments[i + 1];\n\t\t}\n\t}\n};\n\n/**\n * Variable: name\n *\n * Holds the name.\n */\nmxEventObject.prototype.name = null;\n\n/**\n * Variable: properties\n *\n * Holds the properties as an associative array.\n */\nmxEventObject.prototype.properties = null;\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state. Default is false.\n */\nmxEventObject.prototype.consumed = false;\n\n/**\n * Function: getName\n * \n * Returns <name>.\n */\nmxEventObject.prototype.getName = function()\n{\n\treturn this.name;\n};\n\n/**\n * Function: getProperties\n * \n * Returns <properties>.\n */\nmxEventObject.prototype.getProperties = function()\n{\n\treturn this.properties;\n};\n\n/**\n * Function: getProperty\n * \n * Returns the property for the given key.\n */\nmxEventObject.prototype.getProperty = function(key)\n{\n\treturn this.properties[key];\n};\n\n/**\n * Function: isConsumed\n *\n * Returns true if the event has been consumed.\n */\nmxEventObject.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Consumes the event.\n */\nmxEventObject.prototype.consume = function()\n{\n\tthis.consumed = true;\n};\n\n__mxOutput.mxEventObject = typeof mxEventObject !== 'undefined' ? mxEventObject : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMouseEvent\n * \n * Base class for all mouse events in mxGraph. A listener for this event should\n * implement the following methods:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   mouseDown: function(sender, evt)\n *   {\n *     mxLog.debug('mouseDown');\n *   },\n *   mouseMove: function(sender, evt)\n *   {\n *     mxLog.debug('mouseMove');\n *   },\n *   mouseUp: function(sender, evt)\n *   {\n *     mxLog.debug('mouseUp');\n *   }\n * });\n * (end)\n * \n * Constructor: mxMouseEvent\n *\n * Constructs a new event object for the given arguments.\n * \n * Parameters:\n * \n * evt - Native mouse event.\n * state - Optional <mxCellState> under the mouse.\n * \n */\nfunction mxMouseEvent(evt, state)\n{\n\tthis.evt = evt;\n\tthis.state = state;\n\tthis.sourceState = state;\n};\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state of this event.\n */\nmxMouseEvent.prototype.consumed = false;\n\n/**\n * Variable: evt\n *\n * Holds the inner event object.\n */\nmxMouseEvent.prototype.evt = null;\n\n/**\n * Variable: graphX\n *\n * Holds the x-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphX = null;\n\n/**\n * Variable: graphY\n *\n * Holds the y-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphY = null;\n\n/**\n * Variable: state\n *\n * Holds the optional <mxCellState> associated with this event.\n */\nmxMouseEvent.prototype.state = null;\n\n/**\n * Variable: sourceState\n * \n * Holds the <mxCellState> that was passed to the constructor. This can be\n * different from <state> depending on the result of <mxGraph.getEventState>.\n */\nmxMouseEvent.prototype.sourceState = null;\n\n/**\n * Function: getEvent\n * \n * Returns <evt>.\n */\nmxMouseEvent.prototype.getEvent = function()\n{\n\treturn this.evt;\n};\n\n/**\n * Function: getSource\n * \n * Returns the target DOM element using <mxEvent.getSource> for <evt>.\n */\nmxMouseEvent.prototype.getSource = function()\n{\n\treturn mxEvent.getSource(this.evt);\n};\n\n/**\n * Function: isSource\n * \n * Returns true if the given <mxShape> is the source of <evt>.\n */\nmxMouseEvent.prototype.isSource = function(shape)\n{\n\tif (shape != null)\n\t{\n\t\treturn mxUtils.isAncestorNode(shape.node, this.getSource());\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getX\n * \n * Returns <evt.clientX>.\n */\nmxMouseEvent.prototype.getX = function()\n{\n\treturn mxEvent.getClientX(this.getEvent());\n};\n\n/**\n * Function: getY\n * \n * Returns <evt.clientY>.\n */\nmxMouseEvent.prototype.getY = function()\n{\n\treturn mxEvent.getClientY(this.getEvent());\n};\n\n/**\n * Function: getGraphX\n * \n * Returns <graphX>.\n */\nmxMouseEvent.prototype.getGraphX = function()\n{\n\treturn this.graphX;\n};\n\n/**\n * Function: getGraphY\n * \n * Returns <graphY>.\n */\nmxMouseEvent.prototype.getGraphY = function()\n{\n\treturn this.graphY;\n};\n\n/**\n * Function: getState\n * \n * Returns <state>.\n */\nmxMouseEvent.prototype.getState = function()\n{\n\treturn this.state;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> in <state> is not null.\n */\nmxMouseEvent.prototype.getCell = function()\n{\n\tvar state = this.getState();\n\t\n\tif (state != null)\n\t{\n\t\treturn state.cell;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isPopupTrigger\n *\n * Returns true if the event is a popup trigger.\n */\nmxMouseEvent.prototype.isPopupTrigger = function()\n{\n\treturn mxEvent.isPopupTrigger(this.getEvent());\n};\n\n/**\n * Function: isConsumed\n *\n * Returns <consumed>.\n */\nmxMouseEvent.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Sets <consumed> to true and invokes preventDefault on the native event\n * if such a method is defined. This is used mainly to avoid the cursor from\n * being changed to a text cursor in Webkit. You can use the preventDefault\n * flag to disable this functionality.\n * \n * Parameters:\n * \n * preventDefault - Specifies if the native event should be canceled. Default\n * is true.\n */\nmxMouseEvent.prototype.consume = function(preventDefault)\n{\n\tpreventDefault = (preventDefault != null) ? preventDefault :\n\t\t(this.evt.touches != null || mxEvent.isMouseEvent(this.evt));\n\t\n\tif (preventDefault && this.evt.preventDefault)\n\t{\n\t\tthis.evt.preventDefault();\n\t}\n\n\t// Workaround for images being dragged in IE\n\t// Does not change returnValue in Opera\n\tif (mxClient.IS_IE)\n\t{\n\t\tthis.evt.returnValue = true;\n\t}\n\n\t// Sets local consumed state\n\tthis.consumed = true;\n};\n\n__mxOutput.mxMouseEvent = typeof mxMouseEvent !== 'undefined' ? mxMouseEvent : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventSource\n *\n * Base class for objects that dispatch named events. To create a subclass that\n * inherits from mxEventSource, the following code is used.\n *\n * (code)\n * function MyClass() { };\n *\n * MyClass.prototype = new mxEventSource();\n * MyClass.prototype.constructor = MyClass;\n * (end)\n *\n * Known Subclasses:\n *\n * <mxGraphModel>, <mxGraph>, <mxGraphView>, <mxEditor>, <mxCellOverlay>,\n * <mxToolbar>, <mxWindow>\n * \n * Constructor: mxEventSource\n *\n * Constructs a new event source.\n */\nfunction mxEventSource(eventSource)\n{\n\tthis.setEventSource(eventSource);\n};\n\n/**\n * Variable: eventListeners\n *\n * Holds the event names and associated listeners in an array. The array\n * contains the event name followed by the respective listener for each\n * registered listener.\n */\nmxEventSource.prototype.eventListeners = null;\n\n/**\n * Variable: eventsEnabled\n *\n * Specifies if events can be fired. Default is true.\n */\nmxEventSource.prototype.eventsEnabled = true;\n\n/**\n * Variable: eventSource\n *\n * Optional source for events. Default is null.\n */\nmxEventSource.prototype.eventSource = null;\n\n/**\n * Function: isEventsEnabled\n * \n * Returns <eventsEnabled>.\n */\nmxEventSource.prototype.isEventsEnabled = function()\n{\n\treturn this.eventsEnabled;\n};\n\n/**\n * Function: setEventsEnabled\n * \n * Sets <eventsEnabled>.\n */\nmxEventSource.prototype.setEventsEnabled = function(value)\n{\n\tthis.eventsEnabled = value;\n};\n\n/**\n * Function: getEventSource\n * \n * Returns <eventSource>.\n */\nmxEventSource.prototype.getEventSource = function()\n{\n\treturn this.eventSource;\n};\n\n/**\n * Function: setEventSource\n * \n * Sets <eventSource>.\n */\nmxEventSource.prototype.setEventSource = function(value)\n{\n\tthis.eventSource = value;\n};\n\n/**\n * Function: addListener\n *\n * Binds the specified function to the given event name. If no event name\n * is given, then the listener is registered for all events.\n * \n * The parameters of the listener are the sender and an <mxEventObject>.\n */\nmxEventSource.prototype.addListener = function(name, funct)\n{\n\tif (this.eventListeners == null)\n\t{\n\t\tthis.eventListeners = [];\n\t}\n\t\n\tthis.eventListeners.push(name);\n\tthis.eventListeners.push(funct);\n};\n\n/**\n * Function: removeListener\n *\n * Removes all occurrences of the given listener from <eventListeners>.\n */\nmxEventSource.prototype.removeListener = function(funct)\n{\n\tif (this.eventListeners != null)\n\t{\n\t\tvar i = 0;\n\t\t\n\t\twhile (i < this.eventListeners.length)\n\t\t{\n\t\t\tif (this.eventListeners[i+1] == funct)\n\t\t\t{\n\t\t\t\tthis.eventListeners.splice(i, 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fireEvent\n *\n * Dispatches the given event to the listeners which are registered for\n * the event. The sender argument is optional. The current execution scope\n * (\"this\") is used for the listener invocation (see <mxUtils.bind>).\n *\n * Example:\n *\n * (code)\n * fireEvent(new mxEventObject(\"eventName\", key1, val1, .., keyN, valN))\n * (end)\n * \n * Parameters:\n *\n * evt - <mxEventObject> that represents the event.\n * sender - Optional sender to be passed to the listener. Default value is\n * the return value of <getEventSource>.\n */\nmxEventSource.prototype.fireEvent = function(evt, sender)\n{\n\tif (this.eventListeners != null && this.isEventsEnabled())\n\t{\n\t\tif (evt == null)\n\t\t{\n\t\t\tevt = new mxEventObject();\n\t\t}\n\t\t\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this.getEventSource();\n\t\t}\n\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this;\n\t\t}\n\n\t\tvar args = [sender, evt];\n\t\t\n\t\tfor (var i = 0; i < this.eventListeners.length; i += 2)\n\t\t{\n\t\t\tvar listen = this.eventListeners[i];\n\t\t\t\n\t\t\tif (listen == null || listen == evt.getName())\n\t\t\t{\n\t\t\t\tthis.eventListeners[i+1].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEventSource = typeof mxEventSource !== 'undefined' ? mxEventSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEvent =\n{\n\n\t/**\n\t * Class: mxEvent\n\t * \n\t * Cross-browser DOM event support. For internal event handling,\n\t * <mxEventSource> and the graph event dispatch loop in <mxGraph> are used.\n\t * \n\t * Memory Leaks:\n\t * \n\t * Use this class for adding and removing listeners to/from DOM nodes. The\n\t * <removeAllListeners> function is provided to remove all listeners that\n\t * have been added using <addListener>. The function should be invoked when\n\t * the last reference is removed in the JavaScript code, typically when the\n\t * referenced DOM node is removed from the DOM.\n\t *\n\t * Function: addListener\n\t * \n\t * Binds the function to the specified event on the given element. Use\n\t * <mxUtils.bind> in order to bind the \"this\" keyword inside the function\n\t * to a given execution scope.\n\t */\n\taddListener: function()\n\t{\n\t\tvar updateListenerList = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList == null)\n\t\t\t{\n\t\t\t\telement.mxListenerList = [];\n\t\t\t}\n\t\t\t\n\t\t\tvar entry = {name: eventName, f: funct};\n\t\t\telement.mxListenerList.push(entry);\n\t\t};\n\t\t\n\t\tif (window.addEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.addEventListener(eventName, funct, false);\n\t\t\t\tupdateListenerList(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.attachEvent('on' + eventName, funct);\n\t\t\t\tupdateListenerList(element, eventName, funct);\t\t\t\t\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeListener\n\t *\n\t * Removes the specified listener from the given element.\n\t */\n\tremoveListener: function()\n\t{\n\t\tvar updateListener = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList != null)\n\t\t\t{\n\t\t\t\tvar listenerCount = element.mxListenerList.length;\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < listenerCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar entry = element.mxListenerList[i];\n\t\t\t\t\t\n\t\t\t\t\tif (entry.f == funct)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.mxListenerList.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (element.mxListenerList.length == 0)\n\t\t\t\t{\n\t\t\t\t\telement.mxListenerList = null;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tif (window.removeEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.removeEventListener(eventName, funct, false);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.detachEvent('on' + eventName, funct);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeAllListeners\n\t * \n\t * Removes all listeners from the given element.\n\t */\n\tremoveAllListeners: function(element)\n\t{\n\t\tvar list = element.mxListenerList;\n\n\t\tif (list != null)\n\t\t{\n\t\t\twhile (list.length > 0)\n\t\t\t{\n\t\t\t\tvar entry = list[0];\n\t\t\t\tmxEvent.removeListener(element, entry.name, entry.f);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: addGestureListeners\n\t * \n\t * Adds the given listeners for touch, mouse and/or pointer events. If\n\t * <mxClient.IS_POINTER> is true then pointer events will be registered,\n\t * else the respective mouse events will be registered. If <mxClient.IS_POINTER>\n\t * is false and <mxClient.IS_TOUCH> is true then the respective touch events\n\t * will be registered as well as the mouse events.\n\t */\n\taddGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: removeGestureListeners\n\t * \n\t * Removes the given listeners from mousedown, mousemove, mouseup and the\n\t * respective touch events if <mxClient.IS_TOUCH> is true.\n\t */\n\tremoveGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: redirectMouseEvents\n\t *\n\t * Redirects the mouse events from the given DOM node to the graph dispatch\n\t * loop using the event and given state as event arguments. State can\n\t * either be an instance of <mxCellState> or a function that returns an\n\t * <mxCellState>. The down, move, up and dblClick arguments are optional\n\t * functions that take the trigger event as arguments and replace the\n\t * default behaviour.\n\t */\n\tredirectMouseEvents: function(node, graph, state, down, move, up, dblClick)\n\t{\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\treturn (typeof(state) == 'function') ? state(evt) : state;\n\t\t};\n\t\t\n\t\tmxEvent.addGestureListeners(node, function (evt)\n\t\t{\n\t\t\tif (down != null)\n\t\t\t{\n\t\t\t\tdown(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (move != null)\n\t\t\t{\n\t\t\t\tmove(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (up != null)\n\t\t\t{\n\t\t\t\tup(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.addListener(node, 'dblclick', function (evt)\n\t\t{\n\t\t\tif (dblClick != null)\n\t\t\t{\n\t\t\t\tdblClick(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tvar tmp = getState(evt);\n\t\t\t\tgraph.dblClick(evt, (tmp != null) ? tmp.cell : null);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Function: release\n\t * \n\t * Removes the known listeners from the given DOM node and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the listeners from.\n\t */\n\trelease: function(element)\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (element != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeAllListeners(element);\n\t\t\t\t\n\t\t\t\tvar children = element.childNodes;\n\t\t\t\t\n\t\t\t\tif (children != null)\n\t\t\t\t{\n\t\t\t        var childCount = children.length;\n\t\t\t        \n\t\t\t        for (var i = 0; i < childCount; i += 1)\n\t\t\t        {\n\t\t\t        \tmxEvent.release(children[i]);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignores errors as this is typically called in cleanup code\n\t\t}\n\t},\n\n\t/**\n\t * Function: addMouseWheelListener\n\t * \n\t * Installs the given function as a handler for mouse wheel events. The\n\t * function has two arguments: the mouse event and a boolean that specifies\n\t * if the wheel was moved up or down.\n\t * \n\t * This has been tested with IE 6 and 7, Firefox (all versions), Opera and\n\t * Safari. It does currently not work on Safari for Mac.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * mxEvent.addMouseWheelListener(function (evt, up, pinch)\n\t * {\n\t *   mxLog.show();\n\t *   mxLog.debug('mouseWheel: up='+up);\n\t * });\n\t *(end)\n\t * \n\t * Parameters:\n\t * \n\t * funct - Handler function that takes the event argument, a boolean argument\n\t * for the mousewheel direction and a boolean to specify if the underlying\n\t * event was a pinch gesture on a touch device.\n\t * target - Target for installing the listener in Google Chrome. See \n\t * https://www.chromestatus.com/features/6662647093133312.\n\t */\n\taddMouseWheelListener: function(funct, target)\n\t{\n\t\tif (funct != null)\n\t\t{\n\t\t\tvar wheelHandler = function(evt)\n\t\t\t{\n\t\t\t\t// IE does not give an event object but the\n\t\t\t\t// global event object is the mousewheel event\n\t\t\t\t// at this point in time.\n\t\t\t\tif (evt == null)\n\t\t\t\t{\n\t\t\t\t\tevt = window.event;\n\t\t\t\t}\n\t\t\t\n\t\t\t\t//To prevent window zoom on trackpad pinch\n\t\t\t\tif (evt.ctrlKey) \n\t\t\t\t{\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tvar delta = -evt.deltaY;\n\t\t\t\t\n\t\t\t\t// Handles the event using the given function\n\t\t\t\tif (Math.abs(evt.deltaX) > 0.5 || Math.abs(evt.deltaY) > 0.5)\n\t\t\t\t{\n\t\t\t\t\tfunct(evt, (evt.deltaY == 0) ?  -evt.deltaX > 0 : -evt.deltaY > 0);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\ttarget = target != null ? target : window;\n\t\t\t\t\t\n\t\t\tif (mxClient.IS_SF && !mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar scale = 1;\n\t\t\t\t\n\t\t\t\tmxEvent.addListener(target, 'gesturestart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\tscale = 1;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tmxEvent.addListener(target, 'gesturechange', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\tvar diff = scale - evt.scale;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(diff) > 0.2)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt, diff < 0, true);\n\t\t\t\t\t\tscale = evt.scale;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmxEvent.addListener(target, 'gestureend', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar evtCache = [];\n\t\t\t\tvar dx0 = 0;\n\t\t\t\tvar dy0 = 0;\n\t\t\t\t\n\t\t\t\t// Adds basic listeners for graph event dispatching\n\t\t\t\tmxEvent.addGestureListeners(target, mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (!mxEvent.isMouseEvent(evt) && evt.pointerId != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tevtCache.push(evt);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (!mxEvent.isMouseEvent(evt) && evtCache.length == 2)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Find this event in the cache and update its record with this event\n\t\t\t\t\t\tfor (var i = 0; i < evtCache.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (evt.pointerId == evtCache[i].pointerId)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tevtCache[i] = evt;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t   \t// Calculate the distance between the two pointers\n\t\t\t\t\t\tvar dx = Math.abs(evtCache[0].clientX - evtCache[1].clientX);\n\t\t\t\t\t\tvar dy = Math.abs(evtCache[0].clientY - evtCache[1].clientY);\n\t\t\t\t\t\tvar tx = Math.abs(dx - dx0);\n\t\t\t\t\t\tvar ty = Math.abs(dy - dy0);\n\t\t\t\t\t\n\t\t\t\t\t\tif (tx > mxEvent.PINCH_THRESHOLD || ty > mxEvent.PINCH_THRESHOLD)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar cx = evtCache[0].clientX + (evtCache[1].clientX - evtCache[0].clientX) / 2;\n\t\t\t\t\t\t\tvar cy = evtCache[0].clientY + (evtCache[1].clientY - evtCache[0].clientY) / 2;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfunct(evtCache[0], (tx > ty) ? dx > dx0 : dy > dy0, true, cx, cy);\n\t\t\t\t\t\t\n\t\t\t\t\t\t   \t// Cache the distance for the next move event \n\t\t\t\t\t\t\tdx0 = dx;\n\t\t\t\t\t\t\tdy0 = dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tevtCache = [];\n\t\t\t\t\tdx0 = 0;\n\t\t\t\t\tdy0 = 0;\n\t\t\t\t}));\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.addListener(target, 'wheel', wheelHandler);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: disableContextMenu\n\t *\n\t * Disables the context menu for the given element.\n\t */\n\tdisableContextMenu: function(element)\n\t{\n\t\tmxEvent.addListener(element, 'contextmenu', function(evt)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t},\n\t\n\t/**\n\t * Function: getSource\n\t * \n\t * Returns the event's target or srcElement depending on the browser.\n\t */\n\tgetSource: function(evt)\n\t{\n\t\treturn (evt.srcElement != null) ? evt.srcElement : evt.target;\n\t},\n\n\t/**\n\t * Function: isConsumed\n\t * \n\t * Returns true if the event has been consumed using <consume>.\n\t */\n\tisConsumed: function(evt)\n\t{\n\t\treturn evt.isConsumed != null && evt.isConsumed;\n\t},\n\n\t/**\n\t * Function: isTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisTouchEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'touch' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_TOUCH) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 5 : evt.type.indexOf('touch') == 0);\n\t},\n\n\t/**\n\t * Function: isPenEvent\n\t * \n\t * Returns true if the event was generated using a pen (not a touch device or mouse).\n\t */\n\tisPenEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'pen' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_PEN) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 2 : evt.type.indexOf('pen') == 0);\n\t},\n\n\t/**\n\t * Function: isMultiTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisMultiTouchEvent: function(evt)\n\t{\n\t\treturn (evt.type != null && evt.type.indexOf('touch') == 0 && evt.touches != null && evt.touches.length > 1);\n\t},\n\n\t/**\n\t * Function: isMouseEvent\n\t * \n\t * Returns true if the event was generated using a mouse (not a pen or touch device).\n\t */\n\tisMouseEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'mouse' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?\n\t\t\t\tevt.mozInputSource == 1 : evt.type.indexOf('mouse') == 0);\n\t},\n\t\n\t/**\n\t * Function: isLeftMouseButton\n\t * \n\t * Returns true if the left mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property. Note that this returns true in Firefox\n\t * for control+left-click on the Mac.\n\t */\n\tisLeftMouseButton: function(evt)\n\t{\n\t\t// Special case for mousemove and mousedown we check the buttons\n\t\t// if it exists because which is 0 even if no button is pressed\n\t\tif ('buttons' in evt && (evt.type == 'mousedown' || evt.type == 'mousemove'))\n\t\t{\n\t\t\treturn evt.buttons == 1;\n\t\t}\n\t\telse if ('which' in evt)\n\t\t{\n\t        return evt.which === 1;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 1;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isMiddleMouseButton\n\t * \n\t * Returns true if the middle mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property.\n\t */\n\tisMiddleMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 2;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 4;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isRightMouseButton\n\t * \n\t * Returns true if the right mouse button was pressed. Note that this\n\t * button might not be available on some systems. For handling a popup\n\t * trigger <isPopupTrigger> should be used.\n\t */\n\tisRightMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 3;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 2;\n\t    }\n\t},\n\n\t/**\n\t * Function: isPopupTrigger\n\t * \n\t * Returns true if the event is a popup trigger. This implementation\n\t * returns true if the right button or the left button and control was\n\t * pressed on a Mac.\n\t */\n\tisPopupTrigger: function(evt)\n\t{\n\t\treturn mxEvent.isRightMouseButton(evt) || (mxClient.IS_MAC && mxEvent.isControlDown(evt) &&\n\t\t\t!mxEvent.isShiftDown(evt) && !mxEvent.isMetaDown(evt) && !mxEvent.isAltDown(evt));\n\t},\n\n\t/**\n\t * Function: isShiftDown\n\t * \n\t * Returns true if the shift key is pressed for the given event.\n\t */\n\tisShiftDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.shiftKey : false;\n\t},\n\n\t/**\n\t * Function: isAltDown\n\t * \n\t * Returns true if the alt key is pressed for the given event.\n\t */\n\tisAltDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.altKey : false;\n\t},\n\n\t/**\n\t * Function: isControlDown\n\t * \n\t * Returns true if the control key is pressed for the given event.\n\t */\n\tisControlDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.ctrlKey : false;\n\t},\n\n\t/**\n\t * Function: isMetaDown\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tisMetaDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.metaKey : false;\n\t},\n\n\t/**\n\t * Function: getMainEvent\n\t * \n\t * Returns the touch or mouse event that contains the mouse coordinates.\n\t */\n\tgetMainEvent: function(e)\n\t{\n\t\tif ((e.type == 'touchstart' || e.type == 'touchmove') && e.touches != null && e.touches[0] != null)\n\t\t{\n\t\t\te = e.touches[0];\n\t\t}\n\t\telse if (e.type == 'touchend' && e.changedTouches != null && e.changedTouches[0] != null)\n\t\t{\n\t\t\te = e.changedTouches[0];\n\t\t}\n\t\t\n\t\treturn e;\n\t},\n\t\n\t/**\n\t * Function: getClientX\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientX: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientX;\n\t},\n\n\t/**\n\t * Function: getClientY\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientY: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientY;\n\t},\n\n\t/**\n\t * Function: consume\n\t * \n\t * Consumes the given event.\n\t * \n\t * Parameters:\n\t * \n\t * evt - Native event to be consumed.\n\t * preventDefault - Optional boolean to prevent the default for the event.\n\t * Default is true.\n\t * stopPropagation - Option boolean to stop event propagation. Default is\n\t * true.\n\t */\n\tconsume: function(evt, preventDefault, stopPropagation)\n\t{\n\t\tpreventDefault = (preventDefault != null) ? preventDefault : true;\n\t\tstopPropagation = (stopPropagation != null) ? stopPropagation : true;\n\t\t\n\t\tif (preventDefault)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tif (stopPropagation)\n\t\t\t\t{\n\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\telse if (stopPropagation)\n\t\t\t{\n\t\t\t\tevt.cancelBubble = true;\n\t\t\t}\n\t\t}\n\n\t\t// Opera\n\t\tevt.isConsumed = true;\n\n\t\t// Other browsers\n\t\tif (!evt.preventDefault)\n\t\t{\n\t\t\tevt.returnValue = false;\n\t\t}\n\t},\n\t\n\t//\n\t// Special handles in mouse events\n\t//\n\t\n\t/**\n\t * Variable: LABEL_HANDLE\n\t * \n\t * Index for the label handle in an mxMouseEvent. This should be a negative\n\t * value that does not interfere with any possible handle indices. Default\n\t * is -1.\n\t */\n\tLABEL_HANDLE: -1,\n\t\n\t/**\n\t * Variable: ROTATION_HANDLE\n\t * \n\t * Index for the rotation handle in an mxMouseEvent. This should be a\n\t * negative value that does not interfere with any possible handle indices.\n\t * Default is -2.\n\t */\n\tROTATION_HANDLE: -2,\n\t\n\t/**\n\t * Variable: CUSTOM_HANDLE\n\t * \n\t * Start index for the custom handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * custom handle. Default is -100.\n\t */\n\tCUSTOM_HANDLE: -100,\n\t\n\t/**\n\t * Variable: VIRTUAL_HANDLE\n\t * \n\t * Start index for the virtual handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * virtual handle. Default is -100000. This assumes that there are no more\n\t * than VIRTUAL_HANDLE - CUSTOM_HANDLE custom handles.\n\t * \n\t */\n\tVIRTUAL_HANDLE: -100000,\n\t\n\t//\n\t// Event names\n\t//\n\t\n\t/**\n\t * Variable: MOUSE_DOWN\n\t *\n\t * Specifies the event name for mouseDown.\n\t */\n\tMOUSE_DOWN: 'mouseDown',\n\t\n\t/**\n\t * Variable: MOUSE_MOVE\n\t *\n\t * Specifies the event name for mouseMove. \n\t */\n\tMOUSE_MOVE: 'mouseMove',\n\t\n\t/**\n\t * Variable: MOUSE_UP\n\t *\n\t * Specifies the event name for mouseUp. \n\t */\n\tMOUSE_UP: 'mouseUp',\n\n\t/**\n\t * Variable: ACTIVATE\n\t *\n\t * Specifies the event name for activate.\n\t */\n\tACTIVATE: 'activate',\n\n\t/**\n\t * Variable: RESIZE_START\n\t *\n\t * Specifies the event name for resizeStart.\n\t */\n\tRESIZE_START: 'resizeStart',\n\n\t/**\n\t * Variable: RESIZE\n\t *\n\t * Specifies the event name for resize.\n\t */\n\tRESIZE: 'resize',\n\n\t/**\n\t * Variable: RESIZE_END\n\t *\n\t * Specifies the event name for resizeEnd.\n\t */\n\tRESIZE_END: 'resizeEnd',\n\n\t/**\n\t * Variable: MOVE_START\n\t *\n\t * Specifies the event name for moveStart.\n\t */\n\tMOVE_START: 'moveStart',\n\n\t/**\n\t * Variable: MOVE\n\t *\n\t * Specifies the event name for move.\n\t */\n\tMOVE: 'move',\n\n\t/**\n\t * Variable: MOVE_END\n\t *\n\t * Specifies the event name for moveEnd.\n\t */\n\tMOVE_END: 'moveEnd',\n\n\t/**\n\t * Variable: PAN_START\n\t *\n\t * Specifies the event name for panStart.\n\t */\n\tPAN_START: 'panStart',\n\n\t/**\n\t * Variable: PAN\n\t *\n\t * Specifies the event name for pan.\n\t */\n\tPAN: 'pan',\n\n\t/**\n\t * Variable: PAN_END\n\t *\n\t * Specifies the event name for panEnd.\n\t */\n\tPAN_END: 'panEnd',\n\n\t/**\n\t * Variable: MINIMIZE\n\t *\n\t * Specifies the event name for minimize.\n\t */\n\tMINIMIZE: 'minimize',\n\n\t/**\n\t * Variable: NORMALIZE\n\t *\n\t * Specifies the event name for normalize.\n\t */\n\tNORMALIZE: 'normalize',\n\n\t/**\n\t * Variable: MAXIMIZE\n\t *\n\t * Specifies the event name for maximize.\n\t */\n\tMAXIMIZE: 'maximize',\n\n\t/**\n\t * Variable: HIDE\n\t *\n\t * Specifies the event name for hide.\n\t */\n\tHIDE: 'hide',\n\n\t/**\n\t * Variable: SHOW\n\t *\n\t * Specifies the event name for show.\n\t */\n\tSHOW: 'show',\n\n\t/**\n\t * Variable: CLOSE\n\t *\n\t * Specifies the event name for close.\n\t */\n\tCLOSE: 'close',\n\n\t/**\n\t * Variable: DESTROY\n\t *\n\t * Specifies the event name for destroy.\n\t */\n\tDESTROY: 'destroy',\n\n\t/**\n\t * Variable: REFRESH\n\t *\n\t * Specifies the event name for refresh.\n\t */\n\tREFRESH: 'refresh',\n\n\t/**\n\t * Variable: SIZE\n\t *\n\t * Specifies the event name for size.\n\t */\n\tSIZE: 'size',\n\t\n\t/**\n\t * Variable: SELECT\n\t *\n\t * Specifies the event name for select.\n\t */\n\tSELECT: 'select',\n\n\t/**\n\t * Variable: FIRED\n\t *\n\t * Specifies the event name for fired.\n\t */\n\tFIRED: 'fired',\n\n\t/**\n\t * Variable: FIRE_MOUSE_EVENT\n\t *\n\t * Specifies the event name for fireMouseEvent.\n\t */\n\tFIRE_MOUSE_EVENT: 'fireMouseEvent',\n\n\t/**\n\t * Variable: GESTURE\n\t *\n\t * Specifies the event name for gesture.\n\t */\n\tGESTURE: 'gesture',\n\n\t/**\n\t * Variable: TAP_AND_HOLD\n\t *\n\t * Specifies the event name for tapAndHold.\n\t */\n\tTAP_AND_HOLD: 'tapAndHold',\n\n\t/**\n\t * Variable: GET\n\t *\n\t * Specifies the event name for get.\n\t */\n\tGET: 'get',\n\n\t/**\n\t * Variable: RECEIVE\n\t *\n\t * Specifies the event name for receive.\n\t */\n\tRECEIVE: 'receive',\n\n\t/**\n\t * Variable: CONNECT\n\t *\n\t * Specifies the event name for connect.\n\t */\n\tCONNECT: 'connect',\n\n\t/**\n\t * Variable: DISCONNECT\n\t *\n\t * Specifies the event name for disconnect.\n\t */\n\tDISCONNECT: 'disconnect',\n\n\t/**\n\t * Variable: SUSPEND\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tSUSPEND: 'suspend',\n\n\t/**\n\t * Variable: RESUME\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tRESUME: 'resume',\n\n\t/**\n\t * Variable: MARK\n\t *\n\t * Specifies the event name for mark.\n\t */\n\tMARK: 'mark',\n\n\t/**\n\t * Variable: ROOT\n\t *\n\t * Specifies the event name for root.\n\t */\n\tROOT: 'root',\n\n\t/**\n\t * Variable: POST\n\t *\n\t * Specifies the event name for post.\n\t */\n\tPOST: 'post',\n\n\t/**\n\t * Variable: OPEN\n\t *\n\t * Specifies the event name for open.\n\t */\n\tOPEN: 'open',\n\n\t/**\n\t * Variable: SAVE\n\t *\n\t * Specifies the event name for open.\n\t */\n\tSAVE: 'save',\n\n\t/**\n\t * Variable: BEFORE_ADD_VERTEX\n\t *\n\t * Specifies the event name for beforeAddVertex.\n\t */\n\tBEFORE_ADD_VERTEX: 'beforeAddVertex',\n\n\t/**\n\t * Variable: ADD_VERTEX\n\t *\n\t * Specifies the event name for addVertex.\n\t */\n\tADD_VERTEX: 'addVertex',\n\n\t/**\n\t * Variable: AFTER_ADD_VERTEX\n\t *\n\t * Specifies the event name for afterAddVertex.\n\t */\n\tAFTER_ADD_VERTEX: 'afterAddVertex',\n\n\t/**\n\t * Variable: DONE\n\t *\n\t * Specifies the event name for done.\n\t */\n\tDONE: 'done',\n\n\t/**\n\t * Variable: EXECUTE\n\t *\n\t * Specifies the event name for execute.\n\t */\n\tEXECUTE: 'execute',\n\n\t/**\n\t * Variable: EXECUTED\n\t *\n\t * Specifies the event name for executed.\n\t */\n\tEXECUTED: 'executed',\n\n\t/**\n\t * Variable: BEGIN_UPDATE\n\t *\n\t * Specifies the event name for beginUpdate.\n\t */\n\tBEGIN_UPDATE: 'beginUpdate',\n\n\t/**\n\t * Variable: START_EDIT\n\t *\n\t * Specifies the event name for startEdit.\n\t */\n\tSTART_EDIT: 'startEdit',\n\n\t/**\n\t * Variable: END_UPDATE\n\t *\n\t * Specifies the event name for endUpdate.\n\t */\n\tEND_UPDATE: 'endUpdate',\n\n\t/**\n\t * Variable: END_EDIT\n\t *\n\t * Specifies the event name for endEdit.\n\t */\n\tEND_EDIT: 'endEdit',\n\n\t/**\n\t * Variable: BEFORE_UNDO\n\t *\n\t * Specifies the event name for beforeUndo.\n\t */\n\tBEFORE_UNDO: 'beforeUndo',\n\n\t/**\n\t * Variable: UNDO\n\t *\n\t * Specifies the event name for undo.\n\t */\n\tUNDO: 'undo',\n\n\t/**\n\t * Variable: REDO\n\t *\n\t * Specifies the event name for redo.\n\t */\n\tREDO: 'redo',\n\n\t/**\n\t * Variable: CHANGE\n\t *\n\t * Specifies the event name for change.\n\t */\n\tCHANGE: 'change',\n\n\t/**\n\t * Variable: NOTIFY\n\t *\n\t * Specifies the event name for notify.\n\t */\n\tNOTIFY: 'notify',\n\n\t/**\n\t * Variable: LAYOUT_CELLS\n\t *\n\t * Specifies the event name for layoutCells.\n\t */\n\tLAYOUT_CELLS: 'layoutCells',\n\n\t/**\n\t * Variable: CLICK\n\t *\n\t * Specifies the event name for click.\n\t */\n\tCLICK: 'click',\n\n\t/**\n\t * Variable: SCALE\n\t *\n\t * Specifies the event name for scale.\n\t */\n\tSCALE: 'scale',\n\n\t/**\n\t * Variable: TRANSLATE\n\t *\n\t * Specifies the event name for translate.\n\t */\n\tTRANSLATE: 'translate',\n\n\t/**\n\t * Variable: SCALE_AND_TRANSLATE\n\t *\n\t * Specifies the event name for scaleAndTranslate.\n\t */\n\tSCALE_AND_TRANSLATE: 'scaleAndTranslate',\n\n\t/**\n\t * Variable: UP\n\t *\n\t * Specifies the event name for up.\n\t */\n\tUP: 'up',\n\n\t/**\n\t * Variable: DOWN\n\t *\n\t * Specifies the event name for down.\n\t */\n\tDOWN: 'down',\n\n\t/**\n\t * Variable: ADD\n\t *\n\t * Specifies the event name for add.\n\t */\n\tADD: 'add',\n\n\t/**\n\t * Variable: REMOVE\n\t *\n\t * Specifies the event name for remove.\n\t */\n\tREMOVE: 'remove',\n\t\n\t/**\n\t * Variable: CLEAR\n\t *\n\t * Specifies the event name for clear.\n\t */\n\tCLEAR: 'clear',\n\n\t/**\n\t * Variable: ADD_CELLS\n\t *\n\t * Specifies the event name for addCells.\n\t */\n\tADD_CELLS: 'addCells',\n\n\t/**\n\t * Variable: CELLS_ADDED\n\t *\n\t * Specifies the event name for cellsAdded.\n\t */\n\tCELLS_ADDED: 'cellsAdded',\n\n\t/**\n\t * Variable: MOVE_CELLS\n\t *\n\t * Specifies the event name for moveCells.\n\t */\n\tMOVE_CELLS: 'moveCells',\n\n\t/**\n\t * Variable: CELLS_MOVED\n\t *\n\t * Specifies the event name for cellsMoved.\n\t */\n\tCELLS_MOVED: 'cellsMoved',\n\n\t/**\n\t * Variable: RESIZE_CELLS\n\t *\n\t * Specifies the event name for resizeCells.\n\t */\n\tRESIZE_CELLS: 'resizeCells',\n\n\t/**\n\t * Variable: CELLS_RESIZED\n\t *\n\t * Specifies the event name for cellsResized.\n\t */\n\tCELLS_RESIZED: 'cellsResized',\n\n\t/**\n\t * Variable: TOGGLE_CELLS\n\t *\n\t * Specifies the event name for toggleCells.\n\t */\n\tTOGGLE_CELLS: 'toggleCells',\n\n\t/**\n\t * Variable: CELLS_TOGGLED\n\t *\n\t * Specifies the event name for cellsToggled.\n\t */\n\tCELLS_TOGGLED: 'cellsToggled',\n\n\t/**\n\t * Variable: ORDER_CELLS\n\t *\n\t * Specifies the event name for orderCells.\n\t */\n\tORDER_CELLS: 'orderCells',\n\n\t/**\n\t * Variable: CELLS_ORDERED\n\t *\n\t * Specifies the event name for cellsOrdered.\n\t */\n\tCELLS_ORDERED: 'cellsOrdered',\n\n\t/**\n\t * Variable: REMOVE_CELLS\n\t *\n\t * Specifies the event name for removeCells.\n\t */\n\tREMOVE_CELLS: 'removeCells',\n\n\t/**\n\t * Variable: CELLS_REMOVED\n\t *\n\t * Specifies the event name for cellsRemoved.\n\t */\n\tCELLS_REMOVED: 'cellsRemoved',\n\n\t/**\n\t * Variable: GROUP_CELLS\n\t *\n\t * Specifies the event name for groupCells.\n\t */\n\tGROUP_CELLS: 'groupCells',\n\n\t/**\n\t * Variable: UNGROUP_CELLS\n\t *\n\t * Specifies the event name for ungroupCells.\n\t */\n\tUNGROUP_CELLS: 'ungroupCells',\n\n\t/**\n\t * Variable: REMOVE_CELLS_FROM_PARENT\n\t *\n\t * Specifies the event name for removeCellsFromParent.\n\t */\n\tREMOVE_CELLS_FROM_PARENT: 'removeCellsFromParent',\n\n\t/**\n\t * Variable: FOLD_CELLS\n\t *\n\t * Specifies the event name for foldCells.\n\t */\n\tFOLD_CELLS: 'foldCells',\n\n\t/**\n\t * Variable: CELLS_FOLDED\n\t *\n\t * Specifies the event name for cellsFolded.\n\t */\n\tCELLS_FOLDED: 'cellsFolded',\n\n\t/**\n\t * Variable: ALIGN_CELLS\n\t *\n\t * Specifies the event name for alignCells.\n\t */\n\tALIGN_CELLS: 'alignCells',\n\n\t/**\n\t * Variable: LABEL_CHANGED\n\t *\n\t * Specifies the event name for labelChanged.\n\t */\n\tLABEL_CHANGED: 'labelChanged',\n\n\t/**\n\t * Variable: CONNECT_CELL\n\t *\n\t * Specifies the event name for connectCell.\n\t */\n\tCONNECT_CELL: 'connectCell',\n\n\t/**\n\t * Variable: CELL_CONNECTED\n\t *\n\t * Specifies the event name for cellConnected.\n\t */\n\tCELL_CONNECTED: 'cellConnected',\n\n\t/**\n\t * Variable: SPLIT_EDGE\n\t *\n\t * Specifies the event name for splitEdge.\n\t */\n\tSPLIT_EDGE: 'splitEdge',\n\n\t/**\n\t * Variable: FLIP_EDGE\n\t *\n\t * Specifies the event name for flipEdge.\n\t */\n\tFLIP_EDGE: 'flipEdge',\n\n\t/**\n\t * Variable: START_EDITING\n\t *\n\t * Specifies the event name for startEditing.\n\t */\n\tSTART_EDITING: 'startEditing',\n\n\t/**\n\t * Variable: EDITING_STARTED\n\t *\n\t * Specifies the event name for editingStarted.\n\t */\n\tEDITING_STARTED: 'editingStarted',\n\n\t/**\n\t * Variable: EDITING_STOPPED\n\t *\n\t * Specifies the event name for editingStopped.\n\t */\n\tEDITING_STOPPED: 'editingStopped',\n\n\t/**\n\t * Variable: ADD_OVERLAY\n\t *\n\t * Specifies the event name for addOverlay.\n\t */\n\tADD_OVERLAY: 'addOverlay',\n\n\t/**\n\t * Variable: REMOVE_OVERLAY\n\t *\n\t * Specifies the event name for removeOverlay.\n\t */\n\tREMOVE_OVERLAY: 'removeOverlay',\n\n\t/**\n\t * Variable: UPDATE_CELL_SIZE\n\t *\n\t * Specifies the event name for updateCellSize.\n\t */\n\tUPDATE_CELL_SIZE: 'updateCellSize',\n\n\t/**\n\t * Variable: ESCAPE\n\t *\n\t * Specifies the event name for escape.\n\t */\n\tESCAPE: 'escape',\n\n\t/**\n\t * Variable: DOUBLE_CLICK\n\t *\n\t * Specifies the event name for doubleClick.\n\t */\n\tDOUBLE_CLICK: 'doubleClick',\n\n\t/**\n\t * Variable: START\n\t *\n\t * Specifies the event name for start.\n\t */\n\tSTART: 'start',\n\n\t/**\n\t * Variable: RESET\n\t *\n\t * Specifies the event name for reset.\n\t */\n\tRESET: 'reset',\n\n\t/**\n\t * Variable: PINCH_THRESHOLD\n\t *\n\t * Threshold for pinch gestures to fire a mouse wheel event.\n\t * Default value is 10.\n\t */\n\tPINCH_THRESHOLD: 10\n\n};\n\n__mxOutput.mxEvent = typeof mxEvent !== 'undefined' ? mxEvent : undefined;\n\n/**\n * Copyright (c) 2006-2020, JGraph Ltd\n * Copyright (c) 2006-2020, draw.io AG\n */\n/**\n * Class: mxXmlRequest\n * \n * XML HTTP request wrapper. See also: <mxUtils.get>, <mxUtils.post> and\n * <mxUtils.load>. This class provides a cross-browser abstraction for Ajax\n * requests.\n * \n * Encoding:\n * \n * For encoding parameter values, the built-in encodeURIComponent JavaScript\n * method must be used. For automatic encoding of post data in <mxEditor> the\n * <mxEditor.escapePostData> switch can be set to true (default). The encoding\n * will be carried out using the conte type of the page. That is, the page\n * containting the editor should contain a meta tag in the header, eg.\n * <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n * \n * Example:\n * \n * (code)\n * var onload = function(req)\n * {\n *   mxUtils.alert(req.getDocumentElement());\n * }\n * \n * var onerror = function(req)\n * {\n *   mxUtils.alert('Error');\n * }\n * new mxXmlRequest(url, 'key=value').send(onload, onerror);\n * (end)\n * \n * Sends an asynchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var req = new mxXmlRequest(url, 'key=value', 'POST', false);\n * req.send();\n * mxUtils.alert(req.getDocumentElement());\n * (end)\n * \n * Sends a synchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = encodeURIComponent(mxUtils.getXml(result));\n * new mxXmlRequest(url, 'xml='+xml).send();\n * (end)\n * \n * Sends an encoded graph model to the specified URL using xml as the\n * parameter name. The parameter can then be retrieved in C# as follows:\n * \n * (code)\n * string xml = HttpUtility.UrlDecode(context.Request.Params[\"xml\"]);\n * (end)\n * \n * Or in Java as follows:\n * \n * (code)\n * String xml = URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\");\n * (end)\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image.\n * \n * Constructor: mxXmlRequest\n * \n * Constructs an XML HTTP request.\n * \n * Parameters:\n * \n * url - Target URL of the request.\n * params - Form encoded parameters to send with a POST request.\n * method - String that specifies the request method. Possible values are\n * POST and GET. Default is POST.\n * async - Boolean specifying if an asynchronous request should be used.\n * Default is true.\n * username - String specifying the username to be used for the request.\n * password - String specifying the password to be used for the request.\n */\nfunction mxXmlRequest(url, params, method, async, username, password)\n{\n\tthis.url = url;\n\tthis.params = params;\n\tthis.method = method || 'POST';\n\tthis.async = (async != null) ? async : true;\n\tthis.username = username;\n\tthis.password = password;\n};\n\n/**\n * Variable: url\n * \n * Holds the target URL of the request.\n */\nmxXmlRequest.prototype.url = null;\n\n/**\n * Variable: params\n * \n * Holds the form encoded data for the POST request.\n */\nmxXmlRequest.prototype.params = null;\n\n/**\n * Variable: method\n * \n * Specifies the request method. Possible values are POST and GET. Default\n * is POST.\n */\nmxXmlRequest.prototype.method = null;\n\n/**\n * Variable: async\n * \n * Boolean indicating if the request is asynchronous.\n */\nmxXmlRequest.prototype.async = null;\n\n/**\n * Variable: binary\n * \n * Boolean indicating if the request is binary. This option is ignored in IE.\n * In all other browsers the requested mime type is set to\n * text/plain; charset=x-user-defined. Default is false.\n */\nmxXmlRequest.prototype.binary = false;\n\n/**\n * Variable: withCredentials\n * \n * Specifies if withCredentials should be used in HTML5-compliant browsers. Default is\n * false.\n */\nmxXmlRequest.prototype.withCredentials = false;\n\n/**\n * Variable: username\n * \n * Specifies the username to be used for authentication.\n */\nmxXmlRequest.prototype.username = null;\n\n/**\n * Variable: password\n * \n * Specifies the password to be used for authentication.\n */\nmxXmlRequest.prototype.password = null;\n\n/**\n * Variable: request\n * \n * Holds the inner, browser-specific request object.\n */\nmxXmlRequest.prototype.request = null;\n\n/**\n * Variable: decodeSimulateValues\n * \n * Specifies if request values should be decoded as URIs before setting the\n * textarea value in <simulate>. Defaults to false for backwards compatibility,\n * to avoid another decode on the server this should be set to true.\n */\nmxXmlRequest.prototype.decodeSimulateValues = false;\n\n/**\n * Function: isBinary\n * \n * Returns <binary>.\n */\nmxXmlRequest.prototype.isBinary = function()\n{\n\treturn this.binary;\n};\n\n/**\n * Function: setBinary\n * \n * Sets <binary>.\n */\nmxXmlRequest.prototype.setBinary = function(value)\n{\n\tthis.binary = value;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: isReady\n * \n * Returns true if the response is ready.\n */\nmxXmlRequest.prototype.isReady = function()\n{\n\treturn this.request.readyState == 4;\n};\n\n/**\n * Function: getDocumentElement\n * \n * Returns the document element of the response XML document.\n */\nmxXmlRequest.prototype.getDocumentElement = function()\n{\n\tvar doc = this.getXml();\n\t\n\tif (doc != null)\n\t{\n\t\treturn doc.documentElement;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getXml\n * \n * Returns the response as an XML document. Use <getDocumentElement> to get\n * the document element of the XML document.\n */\nmxXmlRequest.prototype.getXml = function()\n{\n\tvar xml = this.request.responseXML;\n\t\n\t// Handles missing response headers in IE, the first condition handles\n\t// the case where responseXML is there, but using its nodes leads to\n\t// type errors in the mxCellCodec when putting the nodes into a new\n\t// document. This happens in IE9 standards mode and with XML user\n\t// objects only, as they are used directly as values in cells.\n\tif (document.documentMode >= 9 || xml == null || xml.documentElement == null)\n\t{\n\t\txml = mxUtils.parseXml(this.request.responseText);\n\t}\n\t\n\treturn xml;\n};\n\n/**\n * Function: getStatus\n * \n * Returns the status as a number, eg. 404 for \"Not found\" or 200 for \"OK\".\n * Note: The NS_ERROR_NOT_AVAILABLE for invalid responses cannot be cought.\n */\nmxXmlRequest.prototype.getStatus = function()\n{\n\treturn (this.request != null) ? this.request.status : null;\n};\n\n/**\n * Function: create\n * \n * Creates and returns the inner <request> object.\n */\nmxXmlRequest.prototype.create = function()\n{\n\tif (window.XMLHttpRequest)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\tvar req = new XMLHttpRequest();\n\t\t\t\n\t\t\t// TODO: Check for overrideMimeType required here?\n\t\t\tif (this.isBinary() && req.overrideMimeType)\n\t\t\t{\n\t\t\t\treq.overrideMimeType('text/plain; charset=x-user-defined');\n\t\t\t}\n\n\t\t\treturn req;\n\t\t};\n\t}\n\telse if (typeof(ActiveXObject) != 'undefined')\n\t{\n\t\treturn function()\n\t\t{\n\t\t\t// TODO: Implement binary option\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\n\t\t};\n\t}\n}();\n\n/**\n * Function: send\n * \n * Send the <request> to the target URL using the specified functions to\n * process the response asychronously.\n * \n * Note: Due to technical limitations, onerror is currently ignored.\n * \n * Parameters:\n * \n * onload - Function to be invoked if a successful response was received.\n * onerror - Function to be called on any error. Unused in this implementation, intended for overriden function.\n * timeout - Optional timeout in ms before calling ontimeout.\n * ontimeout - Optional function to execute on timeout.\n */\nmxXmlRequest.prototype.send = function(onload, onerror, timeout, ontimeout)\n{\n\tthis.request = this.create();\n\t\n\tif (this.request != null)\n\t{\n\t\tif (onload != null)\n\t\t{\n\t\t\tthis.request.onreadystatechange = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (this.isReady())\n\t\t\t\t{\n\t\t\t\t\tonload(this);\n\t\t\t\t\tthis.request.onreadystatechange = null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.request.open(this.method, this.url, this.async,\n\t\t\tthis.username, this.password);\n\t\tthis.setRequestHeaders(this.request, this.params);\n\t\t\n\t\tif (window.XMLHttpRequest && this.withCredentials)\n\t\t{\n\t\t\tthis.request.withCredentials = 'true';\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_QUIRKS && (document.documentMode == null || document.documentMode > 9) &&\n\t\t\twindow.XMLHttpRequest && timeout != null && ontimeout != null)\n\t\t{\n\t\t\tthis.request.timeout = timeout;\n\t\t\tthis.request.ontimeout = ontimeout;\n\t\t}\n\t\t\t\t\n\t\tthis.request.send(this.params);\n\t}\n};\n\n/**\n * Function: setRequestHeaders\n * \n * Sets the headers for the given request and parameters. This sets the\n * content-type to application/x-www-form-urlencoded if any params exist.\n * \n * Example:\n * \n * (code)\n * request.setRequestHeaders = function(request, params)\n * {\n *   if (params != null)\n *   {\n *     request.setRequestHeader('Content-Type',\n *             'multipart/form-data');\n *     request.setRequestHeader('Content-Length',\n *             params.length);\n *   }\n * };\n * (end)\n * \n * Use the code above before calling <send> if you require a\n * multipart/form-data request.   \n */\nmxXmlRequest.prototype.setRequestHeaders = function(request, params)\n{\n\tif (params != null)\n\t{\n\t\trequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t}\n};\n\n/**\n * Function: simulate\n * \n * Creates and posts a request to the given target URL using a dynamically\n * created form inside the given document.\n * \n * Parameters:\n * \n * docs - Document that contains the form element.\n * target - Target to send the form result to.\n */\nmxXmlRequest.prototype.simulate = function(doc, target)\n{\n\tdoc = doc || document;\n\tvar old = null;\n\n\tif (doc == document)\n\t{\n\t\told = window.onbeforeunload;\t\t\n\t\twindow.onbeforeunload = null;\n\t}\n\t\t\t\n\tvar form = doc.createElement('form');\n\tform.setAttribute('method', this.method);\n\tform.setAttribute('action', this.url);\n\n\tif (target != null)\n\t{\n\t\tform.setAttribute('target', target);\n\t}\n\n\tform.style.display = 'none';\n\tform.style.visibility = 'hidden';\n\t\n\tvar pars = (this.params.indexOf('&') > 0) ?\n\t\tthis.params.split('&') :\n\t\tthis.params.split();\n\n\t// Adds the parameters as textareas to the form\n\tfor (var i=0; i<pars.length; i++)\n\t{\n\t\tvar pos = pars[i].indexOf('=');\n\t\t\n\t\tif (pos > 0)\n\t\t{\n\t\t\tvar name = pars[i].substring(0, pos);\n\t\t\tvar value = pars[i].substring(pos+1);\n\t\t\t\n\t\t\tif (this.decodeSimulateValues)\n\t\t\t{\n\t\t\t\tvalue = decodeURIComponent(value);\n\t\t\t}\n\t\t\t\n\t\t\tvar textarea = doc.createElement('textarea');\n\t\t\ttextarea.setAttribute('wrap', 'off');\n\t\t\ttextarea.setAttribute('name', name);\n\t\t\tmxUtils.write(textarea, value);\n\t\t\tform.appendChild(textarea);\n\t\t}\n\t}\n\t\n\tdoc.body.appendChild(form);\n\tform.submit();\n\t\n\tif (form.parentNode != null)\n\t{\n\t\tform.parentNode.removeChild(form);\n\t}\n\n\tif (old != null)\n\t{\t\t\n\t\twindow.onbeforeunload = old;\n\t}\n};\n\n__mxOutput.mxXmlRequest = typeof mxXmlRequest !== 'undefined' ? mxXmlRequest : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxClipboard =\n{\n\t/**\n\t * Class: mxClipboard\n\t * \n\t * Singleton that implements a clipboard for graph cells.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxClipboard.copy(graph);\n\t * mxClipboard.paste(graph2);\n\t * (end)\n\t *\n\t * This copies the selection cells from the graph to the clipboard and\n\t * pastes them into graph2.\n\t * \n\t * For fine-grained control of the clipboard data the <mxGraph.canExportCell>\n\t * and <mxGraph.canImportCell> functions can be overridden.\n\t * \n\t * To restore previous parents for pasted cells, the implementation for\n\t * <copy> and <paste> can be changed as follows.\n\t * \n\t * (code)\n\t * mxClipboard.copy = function(graph, cells)\n\t * {\n\t *   cells = cells || graph.getSelectionCells();\n\t *   var result = graph.getExportableCells(cells);\n\t *   \n\t *   mxClipboard.parents = new Object();\n\t *   \n\t *   for (var i = 0; i < result.length; i++)\n\t *   {\n\t *     mxClipboard.parents[i] = graph.model.getParent(cells[i]);\n\t *   }\n\t *   \n\t *   mxClipboard.insertCount = 1;\n\t *   mxClipboard.setCells(graph.cloneCells(result));\n\t *   \n\t *   return result;\n\t * };\n\t * \n\t * mxClipboard.paste = function(graph)\n\t * {\n\t *   if (!mxClipboard.isEmpty())\n\t *   {\n\t *     var cells = graph.getImportableCells(mxClipboard.getCells());\n\t *     var delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t *     var parent = graph.getDefaultParent();\n\t *     \n\t *     graph.model.beginUpdate();\n\t *     try\n\t *     {\n\t *       for (var i = 0; i < cells.length; i++)\n\t *       {\n\t *         var tmp = (mxClipboard.parents != null && graph.model.contains(mxClipboard.parents[i])) ?\n\t *              mxClipboard.parents[i] : parent;\n\t *         cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n\t *       }\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.model.endUpdate();\n\t *     }\n\t *     \n\t *     // Increments the counter and selects the inserted cells\n\t *     mxClipboard.insertCount++;\n\t *     graph.setSelectionCells(cells);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * Variable: STEPSIZE\n\t * \n\t * Defines the step size to offset the cells after each paste operation.\n\t * Default is 10.\n\t */\n\tSTEPSIZE: 10,\n\n\t/**\n\t * Variable: insertCount\n\t * \n\t * Counts the number of times the clipboard data has been inserted.\n\t */\n\tinsertCount: 1,\n\n\t/**\n\t * Variable: cells\n\t * \n\t * Holds the array of <mxCells> currently in the clipboard.\n\t */\n\tcells: null,\n\n\t/**\n\t * Function: setCells\n\t * \n\t * Sets the cells in the clipboard. Fires a <mxEvent.CHANGE> event.\n\t */\n\tsetCells: function(cells)\n\t{\n\t\tmxClipboard.cells = cells;\n\t},\n\n\t/**\n\t * Function: getCells\n\t * \n\t * Returns  the cells in the clipboard.\n\t */\n\tgetCells: function()\n\t{\n\t\treturn mxClipboard.cells;\n\t},\n\t\n\t/**\n\t * Function: isEmpty\n\t * \n\t * Returns true if the clipboard currently has not data stored.\n\t */\n\tisEmpty: function()\n\t{\n\t\treturn mxClipboard.getCells() == null;\n\t},\n\t\n\t/**\n\t * Function: cut\n\t * \n\t * Cuts the given array of <mxCells> from the specified graph.\n\t * If cells is null then the selection cells of the graph will\n\t * be used. Returns the cells that have been cut from the graph.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Optional array of <mxCells> to be cut.\n\t */\n\tcut: function(graph, cells)\n\t{\n\t\tcells = mxClipboard.copy(graph, cells);\n\t\tmxClipboard.insertCount = 0;\n\t\tmxClipboard.removeCells(graph, cells);\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: removeCells\n\t * \n\t * Hook to remove the given cells from the given graph after\n\t * a cut operation.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Array of <mxCells> to be cut.\n\t */\n\tremoveCells: function(graph, cells)\n\t{\n\t\tgraph.removeCells(cells);\n\t},\n\n\t/**\n\t * Function: copy\n\t * \n\t * Copies the given array of <mxCells> from the specified\n\t * graph to <cells>. Returns the original array of cells that has\n\t * been cloned. Descendants of cells in the array are ignored.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be copied.\n\t * cells - Optional array of <mxCells> to be copied.\n\t */\n\tcopy: function(graph, cells)\n\t{\n\t\tcells = cells || graph.getSelectionCells();\n\t\tvar result = graph.getExportableCells(graph.model.getTopmostCells(cells));\n\t\tmxClipboard.insertCount = 1;\n\t\tmxClipboard.setCells(graph.cloneCells(result));\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: paste\n\t * \n\t * Pastes the <cells> into the specified graph restoring\n\t * the relation to <parents>, if possible. If the parents\n\t * are no longer in the graph or invisible then the\n\t * cells are added to the graph's default or into the\n\t * swimlane under the cell's new location if one exists.\n\t * The cells are added to the graph using <mxGraph.importCells>\n\t * and returned.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to paste the <cells> into.\n\t */\n\tpaste: function(graph)\n\t{\n\t\tvar cells = null;\n\t\t\n\t\tif (!mxClipboard.isEmpty())\n\t\t{\n\t\t\tcells = graph.getImportableCells(mxClipboard.getCells());\n\t\t\tvar delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t\t\tvar parent = graph.getDefaultParent();\n\t\t\tcells = graph.importCells(cells, delta, delta, parent);\n\t\t\t\n\t\t\t// Increments the counter and selects the inserted cells\n\t\t\tmxClipboard.insertCount++;\n\t\t\tgraph.setSelectionCells(cells);\n\t\t}\n\t\t\n\t\treturn cells;\n\t}\n\n};\n\n__mxOutput.mxClipboard = typeof mxClipboard !== 'undefined' ? mxClipboard : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxWindow\n * \n * Basic window inside a document.\n * \n * Examples:\n * \n * Creating a simple window.\n *\n * (code)\n * var tb = document.createElement('div');\n * var wnd = new mxWindow('Title', tb, 100, 100, 200, 200, true, true);\n * wnd.setVisible(true); \n * (end)\n *\n * Creating a window that contains an iframe. \n * \n * (code)\n * var frame = document.createElement('iframe');\n * frame.setAttribute('width', '192px');\n * frame.setAttribute('height', '172px');\n * frame.setAttribute('src', 'http://www.example.com/');\n * frame.style.backgroundColor = 'white';\n * \n * var w = document.body.clientWidth;\n * var h = (document.body.clientHeight || document.documentElement.clientHeight);\n * var wnd = new mxWindow('Title', frame, (w-200)/2, (h-200)/3, 200, 200);\n * wnd.setVisible(true);\n * (end)\n * \n * To limit the movement of a window, eg. to keep it from being moved beyond\n * the top, left corner the following method can be overridden (recommended):\n * \n * (code)\n * wnd.setLocation = function(x, y)\n * {\n *   x = Math.max(0, x);\n *   y = Math.max(0, y);\n *   mxWindow.prototype.setLocation.apply(this, arguments);\n * };\n * (end)\n * \n * Or the following event handler can be used:\n * \n * (code)\n * wnd.addListener(mxEvent.MOVE, function(e)\n * {\n *   wnd.setLocation(Math.max(0, wnd.getX()), Math.max(0, wnd.getY()));\n * });\n * (end)\n * \n * To keep a window inside the current window:\n * \n * (code)\n * mxEvent.addListener(window, 'resize', mxUtils.bind(this, function()\n * {\n *   var iw = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n *   var ih = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n *   \n *   var x = this.window.getX();\n *   var y = this.window.getY();\n *   \n *   if (x + this.window.table.clientWidth > iw)\n *   {\n *     x = Math.max(0, iw - this.window.table.clientWidth);\n *   }\n *   \n *   if (y + this.window.table.clientHeight > ih)\n *   {\n *     y = Math.max(0, ih - this.window.table.clientHeight);\n *   }\n *   \n *   if (this.window.getX() != x || this.window.getY() != y)\n *   {\n *     this.window.setLocation(x, y);\n *   }\n * }));\n * (end)\n *\n * Event: mxEvent.MOVE_START\n *\n * Fires before the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MOVE\n *\n * Fires while the window is being moved. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.MOVE_END\n *\n * Fires after the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_START\n *\n * Fires before the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE\n *\n * Fires while the window is being resized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_END\n *\n * Fires after the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MAXIMIZE\n * \n * Fires after the window is maximized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.MINIMIZE\n * \n * Fires after the window is minimized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.NORMALIZE\n * \n * Fires after the window is normalized, that is, it returned from\n * maximized or minimized state. The <code>event</code> property contains the\n * corresponding mouse event.\n *  \n * Event: mxEvent.ACTIVATE\n * \n * Fires after a window is activated. The <code>previousWindow</code> property\n * contains the previous window. The event sender is the active window.\n * \n * Event: mxEvent.SHOW\n * \n * Fires after the window is shown. This event has no properties.\n * \n * Event: mxEvent.HIDE\n * \n * Fires after the window is hidden. This event has no properties.\n * \n * Event: mxEvent.CLOSE\n * \n * Fires before the window is closed. The <code>event</code> property contains\n * the corresponding mouse event.\n * \n * Event: mxEvent.DESTROY\n * \n * Fires before the window is destroyed. This event has no properties.\n * \n * Constructor: mxWindow\n * \n * Constructs a new window with the given dimension and title to display\n * the specified content. The window elements use the given style as a\n * prefix for the classnames of the respective window elements, namely,\n * the window title and window pane. The respective postfixes are appended\n * to the given stylename as follows:\n * \n *   style - Base style for the window.\n *   style+Title - Style for the window title.\n *   style+Pane - Style for the window pane.\n * \n * The default value for style is mxWindow, resulting in the following\n * classnames for the window elements: mxWindow, mxWindowTitle and\n * mxWindowPane.\n * \n * If replaceNode is given then the window replaces the given DOM node in\n * the document.\n * \n * Parameters:\n * \n * title - String that represents the title of the new window.\n * content - DOM node that is used as the window content.\n * x - X-coordinate of the window location.\n * y - Y-coordinate of the window location.\n * width - Width of the window.\n * height - Optional height of the window. Default is to match the height\n * of the content at the specified width.\n * minimizable - Optional boolean indicating if the window is minimizable.\n * Default is true.\n * movable - Optional boolean indicating if the window is movable. Default\n * is true.\n * replaceNode - Optional DOM node that the window should replace.\n * style - Optional base classname for the window elements. Default is\n * mxWindow.\n */\nfunction mxWindow(title, content, x, y, width, height, minimizable, movable, replaceNode, style)\n{\n\tif (content != null)\n\t{\n\t\tminimizable = (minimizable != null) ? minimizable : true;\n\t\tthis.content = content;\n\t\tthis.init(x, y, width, height, style);\n\t\t\n\t\tthis.installMaximizeHandler();\n\t\tthis.installMinimizeHandler();\n\t\tthis.installCloseHandler();\n\t\tthis.setMinimizable(minimizable);\n\t\tthis.setTitle(title);\n\t\t\n\t\tif (movable == null || movable)\n\t\t{\n\t\t\tthis.installMoveHandler();\n\t\t}\n\n\t\tif (replaceNode != null && replaceNode.parentNode != null)\n\t\t{\n\t\t\treplaceNode.parentNode.replaceChild(this.div, replaceNode);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.body.appendChild(this.div);\n\t\t}\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxWindow.prototype = new mxEventSource();\nmxWindow.prototype.constructor = mxWindow;\n\n/**\n * Variable: closeImage\n * \n * URL of the image to be used for the close icon in the titlebar.\n */\nmxWindow.prototype.closeImage = mxClient.imageBasePath + '/close.gif';\n\n/**\n * Variable: minimizeImage\n * \n * URL of the image to be used for the minimize icon in the titlebar.\n */\nmxWindow.prototype.minimizeImage = mxClient.imageBasePath + '/minimize.gif';\n\t\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the normalize icon in the titlebar.\n */\nmxWindow.prototype.normalizeImage = mxClient.imageBasePath + '/normalize.gif';\n\t\n/**\n * Variable: maximizeImage\n * \n * URL of the image to be used for the maximize icon in the titlebar.\n */\nmxWindow.prototype.maximizeImage = mxClient.imageBasePath + '/maximize.gif';\n\n/**\n * Variable: resizeImage\n * \n * URL of the image to be used for the resize icon.\n */\nmxWindow.prototype.resizeImage = mxClient.imageBasePath + '/resize.gif';\n\n/**\n * Variable: visible\n * \n * Boolean flag that represents the visible state of the window.\n */\nmxWindow.prototype.visible = false;\n\n/**\n * Variable: minimumSize\n * \n * <mxRectangle> that specifies the minimum width and height of the window.\n * Default is (50, 40).\n */\nmxWindow.prototype.minimumSize = new mxRectangle(0, 0, 50, 40);\n\n/**\n * Variable: destroyOnClose\n * \n * Specifies if the window should be destroyed when it is closed. If this\n * is false then the window is hidden using <setVisible>. Default is true.\n */\nmxWindow.prototype.destroyOnClose = true;\n\n/**\n * Variable: contentHeightCorrection\n * \n * Defines the correction factor for computing the height of the contentWrapper.\n * Default is 6 for IE 7/8 standards mode and 2 for all other browsers and modes.\n */\nmxWindow.prototype.contentHeightCorrection = (document.documentMode == 8 || document.documentMode == 7) ? 6 : 2;\n\n/**\n * Variable: title\n * \n * Reference to the DOM node (TD) that contains the title.\n */\nmxWindow.prototype.title = null;\n\n/**\n * Variable: content\n * \n * Reference to the DOM node that represents the window content.\n */\nmxWindow.prototype.content = null;\n\n/**\n * Function: init\n * \n * Initializes the DOM tree that represents the window.\n */\nmxWindow.prototype.init = function(x, y, width, height, style)\n{\n\tstyle = (style != null) ? style : 'mxWindow';\n\t\n\tthis.div = document.createElement('div');\n\tthis.div.className = style;\n\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n\tthis.table = document.createElement('table');\n\tthis.table.className = style;\n\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.div.style.touchAction = 'none';\n\t}\n\t\n\t// Workaround for table size problems in FF\n\tif (width != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.width = width + 'px'; \n\t\t}\n\t\t\n\t\tthis.table.style.width = width + 'px';\n\t} \n\t\n\tif (height != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.height = height + 'px';\n\t\t}\n\t\t\n\t\tthis.table.style.height = height + 'px';\n\t}\t\t\n\t\n\t// Creates title row\n\tvar tbody = document.createElement('tbody');\n\tvar tr = document.createElement('tr');\n\t\n\tthis.title = document.createElement('td');\n\tthis.title.className = style + 'Title';\n\t\n\tthis.buttons = document.createElement('div');\n\tthis.buttons.style.position = 'absolute';\n\tthis.buttons.style.display = 'inline-block';\n\tthis.buttons.style.right = '4px';\n\tthis.buttons.style.top = '5px';\n\tthis.title.appendChild(this.buttons);\n\t\n\ttr.appendChild(this.title);\n\ttbody.appendChild(tr);\n\t\n\t// Creates content row and table cell\n\ttr = document.createElement('tr');\n\tthis.td = document.createElement('td');\n\tthis.td.className = style + 'Pane';\n\t\n\tif (document.documentMode == 7)\n\t{\n\t\tthis.td.style.height = '100%';\n\t}\n\n\tthis.contentWrapper = document.createElement('div');\n\tthis.contentWrapper.className = style + 'Pane';\n\tthis.contentWrapper.style.width = '100%';\n\tthis.contentWrapper.appendChild(this.content);\n\n\t// Workaround for div around div restricts height\n\t// of inner div if outerdiv has hidden overflow\n\tif (mxClient.IS_QUIRKS || this.content.nodeName.toUpperCase() != 'DIV')\n\t{\n\t\tthis.contentWrapper.style.height = '100%';\n\t}\n\n\t// Puts all content into the DOM\n\tthis.td.appendChild(this.contentWrapper);\n\ttr.appendChild(this.td);\n\ttbody.appendChild(tr);\n\tthis.table.appendChild(tbody);\n\tthis.div.appendChild(this.table);\n\t\n\t// Puts the window on top of other windows when clicked\n\tvar activator = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t});\n\t\n\tmxEvent.addGestureListeners(this.title, activator);\n\tmxEvent.addGestureListeners(this.table, activator);\n\n\tthis.hide();\n};\n\n/**\n * Function: setTitle\n * \n * Sets the window title to the given string. HTML markup inside the title\n * will be escaped.\n */\nmxWindow.prototype.setTitle = function(title)\n{\n\t// Removes all text content nodes (normally just one)\n\tvar child = this.title.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar next = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tchild.parentNode.removeChild(child);\n\t\t}\n\t\t\n\t\tchild = next;\n\t}\n\t\n\tmxUtils.write(this.title, title || '');\n\tthis.title.appendChild(this.buttons);\n};\n\n/**\n * Function: setScrollable\n * \n * Sets if the window contents should be scrollable.\n */\nmxWindow.prototype.setScrollable = function(scrollable)\n{\n\t// Workaround for hang in Presto 2.5.22 (Opera 10.5)\n\tif (navigator.userAgent == null ||\n\t\tnavigator.userAgent.indexOf('Presto/2.5') < 0)\n\t{\n\t\tif (scrollable)\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'auto';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: activate\n * \n * Puts the window on top of all other windows.\n */\nmxWindow.prototype.activate = function()\n{\n\tif (mxWindow.activeWindow != this)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(this.getElement());\n\t\tvar index = (style != null) ? style.zIndex : 3;\n\n\t\tif (mxWindow.activeWindow)\n\t\t{\n\t\t\tvar elt = mxWindow.activeWindow.getElement();\n\t\t\t\n\t\t\tif (elt != null && elt.style != null)\n\t\t\t{\n\t\t\t\telt.style.zIndex = index;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar previousWindow = mxWindow.activeWindow;\n\t\tthis.getElement().style.zIndex = parseInt(index) + 1;\n\t\tmxWindow.activeWindow = this;\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ACTIVATE, 'previousWindow', previousWindow));\n\t}\n};\n\n/**\n * Function: getElement\n * \n * Returuns the outermost DOM node that makes up the window.\n */\nmxWindow.prototype.getElement = function()\n{\n\treturn this.div;\n};\n\n/**\n * Function: fit\n * \n * Makes sure the window is inside the client area of the window.\n */\nmxWindow.prototype.fit = function()\n{\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: isResizable\n * \n * Returns true if the window is resizable.\n */\nmxWindow.prototype.isResizable = function()\n{\n\tif (this.resize != null)\n\t{\n\t\treturn this.resize.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setResizable\n * \n * Sets if the window should be resizable. To avoid interference with some\n * built-in features of IE10 and later, the use of the following code is\n * recommended if there are resizable <mxWindow>s in the page:\n * \n * (code)\n * if (mxClient.IS_POINTER)\n * {\n *   document.body.style.msTouchAction = 'none';\n * }\n * (end)\n */\nmxWindow.prototype.setResizable = function(resizable)\n{\n\tif (resizable)\n\t{\n\t\tif (this.resize == null)\n\t\t{\n\t\t\tthis.resize = document.createElement('img');\n\t\t\tthis.resize.style.position = 'absolute';\n\t\t\tthis.resize.style.bottom = '2px';\n\t\t\tthis.resize.style.right = '2px';\n\n\t\t\tthis.resize.setAttribute('src', this.resizeImage);\n\t\t\tthis.resize.style.cursor = 'nw-resize';\n\t\t\t\n\t\t\tvar startX = null;\n\t\t\tvar startY = null;\n\t\t\tvar width = null;\n\t\t\tvar height = null;\n\t\t\t\n\t\t\tvar start = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// LATER: pointerdown starting on border of resize does start\n\t\t\t\t// the drag operation but does not fire consecutive events via\n\t\t\t\t// one of the listeners below (does pan instead).\n\t\t\t\t// Workaround: document.body.style.msTouchAction = 'none'\n\t\t\t\tthis.activate();\n\t\t\t\tstartX = mxEvent.getClientX(evt);\n\t\t\t\tstartY = mxEvent.getClientY(evt);\n\t\t\t\twidth = this.div.offsetWidth;\n\t\t\t\theight = this.div.offsetHeight;\n\t\t\t\t\n\t\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_START, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\n\t\t\t\t\tthis.setSize(width + dx, height + dy);\n\t\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tstartX = null;\n\t\t\t\t\tstartY = null;\n\t\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_END, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(this.resize, start, dragHandler, dropHandler);\n\t\t\tthis.div.appendChild(this.resize);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tthis.resize.style.display = 'inline';\n\t\t}\n\t}\n\telse if (this.resize != null)\n\t{\n\t\tthis.resize.style.display = 'none';\n\t}\n};\n\t\n/**\n * Function: setSize\n * \n * Sets the size of the window.\n */\nmxWindow.prototype.setSize = function(width, height)\n{\n\twidth = Math.max(this.minimumSize.width, width);\n\theight = Math.max(this.minimumSize.height, height);\n\n\t// Workaround for table size problems in FF\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.div.style.width =  width + 'px';\n\t\tthis.div.style.height = height + 'px';\n\t}\n\t\n\tthis.table.style.width =  width + 'px';\n\tthis.table.style.height = height + 'px';\n\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n};\n\t\n/**\n * Function: setMinimizable\n * \n * Sets if the window is minimizable.\n */\nmxWindow.prototype.setMinimizable = function(minimizable)\n{\n\tthis.minimize.style.display = (minimizable) ? '' : 'none';\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns an <mxRectangle> that specifies the size for the minimized window.\n * A width or height of 0 means keep the existing width or height. This\n * implementation returns the height of the window title and keeps the width.\n */\nmxWindow.prototype.getMinimumSize = function()\n{\n\treturn new mxRectangle(0, 0, 0, this.title.offsetHeight);\n};\n\n/**\n * Function: installMinimizeHandler\n * \n * Installs the event listeners required for minimizing the window.\n */\nmxWindow.prototype.installMinimizeHandler = function()\n{\n\tthis.minimize = document.createElement('img');\n\t\n\tthis.minimize.setAttribute('src', this.minimizeImage);\n\tthis.minimize.setAttribute('title', 'Minimize');\n\tthis.minimize.style.cursor = 'pointer';\n\tthis.minimize.style.marginLeft = '2px';\n\tthis.minimize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.minimize);\n\t\n\tvar minimized = false;\n\tvar maxDisplay = null;\n\tvar height = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (!minimized)\n\t\t{\n\t\t\tminimized = true;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.normalizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Normalize');\n\t\t\tthis.contentWrapper.style.display = 'none';\n\t\t\tmaxDisplay = this.maximize.style.display;\n\t\t\t\n\t\t\tthis.maximize.style.display = 'none';\n\t\t\theight = this.table.style.height;\n\t\t\t\n\t\t\tvar minSize = this.getMinimumSize();\n\t\t\t\n\t\t\tif (minSize.height > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = minSize.height + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = minSize.height + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (minSize.width > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = minSize.width + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.width = minSize.width + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MINIMIZE, 'event', evt));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tminimized = false;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.minimizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Minimize');\n\t\t\tthis.contentWrapper.style.display = ''; // default\n\t\t\tthis.maximize.style.display = maxDisplay;\n\t\t\t\n\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.div.style.height = height;\n\t\t\t}\n\t\t\t\n\t\t\tthis.table.style.height = height;\n\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t}\n\t\t\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tmxEvent.addGestureListeners(this.minimize, funct);\n};\n\t\n/**\n * Function: setMaximizable\n * \n * Sets if the window is maximizable.\n */\nmxWindow.prototype.setMaximizable = function(maximizable)\n{\n\tthis.maximize.style.display = (maximizable) ? '' : 'none';\n};\n\n/**\n * Function: installMaximizeHandler\n * \n * Installs the event listeners required for maximizing the window.\n */\nmxWindow.prototype.installMaximizeHandler = function()\n{\n\tthis.maximize = document.createElement('img');\n\t\n\tthis.maximize.setAttribute('src', this.maximizeImage);\n\tthis.maximize.setAttribute('title', 'Maximize');\n\tthis.maximize.style.cursor = 'default';\n\tthis.maximize.style.marginLeft = '2px';\n\tthis.maximize.style.cursor = 'pointer';\n\tthis.maximize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.maximize);\n\t\n\tvar maximized = false;\n\tvar x = null;\n\tvar y = null;\n\tvar height = null;\n\tvar width = null;\n\tvar minDisplay = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (this.maximize.style.display != 'none')\n\t\t{\n\t\t\tif (!maximized)\n\t\t\t{\n\t\t\t\tmaximized = true;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.normalizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Normalize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tminDisplay = this.minimize.style.display;\n\t\t\t\tthis.minimize.style.display = 'none';\n\t\t\t\t\n\t\t\t\t// Saves window state\n\t\t\t\tx = parseInt(this.div.style.left);\n\t\t\t\ty = parseInt(this.div.style.top);\n\t\t\t\theight = this.table.style.height;\n\t\t\t\twidth = this.table.style.width;\n\n\t\t\t\tthis.div.style.left = '0px';\n\t\t\t\tthis.div.style.top = '0px';\n\t\t\t\tvar docHeight = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight || 0);\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\t\tthis.div.style.height = (docHeight - 2) + 'px';\n\t\t\t\t}\n\n\t\t\t\tthis.table.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\tthis.table.style.height = (docHeight - 2) + 'px';\n\t\t\t\t\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MAXIMIZE, 'event', evt));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmaximized = false;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.maximizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Maximize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tthis.minimize.style.display = minDisplay;\n\n\t\t\t\t// Restores window state\n\t\t\t\tthis.div.style.left = x+'px';\n\t\t\t\tthis.div.style.top = y+'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = height;\n\t\t\t\t\tthis.div.style.width = width;\n\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = height;\n\t\t\t\tthis.table.style.width = width;\n\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n\t\n\tmxEvent.addGestureListeners(this.maximize, funct);\n\tmxEvent.addListener(this.title, 'dblclick', funct);\n};\n\t\n/**\n * Function: installMoveHandler\n * \n * Installs the event listeners required for moving the window.\n */\nmxWindow.prototype.installMoveHandler = function()\n{\n\tthis.title.style.cursor = 'move';\n\t\n\tmxEvent.addGestureListeners(this.title,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar startX = mxEvent.getClientX(evt);\n\t\t\tvar startY = mxEvent.getClientY(evt);\n\t\t\tvar x = this.getX();\n\t\t\tvar y = this.getY();\n\t\t\t\t\t\t\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\t\t\tthis.setLocation(x + dx, y + dy);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_END, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_START, 'event', evt));\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.title.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: setLocation\n * \n * Sets the upper, left corner of the window.\n */\n mxWindow.prototype.setLocation = function(x, y)\n {\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n };\n\n/**\n * Function: getX\n *\n * Returns the current position on the x-axis.\n */\nmxWindow.prototype.getX = function()\n{\n\treturn parseInt(this.div.style.left);\n};\n\n/**\n * Function: getY\n *\n * Returns the current position on the y-axis.\n */\nmxWindow.prototype.getY = function()\n{\n\treturn parseInt(this.div.style.top);\n};\n\n/**\n * Function: installCloseHandler\n *\n * Adds the <closeImage> as a new image node in <closeImg> and installs the\n * <close> event.\n */\nmxWindow.prototype.installCloseHandler = function()\n{\n\tthis.closeImg = document.createElement('img');\n\t\n\tthis.closeImg.setAttribute('src', this.closeImage);\n\tthis.closeImg.setAttribute('title', 'Close');\n\tthis.closeImg.style.marginLeft = '2px';\n\tthis.closeImg.style.cursor = 'pointer';\n\tthis.closeImg.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.closeImg);\n\n\tmxEvent.addGestureListeners(this.closeImg,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CLOSE, 'event', evt));\n\t\t\t\n\t\t\tif (this.destroyOnClose)\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.setVisible(false);\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n};\n\n/**\n * Function: setImage\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * image - URL of the image to be used.\n */\nmxWindow.prototype.setImage = function(image)\n{\n\tthis.image = document.createElement('img');\n\tthis.image.setAttribute('src', image);\n\tthis.image.setAttribute('align', 'left');\n\tthis.image.style.marginRight = '4px';\n\tthis.image.style.marginLeft = '0px';\n\tthis.image.style.marginTop = '-2px';\n\t\n\tthis.title.insertBefore(this.image, this.title.firstChild);\n};\n\n/**\n * Function: setClosable\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * closable - Boolean specifying if the window should be closable.\n */\nmxWindow.prototype.setClosable = function(closable)\n{\n\tthis.closeImg.style.display = (closable) ? '' : 'none';\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the window is visible.\n */\nmxWindow.prototype.isVisible = function()\n{\n\tif (this.div != null)\n\t{\n\t\treturn this.div.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setVisible\n *\n * Shows or hides the window depending on the given flag.\n * \n * Parameters:\n * \n * visible - Boolean indicating if the window should be made visible.\n */\nmxWindow.prototype.setVisible = function(visible)\n{\n\tif (this.div != null && this.isVisible() != visible)\n\t{\n\t\tif (visible)\n\t\t{\n\t\t\tthis.show();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.hide();\n\t\t}\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the window.\n */\nmxWindow.prototype.show = function()\n{\n\tthis.div.style.display = '';\n\tthis.activate();\n\t\n\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\n\tif (!mxClient.IS_QUIRKS && (style.overflow == 'auto' || this.resize != null) &&\n\t\tthis.contentWrapper.style.display != 'none')\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n};\n\n/**\n * Function: hide\n *\n * Hides the window.\n */\nmxWindow.prototype.hide = function()\n{\n\tthis.div.style.display = 'none';\n\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n};\n\n/**\n * Function: destroy\n *\n * Destroys the window and removes all associated resources. Fires a\n * <destroy> event prior to destroying the window.\n */\nmxWindow.prototype.destroy = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.DESTROY));\n\t\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\tthis.div.parentNode.removeChild(this.div);\n\t\tthis.div = null;\n\t}\n\t\n\tthis.title = null;\n\tthis.content = null;\n\tthis.contentWrapper = null;\n};\n\n__mxOutput.mxWindow = typeof mxWindow !== 'undefined' ? mxWindow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxForm\n * \n * A simple class for creating HTML forms.\n * \n * Constructor: mxForm\n * \n * Creates a HTML table using the specified classname.\n */\nfunction mxForm(className)\n{\n\tthis.table = document.createElement('table');\n\tthis.table.className = className;\n\tthis.body = document.createElement('tbody');\n\t\n\tthis.table.appendChild(this.body);\n};\n\n/**\n * Variable: table\n * \n * Holds the DOM node that represents the table.\n */\nmxForm.prototype.table = null;\n\n/**\n * Variable: body\n * \n * Holds the DOM node that represents the tbody (table body). New rows\n * can be added to this object using DOM API.\n */\nmxForm.prototype.body = false;\n\n/**\n * Function: getTable\n * \n * Returns the table that contains this form.\n */\nmxForm.prototype.getTable = function()\n{\n\treturn this.table;\n};\n\n/**\n * Function: addButtons\n * \n * Helper method to add an OK and Cancel button using the respective\n * functions.\n */\nmxForm.prototype.addButtons = function(okFunct, cancelFunct)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\ttr.appendChild(td);\n\ttd = document.createElement('td');\n\n\t// Adds the ok button\n\tvar button = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('ok') || 'OK');\n\ttd.appendChild(button);\n\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tokFunct();\n\t});\n\t\n\t// Adds the cancel button\n\tbutton = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('cancel') || 'Cancel');\n\ttd.appendChild(button);\n\t\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tcancelFunct();\n\t});\n\t\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n};\n\n/**\n * Function: addText\n * \n * Adds an input for the given name, type and value and returns it.\n */\nmxForm.prototype.addText = function(name, value, type)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', type || 'text');\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCheckbox\n * \n * Adds a checkbox for the given name and value and returns the textfield.\n */\nmxForm.prototype.addCheckbox = function(name, value)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', 'checkbox');\n\tthis.addField(name, input);\n\n\t// IE can only change the checked value if the input is inside the DOM\n\tif (value)\n\t{\n\t\tinput.checked = true;\n\t}\n\n\treturn input;\n};\n\n/**\n * Function: addTextarea\n * \n * Adds a textarea for the given name and value and returns the textarea.\n */\nmxForm.prototype.addTextarea = function(name, value, rows)\n{\n\tvar input = document.createElement('textarea');\n\t\n\tif (mxClient.IS_NS)\n\t{\n\t\trows--;\n\t}\n\t\n\tinput.setAttribute('rows', rows || 2);\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCombo\n * \n * Adds a combo for the given name and returns the combo.\n */\nmxForm.prototype.addCombo = function(name, isMultiSelect, size)\n{\n\tvar select = document.createElement('select');\n\t\n\tif (size != null)\n\t{\n\t\tselect.setAttribute('size', size);\n\t}\n\t\n\tif (isMultiSelect)\n\t{\n\t\tselect.setAttribute('multiple', 'true');\n\t}\n\t\n\treturn this.addField(name, select);\n};\n\n/**\n * Function: addOption\n * \n * Adds an option for the given label to the specified combo.\n */\nmxForm.prototype.addOption = function(combo, label, value, isSelected)\n{\n\tvar option = document.createElement('option');\n\t\n\tmxUtils.writeln(option, label);\n\toption.setAttribute('value', value);\n\t\n\tif (isSelected)\n\t{\n\t\toption.setAttribute('selected', isSelected);\n\t}\n\t\n\tcombo.appendChild(option);\n};\n\n/**\n * Function: addField\n * \n * Adds a new row with the name and the input field in two columns and\n * returns the given input.\n */\nmxForm.prototype.addField = function(name, input)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\tmxUtils.write(td, name);\n\ttr.appendChild(td);\n\t\n\ttd = document.createElement('td');\n\ttd.appendChild(input);\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n\t\n\treturn input;\n};\n\n__mxOutput.mxForm = typeof mxForm !== 'undefined' ? mxForm : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImage\n *\n * Encapsulates the URL, width and height of an image.\n * \n * Constructor: mxImage\n * \n * Constructs a new image.\n */\nfunction mxImage(src, width, height)\n{\n\tthis.src = src;\n\tthis.width = width;\n\tthis.height = height;\n};\n\n/**\n * Variable: src\n *\n * String that specifies the URL of the image.\n */\nmxImage.prototype.src = null;\n\n/**\n * Variable: width\n *\n * Integer that specifies the width of the image.\n */\nmxImage.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Integer that specifies the height of the image.\n */\nmxImage.prototype.height = null;\n\n__mxOutput.mxImage = typeof mxImage !== 'undefined' ? mxImage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDivResizer\n * \n * Maintains the size of a div element in Internet Explorer. This is a\n * workaround for the right and bottom style being ignored in IE.\n * \n * If you need a div to cover the scrollwidth and -height of a document,\n * then you can use this class as follows:\n * \n * (code)\n * var resizer = new mxDivResizer(background);\n * resizer.getDocumentHeight = function()\n * {\n *   return document.body.scrollHeight;\n * }\n * resizer.getDocumentWidth = function()\n * {\n *   return document.body.scrollWidth;\n * }\n * resizer.resize();\n * (end)\n * \n * Constructor: mxDivResizer\n * \n * Constructs an object that maintains the size of a div\n * element when the window is being resized. This is only\n * required for Internet Explorer as it ignores the respective\n * stylesheet information for DIV elements.\n * \n * Parameters:\n * \n * div - Reference to the DOM node whose size should be maintained.\n * container - Optional Container that contains the div. Default is the\n * window.\n */\nfunction mxDivResizer(div, container)\n{\n\tif (div.nodeName.toLowerCase() == 'div')\n\t{\n\t\tif (container == null)\n\t\t{\n\t\t\tcontainer = window;\n\t\t}\n\n\t\tthis.div = div;\n\t\tvar style = mxUtils.getCurrentStyle(div);\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tthis.resizeWidth = style.width == 'auto';\n\t\t\tthis.resizeHeight = style.height == 'auto';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(container, 'resize',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (!this.handlingResize)\n\t\t\t\t{\n\t\t\t\t\tthis.handlingResize = true;\n\t\t\t\t\tthis.resize();\n\t\t\t\t\tthis.handlingResize = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tthis.resize();\n\t}\n};\n\n/**\n * Function: resizeWidth\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.resizeWidth = true;\n\n/**\n * Function: resizeHeight\n * \n * Boolean specifying if the height should be updated.\n */\nmxDivResizer.prototype.resizeHeight = true;\n\n/**\n * Function: handlingResize\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.handlingResize = false;\n\n/**\n * Function: resize\n * \n * Updates the style of the DIV after the window has been resized.\n */\nmxDivResizer.prototype.resize = function()\n{\n\tvar w = this.getDocumentWidth();\n\tvar h = this.getDocumentHeight();\n\n\tvar l = parseInt(this.div.style.left);\n\tvar r = parseInt(this.div.style.right);\n\tvar t = parseInt(this.div.style.top);\n\tvar b = parseInt(this.div.style.bottom);\n\t\n\tif (this.resizeWidth &&\n\t\t!isNaN(l) &&\n\t\t!isNaN(r) &&\n\t\tl >= 0 &&\n\t\tr >= 0 &&\n\t\tw - r - l > 0)\n\t{\n\t\tthis.div.style.width = (w - r - l)+'px';\n\t}\n\t\n\tif (this.resizeHeight &&\n\t\t!isNaN(t) &&\n\t\t!isNaN(b) &&\n\t\tt >= 0 &&\n\t\tb >= 0 &&\n\t\th - t - b > 0)\n\t{\n\t\tthis.div.style.height = (h - t - b)+'px';\n\t}\n};\n\n/**\n * Function: getDocumentWidth\n * \n * Hook for subclassers to return the width of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentWidth = function()\n{\n\treturn document.body.clientWidth;\n};\n\n/**\n * Function: getDocumentHeight\n * \n * Hook for subclassers to return the height of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentHeight = function()\n{\n\treturn document.body.clientHeight;\n};\n\n__mxOutput.mxDivResizer = typeof mxDivResizer !== 'undefined' ? mxDivResizer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDragSource\n * \n * Wrapper to create a drag source from a DOM element so that the element can\n * be dragged over a graph and dropped into the graph as a new cell.\n * \n * Problem is that in the dropHandler the current preview location is not\n * available, so the preview and the dropHandler must match.\n * \n * Constructor: mxDragSource\n * \n * Constructs a new drag source for the given element.\n */\nfunction mxDragSource(element, dropHandler)\n{\n\tthis.element = element;\n\tthis.dropHandler = dropHandler;\n\t\n\t// Handles a drag gesture on the element\n\tmxEvent.addGestureListeners(element, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseDown(evt);\n\t}));\n\t\n\t// Prevents native drag and drop\n\tmxEvent.addListener(element, 'dragstart', function(evt)\n\t{\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tthis.eventConsumer = function(sender, evt)\n\t{\n\t\tvar evtName = evt.getProperty('eventName');\n\t\tvar me = evt.getProperty('event');\n\t\t\n\t\tif (evtName != mxEvent.MOUSE_DOWN)\n\t\t{\n\t\t\tme.consume();\n\t\t}\n\t};\n};\n\n/**\n * Variable: element\n *\n * Reference to the DOM node which was made draggable.\n */\nmxDragSource.prototype.element = null;\n\n/**\n * Variable: dropHandler\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dropHandler = null;\n\n/**\n * Variable: dragOffset\n *\n * <mxPoint> that specifies the offset of the <dragElement>. Default is null.\n */\nmxDragSource.prototype.dragOffset = null;\n\n/**\n * Variable: dragElement\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dragElement = null;\n\n/**\n * Variable: previewElement\n *\n * Optional <mxRectangle> that specifies the unscaled size of the preview.\n */\nmxDragSource.prototype.previewElement = null;\n\n/**\n * Variable: previewOffset\n *\n * Optional <mxPoint> that specifies the offset of the preview in pixels.\n */\nmxDragSource.prototype.previewOffset = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if this drag source is enabled. Default is true.\n */\nmxDragSource.prototype.enabled = true;\n\n/**\n * Variable: currentGraph\n *\n * Reference to the <mxGraph> that is the current drop target.\n */\nmxDragSource.prototype.currentGraph = null;\n\n/**\n * Variable: currentDropTarget\n *\n * Holds the current drop target under the mouse.\n */\nmxDragSource.prototype.currentDropTarget = null;\n\n/**\n * Variable: currentPoint\n *\n * Holds the current drop location.\n */\nmxDragSource.prototype.currentPoint = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentGuide = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentHighlight = null;\n\n/**\n * Variable: autoscroll\n *\n * Specifies if the graph should scroll automatically. Default is true.\n */\nmxDragSource.prototype.autoscroll = true;\n\n/**\n * Variable: guidesEnabled\n *\n * Specifies if <mxGuide> should be enabled. Default is true.\n */\nmxDragSource.prototype.guidesEnabled = true;\n\n/**\n * Variable: gridEnabled\n *\n * Specifies if the grid should be allowed. Default is true.\n */\nmxDragSource.prototype.gridEnabled = true;\n\n/**\n * Variable: highlightDropTargets\n *\n * Specifies if drop targets should be highlighted. Default is true.\n */\nmxDragSource.prototype.highlightDropTargets = true;\n\n/**\n * Variable: dragElementZIndex\n * \n * ZIndex for the drag element. Default is 100.\n */\nmxDragSource.prototype.dragElementZIndex = 100;\n\n/**\n * Variable: dragElementOpacity\n * \n * Opacity of the drag element in %. Default is 70.\n */\nmxDragSource.prototype.dragElementOpacity = 70;\n\n/**\n * Variable: checkEventSource\n * \n * Whether the event source should be checked in <graphContainerEvent>. Default\n * is true.\n */\nmxDragSource.prototype.checkEventSource = true;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxDragSource.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxDragSource.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isGuidesEnabled\n * \n * Returns <guidesEnabled>.\n */\nmxDragSource.prototype.isGuidesEnabled = function()\n{\n\treturn this.guidesEnabled;\n};\n\n/**\n * Function: setGuidesEnabled\n * \n * Sets <guidesEnabled>.\n */\nmxDragSource.prototype.setGuidesEnabled = function(value)\n{\n\tthis.guidesEnabled = value;\n};\n\n/**\n * Function: isGridEnabled\n * \n * Returns <gridEnabled>.\n */\nmxDragSource.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Sets <gridEnabled>.\n */\nmxDragSource.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: getGraphForEvent\n * \n * Returns the graph for the given mouse event. This implementation returns\n * null.\n */\nmxDragSource.prototype.getGraphForEvent = function(evt)\n{\n\treturn null;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.getDropTarget = function(graph, x, y, evt)\n{\n\treturn graph.getCellAt(x, y);\n};\n\n/**\n * Function: createDragElement\n * \n * Creates and returns a clone of the <dragElementPrototype> or the <element>\n * if the former is not defined.\n */\nmxDragSource.prototype.createDragElement = function(evt)\n{\n\treturn this.element.cloneNode(true);\n};\n\n/**\n * Function: createPreviewElement\n * \n * Creates and returns an element which can be used as a preview in the given\n * graph.\n */\nmxDragSource.prototype.createPreviewElement = function(graph)\n{\n\treturn null;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this drag source is active.\n */\nmxDragSource.prototype.isActive = function()\n{\n\treturn this.mouseMoveHandler != null;\n};\n\n/**\n * Function: reset\n * \n * Stops and removes everything and restores the state of the object.\n */\nmxDragSource.prototype.reset = function()\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\t\n\tthis.removeDragElement();\n\tthis.removeListeners();\n\tthis.stopDrag();\n};\n\n/**\n * Function: mouseDown\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n * \n * To ignore popup menu events for a drag source, this function can be\n * overridden as follows.\n * \n * (code)\n * var mouseDown = dragSource.mouseDown;\n * \n * dragSource.mouseDown = function(evt)\n * {\n *   if (!mxEvent.isPopupTrigger(evt))\n *   {\n *     mouseDown.apply(this, arguments);\n *   }\n * };\n * (end)\n */\nmxDragSource.prototype.mouseDown = function(evt)\n{\n\tif (this.enabled && !mxEvent.isConsumed(evt) && this.mouseMoveHandler == null)\n\t{\n\t\tthis.startDrag(evt);\n\t\tthis.mouseMoveHandler = mxUtils.bind(this, this.mouseMove);\n\t\tthis.mouseUpHandler = mxUtils.bind(this, this.mouseUp);\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t\n\t\tif (mxClient.IS_TOUCH && !mxEvent.isMouseEvent(evt))\n\t\t{\n\t\t\tthis.eventSource = mxEvent.getSource(evt);\n\t\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t}\n\t}\n};\n\n/**\n * Function: startDrag\n * \n * Creates the <dragElement> using <createDragElement>.\n */\nmxDragSource.prototype.startDrag = function(evt)\n{\n\tthis.dragElement = this.createDragElement(evt);\n\tthis.dragElement.style.position = 'absolute';\n\tthis.dragElement.style.zIndex = this.dragElementZIndex;\n\tmxUtils.setOpacity(this.dragElement, this.dragElementOpacity);\n\n\tif (this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.dragElement.style.pointerEvents = 'none';\n\t}\n};\n\n/**\n * Function: stopDrag\n * \n * Invokes <removeDragElement>.\n */\nmxDragSource.prototype.stopDrag = function()\n{\n\t// LATER: This used to have a mouse event. If that is still needed we need to add another\n\t// final call to the DnD protocol to add a cleanup step in the case of escape press, which\n\t// is not associated with a mouse event and which currently calles this method.\n\tthis.removeDragElement();\n};\n\n/**\n * Function: removeDragElement\n * \n * Removes and destroys the <dragElement>.\n */\nmxDragSource.prototype.removeDragElement = function()\n{\n\tif (this.dragElement != null)\n\t{\n\t\tif (this.dragElement.parentNode != null)\n\t\t{\n\t\t\tthis.dragElement.parentNode.removeChild(this.dragElement);\n\t\t}\n\t\t\n\t\tthis.dragElement = null;\n\t}\n};\n\n/**\n * Function: getElementForEvent\n * \n * Returns the topmost element under the given event.\n */\nmxDragSource.prototype.getElementForEvent = function(evt)\n{\n\treturn ((mxEvent.isTouchEvent(evt) || mxEvent.isPenEvent(evt)) ?\n\t\t\tdocument.elementFromPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt)) :\n\t\t\t\tmxEvent.getSource(evt));\n};\n\n/**\n * Function: graphContainsEvent\n * \n * Returns true if the given graph contains the given event.\n */\nmxDragSource.prototype.graphContainsEvent = function(graph, evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin();\n\tvar elt = this.getElementForEvent(evt);\n\t\n\tif (this.checkEventSource)\n\t{\n\t\twhile (elt != null && elt != graph.container)\n\t\t{\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\n\t// Checks if event is inside the bounds of the graph container\n\treturn elt != null && x >= offset.x - origin.x && y >= offset.y - origin.y &&\n\t\tx <= offset.x - origin.x + graph.container.offsetWidth &&\n\t\ty <= offset.y - origin.y + graph.container.offsetHeight;\n};\n\n/**\n * Function: mouseMove\n * \n * Gets the graph for the given event using <getGraphForEvent>, updates the\n * <currentGraph>, calling <dragEnter> and <dragExit> on the new and old graph,\n * respectively, and invokes <dragOver> if <currentGraph> is not null.\n */\nmxDragSource.prototype.mouseMove = function(evt)\n{\n\tvar graph = this.getGraphForEvent(evt);\n\t\n\t// Checks if event is inside the bounds of the graph container\n\tif (graph != null && !this.graphContainsEvent(graph, evt))\n\t{\n\t\tgraph = null;\n\t}\n\n\tif (graph != this.currentGraph)\n\t{\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragExit(this.currentGraph, evt);\n\t\t}\n\t\t\n\t\tthis.currentGraph = graph;\n\t\t\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragEnter(this.currentGraph, evt);\n\t\t}\n\t}\n\t\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragOver(this.currentGraph, evt);\n\t}\n\n\tif (this.dragElement != null && (this.previewElement == null || this.previewElement.style.visibility != 'visible'))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\t\n\t\tif (this.dragElement.parentNode == null)\n\t\t{\n\t\t\tdocument.body.appendChild(this.dragElement);\n\t\t}\n\n\t\tthis.dragElement.style.visibility = 'visible';\n\t\t\n\t\tif (this.dragOffset != null)\n\t\t{\n\t\t\tx += this.dragOffset.x;\n\t\t\ty += this.dragOffset.y;\n\t\t}\n\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tthis.dragElement.style.left = (x + offset.x) + 'px';\n\t\tthis.dragElement.style.top = (y + offset.y) + 'px';\n\t}\n\telse if (this.dragElement != null)\n\t{\n\t\tthis.dragElement.style.visibility = 'hidden';\n\t}\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: mouseUp\n * \n * Processes the mouse up event and invokes <drop>, <dragExit> and <stopDrag>\n * as required.\n */\nmxDragSource.prototype.mouseUp = function(evt)\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tif (this.currentPoint != null && (this.previewElement == null ||\n\t\t\tthis.previewElement.style.visibility != 'hidden'))\n\t\t{\n\t\t\tvar scale = this.currentGraph.view.scale;\n\t\t\tvar tr = this.currentGraph.view.translate;\n\t\t\tvar x = this.currentPoint.x / scale - tr.x;\n\t\t\tvar y = this.currentPoint.y / scale - tr.y;\n\t\t\t\n\t\t\tthis.drop(this.currentGraph, evt, this.currentDropTarget, x, y);\n\t\t}\n\t\t\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\n\tthis.stopDrag();\n\tthis.removeListeners();\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: removeListeners\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.removeListeners = function()\n{\n\tif (this.eventSource != null)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\tthis.eventSource = null;\n\t}\n\t\n\tmxEvent.removeGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\tthis.mouseMoveHandler = null;\n\tthis.mouseUpHandler = null;\n};\n\n/**\n * Function: dragEnter\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.dragEnter = function(graph, evt)\n{\n\tgraph.isMouseDown = true;\n\tgraph.isMouseTrigger = mxEvent.isMouseEvent(evt);\n\tthis.previewElement = this.createPreviewElement(graph);\n\t\n\tif (this.previewElement != null && this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.previewElement.style.pointerEvents = 'none';\n\t}\n\t\n\t// Guide is only needed if preview element is used\n\tif (this.isGuidesEnabled() && this.previewElement != null)\n\t{\n\t\tthis.currentGuide = new mxGuide(graph, graph.graphHandler.getGuideStates());\n\t}\n\t\n\tif (this.highlightDropTargets)\n\t{\n\t\tthis.currentHighlight = new mxCellHighlight(graph, mxConstants.DROP_TARGET_COLOR);\n\t}\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.eventConsumer);\n};\n\n/**\n * Function: dragExit\n * \n * Deactivates the given graph as a drop target.\n */\nmxDragSource.prototype.dragExit = function(graph, evt)\n{\n\tthis.currentDropTarget = null;\n\tthis.currentPoint = null;\n\tgraph.isMouseDown = false;\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.removeListener(this.eventConsumer);\n\t\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode != null)\n\t\t{\n\t\t\tthis.previewElement.parentNode.removeChild(this.previewElement);\n\t\t}\n\t\t\n\t\tthis.previewElement = null;\n\t}\n\t\n\tif (this.currentGuide != null)\n\t{\n\t\tthis.currentGuide.destroy();\n\t\tthis.currentGuide = null;\n\t}\n\t\n\tif (this.currentHighlight != null)\n\t{\n\t\tthis.currentHighlight.destroy();\n\t\tthis.currentHighlight = null;\n\t}\n};\n\n/**\n * Function: dragOver\n * \n * Implements autoscroll, updates the <currentPoint>, highlights any drop\n * targets and updates the preview.\n */\nmxDragSource.prototype.dragOver = function(graph, evt)\n{\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin(graph.container);\n\tvar x = mxEvent.getClientX(evt) - offset.x + origin.x - graph.panDx;\n\tvar y = mxEvent.getClientY(evt) - offset.y + origin.y - graph.panDy;\n\n\tif (graph.autoScroll && (this.autoscroll == null || this.autoscroll))\n\t{\n\t\tgraph.scrollPointToVisible(x, y, graph.autoExtend);\n\t}\n\n\t// Highlights the drop target under the mouse\n\tif (this.currentHighlight != null && graph.isDropEnabled())\n\t{\n\t\tthis.currentDropTarget = this.getDropTarget(graph, x, y, evt);\n\t\tvar state = graph.getView().getState(this.currentDropTarget);\n\t\tthis.currentHighlight.highlight(state);\n\t}\n\n\t// Updates the location of the preview\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode == null)\n\t\t{\n\t\t\tgraph.container.appendChild(this.previewElement);\n\t\t\t\n\t\t\tthis.previewElement.style.zIndex = '3';\n\t\t\tthis.previewElement.style.position = 'absolute';\n\t\t}\n\t\t\n\t\tvar gridEnabled = this.isGridEnabled() && graph.isGridEnabledEvent(evt);\n\t\tvar hideGuide = true;\n\n\t\t// Grid and guides\n\t\tif (this.currentGuide != null && this.currentGuide.isEnabledForEvent(evt))\n\t\t{\n\t\t\t// LATER: HTML preview appears smaller than SVG preview\n\t\t\tvar w = parseInt(this.previewElement.style.width);\n\t\t\tvar h = parseInt(this.previewElement.style.height);\n\t\t\tvar bounds = new mxRectangle(0, 0, w, h);\n\t\t\tvar delta = new mxPoint(x, y);\n\t\t\tdelta = this.currentGuide.move(bounds, delta, gridEnabled, true);\n\t\t\thideGuide = false;\n\t\t\tx = delta.x;\n\t\t\ty = delta.y;\n\t\t}\n\t\telse if (gridEnabled)\n\t\t{\n\t\t\tvar scale = graph.view.scale;\n\t\t\tvar tr = graph.view.translate;\n\t\t\tvar off = graph.gridSize / 2;\n\t\t\tx = (graph.snap(x / scale - tr.x - off) + tr.x) * scale;\n\t\t\ty = (graph.snap(y / scale - tr.y - off) + tr.y) * scale;\n\t\t}\n\t\t\n\t\tif (this.currentGuide != null && hideGuide)\n\t\t{\n\t\t\tthis.currentGuide.hide();\n\t\t}\n\t\t\n\t\tif (this.previewOffset != null)\n\t\t{\n\t\t\tx += this.previewOffset.x;\n\t\t\ty += this.previewOffset.y;\n\t\t}\n\n\t\tthis.previewElement.style.left = Math.round(x) + 'px';\n\t\tthis.previewElement.style.top = Math.round(y) + 'px';\n\t\tthis.previewElement.style.visibility = 'visible';\n\t}\n\t\n\tthis.currentPoint = new mxPoint(x, y);\n};\n\n/**\n * Function: drop\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.drop = function(graph, evt, dropTarget, x, y)\n{\n\tthis.dropHandler.apply(this, arguments);\n\t\n\t// Had to move this to after the insert because it will\n\t// affect the scrollbars of the window in IE to try and\n\t// make the complete container visible.\n\t// LATER: Should be made optional.\n\tif (graph.container.style.visibility != 'hidden')\n\t{\n\t\tgraph.container.focus();\n\t}\n};\n\n__mxOutput.mxDragSource = typeof mxDragSource !== 'undefined' ? mxDragSource : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxToolbar\n * \n * Creates a toolbar inside a given DOM node. The toolbar may contain icons,\n * buttons and combo boxes.\n * \n * Event: mxEvent.SELECT\n * \n * Fires when an item was selected in the toolbar. The <code>function</code>\n * property contains the function that was selected in <selectMode>.\n * \n * Constructor: mxToolbar\n * \n * Constructs a toolbar in the specified container.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nfunction mxToolbar(container)\n{\n\tthis.container = container;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxToolbar.prototype = new mxEventSource();\nmxToolbar.prototype.constructor = mxToolbar;\n\n/**\n * Variable: container\n * \n * Reference to the DOM nodes that contains the toolbar.\n */\nmxToolbar.prototype.container = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxToolbar.prototype.enabled = true;\n\n/**\n * Variable: noReset\n * \n * Specifies if <resetMode> requires a forced flag of true for resetting\n * the current mode in the toolbar. Default is false. This is set to true\n * if the toolbar item is double clicked to avoid a reset after a single\n * use of the item.\n */\nmxToolbar.prototype.noReset = false;\n\n/**\n * Variable: updateDefaultMode\n * \n * Boolean indicating if the default mode should be the last selected\n * switch mode or the first inserted switch mode. Default is true, that\n * is the last selected switch mode is the default mode. The default mode\n * is the mode to be selected after a reset of the toolbar. If this is\n * false, then the default mode is the first inserted mode item regardless\n * of what was last selected. Otherwise, the selected item after a reset is\n * the previously selected item.\n */\nmxToolbar.prototype.updateDefaultMode = true;\n\n/**\n * Function: addItem\n * \n * Adds the given function as an image with the specified title and icon\n * and returns the new image node.\n * \n * Parameters:\n * \n * title - Optional string that is used as the tooltip.\n * icon - Optional URL of the image to be used. If no URL is given, then a\n * button is created.\n * funct - Function to execute on a mouse click.\n * pressedIcon - Optional URL of the pressed image. Default is a gray\n * background.\n * style - Optional style classname. Default is mxToolbarItem.\n * factoryMethod - Optional factory method for popup menu, eg.\n * function(menu, evt, cell) { menu.addItem('Hello, World!'); }\n */\nmxToolbar.prototype.addItem = function(title, icon, funct, pressedIcon, style, factoryMethod)\n{\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\tvar initialClassName = style || ((factoryMethod != null) ?\n\t\t\t'mxToolbarMode' : 'mxToolbarItem');\n\timg.className = initialClassName;\n\timg.setAttribute('src', icon);\n\t\n\tif (title != null)\n\t{\n\t\tif (icon != null)\n\t\t{\n\t\t\timg.setAttribute('title', title);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.write(img, title);\n\t\t}\n\t}\n\t\n\tthis.container.appendChild(img);\n\n\t// Invokes the function on a click on the toolbar item\n\tif (funct != null)\n\t{\n\t\tmxEvent.addListener(img, 'click', funct);\n\t\t\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(img, 'touchend', funct);\n\t\t}\n\t}\n\n\tvar mouseHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', icon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = '';\n\t\t}\n\t});\n\n\t// Highlights the toolbar item with a gray background\n\t// while it is being clicked with the mouse\n\tmxEvent.addGestureListeners(img, mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', pressedIcon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = 'gray';\n\t\t}\n\t\t\n\t\t// Popup Menu\n\t\tif (factoryMethod != null)\n\t\t{\n\t\t\tif (this.menu == null)\n\t\t\t{\n\t\t\t\tthis.menu = new mxPopupMenu();\n\t\t\t\tthis.menu.init();\n\t\t\t}\n\t\t\t\n\t\t\tvar last = this.currentImg;\n\t\t\t\n\t\t\tif (this.menu.isMenuShowing())\n\t\t\t{\n\t\t\t\tthis.menu.hideMenu();\n\t\t\t}\n\t\t\t\n\t\t\tif (last != img)\n\t\t\t{\n\t\t\t\t// Redirects factory method to local factory method\n\t\t\t\tthis.currentImg = img;\n\t\t\t\tthis.menu.factoryMethod = factoryMethod;\n\t\t\t\t\n\t\t\t\tvar point = new mxPoint(\n\t\t\t\t\timg.offsetLeft,\n\t\t\t\t\timg.offsetTop + img.offsetHeight);\n\t\t\t\tthis.menu.popup(point.x, point.y, null, evt);\n\n\t\t\t\t// Sets and overrides to restore classname\n\t\t\t\tif (this.menu.isMenuShowing())\n\t\t\t\t{\n\t\t\t\t\timg.className = initialClassName + 'Selected';\n\t\t\t\t\t\n\t\t\t\t\tthis.menu.hideMenu = function()\n\t\t\t\t\t{\n\t\t\t\t\t\tmxPopupMenu.prototype.hideMenu.apply(this);\n\t\t\t\t\t\timg.className = initialClassName;\n\t\t\t\t\t\tthis.currentImg = null;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}), null, mouseHandler);\n\n\tmxEvent.addListener(img, 'mouseout', mouseHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given style. The element\n * is placed inside a DIV with the mxToolbarComboContainer style classname.\n * \n * Parameters:\n * \n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addCombo = function(style)\n{\n\tvar div = document.createElement('div');\n\tdiv.style.display = 'inline';\n\tdiv.className = 'mxToolbarComboContainer';\n\t\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tdiv.appendChild(select);\n\t\n\tthis.container.appendChild(div);\n\t\n\treturn select;\n};\n\n/**\n * Function: addActionCombo\n * \n * Adds and returns a new SELECT element using the given title as the\n * default element. The selection is reset to this element after each\n * change.\n * \n * Parameters:\n * \n * title - String that specifies the title of the default element.\n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addActionCombo = function(title, style)\n{\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tthis.addOption(select, title, null);\n\t\n\tmxEvent.addListener(select, 'change', function(evt)\n\t{\n\t\tvar value = select.options[select.selectedIndex];\n\t\tselect.selectedIndex = 0;\n\t\t\n\t\tif (value.funct != null)\n\t\t{\n\t\t\tvalue.funct(evt);\n\t\t}\n\t});\n\t\n\tthis.container.appendChild(select);\n\t\n\treturn select;\n};\n\n/**\n * Function: addOption\n * \n * Adds and returns a new OPTION element inside the given SELECT element.\n * If the given value is a function then it is stored in the option's funct\n * field.\n * \n * Parameters:\n * \n * combo - SELECT element that will contain the new entry.\n * title - String that specifies the title of the option.\n * value - Specifies the value associated with this option.\n */\nmxToolbar.prototype.addOption = function(combo, title, value)\n{\n\tvar option = document.createElement('option');\n\tmxUtils.writeln(option, title);\n\t\n\tif (typeof(value) == 'function')\n\t{\n\t\toption.funct = value;\n\t}\n\telse\n\t{\n\t\toption.setAttribute('value', value);\n\t}\n\t\n\tcombo.appendChild(option);\n\t\n\treturn option;\n};\n\n/**\n * Function: addSwitchMode\n * \n * Adds a new selectable item to the toolbar. Only one switch mode item may\n * be selected at a time. The currently selected item is the default item\n * after a reset of the toolbar.\n */\nmxToolbar.prototype.addSwitchMode = function(title, icon, funct, pressedIcon, style)\n{\n\tvar img = document.createElement('img');\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\t\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t{\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t}\n\t\t\n\t\tif (this.updateDefaultMode)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t}\n\t\t\n\t\tthis.selectedMode = img;\n\t\t\n\t\tvar tmp = img.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\timg.altIcon = img.getAttribute('src');\n\t\t\timg.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.className = img.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT));\n\t\tfunct();\n\t}));\n\t\n\tthis.container.appendChild(img);\n\t\n\tif (this.defaultMode == null)\n\t{\n\t\tthis.defaultMode = img;\n\t\t\n\t\t// Function should fire only once so\n\t\t// do not pass it with the select event\n\t\tthis.selectMode(img);\n\t\tfunct();\n\t}\n\t\n\treturn img;\n};\n\n/**\n * Function: addMode\n * \n * Adds a new item to the toolbar. The selection is typically reset after\n * the item has been consumed, for example by adding a new vertex to the\n * graph. The reset is not carried out if the item is double clicked.\n * \n * The function argument uses the following signature: funct(evt, cell) where\n * evt is the native mouse event and cell is the cell under the mouse.\n */\nmxToolbar.prototype.addMode = function(title, icon, funct, pressedIcon, style, toggle)\n{\n\ttoggle = (toggle != null) ? toggle : true;\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\t\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tif (this.enabled && toggle)\n\t{\n\t\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = false;\n\t\t}));\n\t\t\n\t\tmxEvent.addListener(img, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = true;\n\t\t}));\n\t\t\n\t\tif (this.defaultMode == null)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t\tthis.defaultFunction = funct;\n\t\t\tthis.selectMode(img, funct);\n\t\t}\n\t}\n\n\tthis.container.appendChild(img);\t\t\t\t\t\n\n\treturn img;\n};\n\n/**\n * Function: selectMode\n * \n * Resets the state of the previously selected mode and displays the given\n * DOM node as selected. This function fires a select event with the given\n * function as a parameter.\n */\nmxToolbar.prototype.selectMode = function(domNode, funct)\n{\n\tif (this.selectedMode != domNode)\n\t{\n\t\tif (this.selectedMode != null)\n\t\t{\n\t\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.selectedMode = domNode;\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT, \"function\", funct));\n\t}\n};\n\n/**\n * Function: resetMode\n * \n * Selects the default mode and resets the state of the previously selected\n * mode.\n */\nmxToolbar.prototype.resetMode = function(forced)\n{\n\tif ((forced || !this.noReset) && this.selectedMode != this.defaultMode)\n\t{\n\t\t// The last selected switch mode will be activated\n\t\t// so the function was already executed and is\n\t\t// no longer required here\n\t\tthis.selectMode(this.defaultMode, this.defaultFunction);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds the specifies image as a separator.\n * \n * Parameters:\n * \n * icon - URL of the separator icon.\n */\nmxToolbar.prototype.addSeparator = function(icon)\n{\n\treturn this.addItem(null, icon, null);\n};\n\n/**\n * Function: addBreak\n * \n * Adds a break to the container.\n */\nmxToolbar.prototype.addBreak = function()\n{\n\tmxUtils.br(this.container);\n};\n\n/**\n * Function: addLine\n * \n * Adds a horizontal line to the container.\n */\nmxToolbar.prototype.addLine = function()\n{\n\tvar hr = document.createElement('hr');\n\t\n\thr.style.marginRight = '6px';\n\thr.setAttribute('size', '1');\n\t\n\tthis.container.appendChild(hr);\n};\n\n/**\n * Function: destroy\n * \n * Removes the toolbar and all its associated resources.\n */\nmxToolbar.prototype.destroy = function ()\n{\n\tmxEvent.release(this.container);\n\tthis.container = null;\n\tthis.defaultMode = null;\n\tthis.defaultFunction = null;\n\tthis.selectedMode = null;\n\t\n\tif (this.menu != null)\n\t{\n\t\tthis.menu.destroy();\n\t}\n};\n\n__mxOutput.mxToolbar = typeof mxToolbar !== 'undefined' ? mxToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoableEdit\n * \n * Implements a composite undoable edit. Here is an example for a custom change\n * which gets executed via the model:\n * \n * (code)\n * function CustomChange(model, name)\n * {\n *   this.model = model;\n *   this.name = name;\n *   this.previous = name;\n * };\n * \n * CustomChange.prototype.execute = function()\n * {\n *   var tmp = this.model.name;\n *   this.model.name = this.previous;\n *   this.previous = tmp;\n * };\n * \n * var name = prompt('Enter name');\n * graph.model.execute(new CustomChange(graph.model, name));\n * (end)\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n * \n * Event: mxEvent.START_EDIT\n * \n * Fires before a set of changes will be executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after a set of changeswas executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Constructor: mxUndoableEdit\n * \n * Constructs a new undoable edit for the given source.\n */\nfunction mxUndoableEdit(source, significant)\n{\n\tthis.source = source;\n\tthis.changes = [];\n\tthis.significant = (significant != null) ? significant : true;\n};\n\n/**\n * Variable: source\n * \n * Specifies the source of the edit.\n */\nmxUndoableEdit.prototype.source = null;\n\n/**\n * Variable: changes\n * \n * Array that contains the changes that make up this edit. The changes are\n * expected to either have an undo and redo function, or an execute\n * function. Default is an empty array.\n */\nmxUndoableEdit.prototype.changes = null;\n\n/**\n * Variable: significant\n * \n * Specifies if the undoable change is significant.\n * Default is true.\n */\nmxUndoableEdit.prototype.significant = null;\n\n/**\n * Variable: undone\n * \n * Specifies if this edit has been undone. Default is false.\n */\nmxUndoableEdit.prototype.undone = false;\n\n/**\n * Variable: redone\n * \n * Specifies if this edit has been redone. Default is false.\n */\nmxUndoableEdit.prototype.redone = false;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the this edit contains no changes.\n */\nmxUndoableEdit.prototype.isEmpty = function()\n{\n\treturn this.changes.length == 0;\n};\n\n/**\n * Function: isSignificant\n * \n * Returns <significant>.\n */\nmxUndoableEdit.prototype.isSignificant = function()\n{\n\treturn this.significant;\n};\n\n/**\n * Function: add\n * \n * Adds the specified change to this edit. The change is an object that is\n * expected to either have an undo and redo, or an execute function.\n */\nmxUndoableEdit.prototype.add = function(change)\n{\n\tthis.changes.push(change);\n};\n\n/**\n * Function: notify\n * \n * Hook to notify any listeners of the changes after an <undo> or <redo>\n * has been carried out. This implementation is empty.\n */\nmxUndoableEdit.prototype.notify = function() { };\n\n/**\n * Function: die\n * \n * Hook to free resources after the edit has been removed from the command\n * history. This implementation is empty.\n */\nmxUndoableEdit.prototype.die = function() { };\n\n/**\n * Function: undo\n * \n * Undoes all changes in this edit.\n */\nmxUndoableEdit.prototype.undo = function()\n{\n\tif (!this.undone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = count - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.undo != null)\n\t\t\t{\n\t\t\t\tchange.undo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = true;\n\t\tthis.redone = false;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n/**\n * Function: redo\n * \n * Redoes all changes in this edit.\n */\nmxUndoableEdit.prototype.redo = function()\n{\n\tif (!this.redone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.redo != null)\n\t\t\t{\n\t\t\t\tchange.redo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = false;\n\t\tthis.redone = true;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n__mxOutput.mxUndoableEdit = typeof mxUndoableEdit !== 'undefined' ? mxUndoableEdit : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoManager\n *\n * Implements a command history. When changing the graph model, an\n * <mxUndoableChange> object is created at the start of the transaction (when\n * model.beginUpdate is called). All atomic changes are then added to this\n * object until the last model.endUpdate call, at which point the\n * <mxUndoableEdit> is dispatched in an event, and added to the history inside\n * <mxUndoManager>. This is done by an event listener in\n * <mxEditor.installUndoHandler>.\n * \n * Each atomic change of the model is represented by an object (eg.\n * <mxRootChange>, <mxChildChange>, <mxTerminalChange> etc) which contains the\n * complete undo information. The <mxUndoManager> also listens to the\n * <mxGraphView> and stores it's changes to the current root as insignificant\n * undoable changes, so that drilling (step into, step up) is undone.\n * \n * This means when you execute an atomic change on the model, then change the\n * current root on the view and click undo, the change of the root will be\n * undone together with the change of the model so that the display represents\n * the state at which the model was changed. However, these changes are not\n * transmitted for sharing as they do not represent a state change.\n *\n * Example:\n * \n * When adding an undo manager to a graph, make sure to add it\n * to the model and the view as well to maintain a consistent\n * display across multiple undo/redo steps.\n *\n * (code)\n * var undoManager = new mxUndoManager();\n * var listener = function(sender, evt)\n * {\n *   undoManager.undoableEditHappened(evt.getProperty('edit'));\n * };\n * graph.getModel().addListener(mxEvent.UNDO, listener);\n * graph.getView().addListener(mxEvent.UNDO, listener);\n * (end)\n * \n * The code creates a function that informs the undoManager\n * of an undoable edit and binds it to the undo event of\n * <mxGraphModel> and <mxGraphView> using\n * <mxEventSource.addListener>.\n * \n * Event: mxEvent.CLEAR\n * \n * Fires after <clear> was invoked. This event has no properties.\n * \n * Event: mxEvent.UNDO\n * \n * Fires afer a significant edit was undone in <undo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was undone.\n * \n * Event: mxEvent.REDO\n * \n * Fires afer a significant edit was redone in <redo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was redone.\n * \n * Event: mxEvent.ADD\n * \n * Fires after an undoable edit was added to the history. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was added.\n * \n * Constructor: mxUndoManager\n *\n * Constructs a new undo manager with the given history size. If no history\n * size is given, then a default size of 100 steps is used.\n */\nfunction mxUndoManager(size)\n{\n\tthis.size = (size != null) ? size : 100;\n\tthis.clear();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUndoManager.prototype = new mxEventSource();\nmxUndoManager.prototype.constructor = mxUndoManager;\n\n/**\n * Variable: size\n * \n * Maximum command history size. 0 means unlimited history. Default is\n * 100.\n */\nmxUndoManager.prototype.size = null;\n\n/**\n * Variable: history\n * \n * Array that contains the steps of the command history.\n */\nmxUndoManager.prototype.history = null;\n\n/**\n * Variable: indexOfNextAdd\n * \n * Index of the element to be added next.\n */\nmxUndoManager.prototype.indexOfNextAdd = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the history is empty.\n */\nmxUndoManager.prototype.isEmpty = function()\n{\n\treturn this.history.length == 0;\n};\n\n/**\n * Function: clear\n * \n * Clears the command history.\n */\nmxUndoManager.prototype.clear = function()\n{\n\tthis.history = [];\n\tthis.indexOfNextAdd = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.CLEAR));\n};\n\n/**\n * Function: canUndo\n * \n * Returns true if an undo is possible.\n */\nmxUndoManager.prototype.canUndo = function()\n{\n\treturn this.indexOfNextAdd > 0;\n};\n\n/**\n * Function: undo\n * \n * Undoes the last change.\n */\nmxUndoManager.prototype.undo = function()\n{\n    while (this.indexOfNextAdd > 0)\n    {\n        var edit = this.history[--this.indexOfNextAdd];\n        edit.undo();\n\n\t\tif (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: canRedo\n * \n * Returns true if a redo is possible.\n */\nmxUndoManager.prototype.canRedo = function()\n{\n\treturn this.indexOfNextAdd < this.history.length;\n};\n\n/**\n * Function: redo\n * \n * Redoes the last change.\n */\nmxUndoManager.prototype.redo = function()\n{\n    var n = this.history.length;\n    \n    while (this.indexOfNextAdd < n)\n    {\n        var edit =  this.history[this.indexOfNextAdd++];\n        edit.redo();\n        \n        if (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.REDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: undoableEditHappened\n * \n * Method to be called to add new undoable edits to the <history>.\n */\nmxUndoManager.prototype.undoableEditHappened = function(undoableEdit)\n{\n\tthis.trim();\n\t\n\tif (this.size > 0 &&\n\t\tthis.size == this.history.length)\n\t{\n\t\tthis.history.shift();\n\t}\n\t\n\tthis.history.push(undoableEdit);\n\tthis.indexOfNextAdd = this.history.length;\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'edit', undoableEdit));\n};\n\n/**\n * Function: trim\n * \n * Removes all pending steps after <indexOfNextAdd> from the history,\n * invoking die on each edit. This is called from <undoableEditHappened>.\n */\nmxUndoManager.prototype.trim = function()\n{\n\tif (this.history.length > this.indexOfNextAdd)\n\t{\n\t\tvar edits = this.history.splice(this.indexOfNextAdd,\n\t\t\tthis.history.length - this.indexOfNextAdd);\n\t\t\t\n\t\tfor (var i = 0; i < edits.length; i++)\n\t\t{\n\t\t\tedits[i].die();\n\t\t}\n\t}\n};\n\n__mxOutput.mxUndoManager = typeof mxUndoManager !== 'undefined' ? mxUndoManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxUrlConverter\n * \n * Converts relative and absolute URLs to absolute URLs with protocol and domain.\n */\nvar mxUrlConverter = function()\n{\n\t// Empty constructor\n};\n\n/**\n * Variable: enabled\n * \n * Specifies if the converter is enabled. Default is true.\n */\nmxUrlConverter.prototype.enabled = true;\n\n/**\n * Variable: baseUrl\n * \n * Specifies the base URL to be used as a prefix for relative URLs.\n */\nmxUrlConverter.prototype.baseUrl = null;\n\n/**\n * Variable: baseDomain\n * \n * Specifies the base domain to be used as a prefix for absolute URLs.\n */\nmxUrlConverter.prototype.baseDomain = null;\n\n/**\n * Function: updateBaseUrl\n * \n * Private helper function to update the base URL.\n */\nmxUrlConverter.prototype.updateBaseUrl = function()\n{\n\tthis.baseDomain = location.protocol + '//' + location.host;\n\tthis.baseUrl = this.baseDomain + location.pathname;\n\tvar tmp = this.baseUrl.lastIndexOf('/');\n\t\n\t// Strips filename etc\n\tif (tmp > 0)\n\t{\n\t\tthis.baseUrl = this.baseUrl.substring(0, tmp + 1);\n\t}\n};\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxUrlConverter.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxUrlConverter.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns <baseUrl>.\n */\nmxUrlConverter.prototype.getBaseUrl = function()\n{\n\treturn this.baseUrl;\n};\n\n/**\n * Function: setBaseUrl\n * \n * Sets <baseUrl>.\n */\nmxUrlConverter.prototype.setBaseUrl = function(value)\n{\n\tthis.baseUrl = value;\n};\n\n/**\n * Function: getBaseDomain\n * \n * Returns <baseDomain>.\n */\nmxUrlConverter.prototype.getBaseDomain = function()\n{\n\treturn this.baseDomain;\n};\n\n/**\n * Function: setBaseDomain\n * \n * Sets <baseDomain>.\n */\nmxUrlConverter.prototype.setBaseDomain = function(value)\n{\n\tthis.baseDomain = value;\n};\n\n/**\n * Function: isRelativeUrl\n * \n * Returns true if the given URL is relative.\n */\nmxUrlConverter.prototype.isRelativeUrl = function(url)\n{\n\treturn url != null && url.substring(0, 2) != '//' && url.substring(0, 7) != 'http://' &&\n\t\turl.substring(0, 8) != 'https://' && url.substring(0, 10) != 'data:image' &&\n\t\turl.substring(0, 7) != 'file://';\n};\n\n/**\n * Function: convert\n * \n * Converts the given URL to an absolute URL with protol and domain.\n * Relative URLs are first converted to absolute URLs.\n */\nmxUrlConverter.prototype.convert = function(url)\n{\n\tif (this.isEnabled() && this.isRelativeUrl(url))\n\t{\n\t\tif (this.getBaseUrl() == null)\n\t\t{\n\t\t\tthis.updateBaseUrl();\n\t\t}\n\t\t\n\t\tif (url.charAt(0) == '/')\n\t\t{\n\t\t\turl = this.getBaseDomain() + url;\n\t\t}\n\t\telse\n\t\t{\n\t\t\turl = this.getBaseUrl() + url;\n\t\t}\n\t}\n\t\n\treturn url;\n};\n\n__mxOutput.mxUrlConverter = typeof mxUrlConverter !== 'undefined' ? mxUrlConverter : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningManager\n *\n * Implements a handler for panning.\n */\nfunction mxPanningManager(graph)\n{\n\tthis.thread = null;\n\tthis.active = false;\n\tthis.tdx = 0;\n\tthis.tdy = 0;\n\tthis.t0x = 0;\n\tthis.t0y = 0;\n\tthis.dx = 0;\n\tthis.dy = 0;\n\tthis.scrollbars = false;\n\tthis.scrollLeft = 0;\n\tthis.scrollTop = 0;\n\t\n\tthis.mouseListener =\n\t{\n\t    mouseDown: function(sender, me) { },\n\t    mouseMove: function(sender, me) { },\n\t    mouseUp: mxUtils.bind(this, function(sender, me)\n\t    {\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t    })\n\t};\n\t\n\tgraph.addMouseListener(this.mouseListener);\n\t\n\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t});\n\t\n\t// Stops scrolling on every mouseup anywhere in the document\n\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t\n\tvar createThread = mxUtils.bind(this, function()\n\t{\n\t    \tthis.scrollbars = mxUtils.hasScrollbars(graph.container);\n\t    \tthis.scrollLeft = graph.container.scrollLeft;\n\t    \tthis.scrollTop = graph.container.scrollTop;\n\t\n\t    \treturn window.setInterval(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.tdx -= this.dx;\n\t\t\tthis.tdy -= this.dy;\n\n\t\t\tif (this.scrollbars)\n\t\t\t{\n\t\t\t\tvar left = -graph.container.scrollLeft - Math.ceil(this.dx);\n\t\t\t\tvar top = -graph.container.scrollTop - Math.ceil(this.dy);\n\t\t\t\tgraph.panGraph(left, top);\n\t\t\t\tgraph.panDx = this.scrollLeft - graph.container.scrollLeft;\n\t\t\t\tgraph.panDy = this.scrollTop - graph.container.scrollTop;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t\t// TODO: Implement graph.autoExtend\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panGraph(this.getDx(), this.getDy());\n\t\t\t}\n\t\t}), this.delay);\n\t});\n\t\n\tthis.isActive = function()\n\t{\n\t\treturn active;\n\t};\n\t\n\tthis.getDx = function()\n\t{\n\t\treturn Math.round(this.tdx);\n\t};\n\t\n\tthis.getDy = function()\n\t{\n\t\treturn Math.round(this.tdy);\n\t};\n\t\n\tthis.start = function()\n\t{\n\t\tthis.t0x = graph.view.translate.x;\n\t\tthis.t0y = graph.view.translate.y;\n\t\tthis.active = true;\n\t};\n\t\n\tthis.panTo = function(x, y, w, h)\n\t{\n\t\tif (!this.active)\n\t\t{\n\t\t\tthis.start();\n\t\t}\n\t\t\n    \tthis.scrollLeft = graph.container.scrollLeft;\n    \tthis.scrollTop = graph.container.scrollTop;\n\t\t\n\t\tw = (w != null) ? w : 0;\n\t\th = (h != null) ? h : 0;\n\t\t\n\t\tvar c = graph.container;\n\t\tthis.dx = x + w - c.scrollLeft - c.clientWidth;\n\t\t\n\t\tif (this.dx < 0 && Math.abs(this.dx) < this.border)\n\t\t{\n\t\t\tthis.dx = this.border + this.dx;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dx = Math.max(this.dx, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx = 0;\n\t\t}\n\t\t\n\t\tif (this.dx == 0)\n\t\t{\n\t\t\tthis.dx = x - c.scrollLeft;\n\t\t\t\n\t\t\tif (this.dx > 0 && this.dx < this.border)\n\t\t\t{\n\t\t\t\tthis.dx = this.dx - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dx = Math.min(0, this.dx);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dx = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.dy = y + h - c.scrollTop - c.clientHeight;\n\n\t\tif (this.dy < 0 && Math.abs(this.dy) < this.border)\n\t\t{\n\t\t\tthis.dy = this.border + this.dy;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dy = Math.max(this.dy, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dy = 0;\n\t\t}\n\t\t\n\t\tif (this.dy == 0)\n\t\t{\n\t\t\tthis.dy = y - c.scrollTop;\n\t\t\t\n\t\t\tif (this.dy > 0 && this.dy < this.border)\n\t\t\t{\n\t\t\t\tthis.dy = this.dy - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dy = Math.min(0, this.dy);\n\t\t\t} \n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dy = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.dx != 0 || this.dy != 0)\n\t\t{\n\t\t\tthis.dx *= this.damper;\n\t\t\tthis.dy *= this.damper;\n\t\t\t\n\t\t\tif (this.thread == null)\n\t\t\t{\n\t\t\t\tthis.thread = createThread();\n\t\t\t}\n\t\t}\n\t\telse if (this.thread != null)\n\t\t{\n\t\t\twindow.clearInterval(this.thread);\n\t\t\tthis.thread = null;\n\t\t}\n\t};\n\t\n\tthis.stop = function()\n\t{\n\t\tif (this.active)\n\t\t{\n\t\t\tthis.active = false;\n\t\t\n\t\t\tif (this.thread != null)\n\t    \t{\n\t\t\t\twindow.clearInterval(this.thread);\n\t\t\t\tthis.thread = null;\n\t    \t}\n\t\t\t\n\t\t\tthis.tdx = 0;\n\t\t\tthis.tdy = 0;\n\t\t\t\n\t\t\tif (!this.scrollbars)\n\t\t\t{\n\t\t\t\tvar px = graph.panDx;\n\t\t\t\tvar py = graph.panDy;\n\t\t    \t\n\t\t    \tif (px != 0 || py != 0)\n\t\t    \t{\n\t\t    \t\tgraph.panGraph(0, 0);\n\t\t\t    \tgraph.view.setTranslate(this.t0x + px / graph.view.scale, this.t0y + py / graph.view.scale);\n\t\t    \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panDx = 0;\n\t\t\t\tgraph.panDy = 0;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t}\n\t\t}\n\t};\n\t\n\tthis.destroy = function()\n\t{\n\t\tgraph.removeMouseListener(this.mouseListener);\n\t\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n\t};\n};\n\n/**\n * Variable: damper\n * \n * Damper value for the panning. Default is 1/6.\n */\nmxPanningManager.prototype.damper = 1/6;\n\n/**\n * Variable: delay\n * \n * Delay in milliseconds for the panning. Default is 10.\n */\nmxPanningManager.prototype.delay = 10;\n\n/**\n * Variable: handleMouseOut\n * \n * Specifies if mouse events outside of the component should be handled. Default is true. \n */\nmxPanningManager.prototype.handleMouseOut = true;\n\n/**\n * Variable: border\n * \n * Border to handle automatic panning inside the component. Default is 0 (disabled).\n */\nmxPanningManager.prototype.border = 0;\n\n__mxOutput.mxPanningManager = typeof mxPanningManager !== 'undefined' ? mxPanningManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenu\n * \n * Basic popup menu. To add a vertical scrollbar to a given submenu, the\n * following code can be used.\n * \n * (code)\n * var mxPopupMenuShowMenu = mxPopupMenu.prototype.showMenu;\n * mxPopupMenu.prototype.showMenu = function()\n * {\n *   mxPopupMenuShowMenu.apply(this, arguments);\n *   \n *   this.div.style.overflowY = 'auto';\n *   this.div.style.overflowX = 'hidden';\n *   this.div.style.maxHeight = '160px';\n * };\n * (end)\n * \n * Constructor: mxPopupMenu\n * \n * Constructs a popupmenu.\n * \n * Event: mxEvent.SHOW\n *\n * Fires after the menu has been shown in <popup>.\n */\nfunction mxPopupMenu(factoryMethod)\n{\n\tthis.factoryMethod = factoryMethod;\n\t\n\tif (factoryMethod != null)\n\t{\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPopupMenu.prototype = new mxEventSource();\nmxPopupMenu.prototype.constructor = mxPopupMenu;\n\n/**\n * Variable: submenuImage\n * \n * URL of the image to be used for the submenu icon.\n */\nmxPopupMenu.prototype.submenuImage = mxClient.imageBasePath + '/submenu.gif';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the popupmenu and its shadow. Default is 10006.\n */\nmxPopupMenu.prototype.zIndex = 10006;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used to create the popup menu. The function takes the\n * current panning handler, the <mxCell> under the mouse and the mouse\n * event that triggered the call as arguments.\n */\nmxPopupMenu.prototype.factoryMethod = null;\n\n/**\n * Variable: useLeftButtonForPopup\n * \n * Specifies if popupmenus should be activated by clicking the left mouse\n * button. Default is false.\n */\nmxPopupMenu.prototype.useLeftButtonForPopup = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxPopupMenu.prototype.enabled = true;\n\n/**\n * Variable: itemCount\n * \n * Contains the number of times <addItem> has been called for a new menu.\n */\nmxPopupMenu.prototype.itemCount = 0;\n\n/**\n * Variable: autoExpand\n * \n * Specifies if submenus should be expanded on mouseover. Default is false.\n */\nmxPopupMenu.prototype.autoExpand = false;\n\n/**\n * Variable: smartSeparators\n * \n * Specifies if separators should only be added if a menu item follows them.\n * Default is false.\n */\nmxPopupMenu.prototype.smartSeparators = false;\n\n/**\n * Variable: labels\n * \n * Specifies if any labels should be visible. Default is true.\n */\nmxPopupMenu.prototype.labels = true;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenu.prototype.init = function()\n{\n\t// Adds the inner table\n\tthis.table = document.createElement('table');\n\tthis.table.className = 'mxPopupMenu';\n\t\n\tthis.tbody = document.createElement('tbody');\n\tthis.table.appendChild(this.tbody);\n\n\t// Adds the outer div\n\tthis.div = document.createElement('div');\n\tthis.div.className = 'mxPopupMenu';\n\tthis.div.style.display = 'inline';\n\tthis.div.style.zIndex = this.zIndex;\n\tthis.div.appendChild(this.table);\n\n\t// Disables the context menu on the outer div\n\tmxEvent.disableContextMenu(this.div);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxPopupMenu.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxPopupMenu.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isPopupTrigger\n * \n * Returns true if the given event is a popupmenu trigger for the optional\n * given cell.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the mouse event.\n */\nmxPopupMenu.prototype.isPopupTrigger = function(me)\n{\n\treturn me.isPopupTrigger() || (this.useLeftButtonForPopup && mxEvent.isLeftMouseButton(me.getEvent()));\n};\n\n/**\n * Function: addItem\n * \n * Adds the given item to the given parent item. If no parent item is specified\n * then the item is added to the top-level menu. The return value may be used\n * as the parent argument, ie. as a submenu item. The return value is the table\n * row that represents the item.\n * \n * Paramters:\n * \n * title - String that represents the title of the menu item.\n * image - Optional URL for the image icon.\n * funct - Function associated that takes a mouseup or touchend event.\n * parent - Optional item returned by <addItem>.\n * iconCls - Optional string that represents the CSS class for the image icon.\n * IconsCls is ignored if image is given.\n * enabled - Optional boolean indicating if the item is enabled. Default is true.\n * active - Optional boolean indicating if the menu should implement any event handling.\n * Default is true.\n * noHover - Optional boolean to disable hover state.\n */\nmxPopupMenu.prototype.addItem = function(title, image, funct, parent, iconCls, enabled, active, noHover)\n{\n\tparent = parent || this;\n\tthis.itemCount++;\n\t\n\t// Smart separators only added if element contains items\n\tif (parent.willAddSeparator)\n\t{\n\t\tif (parent.containsItems)\n\t\t{\n\t\t\tthis.addSeparator(parent, true);\n\t\t}\n\n\t\tparent.willAddSeparator = false;\n\t}\n\n\tparent.containsItems = true;\n\tvar tr = document.createElement('tr');\n\ttr.className = 'mxPopupMenuItem';\n\tvar col1 = document.createElement('td');\n\tcol1.className = 'mxPopupMenuIcon';\n\n\t// Adds the given image into the first column\n\tif (image != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.src = image;\n\t\tcol1.appendChild(img);\n\t}\n\telse if (iconCls != null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.className = iconCls;\n\t\tcol1.appendChild(div);\n\t}\n\t\n\ttr.appendChild(col1);\n\t\n\tif (this.labels)\n\t{\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\t\n\t\tmxUtils.write(col2, title);\n\t\tcol2.align = 'left';\n\t\ttr.appendChild(col2);\n\t\n\t\tvar col3 = document.createElement('td');\n\t\tcol3.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\tcol3.style.paddingRight = '6px';\n\t\tcol3.style.textAlign = 'right';\n\t\t\n\t\ttr.appendChild(col3);\n\t\t\n\t\tif (parent.div == null)\n\t\t{\n\t\t\tthis.createSubmenu(parent);\n\t\t}\n\t}\n\t\n\tparent.tbody.appendChild(tr);\n\n\tif (active != false && enabled != false)\n\t{\n\t\tvar currentSelection = null;\n\t\t\n\t\tmxEvent.addGestureListeners(tr,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tthis.eventReceiver = tr;\n\t\t\t\t\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\tif (document.selection != null && (mxClient.IS_QUIRKS || document.documentMode == 8))\n\t\t\t\t{\n\t\t\t\t\tcurrentSelection = document.selection.createRange();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoExpand && tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// Sets hover style because TR in IE doesn't have hover\n\t\t\t\tif (!noHover)\n\t\t\t\t{\n\t\t\t\t\ttr.className = 'mxPopupMenuItemHover';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// EventReceiver avoids clicks on a submenu item\n\t\t\t\t// which has just been shown in the mousedown\n\t\t\t\tif (this.eventReceiver == tr)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != tr)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideMenu();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\t\tif (currentSelection != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Workaround for \"unspecified error\" in IE8 standards\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentSelection.select();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentSelection = null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (funct != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.eventReceiver = null;\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t})\n\t\t);\n\t\n\t\t// Resets hover style because TR in IE doesn't have hover\n\t\tif (!noHover)\n\t\t{\n\t\t\tmxEvent.addListener(tr, 'mouseout',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\ttr.className = 'mxPopupMenuItem';\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n\t\n\treturn tr;\n};\n\n/**\n * Adds a checkmark to the given menuitem.\n */\nmxPopupMenu.prototype.addCheckmark = function(item, img)\n{\n\tvar td = item.firstChild.nextSibling;\n\ttd.style.backgroundImage = 'url(\\'' + img + '\\')';\n\ttd.style.backgroundRepeat = 'no-repeat';\n\ttd.style.backgroundPosition = '2px 50%';\n};\n\n/**\n * Function: createSubmenu\n * \n * Creates the nodes required to add submenu items inside the given parent\n * item. This is called in <addItem> if a parent item is used for the first\n * time. This adds various DOM nodes and a <submenuImage> to the parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.createSubmenu = function(parent)\n{\n\tparent.table = document.createElement('table');\n\tparent.table.className = 'mxPopupMenu';\n\n\tparent.tbody = document.createElement('tbody');\n\tparent.table.appendChild(parent.tbody);\n\n\tparent.div = document.createElement('div');\n\tparent.div.className = 'mxPopupMenu';\n\n\tparent.div.style.position = 'absolute';\n\tparent.div.style.display = 'inline';\n\tparent.div.style.zIndex = this.zIndex;\n\t\n\tparent.div.appendChild(parent.table);\n\t\n\tvar img = document.createElement('img');\n\timg.setAttribute('src', this.submenuImage);\n\t\n\t// Last column of the submenu item in the parent menu\n\ttd = parent.firstChild.nextSibling.nextSibling;\n\ttd.appendChild(img);\n};\n\n/**\n * Function: showSubmenu\n * \n * Shows the submenu inside the given parent row.\n */\nmxPopupMenu.prototype.showSubmenu = function(parent, row)\n{\n\tif (row.div != null)\n\t{\n\t\trow.div.style.left = (parent.div.offsetLeft +\n\t\t\trow.offsetLeft+row.offsetWidth - 1) + 'px';\n\t\trow.div.style.top = (parent.div.offsetTop+row.offsetTop) + 'px';\n\t\tdocument.body.appendChild(row.div);\n\t\t\n\t\t// Moves the submenu to the left side if there is no space\n\t\tvar left = parseInt(row.div.offsetLeft);\n\t\tvar width = parseInt(row.div.offsetWidth);\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\tvar right = offset.x + (b.clientWidth || d.clientWidth);\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\trow.div.style.left = Math.max(0, (parent.div.offsetLeft - width + ((mxClient.IS_IE) ? 6 : -6))) + 'px';\n\t\t}\n\t\t\n\t\tmxUtils.fit(row.div);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds a horizontal separator in the given parent item or the top-level menu\n * if no parent is specified.\n * \n * Parameters:\n * \n * parent - Optional item returned by <addItem>.\n * force - Optional boolean to ignore <smartSeparators>. Default is false.\n */\nmxPopupMenu.prototype.addSeparator = function(parent, force)\n{\n\tparent = parent || this;\n\t\n\tif (this.smartSeparators && !force)\n\t{\n\t\tparent.willAddSeparator = true;\n\t}\n\telse if (parent.tbody != null)\n\t{\n\t\tparent.willAddSeparator = false;\n\t\tvar tr = document.createElement('tr');\n\t\t\n\t\tvar col1 = document.createElement('td');\n\t\tcol1.className = 'mxPopupMenuIcon';\n\t\tcol1.style.padding = '0 0 0 0px';\n\t\t\n\t\ttr.appendChild(col1);\n\t\t\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.style.padding = '0 0 0 0px';\n\t\tcol2.setAttribute('colSpan', '2');\n\t\n\t\tvar hr = document.createElement('hr');\n\t\thr.setAttribute('size', '1');\n\t\tcol2.appendChild(hr);\n\t\t\n\t\ttr.appendChild(col2);\n\t\t\n\t\tparent.tbody.appendChild(tr);\n\t}\n};\n\n/**\n * Function: popup\n * \n * Shows the popup menu for the given event and cell.\n * \n * Example:\n * \n * (code)\n * graph.panningHandler.popup = function(x, y, cell, evt)\n * {\n *   mxUtils.alert('Hello, World!');\n * }\n * (end)\n */\nmxPopupMenu.prototype.popup = function(x, y, cell, evt)\n{\n\tif (this.div != null && this.tbody != null && this.factoryMethod != null)\n\t{\n\t\tthis.div.style.left = x + 'px';\n\t\tthis.div.style.top = y + 'px';\n\t\t\n\t\t// Removes all child nodes from the existing menu\n\t\twhile (this.tbody.firstChild != null)\n\t\t{\n\t\t\tmxEvent.release(this.tbody.firstChild);\n\t\t\tthis.tbody.removeChild(this.tbody.firstChild);\n\t\t}\n\t\t\n\t\tthis.itemCount = 0;\n\t\tthis.factoryMethod(this, cell, evt);\n\t\t\n\t\tif (this.itemCount > 0)\n\t\t{\n\t\t\tthis.showMenu();\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n\t\t}\n\t}\n};\n\n/**\n * Function: isMenuShowing\n * \n * Returns true if the menu is showing.\n */\nmxPopupMenu.prototype.isMenuShowing = function()\n{\n\treturn this.div != null && this.div.parentNode == document.body;\n};\n\n/**\n * Function: showMenu\n * \n * Shows the menu.\n */\nmxPopupMenu.prototype.showMenu = function()\n{\n\t// Disables filter-based shadow in IE9 standards mode\n\tif (document.documentMode >= 9)\n\t{\n\t\tthis.div.style.filter = 'none';\n\t}\n\t\n\t// Fits the div inside the viewport\n\tdocument.body.appendChild(this.div);\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: hideMenu\n * \n * Removes the menu and all submenus.\n */\nmxPopupMenu.prototype.hideMenu = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.hideSubmenu(this);\n\t\tthis.containsItems = false;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n\t}\n};\n\n/**\n * Function: hideSubmenu\n * \n * Removes all submenus inside the given parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.hideSubmenu = function(parent)\n{\n\tif (parent.activeRow != null)\n\t{\n\t\tthis.hideSubmenu(parent.activeRow);\n\t\t\n\t\tif (parent.activeRow.div.parentNode != null)\n\t\t{\n\t\t\tparent.activeRow.div.parentNode.removeChild(parent.activeRow.div);\n\t\t}\n\t\t\n\t\tparent.activeRow = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenu.prototype.destroy = function()\n{\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxPopupMenu = typeof mxPopupMenu !== 'undefined' ? mxPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAutoSaveManager\n * \n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n * \n * Example:\n * \n * (code)\n * var mgr = new mxAutoSaveManager(editor.graph);\n * mgr.save = function()\n * {\n *   mxLog.show();\n *   mxLog.debug('save');\n * };\n * (end)\n * \n * Constructor: mxAutoSaveManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxAutoSaveManager(graph)\n{\n\t// Notifies the manager of a change\n\tthis.changeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t\t}\n\t});\n\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAutoSaveManager.prototype = new mxEventSource();\nmxAutoSaveManager.prototype.constructor = mxAutoSaveManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxAutoSaveManager.prototype.graph = null;\n\n/**\n * Variable: autoSaveDelay\n * \n * Minimum amount of seconds between two consecutive autosaves. Eg. a\n * value of 1 (s) means the graph is not stored more than once per second.\n * Default is 10.\n */\nmxAutoSaveManager.prototype.autoSaveDelay = 10;\n\n/**\n * Variable: autoSaveThrottle\n * \n * Minimum amount of seconds between two consecutive autosaves triggered by\n * more than <autoSaveThreshhold> changes within a timespan of less than\n * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n * stored more than once per second even if there are more than\n * <autoSaveThreshold> changes within that timespan. Default is 2.\n */\nmxAutoSaveManager.prototype.autoSaveThrottle = 2;\n\n/**\n * Variable: autoSaveThreshold\n * \n * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n * means after 2 change of the graph model the autosave will trigger if the\n * condition below is true. Default is 5.\n */\nmxAutoSaveManager.prototype.autoSaveThreshold = 5;\n\n/**\n * Variable: ignoredChanges\n * \n * Counter for ignored changes in autosave.\n */\nmxAutoSaveManager.prototype.ignoredChanges = 0;\n\n/**\n * Variable: lastSnapshot\n * \n * Used for autosaving. See <autosave>.\n */\nmxAutoSaveManager.prototype.lastSnapshot = 0;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxAutoSaveManager.prototype.enabled = true;\n\n/**\n * Variable: changeHandler\n * \n * Holds the function that handles graph model changes.\n */\nmxAutoSaveManager.prototype.changeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxAutoSaveManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxAutoSaveManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxAutoSaveManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\t}\n};\n\n/**\n * Function: save\n * \n * Empty hook that is called if the graph should be saved.\n */\nmxAutoSaveManager.prototype.save = function()\n{\n\t// empty\n};\n\n/**\n * Function: graphModelChanged\n * \n * Invoked when the graph model has changed.\n */\nmxAutoSaveManager.prototype.graphModelChanged = function(changes)\n{\n\tvar now = new Date().getTime();\n\tvar dt = (now - this.lastSnapshot) / 1000;\n\t\n\tif (dt > this.autoSaveDelay ||\n\t\t(this.ignoredChanges >= this.autoSaveThreshold &&\n\t\t dt > this.autoSaveThrottle))\n\t{\n\t\tthis.save();\n\t\tthis.reset();\n\t}\n\telse\n\t{\n\t\t// Increments the number of ignored changes\n\t\tthis.ignoredChanges++;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets all counters.\n */\nmxAutoSaveManager.prototype.reset = function()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.ignoredChanges = 0;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxAutoSaveManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxAutoSaveManager = typeof mxAutoSaveManager !== 'undefined' ? mxAutoSaveManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxAnimation\n * \n * Implements a basic animation in JavaScript.\n * \n * Constructor: mxAnimation\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxAnimation(delay)\n{\n\tthis.delay = (delay != null) ? delay : 20;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAnimation.prototype = new mxEventSource();\nmxAnimation.prototype.constructor = mxAnimation;\n\n/**\n * Variable: delay\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxAnimation.prototype.delay = null;\n\n/**\n * Variable: thread\n * \n * Reference to the thread while the animation is running.\n */\nmxAnimation.prototype.thread = null;\n\n/**\n * Function: isRunning\n * \n * Returns true if the animation is running.\n */\nmxAnimation.prototype.isRunning = function()\n{\n\treturn this.thread != null;\n};\n\n/**\n * Function: startAnimation\n *\n * Starts the animation by repeatedly invoking updateAnimation.\n */\nmxAnimation.prototype.startAnimation = function()\n{\n\tif (this.thread == null)\n\t{\n\t\tthis.thread = window.setInterval(mxUtils.bind(this, this.updateAnimation), this.delay);\n\t}\n};\n\n/**\n * Function: updateAnimation\n *\n * Hook for subclassers to implement the animation. Invoke stopAnimation\n * when finished, startAnimation to resume. This is called whenever the\n * timer fires and fires an mxEvent.EXECUTE event with no properties.\n */\nmxAnimation.prototype.updateAnimation = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE));\n};\n\n/**\n * Function: stopAnimation\n *\n * Stops the animation by deleting the timer and fires an <mxEvent.DONE>.\n */\nmxAnimation.prototype.stopAnimation = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearInterval(this.thread);\n\t\tthis.thread = null;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.DONE));\n\t}\n};\n\n__mxOutput.mxAnimation = typeof mxAnimation !== 'undefined' ? mxAnimation : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxMorphing\n * \n * Implements animation for morphing cells. Here is an example of\n * using this class for animating the result of a layout algorithm:\n * \n * (code)\n * graph.getModel().beginUpdate();\n * try\n * {\n *   var circleLayout = new mxCircleLayout(graph);\n *   circleLayout.execute(graph.getDefaultParent());\n * }\n * finally\n * {\n *   var morph = new mxMorphing(graph);\n *   morph.addListener(mxEvent.DONE, function()\n *   {\n *     graph.getModel().endUpdate();\n *   });\n *   \n *   morph.startAnimation();\n * }\n * (end)\n * \n * Constructor: mxMorphing\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * steps - Optional number of steps in the morphing animation. Default is 6.\n * ease - Optional easing constant for the animation. Default is 1.5.\n * delay - Optional delay between the animation steps. Passed to <mxAnimation>.\n */\nfunction mxMorphing(graph, steps, ease, delay)\n{\n\tmxAnimation.call(this, delay);\n\tthis.graph = graph;\n\tthis.steps = (steps != null) ? steps : 6;\n\tthis.ease = (ease != null) ? ease : 1.5;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxMorphing.prototype = new mxAnimation();\nmxMorphing.prototype.constructor = mxMorphing;\n\n/**\n * Variable: graph\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxMorphing.prototype.graph = null;\n\n/**\n * Variable: steps\n * \n * Specifies the maximum number of steps for the morphing.\n */\nmxMorphing.prototype.steps = null;\n\n/**\n * Variable: step\n * \n * Contains the current step.\n */\nmxMorphing.prototype.step = 0;\n\n/**\n * Variable: ease\n * \n * Ease-off for movement towards the given vector. Larger values are\n * slower and smoother. Default is 4.\n */\nmxMorphing.prototype.ease = null;\n\n/**\n * Variable: cells\n * \n * Optional array of cells to be animated. If this is not specified\n * then all cells are checked and animated if they have been moved\n * in the current transaction.\n */\nmxMorphing.prototype.cells = null;\n\n/**\n * Function: updateAnimation\n *\n * Animation step.\n */\nmxMorphing.prototype.updateAnimation = function()\n{\n\tmxAnimation.prototype.updateAnimation.apply(this, arguments);\n\tvar move = new mxCellStatePreview(this.graph);\n\n\tif (this.cells != null)\n\t{\n\t\t// Animates the given cells individually without recursion\n\t\tfor (var i = 0; i < this.cells.length; i++)\n\t\t{\n\t\t\tthis.animateCell(this.cells[i], move, false);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Animates all changed cells by using recursion to find\n\t\t// the changed cells but not for the animation itself\n\t\tthis.animateCell(this.graph.getModel().getRoot(), move, true);\n\t}\n\t\n\tthis.show(move);\n\t\n\tif (move.isEmpty() || this.step++ >= this.steps)\n\t{\n\t\tthis.stopAnimation();\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the changes in the given <mxCellStatePreview>.\n */\nmxMorphing.prototype.show = function(move)\n{\n\tmove.show();\n};\n\n/**\n * Function: animateCell\n *\n * Animates the given cell state using <mxCellStatePreview.moveState>.\n */\nmxMorphing.prototype.animateCell = function(cell, move, recurse)\n{\n\tvar state = this.graph.getView().getState(cell);\n\tvar delta = null;\n\n\tif (state != null)\n\t{\n\t\t// Moves the animated state from where it will be after the model\n\t\t// change by subtracting the given delta vector from that location\n\t\tdelta = this.getDelta(state);\n\n\t\tif (this.graph.getModel().isVertex(cell) && (delta.x != 0 || delta.y != 0))\n\t\t{\n\t\t\tvar translate = this.graph.view.getTranslate();\n\t\t\tvar scale = this.graph.view.getScale();\n\t\t\t\n\t\t\tdelta.x += translate.x * scale;\n\t\t\tdelta.y += translate.y * scale;\n\t\t\t\n\t\t\tmove.moveState(state, -delta.x / this.ease, -delta.y / this.ease);\n\t\t}\n\t}\n\t\n\tif (recurse && !this.stopRecursion(state, delta))\n\t{\n\t\tvar childCount = this.graph.getModel().getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.animateCell(this.graph.getModel().getChildAt(cell, i), move, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: stopRecursion\n *\n * Returns true if the animation should not recursively find more\n * deltas for children if the given parent state has been animated.\n */\nmxMorphing.prototype.stopRecursion = function(state, delta)\n{\n\treturn delta != null && (delta.x != 0 || delta.y != 0);\n};\n\n/**\n * Function: getDelta\n *\n * Returns the vector between the current rendered state and the future\n * location of the state after the display will be updated.\n */\nmxMorphing.prototype.getDelta = function(state)\n{\n\tvar origin = this.getOriginForCell(state.cell);\n\tvar translate = this.graph.getView().getTranslate();\n\tvar scale = this.graph.getView().getScale();\n\tvar x = state.x / scale - translate.x;\n\tvar y = state.y / scale - translate.y;\n\n\treturn new mxPoint((origin.x - x) * scale, (origin.y - y) * scale);\n};\n\n/**\n * Function: getOriginForCell\n *\n * Returns the top, left corner of the given cell. TODO: Improve performance\n * by using caching inside this method as the result per cell never changes\n * during the lifecycle of this object.\n */\nmxMorphing.prototype.getOriginForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\tresult = this.getOriginForCell(parent);\n\t\t\n\t\t// TODO: Handle offsets\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (geo.relative)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null)\n\t\t\t\t{\n\t\t\t\t\tresult.x += geo.x * pgeo.width;\n\t\t\t\t\tresult.y += geo.y * pgeo.height;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (result == null)\n\t{\n\t\tvar t = this.graph.view.getTranslate();\n\t\tresult = new mxPoint(-t.x, -t.y);\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxMorphing = typeof mxMorphing !== 'undefined' ? mxMorphing : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageBundle\n *\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n * \n * To add a new image bundle to an existing graph, the following code is used:\n * \n * (code)\n * var bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * (end);\n * \n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n * \n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n * \n * The keys for images are resolved in <mxGraph.postProcessCellStyle> and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n * \n * A typical value for the fallback is a MTHML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n * \n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nfunction mxImageBundle(alt)\n{\n\tthis.images = [];\n\tthis.alt = (alt != null) ? alt : false;\n};\n\n/**\n * Variable: images\n * \n * Maps from keys to images.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Variable: alt\n * \n * Specifies if the fallback representation should be returned.\n */\nmxImageBundle.prototype.alt = null;\n\n/**\n * Function: putImage\n * \n * Adds the specified entry to the map. The entry is an object with a value and\n * fallback property as specified in the arguments.\n */\nmxImageBundle.prototype.putImage = function(key, value, fallback)\n{\n\tthis.images[key] = {value: value, fallback: fallback};\n};\n\n/**\n * Function: getImage\n * \n * Returns the value for the given key. This returns the value\n * or fallback, depending on <alt>. The fallback is returned if\n * <alt> is true, the value is returned otherwise.\n */\nmxImageBundle.prototype.getImage = function(key)\n{\n\tvar result = null;\n\t\n\tif (key != null)\n\t{\n\t\tvar img = this.images[key];\n\t\t\n\t\tif (img != null)\n\t\t{\n\t\t\tresult = (this.alt) ? img.fallback : img.value;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n__mxOutput.mxImageBundle = typeof mxImageBundle !== 'undefined' ? mxImageBundle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageExport\n * \n * Creates a new image export instance to be used with an export canvas. Here\n * is an example that uses this class to create an image via a backend using\n * <mxXmlExportCanvas>.\n * \n * (code)\n * var xmlDoc = mxUtils.createXmlDocument();\n * var root = xmlDoc.createElement('output');\n * xmlDoc.appendChild(root);\n * \n * var xmlCanvas = new mxXmlCanvas2D(root);\n * var imgExport = new mxImageExport();\n * imgExport.drawState(graph.getView().getState(graph.model.root), xmlCanvas);\n * \n * var bounds = graph.getGraphBounds();\n * var w = Math.ceil(bounds.x + bounds.width);\n * var h = Math.ceil(bounds.y + bounds.height);\n * \n * var xml = mxUtils.getXml(root);\n * new mxXmlRequest('export', 'format=png&w=' + w +\n * \t\t'&h=' + h + '&bg=#F9F7ED&xml=' + encodeURIComponent(xml))\n * \t\t.simulate(document, '_blank');\n * (end)\n * \n * Constructor: mxImageExport\n * \n * Constructs a new image export.\n */\nfunction mxImageExport() { };\n\n/**\n * Variable: includeOverlays\n * \n * Specifies if overlays should be included in the export. Default is false.\n */\nmxImageExport.prototype.includeOverlays = false;\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.drawState = function(state, canvas)\n{\n\tif (state != null)\n\t{\n\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.drawCellState.apply(this, arguments);\n\t\t}));\n\t\t\t\t\n\t\t// Paints the overlays\n\t\tif (this.includeOverlays)\n\t\t{\n\t\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.drawOverlays.apply(this, arguments);\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Function: visitStatesRecursive\n * \n * Visits the given state and all its descendants to the given canvas recursively.\n */\nmxImageExport.prototype.visitStatesRecursive = function(state, canvas, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvisitor(state, canvas);\n\t\t\n\t\tvar graph = state.view.graph;\n\t\tvar childCount = graph.model.getChildCount(state.cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar childState = graph.view.getState(graph.model.getChildAt(state.cell, i));\n\t\t\tthis.visitStatesRecursive(childState, canvas, visitor);\n\t\t}\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state and canvas. This returns null.\n */\nmxImageExport.prototype.getLinkForCellState = function(state, canvas)\n{\n\treturn null;\n};\n\n/**\n * Function: drawCellState\n * \n * Draws the given state to the given canvas.\n */\nmxImageExport.prototype.drawCellState = function(state, canvas)\n{\n\t// Experimental feature\n\tvar link = this.getLinkForCellState(state, canvas);\n\t\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(link);\n\t}\n\t\n\t// Paints the shape and text\n\tthis.drawShape(state, canvas);\n\tthis.drawText(state, canvas);\n\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(null);\n\t}\n};\n\n/**\n * Function: drawShape\n * \n * Draws the shape of the given state.\n */\nmxImageExport.prototype.drawShape = function(state, canvas)\n{\n\tif (state.shape instanceof mxShape && state.shape.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\t\n\t\tstate.shape.beforePaint(canvas);\n\t\tstate.shape.paint(canvas);\n\t\tstate.shape.afterPaint(canvas);\n\t\t\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawText\n * \n * Draws the text of the given state.\n */\nmxImageExport.prototype.drawText = function(state, canvas)\n{\n\tif (state.text != null && state.text.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\t\n\t\tstate.text.beforePaint(canvas);\n\t\tstate.text.paint(canvas);\n\t\tstate.text.afterPaint(canvas);\n\t\t\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawOverlays\n * \n * Draws the overlays for the given state. This is called if <includeOverlays>\n * is true.\n */\nmxImageExport.prototype.drawOverlays = function(state, canvas)\n{\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tif (shape instanceof mxShape)\n\t\t\t{\n\t\t\t\tshape.paint(canvas);\n\t\t\t}\n\t\t});\n\t}\n};\n\n\n__mxOutput.mxImageExport = typeof mxImageExport !== 'undefined' ? mxImageExport : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAbstractCanvas2D\n *\n * Base class for all canvases. A description of the public API is available in <mxXmlCanvas2D>.\n * All color values of <mxConstants.NONE> will be converted to null in the state.\n * \n * Constructor: mxAbstractCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxAbstractCanvas2D()\n{\n\t/**\n\t * Variable: converter\n\t * \n\t * Holds the <mxUrlConverter> to convert image URLs.\n\t */\n\tthis.converter = this.createUrlConverter();\n\t\n\tthis.reset();\n};\n\n/**\n * Variable: state\n * \n * Holds the current state.\n */\nmxAbstractCanvas2D.prototype.state = null;\n\n/**\n * Variable: states\n * \n * Stack of states.\n */\nmxAbstractCanvas2D.prototype.states = null;\n\n/**\n * Variable: path\n * \n * Holds the current path as an array.\n */\nmxAbstractCanvas2D.prototype.path = null;\n\n/**\n * Variable: rotateHtml\n * \n * Switch for rotation of HTML. Default is false.\n */\nmxAbstractCanvas2D.prototype.rotateHtml = true;\n\n/**\n * Variable: lastX\n * \n * Holds the last x coordinate.\n */\nmxAbstractCanvas2D.prototype.lastX = 0;\n\n/**\n * Variable: lastY\n * \n * Holds the last y coordinate.\n */\nmxAbstractCanvas2D.prototype.lastY = 0;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'M'.\n */\nmxAbstractCanvas2D.prototype.moveOp = 'M';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'L'.\n */\nmxAbstractCanvas2D.prototype.lineOp = 'L';\n\n/**\n * Variable: quadOp\n * \n * Contains the string used for quadratic paths. Default is 'Q'.\n */\nmxAbstractCanvas2D.prototype.quadOp = 'Q';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'C'.\n */\nmxAbstractCanvas2D.prototype.curveOp = 'C';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'Z'.\n */\nmxAbstractCanvas2D.prototype.closeOp = 'Z';\n\n/**\n * Variable: pointerEvents\n * \n * Boolean value that specifies if events should be handled. Default is false.\n */\nmxAbstractCanvas2D.prototype.pointerEvents = false;\n\n/**\n * Function: createUrlConverter\n * \n * Create a new <mxUrlConverter> and returns it.\n */\nmxAbstractCanvas2D.prototype.createUrlConverter = function()\n{\n\treturn new mxUrlConverter();\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this canvas.\n */\nmxAbstractCanvas2D.prototype.reset = function()\n{\n\tthis.state = this.createState();\n\tthis.states = [];\n};\n\n/**\n * Function: createState\n * \n * Creates the state of the this canvas.\n */\nmxAbstractCanvas2D.prototype.createState = function()\n{\n\treturn {\n\t\tdx: 0,\n\t\tdy: 0,\n\t\tscale: 1,\n\t\talpha: 1,\n\t\tfillAlpha: 1,\n\t\tstrokeAlpha: 1,\n\t\tfillColor: null,\n\t\tgradientFillAlpha: 1,\n\t\tgradientColor: null,\n\t\tgradientAlpha: 1,\n\t\tgradientDirection: null,\n\t\tstrokeColor: null,\n\t\tstrokeWidth: 1,\n\t\tdashed: false,\n\t\tdashPattern: '3 3',\n\t\tfixDash: false,\n\t\tlineCap: 'flat',\n\t\tlineJoin: 'miter',\n\t\tmiterLimit: 10,\n\t\tfontColor: '#000000',\n\t\tfontBackgroundColor: null,\n\t\tfontBorderColor: null,\n\t\tfontSize: mxConstants.DEFAULT_FONTSIZE,\n\t\tfontFamily: mxConstants.DEFAULT_FONTFAMILY,\n\t\tfontStyle: 0,\n\t\tshadow: false,\n\t\tshadowColor: mxConstants.SHADOWCOLOR,\n\t\tshadowAlpha: mxConstants.SHADOW_OPACITY,\n\t\tshadowDx: mxConstants.SHADOW_OFFSET_X,\n\t\tshadowDy: mxConstants.SHADOW_OFFSET_Y,\n\t\trotation: 0,\n\t\trotationCx: 0,\n\t\trotationCy: 0\n\t};\n};\n\n/**\n * Function: format\n * \n * Rounds all numbers to integers.\n */\nmxAbstractCanvas2D.prototype.format = function(value)\n{\n\treturn Math.round(parseFloat(value));\n};\n\n/**\n * Function: addOp\n * \n * Adds the given operation to the path.\n */\nmxAbstractCanvas2D.prototype.addOp = function()\n{\n\tif (this.path != null)\n\t{\n\t\tthis.path.push(arguments[0]);\n\t\t\n\t\tif (arguments.length > 2)\n\t\t{\n\t\t\tvar s = this.state;\n\n\t\t\tfor (var i = 2; i < arguments.length; i += 2)\n\t\t\t{\n\t\t\t\tthis.lastX = arguments[i - 1];\n\t\t\t\tthis.lastY = arguments[i];\n\t\t\t\t\n\t\t\t\tthis.path.push(this.format((this.lastX + s.dx) * s.scale));\n\t\t\t\tthis.path.push(this.format((this.lastY + s.dy) * s.scale));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the given point and returns the result as an <mxPoint>.\n */\nmxAbstractCanvas2D.prototype.rotatePoint = function(x, y, theta, cx, cy)\n{\n\tvar rad = theta * (Math.PI / 180);\n\t\n\treturn mxUtils.getRotatedPoint(new mxPoint(x, y), Math.cos(rad),\n\t\tMath.sin(rad), new mxPoint(cx, cy));\n};\n\n/**\n * Function: save\n * \n * Saves the current state.\n */\nmxAbstractCanvas2D.prototype.save = function()\n{\n\tthis.states.push(this.state);\n\tthis.state = mxUtils.clone(this.state);\n};\n\n/**\n * Function: restore\n * \n * Restores the current state.\n */\nmxAbstractCanvas2D.prototype.restore = function()\n{\n\tif (this.states.length > 0)\n\t{\n\t\tthis.state = this.states.pop();\n\t}\n};\n\n/**\n * Function: setLink\n * \n * Sets the current link. Hook for subclassers.\n */\nmxAbstractCanvas2D.prototype.setLink = function(link)\n{\n\t// nop\n};\n\n/**\n * Function: scale\n * \n * Scales the current state.\n */\nmxAbstractCanvas2D.prototype.scale = function(value)\n{\n\tthis.state.scale *= value;\n\tthis.state.strokeWidth *= value;\n};\n\n/**\n * Function: translate\n * \n * Translates the current state.\n */\nmxAbstractCanvas2D.prototype.translate = function(dx, dy)\n{\n\tthis.state.dx += dx;\n\tthis.state.dy += dy;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the current state.\n */\nmxAbstractCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\t// nop\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n */\nmxAbstractCanvas2D.prototype.setAlpha = function(value)\n{\n\tthis.state.alpha = value;\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current solid fill alpha.\n */\nmxAbstractCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tthis.state.fillAlpha = value;\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n */\nmxAbstractCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tthis.state.strokeAlpha = value;\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n */\nmxAbstractCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fillColor = value;\n\tthis.state.gradientColor = null;\n};\n\n/**\n * Function: setGradient\n * \n * Sets the current gradient.\n */\nmxAbstractCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tvar s = this.state;\n\ts.fillColor = color1;\n\ts.gradientFillAlpha = (alpha1 != null) ? alpha1 : 1;\n\ts.gradientColor = color2;\n\ts.gradientAlpha = (alpha2 != null) ? alpha2 : 1;\n\ts.gradientDirection = direction;\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n */\nmxAbstractCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.strokeColor = value;\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n */\nmxAbstractCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tthis.state.strokeWidth = value;\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n */\nmxAbstractCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tthis.state.dashed = value;\n\tthis.state.fixDash = fixDash;\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern.\n */\nmxAbstractCanvas2D.prototype.setDashPattern = function(value)\n{\n\tthis.state.dashPattern = value;\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the current line cap.\n */\nmxAbstractCanvas2D.prototype.setLineCap = function(value)\n{\n\tthis.state.lineCap = value;\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the current line join.\n */\nmxAbstractCanvas2D.prototype.setLineJoin = function(value)\n{\n\tthis.state.lineJoin = value;\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the current miter limit.\n */\nmxAbstractCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tthis.state.miterLimit = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontColor = value;\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n */\nmxAbstractCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBackgroundColor = value;\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n */\nmxAbstractCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBorderColor = value;\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size.\n */\nmxAbstractCanvas2D.prototype.setFontSize = function(value)\n{\n\tthis.state.fontSize = parseFloat(value);\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family.\n */\nmxAbstractCanvas2D.prototype.setFontFamily = function(value)\n{\n\tthis.state.fontFamily = value;\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n */\nmxAbstractCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (value == null)\n\t{\n\t\tvalue = 0;\n\t}\n\t\n\tthis.state.fontStyle = value;\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadow = function(enabled)\n{\n\tthis.state.shadow = enabled;\n};\n\n/**\n * Function: setShadowColor\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.shadowColor = value;\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tthis.state.shadowAlpha = value;\n};\n\n/**\n * Function: setShadowOffset\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tthis.state.shadowDx = dx;\n\tthis.state.shadowDy = dy;\n};\n\n/**\n * Function: begin\n * \n * Starts a new path.\n */\nmxAbstractCanvas2D.prototype.begin = function()\n{\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n\tthis.path = [];\n};\n\n/**\n * Function: moveTo\n * \n *  Moves the current path the given coordinates.\n */\nmxAbstractCanvas2D.prototype.moveTo = function(x, y)\n{\n\tthis.addOp(this.moveOp, x, y);\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates. Uses moveTo with the op argument.\n */\nmxAbstractCanvas2D.prototype.lineTo = function(x, y)\n{\n\tthis.addOp(this.lineOp, x, y);\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n */\nmxAbstractCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tthis.addOp(this.quadOp, x1, y1, x2, y2);\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n */\nmxAbstractCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);\n};\n\n/**\n * Function: arcTo\n * \n * Adds the given arc to the current path. This is a synthetic operation that\n * is broken down into curves.\n */\nmxAbstractCanvas2D.prototype.arcTo = function(rx, ry, angle, largeArcFlag, sweepFlag, x, y)\n{\n\tvar curves = mxUtils.arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);\n\t\n\tif (curves != null)\n\t{\n\t\tfor (var i = 0; i < curves.length; i += 6) \n\t\t{\n\t\t\tthis.curveTo(curves[i], curves[i + 1], curves[i + 2],\n\t\t\t\tcurves[i + 3], curves[i + 4], curves[i + 5]);\n\t\t}\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxAbstractCanvas2D.prototype.close = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.closeOp);\n};\n\n/**\n * Function: end\n * \n * Empty implementation for backwards compatibility. This will be removed.\n */\nmxAbstractCanvas2D.prototype.end = function() { };\n\n__mxOutput.mxAbstractCanvas2D = typeof mxAbstractCanvas2D !== 'undefined' ? mxAbstractCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlCanvas2D\n *\n * Base class for all canvases. The following methods make up the public\n * interface of the canvas 2D for all painting in mxGraph:\n * \n * - <save>, <restore>\n * - <scale>, <translate>, <rotate>\n * - <setAlpha>, <setFillAlpha>, <setStrokeAlpha>, <setFillColor>, <setGradient>,\n *   <setStrokeColor>, <setStrokeWidth>, <setDashed>, <setDashPattern>, <setLineCap>, \n *   <setLineJoin>, <setMiterLimit>\n * - <setFontColor>, <setFontBackgroundColor>, <setFontBorderColor>, <setFontSize>,\n *   <setFontFamily>, <setFontStyle>\n * - <setShadow>, <setShadowColor>, <setShadowAlpha>, <setShadowOffset>\n * - <rect>, <roundrect>, <ellipse>, <image>, <text>\n * - <begin>, <moveTo>, <lineTo>, <quadTo>, <curveTo>\n * - <stroke>, <fill>, <fillAndStroke>\n * \n * <mxAbstractCanvas2D.arcTo> is an additional method for drawing paths. This is\n * a synthetic method, meaning that it is turned into a sequence of curves by\n * default. Subclassers may add native support for arcs.\n * \n * Constructor: mxXmlCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxXmlCanvas2D(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t// Writes default settings;\n\tthis.writeDefaults();\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxXmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxXmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: compressed\n * \n * Specifies if the output should be compressed by removing redundant calls.\n * Default is true.\n */\nmxXmlCanvas2D.prototype.compressed = true;\n\n/**\n * Function: writeDefaults\n * \n * Writes the rendering defaults to <root>:\n */\nmxXmlCanvas2D.prototype.writeDefaults = function()\n{\n\tvar elem;\n\t\n\t// Writes font defaults\n\telem = this.createElement('fontfamily');\n\telem.setAttribute('family', mxConstants.DEFAULT_FONTFAMILY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('fontsize');\n\telem.setAttribute('size', mxConstants.DEFAULT_FONTSIZE);\n\tthis.root.appendChild(elem);\n\t\n\t// Writes shadow defaults\n\telem = this.createElement('shadowcolor');\n\telem.setAttribute('color', mxConstants.SHADOWCOLOR);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', mxConstants.SHADOW_OPACITY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', mxConstants.SHADOW_OFFSET_X);\n\telem.setAttribute('dy', mxConstants.SHADOW_OFFSET_Y);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: format\n * \n * Returns a formatted number with 2 decimal places.\n */\nmxXmlCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: createElement\n * \n * Creates the given element using the owner document of <root>.\n */\nmxXmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn this.root.ownerDocument.createElement(name);\n};\n\n/**\n * Function: save\n * \n * Saves the drawing state.\n */\nmxXmlCanvas2D.prototype.save = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.save.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('save'));\n};\n\n/**\n * Function: restore\n * \n * Restores the drawing state.\n */\nmxXmlCanvas2D.prototype.restore = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.restore.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('restore'));\n};\n\n/**\n * Function: scale\n * \n * Scales the output.\n * \n * Parameters:\n * \n * scale - Number that represents the scale where 1 is equal to 100%.\n */\nmxXmlCanvas2D.prototype.scale = function(value)\n{\n        var elem = this.createElement('scale');\n        elem.setAttribute('scale', value);\n        this.root.appendChild(elem);\n};\n\n/**\n * Function: translate\n * \n * Translates the output.\n * \n * Parameters:\n * \n * dx - Number that specifies the horizontal translation.\n * dy - Number that specifies the vertical translation.\n */\nmxXmlCanvas2D.prototype.translate = function(dx, dy)\n{\n\tvar elem = this.createElement('translate');\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: rotate\n * \n * Rotates and/or flips the output around a given center. (Note: Due to\n * limitations in VML, the rotation cannot be concatenated.)\n * \n * Parameters:\n * \n * theta - Number that represents the angle of the rotation (in degrees).\n * flipH - Boolean indicating if the output should be flipped horizontally.\n * flipV - Boolean indicating if the output should be flipped vertically.\n * cx - Number that represents the x-coordinate of the rotation center.\n * cy - Number that represents the y-coordinate of the rotation center.\n */\nmxXmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tvar elem = this.createElement('rotate');\n\t\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\telem.setAttribute('theta', this.format(theta));\n\t\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\t\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\t\telem.setAttribute('cx', this.format(cx));\n\t\telem.setAttribute('cy', this.format(cy));\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.alpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('alpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current fill alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new fill alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillalpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new stroke alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokealpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setGradient\n * \n * Sets the gradient. Note that the coordinates may be ignored by some implementations.\n * \n * Parameters:\n * \n * color1 - Hexadecimal representation of the start color.\n * color2 - Hexadecimal representation of the end color.\n * x - X-coordinate of the gradient region.\n * y - y-coordinate of the gradient region.\n * w - Width of the gradient region.\n * h - Height of the gradient region.\n * direction - One of <mxConstants.DIRECTION_NORTH>, <mxConstants.DIRECTION_EAST>,\n * <mxConstants.DIRECTION_SOUTH> or <mxConstants.DIRECTION_WEST>.\n * alpha1 - Optional alpha of the start color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n * alpha2 - Optional alpha of the end color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tif (color1 != null && color2 != null)\n\t{\n\t\tmxAbstractCanvas2D.prototype.setGradient.apply(this, arguments);\n\t\t\n\t\tvar elem = this.createElement('gradient');\n\t\telem.setAttribute('c1', color1);\n\t\telem.setAttribute('c2', color2);\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\t\n\t\t// Default direction is south\n\t\tif (direction != null)\n\t\t{\n\t\t\telem.setAttribute('direction', direction);\n\t\t}\n\t\t\n\t\tif (alpha1 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha1', alpha1);\n\t\t}\n\t\t\n\t\tif (alpha2 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha2', alpha2);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokecolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n * \n * Parameters:\n * \n * value - Numeric representation of the stroke width.\n */\nmxXmlCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeWidth == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeWidth.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokewidth');\n\telem.setAttribute('width', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n * \n * Parameters:\n * \n * value - Boolean that specifies if dashed lines should be enabled.\n * value - Boolean that specifies if the stroke width should be ignored\n * for the dash pattern. Default is false.\n */\nmxXmlCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashed == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashed.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashed');\n\telem.setAttribute('dashed', (value) ? '1' : '0');\n\t\n\tif (fixDash != null)\n\t{\n\t\telem.setAttribute('fixDash', (fixDash) ? '1' : '0');\n\t}\n\t\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern. Default is '3 3'.\n * \n * Parameters:\n * \n * value - String that represents the dash pattern, which is a sequence of\n * numbers defining the length of the dashes and the length of the spaces\n * between the dashes. The lengths are relative to the line width - a length\n * of 1 is equals to the line width.\n */\nmxXmlCanvas2D.prototype.setDashPattern = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashPattern == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashPattern.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashpattern');\n\telem.setAttribute('pattern', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the line cap. Default is 'flat' which corresponds to 'butt' in SVG.\n * \n * Parameters:\n * \n * value - String that represents the line cap. Possible values are flat, round\n * and square.\n */\nmxXmlCanvas2D.prototype.setLineCap = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineCap == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineCap.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linecap');\n\telem.setAttribute('cap', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the line join. Default is 'miter'.\n * \n * Parameters:\n * \n * value - String that represents the line join. Possible values are miter,\n * round and bevel.\n */\nmxXmlCanvas2D.prototype.setLineJoin = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineJoin == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineJoin.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linejoin');\n\telem.setAttribute('join', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the miter limit. Default is 10.\n * \n * Parameters:\n * \n * value - Number that represents the miter limit.\n */\nmxXmlCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.miterLimit == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setMiterLimit.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('miterlimit');\n\telem.setAttribute('limit', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color. Default is '#000000'.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBackgroundColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBackgroundColor.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontbackgroundcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBorderColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBorderColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontbordercolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size. Default is <mxConstants.DEFAULT_FONTSIZE>.\n * \n * Parameters:\n * \n * value - Numeric representation of the font size.\n */\nmxXmlCanvas2D.prototype.setFontSize = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontSize == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontSize.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontsize');\n\t\telem.setAttribute('size', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family. Default is <mxConstants.DEFAULT_FONTFAMILY>.\n * \n * Parameters:\n * \n * value - String representation of the font family. This handles the same\n * values as the CSS font-family property.\n */\nmxXmlCanvas2D.prototype.setFontFamily = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontFamily == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontFamily.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontfamily');\n\t\telem.setAttribute('family', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n * \n * Parameters:\n * \n * value - Numeric representation of the font family. This is the sum of the\n * font styles from <mxConstants>.\n */\nmxXmlCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontStyle == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontStyle.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontstyle');\n\t\telem.setAttribute('style', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables shadows.\n * \n * Parameters:\n * \n * value - Boolean that specifies if shadows should be enabled.\n */\nmxXmlCanvas2D.prototype.setShadow = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadow == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadow.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadow');\n\telem.setAttribute('enabled', (value) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowColor\n * \n * Sets the current shadow color. Default is <mxConstants.SHADOWCOLOR>.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.state.shadowColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Sets the current shadows alpha. Default is <mxConstants.SHADOW_OPACITY>.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', value);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: setShadowOffset\n * \n * Sets the current shadow offset.\n * \n * Parameters:\n * \n * dx - Number that represents the horizontal offset of the shadow.\n * dy - Number that represents the vertical offset of the shadow.\n */\nmxXmlCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowDx == dx && this.state.shadowDy == dy)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowOffset.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', dx);\n\telem.setAttribute('dy', dy);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: rect\n * \n * Puts a rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n */\nmxXmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar elem = this.createElement('rect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: roundrect\n * \n * Puts a rounded rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n * dx - Number that represents the horizontal rounding.\n * dy - Number that represents the vertical rounding.\n */\nmxXmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tvar elem = this.createElement('roundrect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: ellipse\n * \n * Puts an ellipse into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the ellipse.\n * y - Number that represents the y-coordinate of the ellipse.\n * w - Number that represents the width of the ellipse.\n * h - Number that represents the height of the ellipse.\n */\nmxXmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar elem = this.createElement('ellipse');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the image.\n * y - Number that represents the y-coordinate of the image.\n * w - Number that represents the width of the image.\n * h - Number that represents the height of the image.\n * src - String that specifies the URL of the image.\n * aspect - Boolean indicating if the aspect of the image should be preserved.\n * flipH - Boolean indicating if the image should be flipped horizontally.\n * flipV - Boolean indicating if the image should be flipped vertically.\n */\nmxXmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\tvar elem = this.createElement('image');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('src', src);\n\telem.setAttribute('aspect', (aspect) ? '1' : '0');\n\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: begin\n * \n * Starts a new path and puts it into the drawing buffer.\n */\nmxXmlCanvas2D.prototype.begin = function()\n{\n\tthis.root.appendChild(this.createElement('begin'));\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n};\n\n/**\n * Function: moveTo\n * \n * Moves the current path the given point.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the point.\n * y - Number that represents the y-coordinate of the point.\n */\nmxXmlCanvas2D.prototype.moveTo = function(x, y)\n{\n\tvar elem = this.createElement('move');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the endpoint.\n * y - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.lineTo = function(x, y)\n{\n\tvar elem = this.createElement('line');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the control point.\n * y1 - Number that represents the y-coordinate of the control point.\n * x2 - Number that represents the x-coordinate of the endpoint.\n * y2 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar elem = this.createElement('quad');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x2;\n\tthis.lastY = y2;\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the first control point.\n * y1 - Number that represents the y-coordinate of the first control point.\n * x2 - Number that represents the x-coordinate of the second control point.\n * y2 - Number that represents the y-coordinate of the second control point.\n * x3 - Number that represents the x-coordinate of the endpoint.\n * y3 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tvar elem = this.createElement('curve');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\telem.setAttribute('x3', this.format(x3));\n\telem.setAttribute('y3', this.format(y3));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x3;\n\tthis.lastY = y3;\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxXmlCanvas2D.prototype.close = function()\n{\n\tthis.root.appendChild(this.createElement('close'));\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup. Background and border color as well\n * as clipping is not available in plain text labels for VML. HTML labels\n * are not available as part of shapes with no foreignObject support in SVG\n * (eg. IE9, IE10).\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the text.\n * y - Number that represents the y-coordinate of the text.\n * w - Number that represents the available width for the text or 0 for automatic width.\n * h - Number that represents the available height for the text or 0 for automatic height.\n * str - String that specifies the text to be painted.\n * align - String that represents the horizontal alignment.\n * valign - String that represents the vertical alignment.\n * wrap - Boolean that specifies if word-wrapping is enabled. Requires w > 0.\n * format - Empty string for plain text or 'html' for HTML markup.\n * overflow - Specifies the overflow behaviour of the label. Requires w > 0 and/or h > 0.\n * clip - Boolean that specifies if the label should be clipped. Requires w > 0 and/or h > 0.\n * rotation - Number that specifies the angle of the rotation around the anchor point of the text.\n * dir - Optional string that specifies the text direction. Possible values are rtl and lrt.\n */\nmxXmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tif (mxUtils.isNode(str))\n\t\t{\n\t\t\tstr = mxUtils.getOuterHtml(str);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('text');\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\telem.setAttribute('str', str);\n\t\t\n\t\tif (align != null)\n\t\t{\n\t\t\telem.setAttribute('align', align);\n\t\t}\n\t\t\n\t\tif (valign != null)\n\t\t{\n\t\t\telem.setAttribute('valign', valign);\n\t\t}\n\t\t\n\t\telem.setAttribute('wrap', (wrap) ? '1' : '0');\n\t\t\n\t\tif (format == null)\n\t\t{\n\t\t\tformat = '';\n\t\t}\n\t\t\n\t\telem.setAttribute('format', format);\n\t\t\n\t\tif (overflow != null)\n\t\t{\n\t\t\telem.setAttribute('overflow', overflow);\n\t\t}\n\t\t\n\t\tif (clip != null)\n\t\t{\n\t\t\telem.setAttribute('clip', (clip) ? '1' : '0');\n\t\t}\n\t\t\n\t\tif (rotation != null)\n\t\t{\n\t\t\telem.setAttribute('rotation', rotation);\n\t\t}\n\t\t\n\t\tif (dir != null)\n\t\t{\n\t\t\telem.setAttribute('dir', dir);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.stroke = function()\n{\n\tthis.root.appendChild(this.createElement('stroke'));\n};\n\n/**\n * Function: fill\n * \n * Fills the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.fill = function()\n{\n\tthis.root.appendChild(this.createElement('fill'));\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills the current drawing buffer and its outline.\n */\nmxXmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.root.appendChild(this.createElement('fillstroke'));\n};\n\n__mxOutput.mxXmlCanvas2D = typeof mxXmlCanvas2D !== 'undefined' ? mxXmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSvgCanvas2D\n *\n * Extends <mxAbstractCanvas2D> to implement a canvas for SVG. This canvas writes all\n * calls as SVG output to the given SVG root node.\n * \n * (code)\n * var svgDoc = mxUtils.createXmlDocument();\n * var root = (svgDoc.createElementNS != null) ?\n * \t\tsvgDoc.createElementNS(mxConstants.NS_SVG, 'svg') : svgDoc.createElement('svg');\n * \n * if (svgDoc.createElementNS == null)\n * {\n *   root.setAttribute('xmlns', mxConstants.NS_SVG);\n *   root.setAttribute('xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * else\n * {\n *   root.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * \n * var bounds = graph.getGraphBounds();\n * root.setAttribute('width', (bounds.x + bounds.width + 4) + 'px');\n * root.setAttribute('height', (bounds.y + bounds.height + 4) + 'px');\n * root.setAttribute('version', '1.1');\n * \n * svgDoc.appendChild(root);\n * \n * var svgCanvas = new mxSvgCanvas2D(root);\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>.\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * graph.view.canvas.ownerSVGElement.setAttribute('shape-rendering', 'crispEdges');\n * (end)\n * \n * Or set the respective attribute in the SVG element directly.\n * \n * Constructor: mxSvgCanvas2D\n *\n * Constructs a new SVG canvas.\n * \n * Parameters:\n * \n * root - SVG container for the output.\n * styleEnabled - Optional boolean that specifies if a style section should be\n * added. The style section sets the default font-size, font-family and\n * stroke-miterlimit globally. Default is false.\n */\nfunction mxSvgCanvas2D(root, styleEnabled)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t/**\n\t * Variable: gradients\n\t * \n\t * Local cache of gradients for quick lookups.\n\t */\n\tthis.gradients = [];\n\n\t/**\n\t * Variable: defs\n\t * \n\t * Reference to the defs section of the SVG document. Only for export.\n\t */\n\tthis.defs = null;\n\t\n\t/**\n\t * Variable: styleEnabled\n\t * \n\t * Stores the value of styleEnabled passed to the constructor.\n\t */\n\tthis.styleEnabled = (styleEnabled != null) ? styleEnabled : false;\n\t\n\tvar svg = null;\n\t\n\t// Adds optional defs section for export\n\tif (root.ownerDocument != document)\n\t{\n\t\tvar node = root;\n\n\t\t// Finds owner SVG element in XML DOM\n\t\twhile (node != null && node.nodeName != 'svg')\n\t\t{\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tsvg = node;\n\t}\n\n\tif (svg != null)\n\t{\n\t\t// Tries to get existing defs section\n\t\tvar tmp = svg.getElementsByTagName('defs');\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tthis.defs = svg.getElementsByTagName('defs')[0];\n\t\t}\n\t\t\n\t\t// Adds defs section if none exists\n\t\tif (this.defs == null)\n\t\t{\n\t\t\tthis.defs = this.createElement('defs');\n\t\t\t\n\t\t\tif (svg.firstChild != null)\n\t\t\t{\n\t\t\t\tsvg.insertBefore(this.defs, svg.firstChild);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(this.defs);\n\t\t\t}\n\t\t}\n\n\t\t// Adds stylesheet\n\t\tif (this.styleEnabled)\n\t\t{\n\t\t\tthis.defs.appendChild(this.createStyle());\n\t\t}\n\t}\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxSvgCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Capability check for DOM parser and checks if base tag is used.\n */\n(function()\n{\n\tmxSvgCanvas2D.prototype.useDomParser = !mxClient.IS_IE && typeof DOMParser === 'function' && typeof XMLSerializer === 'function';\n\t\n\tif (mxSvgCanvas2D.prototype.useDomParser)\n\t{\n\t\t// Checks using a generic test text if the parsing actually works. This is a workaround\n\t\t// for older browsers where the capability check returns true but the parsing fails.\n\t\ttry\n\t\t{\n\t\t\tvar doc = new DOMParser().parseFromString('test text', 'text/html');\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = doc != null;\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = false;\n\t\t}\n\t}\n\t\n\t// Activates workaround for gradient ID resolution if base tag is used.\n\tmxSvgCanvas2D.prototype.useAbsoluteIds = !mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t!mxClient.IS_EDGE && document.getElementsByTagName('base').length > 0;\n})();\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxSvgCanvas2D.prototype.node = null;\n\n/**\n * Variable: matchHtmlAlignment\n * \n * Specifies if plain text output should match the vertical HTML alignment.\n * Defaul is true.\n */\nmxSvgCanvas2D.prototype.matchHtmlAlignment = true;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxSvgCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: foEnabled\n * \n * Specifies if use of foreignObject for HTML markup is allowed. Default is true.\n */\nmxSvgCanvas2D.prototype.foEnabled = true;\n\n/**\n * Variable: foAltText\n * \n * Specifies the fallback text for unsupported foreignObjects in exported\n * documents. Default is '[Object]'. If this is set to null then no fallback\n * text is added to the exported document.\n */\nmxSvgCanvas2D.prototype.foAltText = '[Object]';\n\n/**\n * Variable: foOffset\n * \n * Offset to be used for foreignObjects.\n */\nmxSvgCanvas2D.prototype.foOffset = 0;\n\n/**\n * Variable: textOffset\n * \n * Offset to be used for text elements.\n */\nmxSvgCanvas2D.prototype.textOffset = 0;\n\n/**\n * Variable: imageOffset\n * \n * Offset to be used for image elements.\n */\nmxSvgCanvas2D.prototype.imageOffset = 0;\n\n/**\n * Variable: strokeTolerance\n * \n * Adds transparent paths for strokes.\n */\nmxSvgCanvas2D.prototype.strokeTolerance = 0;\n\n/**\n * Variable: minStrokeWidth\n * \n * Minimum stroke width for output.\n */\nmxSvgCanvas2D.prototype.minStrokeWidth = 1;\n\n/**\n * Variable: refCount\n * \n * Local counter for references in SVG export.\n */\nmxSvgCanvas2D.prototype.refCount = 0;\n\n/**\n * Variable: lineHeightCorrection\n * \n * Correction factor for <mxConstants.LINE_HEIGHT> in HTML output. Default is 1.\n */\nmxSvgCanvas2D.prototype.lineHeightCorrection = 1;\n\n/**\n * Variable: pointerEventsValue\n * \n * Default value for active pointer events. Default is all.\n */\nmxSvgCanvas2D.prototype.pointerEventsValue = 'all';\n\n/**\n * Variable: fontMetricsPadding\n * \n * Padding to be added for text that is not wrapped to account for differences\n * in font metrics on different platforms in pixels. Default is 10.\n */\nmxSvgCanvas2D.prototype.fontMetricsPadding = 10;\n\n/**\n * Variable: cacheOffsetSize\n * \n * Specifies if offsetWidth and offsetHeight should be cached. Default is true.\n * This is used to speed up repaint of text in <updateText>.\n */\nmxSvgCanvas2D.prototype.cacheOffsetSize = true;\n\n/**\n * Function: format\n * \n * Rounds all numbers to 2 decimal points.\n */\nmxSvgCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns the URL of the page without the hash part. This needs to use href to\n * include any search part with no params (ie question mark alone). This is a\n * workaround for the fact that window.location.search is empty if there is\n * no search string behind the question mark.\n */\nmxSvgCanvas2D.prototype.getBaseUrl = function()\n{\n\tvar href = window.location.href;\n\tvar hash = href.lastIndexOf('#');\n\t\n\tif (hash > 0)\n\t{\n\t\thref = href.substring(0, hash);\n\t}\n\t\n\treturn href;\n};\n\n/**\n * Function: reset\n * \n * Returns any offsets for rendering pixels.\n */\nmxSvgCanvas2D.prototype.reset = function()\n{\n\tmxAbstractCanvas2D.prototype.reset.apply(this, arguments);\n\tthis.gradients = [];\n};\n\n/**\n * Function: createStyle\n * \n * Creates the optional style section.\n */\nmxSvgCanvas2D.prototype.createStyle = function(x)\n{\n\tvar style = this.createElement('style');\n\tstyle.setAttribute('type', 'text/css');\n\tmxUtils.write(style, 'svg{font-family:' + mxConstants.DEFAULT_FONTFAMILY +\n\t\t\t';font-size:' + mxConstants.DEFAULT_FONTSIZE +\n\t\t\t';fill:none;stroke-miterlimit:10}');\n\t\n\treturn style;\n};\n\n/**\n * Function: createElement\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createElement = function(tagName, namespace)\n{\n\tif (this.root.ownerDocument.createElementNS != null)\n\t{\n\t\treturn this.root.ownerDocument.createElementNS(namespace || mxConstants.NS_SVG, tagName);\n\t}\n\telse\n\t{\n\t\tvar elt = this.root.ownerDocument.createElement(tagName);\n\t\t\n\t\tif (namespace != null)\n\t\t{\n\t\t\telt.setAttribute('xmlns', namespace);\n\t\t}\n\t\t\n\t\treturn elt;\n\t}\n};\n\n/**\n * Function: getAlternateText\n * \n * Returns the alternate text string for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.getAlternateText = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\treturn (str != null) ? this.foAltText : null;\n};\n\n/**\n * Function: getAlternateContent\n * \n * Returns the alternate content for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.createAlternateContent = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\tvar text = this.getAlternateText(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\tvar s = this.state;\n\n\tif (text != null && s.fontSize > 0)\n\t{\n\t\tvar dy = (valign == mxConstants.ALIGN_TOP) ? 1 :\n\t\t\t(valign == mxConstants.ALIGN_BOTTOM) ? 0 : 0.3;\n\t\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t(align == mxConstants.ALIGN_LEFT) ? 'start' :\n\t\t\t'middle';\n\t\n\t\tvar alt = this.createElement('text');\n\t\talt.setAttribute('x', Math.round(x + s.dx));\n\t\talt.setAttribute('y', Math.round(y + s.dy + dy * s.fontSize));\n\t\talt.setAttribute('fill', s.fontColor || 'black');\n\t\talt.setAttribute('font-family', s.fontFamily);\n\t\talt.setAttribute('font-size', Math.round(s.fontSize) + 'px');\n\n\t\t// Text-anchor start is default in SVG\n\t\tif (anchor != 'start')\n\t\t{\n\t\t\talt.setAttribute('text-anchor', anchor);\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t{\n\t\t\talt.setAttribute('font-weight', 'bold');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t{\n\t\t\talt.setAttribute('font-style', 'italic');\n\t\t}\n\t\t\n\t\tvar txtDecor = [];\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\ttxtDecor.push('underline');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t{\n\t\t\ttxtDecor.push('line-through');\n\t\t}\n\t\t\n\t\tif (txtDecor.length > 0)\n\t\t{\n\t\t\talt.setAttribute('text-decoration', txtDecor.join(' '));\n\t\t}\n\t\t\n\t\tmxUtils.write(alt, text);\n\t\t\n\t\treturn alt;\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: createGradientId\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createGradientId = function(start, end, alpha1, alpha2, direction)\n{\n\t// Removes illegal characters from gradient ID\n\tif (start.charAt(0) == '#')\n\t{\n\t\tstart = start.substring(1);\n\t}\n\t\n\tif (end.charAt(0) == '#')\n\t{\n\t\tend = end.substring(1);\n\t}\n\t\n\t// Workaround for gradient IDs not working in Safari 5 / Chrome 6\n\t// if they contain uppercase characters\n\tstart = start.toLowerCase() + '-' + alpha1;\n\tend = end.toLowerCase() + '-' + alpha2;\n\n\t// Wrong gradient directions possible?\n\tvar dir = null;\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tdir = 's';\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tdir = 'e';\n\t}\n\telse\n\t{\n\t\tvar tmp = start;\n\t\tstart = end;\n\t\tend = tmp;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tdir = 's';\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tdir = 'e';\n\t\t}\n\t}\n\t\n\treturn 'mx-gradient-' + start + '-' + end + '-' + dir;\n};\n\n/**\n * Function: getSvgGradient\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar id = this.createGradientId(start, end, alpha1, alpha2, direction);\n\tvar gradient = this.gradients[id];\n\t\n\tif (gradient == null)\n\t{\n\t\tvar svg = this.root.ownerSVGElement;\n\n\t\tvar counter = 0;\n\t\tvar tmpId = id + '-' + counter;\n\n\t\tif (svg != null)\n\t\t{\n\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t\n\t\t\twhile (gradient != null && gradient.ownerSVGElement != svg)\n\t\t\t{\n\t\t\t\ttmpId = id + '-' + counter++;\n\t\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses shorter IDs for export\n\t\t\ttmpId = 'id' + (++this.refCount);\n\t\t}\n\t\t\n\t\tif (gradient == null)\n\t\t{\n\t\t\tgradient = this.createSvgGradient(start, end, alpha1, alpha2, direction);\n\t\t\tgradient.setAttribute('id', tmpId);\n\t\t\t\n\t\t\tif (this.defs != null)\n\t\t\t{\n\t\t\t\tthis.defs.appendChild(gradient);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(gradient);\n\t\t\t}\n\t\t}\n\n\t\tthis.gradients[id] = gradient;\n\t}\n\n\treturn gradient.getAttribute('id');\n};\n\n/**\n * Function: createSvgGradient\n * \n * Creates the given SVG gradient.\n */\nmxSvgCanvas2D.prototype.createSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar gradient = this.createElement('linearGradient');\n\tgradient.setAttribute('x1', '0%');\n\tgradient.setAttribute('y1', '0%');\n\tgradient.setAttribute('x2', '0%');\n\tgradient.setAttribute('y2', '0%');\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tgradient.setAttribute('y2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tgradient.setAttribute('x2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tgradient.setAttribute('y1', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_WEST)\n\t{\n\t\tgradient.setAttribute('x1', '100%');\n\t}\n\t\n\tvar op = (alpha1 < 1) ? ';stop-opacity:' + alpha1 : '';\n\t\n\tvar stop = this.createElement('stop');\n\tstop.setAttribute('offset', '0%');\n\tstop.setAttribute('style', 'stop-color:' + start + op);\n\tgradient.appendChild(stop);\n\t\n\top = (alpha2 < 1) ? ';stop-opacity:' + alpha2 : '';\n\t\n\tstop = this.createElement('stop');\n\tstop.setAttribute('offset', '100%');\n\tstop.setAttribute('style', 'stop-color:' + end + op);\n\tgradient.appendChild(stop);\n\t\n\treturn gradient;\n};\n\n/**\n * Function: addNode\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'path')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.setAttribute('d', this.path.join(' '));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tthis.updateFill();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\t// Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=814952\n\t\t\tif (node.nodeName == 'ellipse' && mxClient.IS_FF)\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'transparent');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'none');\n\t\t\t}\n\t\t\t\n\t\t\t// Sets the actual filled state for stroke tolerance\n\t\t\tfilled = false;\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tthis.updateStroke();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\tnode.setAttribute('stroke', 'none');\n\t\t}\n\t\t\n\t\tif (s.transform != null && s.transform.length > 0)\n\t\t{\n\t\t\tnode.setAttribute('transform', s.transform);\n\t\t}\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node));\n\t\t}\n\t\n\t\t// Adds stroke tolerance\n\t\tif (this.strokeTolerance > 0 && !filled)\n\t\t{\n\t\t\tthis.root.appendChild(this.createTolerance(node));\n\t\t}\n\n\t\t// Adds pointer events\n\t\tif (this.pointerEvents)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', this.pointerEventsValue);\n\t\t}\n\t\t// Enables clicks for nodes inside a link element\n\t\telse if (!this.pointerEvents && this.originalRoot == null)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', 'none');\n\t\t}\n\t\t\n\t\t// Removes invisible nodes from output if they don't handle events\n\t\tif ((node.nodeName != 'rect' && node.nodeName != 'path' && node.nodeName != 'ellipse') ||\n\t\t\t(node.getAttribute('fill') != 'none' && node.getAttribute('fill') != 'transparent') ||\n\t\t\tnode.getAttribute('stroke') != 'none' || node.getAttribute('pointer-events') != 'none')\n\t\t{\n\t\t\t// LATER: Update existing DOM for performance\t\t\n\t\t\tthis.root.appendChild(node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n};\n\n/**\n * Function: updateFill\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateFill = function()\n{\n\tvar s = this.state;\n\t\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('fill-opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tif (s.fillColor != null)\n\t{\n\t\tif (s.gradientColor != null)\n\t\t{\n\t\t\tvar id = this.getSvgGradient(String(s.fillColor), String(s.gradientColor),\n\t\t\t\ts.gradientFillAlpha, s.gradientAlpha, s.gradientDirection);\n\t\t\t\n\t\t\tif (this.root.ownerDocument == document && this.useAbsoluteIds)\n\t\t\t{\n\t\t\t\t// Workaround for no fill with base tag in page (escape brackets)\n\t\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\t\tthis.node.setAttribute('fill', 'url(' + base + '#' + id + ')');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.node.setAttribute('fill', 'url(#' + id + ')');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.node.setAttribute('fill', String(s.fillColor).toLowerCase());\n\t\t}\n\t}\n};\n\n/**\n * Function: getCurrentStrokeWidth\n * \n * Returns the current stroke width (>= 1), ie. max(1, this.format(this.state.strokeWidth * this.state.scale)).\n */\nmxSvgCanvas2D.prototype.getCurrentStrokeWidth = function()\n{\n\treturn Math.max(this.minStrokeWidth, Math.max(0.01, this.format(this.state.strokeWidth * this.state.scale)));\n};\n\n/**\n * Function: updateStroke\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStroke = function()\n{\n\tvar s = this.state;\n\n\tthis.node.setAttribute('stroke', String(s.strokeColor).toLowerCase());\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('stroke-opacity', s.alpha * s.strokeAlpha);\n\t}\n\t\n\tvar sw = this.getCurrentStrokeWidth();\n\t\n\tif (sw != 1)\n\t{\n\t\tthis.node.setAttribute('stroke-width', sw);\n\t}\n\t\n\tif (this.node.nodeName == 'path')\n\t{\n\t\tthis.updateStrokeAttributes();\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tthis.node.setAttribute('stroke-dasharray', this.createDashPattern(\n\t\t\t((s.fixDash) ? 1 : s.strokeWidth) * s.scale));\n\t}\n};\n\n/**\n * Function: updateStrokeAttributes\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStrokeAttributes = function()\n{\n\tvar s = this.state;\n\t\n\t// Linejoin miter is default in SVG\n\tif (s.lineJoin != null && s.lineJoin != 'miter')\n\t{\n\t\tthis.node.setAttribute('stroke-linejoin', s.lineJoin);\n\t}\n\t\n\tif (s.lineCap != null)\n\t{\n\t\t// flat is called butt in SVG\n\t\tvar value = s.lineCap;\n\t\t\n\t\tif (value == 'flat')\n\t\t{\n\t\t\tvalue = 'butt';\n\t\t}\n\t\t\n\t\t// Linecap butt is default in SVG\n\t\tif (value != 'butt')\n\t\t{\n\t\t\tthis.node.setAttribute('stroke-linecap', value);\n\t\t}\n\t}\n\t\n\t// Miterlimit 10 is default in our document\n\tif (s.miterLimit != null && (!this.styleEnabled || s.miterLimit != 10))\n\t{\n\t\tthis.node.setAttribute('stroke-miterlimit', s.miterLimit);\n\t}\n};\n\n/**\n * Function: createDashPattern\n * \n * Creates the SVG dash pattern for the given state.\n */\nmxSvgCanvas2D.prototype.createDashPattern = function(scale)\n{\n\tvar pat = [];\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar dash = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (dash.length > 0)\n\t\t{\n\t\t\tfor (var i = 0; i < dash.length; i++)\n\t\t\t{\n\t\t\t\tpat[i] = Number(dash[i]) * scale;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn pat.join(' ');\n};\n\n/**\n * Function: createTolerance\n * \n * Creates a hit detection tolerance shape for the given node.\n */\nmxSvgCanvas2D.prototype.createTolerance = function(node)\n{\n\tvar tol = node.cloneNode(true);\n\tvar sw = parseFloat(tol.getAttribute('stroke-width') || 1) + this.strokeTolerance;\n\ttol.setAttribute('pointer-events', 'stroke');\n\ttol.setAttribute('visibility', 'hidden');\n\ttol.removeAttribute('stroke-dasharray');\n\ttol.setAttribute('stroke-width', sw);\n\ttol.setAttribute('fill', 'none');\n\t\n\t// Workaround for Opera ignoring the visiblity attribute above while\n\t// other browsers need a stroke color to perform the hit-detection but\n\t// do not ignore the visibility attribute. Side-effect is that Opera's\n\t// hit detection for horizontal/vertical edges seems to ignore the tol.\n\ttol.setAttribute('stroke', (mxClient.IS_OT) ? 'none' : 'white');\n\t\n\treturn tol;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxSvgCanvas2D.prototype.createShadow = function(node)\n{\n\tvar shadow = node.cloneNode(true);\n\tvar s = this.state;\n\n\t// Firefox uses transparent for no fill in ellipses\n\tif (shadow.getAttribute('fill') != 'none' && (!mxClient.IS_FF || shadow.getAttribute('fill') != 'transparent'))\n\t{\n\t\tshadow.setAttribute('fill', s.shadowColor);\n\t}\n\t\n\tif (shadow.getAttribute('stroke') != 'none')\n\t{\n\t\tshadow.setAttribute('stroke', s.shadowColor);\n\t}\n\n\tshadow.setAttribute('transform', 'translate(' + this.format(s.shadowDx * s.scale) +\n\t\t',' + this.format(s.shadowDy * s.scale) + ')' + (s.transform || ''));\n\tshadow.setAttribute('opacity', s.shadowAlpha);\n\t\n\treturn shadow;\n};\n\n/**\n * Function: setLink\n * \n * Experimental implementation for hyperlinks.\n */\nmxSvgCanvas2D.prototype.setLink = function(link)\n{\n\tif (link == null)\n\t{\n\t\tthis.root = this.originalRoot;\n\t}\n\telse\n\t{\n\t\tthis.originalRoot = this.root;\n\t\t\n\t\tvar node = this.createElement('a');\n\t\t\n\t\t// Workaround for implicit namespace handling in HTML5 export, IE adds NS1 namespace so use code below\n\t\t// in all IE versions except quirks mode. KNOWN: Adds xlink namespace to each image tag in output.\n\t\tif (node.setAttributeNS == null || (this.root.ownerDocument != document && document.documentMode == null))\n\t\t{\n\t\t\tnode.setAttribute('xlink:href', link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', link);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(node);\n\t\tthis.root = node;\n\t}\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxSvgCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\tvar s = this.state;\n\t\tcx += s.dx;\n\t\tcy += s.dy;\n\t\n\t\tcx *= s.scale;\n\t\tcy *= s.scale;\n\n\t\ts.transform = s.transform || '';\n\t\t\n\t\t// This implementation uses custom scale/translate and built-in rotation\n\t\t// Rotation state is part of the AffineTransform in state.transform\n\t\tif (flipH && flipV)\n\t\t{\n\t\t\ttheta += 180;\n\t\t}\n\t\telse if (flipH != flipV)\n\t\t{\n\t\t\tvar tx = (flipH) ? cx : 0;\n\t\t\tvar sx = (flipH) ? -1 : 1;\n\t\n\t\t\tvar ty = (flipV) ? cy : 0;\n\t\t\tvar sy = (flipV) ? -1 : 1;\n\n\t\t\ts.transform += 'translate(' + this.format(tx) + ',' + this.format(ty) + ')' +\n\t\t\t\t'scale(' + this.format(sx) + ',' + this.format(sy) + ')' +\n\t\t\t\t'translate(' + this.format(-tx) + ',' + this.format(-ty) + ')';\n\t\t}\n\t\t\n\t\tif (flipH ? !flipV : flipV)\n\t\t{\n\t\t\ttheta *= -1;\n\t\t}\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\ts.transform += 'rotate(' + this.format(theta) + ',' + this.format(cx) + ',' + this.format(cy) + ')';\n\t\t}\n\t\t\n\t\ts.rotation = s.rotation + theta;\n\t\ts.rotationCx = cx;\n\t\ts.rotationCy = cy;\n\t}\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxSvgCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createElement('path');\n};\n\n/**\n * Function: rect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('rect');\n\tn.setAttribute('x', this.format((x + s.dx) * s.scale));\n\tn.setAttribute('y', this.format((y + s.dy) * s.scale));\n\tn.setAttribute('width', this.format(w * s.scale));\n\tn.setAttribute('height', this.format(h * s.scale));\n\t\n\tthis.node = n;\n};\n\n/**\n * Function: roundrect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.rect(x, y, w, h);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.node.setAttribute('rx', this.format(dx * this.state.scale));\n\t}\n\t\n\tif (dy > 0)\n\t{\n\t\tthis.node.setAttribute('ry', this.format(dy * this.state.scale));\n\t}\n};\n\n/**\n * Function: ellipse\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('ellipse');\n\t// No rounding for consistent output with 1.x\n\tn.setAttribute('cx', this.format((x + w / 2 + s.dx) * s.scale));\n\tn.setAttribute('cy', this.format((y + h / 2 + s.dy) * s.scale));\n\tn.setAttribute('rx', w / 2 * s.scale);\n\tn.setAttribute('ry', h / 2 * s.scale);\n\tthis.node = n;\n};\n\n/**\n * Function: image\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\taspect = (aspect != null) ? aspect : true;\n\tflipH = (flipH != null) ? flipH : false;\n\tflipV = (flipV != null) ? flipV : false;\n\t\n\tvar s = this.state;\n\tx += s.dx;\n\ty += s.dy;\n\t\n\tvar node = this.createElement('image');\n\tnode.setAttribute('x', this.format(x * s.scale) + this.imageOffset);\n\tnode.setAttribute('y', this.format(y * s.scale) + this.imageOffset);\n\tnode.setAttribute('width', this.format(w * s.scale));\n\tnode.setAttribute('height', this.format(h * s.scale));\n\t\n\t// Workaround for missing namespace support\n\tif (node.setAttributeNS == null)\n\t{\n\t\tnode.setAttribute('xlink:href', src);\n\t}\n\telse\n\t{\n\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', src);\n\t}\n\t\n\tif (!aspect)\n\t{\n\t\tnode.setAttribute('preserveAspectRatio', 'none');\n\t}\n\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tvar tr = this.state.transform || '';\n\t\n\tif (flipH || flipV)\n\t{\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\tif (flipH)\n\t\t{\n\t\t\tsx = -1;\n\t\t\tdx = -w - 2 * x;\n\t\t}\n\t\t\n\t\tif (flipV)\n\t\t{\n\t\t\tsy = -1;\n\t\t\tdy = -h - 2 * y;\n\t\t}\n\t\t\n\t\t// Adds image tansformation to existing transform\n\t\ttr += 'scale(' + sx + ',' + sy + ')translate(' + (dx * s.scale) + ',' + (dy * s.scale) + ')';\n\t}\n\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (!this.pointerEvents)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: convertHtml\n * \n * Converts the given HTML string to XHTML.\n */\nmxSvgCanvas2D.prototype.convertHtml = function(val)\n{\n\tif (this.useDomParser)\n\t{\n\t\tvar doc = new DOMParser().parseFromString(val, 'text/html');\n\n\t\tif (doc != null)\n\t\t{\n\t\t\tval = new XMLSerializer().serializeToString(doc.body);\n\t\t\t\n\t\t\t// Extracts body content from DOM\n\t\t\tif (val.substring(0, 5) == '<body')\n\t\t\t{\n\t\t\t\tval = val.substring(val.indexOf('>', 5) + 1);\n\t\t\t}\n\t\t\t\n\t\t\tif (val.substring(val.length - 7, val.length) == '</body>')\n\t\t\t{\n\t\t\t\tval = val.substring(0, val.length - 7);\n\t\t\t}\n\t\t}\n\t}\n\telse if (document.implementation != null && document.implementation.createDocument != null)\n\t{\n\t\tvar xd = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);\n\t\tvar xb = xd.createElement('body');\n\t\txd.documentElement.appendChild(xb);\n\t\t\n\t\tvar div = document.createElement('div');\n\t\tdiv.innerHTML = val;\n\t\tvar child = div.firstChild;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar next = child.nextSibling;\n\t\t\txb.appendChild(xd.adoptNode(child));\n\t\t\tchild = next;\n\t\t}\n\t\t\n\t\treturn xb.innerHTML;\n\t}\n\telse\n\t{\n\t\tvar ta = document.createElement('textarea');\n\t\t\n\t\t// Handles special HTML entities < and > and double escaping\n\t\t// and converts unclosed br, hr and img tags to XHTML\n\t\t// LATER: Convert all unclosed tags\n\t\tta.innerHTML = val.replace(/&amp;/g, '&amp;amp;').\n\t\t\treplace(/&#60;/g, '&amp;lt;').replace(/&#62;/g, '&amp;gt;').\n\t\t\treplace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;').\n\t\t\treplace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t\tval = ta.value.replace(/&/g, '&amp;').replace(/&amp;lt;/g, '&lt;').\n\t\t\treplace(/&amp;gt;/g, '&gt;').replace(/&amp;amp;/g, '&amp;').\n\t\t\treplace(/<br>/g, '<br />').replace(/<hr>/g, '<hr />').\n\t\t\treplace(/(<img[^>]+)>/gm, \"$1 />\");\n\t}\n\t\n\treturn val;\n};\n\n/**\n * Function: createDiv\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createDiv = function(str)\n{\n\tvar val = str;\n\t\n\tif (!mxUtils.isNode(val))\n\t{\n\t\tval = '<div><div>' + this.convertHtml(val) + '</div></div>';\n\t}\n\n\t// IE uses this code for export as it cannot render foreignObjects\n\tif (!mxClient.IS_IE && !mxClient.IS_IE11 && document.createElementNS)\n\t{\n\t\tvar div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n\t\t\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\tvar div2 = document.createElement('div');\n\t\t\tvar div3 = div2.cloneNode(false);\n\t\t\t\n\t\t\t// Creates a copy for export\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tdiv2.appendChild(val.cloneNode(true));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv2.appendChild(val);\n\t\t\t}\n\t\t\t\n\t\t\tdiv3.appendChild(div2);\n\t\t\tdiv.appendChild(div3);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.innerHTML = val;\n\t\t}\n\t\t\n\t\treturn div;\n\t}\n\telse\n\t{\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\tval = '<div><div>' + mxUtils.getXml(val) + '</div></div>';\n\t\t}\n\t\t\n\t\tval = '<div xmlns=\"http://www.w3.org/1999/xhtml\">' + val + '</div>';\n\n\t\t// NOTE: FF 3.6 crashes if content CSS contains \"height:100%\"\n\t\treturn  mxUtils.parseXml(val).documentElement;\n\t}\n};\n\n/**\n * Updates existing DOM nodes for text rendering. LATER: Merge common parts with text function below.\n */\nmxSvgCanvas2D.prototype.updateText = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node)\n{\n\tif (node != null && node.firstChild != null && node.firstChild.firstChild != null)\n\t{\n\t\tthis.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node.firstChild);\n\t}\n};\n\n/**\n * Function: addForeignObject\n * \n * Creates a foreignObject for the given string and adds it to the given root.\n */\nmxSvgCanvas2D.prototype.addForeignObject = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir, div, root)\n{\n\tvar group = this.createElement('g');\n\tvar fo = this.createElement('foreignObject');\n\t\n\t// Workarounds for print clipping and static position in Safari\n\tfo.setAttribute('style', 'overflow: visible; text-align: left;');\n\tfo.setAttribute('pointer-events', 'none');\n\t\n\t// Import needed for older versions of IE\n\tif (div.ownerDocument != document)\n\t{\n\t\tdiv = mxUtils.importNodeImplementation(fo.ownerDocument, div, true);\n\t}\n\n\tfo.appendChild(div);\n\tgroup.appendChild(fo);\n\n\tthis.updateTextNodes(x, y, w, h, align, valign, wrap, overflow, clip, rotation, group);\n\t\n\t// Alternate content if foreignObject not supported\n\tif (this.root.ownerDocument != document)\n\t{\n\t\tvar alt = this.createAlternateContent(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\t\t\n\t\tif (alt != null)\n\t\t{\n\t\t\tfo.setAttribute('requiredFeatures', 'http://www.w3.org/TR/SVG11/feature#Extensibility');\n\t\t\tvar sw = this.createElement('switch');\n\t\t\tsw.appendChild(fo);\n\t\t\tsw.appendChild(alt);\n\t\t\tgroup.appendChild(sw);\n\t\t}\n\t}\n\t\n\troot.appendChild(group);\n};\n\n/**\n * Updates existing DOM nodes for text rendering.\n */\nmxSvgCanvas2D.prototype.updateTextNodes = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, g)\n{\n\tvar s = this.state.scale;\n\n\tmxSvgCanvas2D.createCss(w + 2, h, align, valign, wrap, overflow, clip,\n\t\t(this.state.fontBackgroundColor != null) ? this.state.fontBackgroundColor : null,\n\t\t(this.state.fontBorderColor != null) ? this.state.fontBorderColor : null,\n\t\t'display: flex; align-items: unsafe ' +\n\t\t((valign == mxConstants.ALIGN_TOP) ? 'flex-start' :\n\t\t((valign == mxConstants.ALIGN_BOTTOM) ? 'flex-end' : 'center'))  + '; ' +\n\t\t'justify-content: unsafe ' + ((align == mxConstants.ALIGN_LEFT) ? 'flex-start' :\n\t\t((align == mxConstants.ALIGN_RIGHT) ? 'flex-end' : 'center'))  + '; ',\n\t\tthis.getTextCss(), s, mxUtils.bind(this, function(dx, dy, flex, item, block)\n\t{\n\t\tx += this.state.dx;\n\t\ty += this.state.dy;\n\n\t\tvar fo = g.firstChild;\n\t\tvar div = fo.firstChild;\n\t\tvar box = div.firstChild;\n\t\tvar text = box.firstChild;\n\t\tvar r = ((this.rotateHtml) ? this.state.rotation : 0) + ((rotation != null) ? rotation : 0);\n\t\tvar t = ((this.foOffset != 0) ? 'translate(' + this.foOffset + ' ' + this.foOffset + ')' : '') +\n\t\t\t((s != 1) ? 'scale(' + s + ')' : '');\n\t\t\n\t\ttext.setAttribute('style', block);\n\t\tbox.setAttribute('style', item);\n\t\t\n\t\t// Workaround for clipping in Webkit with scrolling and zoom\n\t\tfo.setAttribute('width', Math.ceil(1 / Math.min(1, s) * 100) + '%');\n\t\tfo.setAttribute('height', Math.ceil(1 / Math.min(1, s) * 100) + '%');\n\t\tvar yp = Math.round(y + dy);\n\t\t\n\t\t// Allows for negative values which are causing problems with\n\t\t// transformed content where the top edge of the foreignObject\n\t\t// limits the text box being moved further up in the diagram.\n\t\t// KNOWN: Possible clipping problems with zoom and scrolling\n\t\t// but this is normally not used with scrollbars as the\n\t\t// coordinates are always positive with scrollbars.\n\t\t// Margin-top is ignored in Safari and no negative values allowed\n\t\t// for padding.\n\t\tif (yp < 0)\n\t\t{\n\t\t\tfo.setAttribute('y', yp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfo.removeAttribute('y');\n\t\t\tflex += 'padding-top: ' + yp + 'px; ';\n\t\t}\n\t\t\n\t\tdiv.setAttribute('style', flex + 'margin-left: ' + Math.round(x + dx) + 'px;');\n\t\tt += ((r != 0) ? ('rotate(' + r + ' ' + x + ' ' + y + ')') : '');\n\n\t\t// Output allows for reflow but Safari cannot use absolute position,\n\t\t// transforms or opacity. https://bugs.webkit.org/show_bug.cgi?id=23113\n\t\tif (t != '')\n\t\t{\t\n\t\t\tg.setAttribute('transform', t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tg.removeAttribute('transform');\n\t\t}\n\t\t\n\t\tif (this.state.alpha != 1)\n\t\t{\n\t\t\tg.setAttribute('opacity', this.state.alpha);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tg.removeAttribute('opacity');\n\t\t}\n\t}));\n};\n\n/**\n * Updates existing DOM nodes for text rendering.\n */\nmxSvgCanvas2D.createCss = function(w, h, align, valign, wrap, overflow, clip, bg, border, flex, block, s, callback)\n{\n\tvar item = 'box-sizing: border-box; font-size: 0; text-align: ' + ((align == mxConstants.ALIGN_LEFT) ? 'left' :\n\t\t((align == mxConstants.ALIGN_RIGHT) ? 'right' : 'center')) + '; ';\n\tvar pt = mxUtils.getAlignmentAsPoint(align, valign);\n\tvar ofl = 'overflow: hidden; ';\n\tvar fw = 'width: 1px; ';\n\tvar fh = 'height: 1px; ';\n\tvar dx = pt.x * w;\n\tvar dy = pt.y * h;\n\t\n\tif (clip)\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\titem += 'max-height: ' + Math.round(h) + 'px; ';\n\t\tdy = 0;\n\t}\n\telse if (overflow == 'fill')\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\tfh = 'height: ' + Math.round(h) + 'px; ';\n\t\tblock += 'width: 100%; height: 100%; ';\n\t\titem += fw + fh;\n\t}\n\telse if (overflow == 'width')\n\t{\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\tblock += 'width: 100%; ';\n\t\titem += fw;\n\t\tdy = 0;\n\t\t\n\t\tif (h > 0)\n\t\t{\n\t\t\titem += 'max-height: ' + Math.round(h) + 'px; ';\n\t\t}\n\t}\n\telse\n\t{\n\t\tofl = '';\n\t\tdy = 0;\n\t}\n\t\n\tvar bgc = '';\n\t\n\tif (bg != null)\n\t{\n\t\tbgc += 'background-color: ' + bg + '; ';\n\t}\n\t\n\tif (border != null)\n\t{\n\t\tbgc += 'border: 1px solid ' + border + '; ';\n\t}\n\t\n\tif (ofl == '' || clip)\n\t{\n\t\tblock += bgc;\n\t}\n\telse\n\t{\n\t\titem += bgc;\n\t}\n\n\tif (wrap && w > 0)\n\t{\n\t\tblock += 'white-space: normal; word-wrap: ' + mxConstants.WORD_WRAP + '; ';\n\t\tfw = 'width: ' + Math.round(w) + 'px; ';\n\t\t\n\t\tif (ofl != '' && overflow != 'fill')\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\tblock += 'white-space: nowrap; ';\n\t\t\n\t\tif (ofl == '')\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t}\n\t\n\tcallback(dx, dy, flex + fw + fh, item + ofl, block, ofl);\n};\n\n/**\n * Function: getTextCss\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getTextCss = function()\n{\n\tvar s = this.state;\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t(mxConstants.LINE_HEIGHT * this.lineHeightCorrection);\n\tvar css = 'display: inline-block; font-size: ' + s.fontSize + 'px; ' +\n\t\t'font-family: ' + s.fontFamily + '; color: ' + s.fontColor + '; line-height: ' + lh +\n\t\t'; pointer-events: ' + ((this.pointerEvents) ? this.pointerEventsValue : 'none') + '; ';\n\t\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tcss += 'font-weight: bold; ';\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tcss += 'font-style: italic; ';\n\t}\n\n\tvar deco = [];\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tdeco.push('underline');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\tdeco.push('line-through');\n\t}\n\t\n\tif (deco.length > 0)\n\t{\n\t\tcss += 'text-decoration: ' + deco.join(' ') + '; ';\n\t}\n\n\treturn css;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Note that HTML markup is only supported if\n * foreignObject is supported and <foEnabled> is true. (This means IE9 and later\n * does currently not support HTML text as part of shapes.)\n */\nmxSvgCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\trotation = (rotation != null) ? rotation : 0;\n\n\t\tif (this.foEnabled && format == 'html')\n\t\t{\n\t\t\tvar div = this.createDiv(str);\n\t\t\t\n\t\t\t// Ignores invalid XHTML labels\n\t\t\tif (div != null)\n\t\t\t{\n\t\t\t\tif (dir != null)\n\t\t\t\t{\n\t\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.addForeignObject(x, y, w, h, str, align, valign, wrap,\n\t\t\t\t\tformat, overflow, clip, rotation, dir, div, this.root);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x + this.state.dx, y + this.state.dy, w, h, str,\n\t\t\t\talign, valign, wrap, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: createClip\n * \n * Creates a clip for the given coordinates.\n */\nmxSvgCanvas2D.prototype.createClip = function(x, y, w, h)\n{\n\tx = Math.round(x);\n\ty = Math.round(y);\n\tw = Math.round(w);\n\th = Math.round(h);\n\t\n\tvar id = 'mx-clip-' + x + '-' + y + '-' + w + '-' + h;\n\n\tvar counter = 0;\n\tvar tmp = id + '-' + counter;\n\t\n\t// Resolves ID conflicts\n\twhile (document.getElementById(tmp) != null)\n\t{\n\t\ttmp = id + '-' + (++counter);\n\t}\n\t\n\tclip = this.createElement('clipPath');\n\tclip.setAttribute('id', tmp);\n\t\n\tvar rect = this.createElement('rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\t\t\n\tclip.appendChild(rect);\n\t\n\treturn clip;\n};\n\n/**\n * Function: plainText\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup.\n */\nmxSvgCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir)\n{\n\trotation = (rotation != null) ? rotation : 0;\n\tvar s = this.state;\n\tvar size = s.fontSize;\n\tvar node = this.createElement('g');\n\tvar tr = s.transform || '';\n\tthis.updateFont(node);\n\t\t\t\t\n\t// Ignores pointer events\n\tif (!this.pointerEvents && this.originalRoot == null)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\t\t\n\t// Non-rotated text\n\tif (rotation != 0)\n\t{\n\t\ttr += 'rotate(' + rotation  + ',' + this.format(x * s.scale) + ',' + this.format(y * s.scale) + ')';\n\t}\n\t\n\tif (dir != null)\n\t{\n\t\tnode.setAttribute('direction', dir);\n\t}\n\n\tif (clip && w > 0 && h > 0)\n\t{\n\t\tvar cx = x;\n\t\tvar cy = y;\n\t\t\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tcx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tcx -= w;\n\t\t}\n\t\t\n\t\tif (overflow != 'fill')\n\t\t{\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tcy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tcy -= h;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// LATER: Remove spacing from clip rectangle\n\t\tvar c = this.createClip(cx * s.scale - 2, cy * s.scale - 2, w * s.scale + 4, h * s.scale + 4);\n\t\t\n\t\tif (this.defs != null)\n\t\t{\n\t\t\tthis.defs.appendChild(c);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Makes sure clip is removed with referencing node\n\t\t\tthis.root.appendChild(c);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Workaround for potential base tag\n\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\tnode.setAttribute('clip-path', 'url(' + base + '#' + c.getAttribute('id') + ')');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttribute('clip-path', 'url(#' + c.getAttribute('id') + ')');\n\t\t}\n\t}\n\n\t// Default is left\n\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t\t\t(align == mxConstants.ALIGN_CENTER) ? 'middle' :\n\t\t\t\t\t'start';\n\n\t// Text-anchor start is default in SVG\n\tif (anchor != 'start')\n\t{\n\t\tnode.setAttribute('text-anchor', anchor);\n\t}\n\t\n\tif (!this.styleEnabled || size != mxConstants.DEFAULT_FONTSIZE)\n\t{\n\t\tnode.setAttribute('font-size', (size * s.scale) + 'px');\n\t}\n\t\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (s.alpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha);\n\t}\n\t\n\tvar lines = str.split('\\n');\n\tvar lh = Math.round(size * mxConstants.LINE_HEIGHT);\n\tvar textHeight = size + (lines.length - 1) * lh;\n\n\tvar cy = y + size - 1;\n\n\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = ((this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight) / 2;\n\t\t\tcy -= dy;\n\t\t}\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = (this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight;\n\t\t\tcy -= dy + 1;\n\t\t}\n\t}\n\n\tfor (var i = 0; i < lines.length; i++)\n\t{\n\t\t// Workaround for bounding box of empty lines and spaces\n\t\tif (lines[i].length > 0 && mxUtils.trim(lines[i]).length > 0)\n\t\t{\n\t\t\tvar text = this.createElement('text');\n\t\t\t// LATER: Match horizontal HTML alignment\n\t\t\ttext.setAttribute('x', this.format(x * s.scale) + this.textOffset);\n\t\t\ttext.setAttribute('y', this.format(cy * s.scale) + this.textOffset);\n\t\n\t\t\tmxUtils.write(text, lines[i]);\n\t\t\tnode.appendChild(text);\n\t\t}\n\n\t\tcy += lh;\n\t}\n\n\tthis.root.appendChild(node);\n\tthis.addTextBackground(node, str, x, y, w, (overflow == 'fill') ? h : textHeight, align, valign, overflow);\n};\n\n/**\n * Function: updateFont\n * \n * Updates the text properties for the given node. (NOTE: For this to work in\n * IE, the given node must be a text or tspan element.)\n */\nmxSvgCanvas2D.prototype.updateFont = function(node)\n{\n\tvar s = this.state;\n\n\tnode.setAttribute('fill', s.fontColor);\n\t\n\tif (!this.styleEnabled || s.fontFamily != mxConstants.DEFAULT_FONTFAMILY)\n\t{\n\t\tnode.setAttribute('font-family', s.fontFamily);\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tnode.setAttribute('font-weight', 'bold');\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tnode.setAttribute('font-style', 'italic');\n\t}\n\t\n\tvar txtDecor = [];\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttxtDecor.push('underline');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\ttxtDecor.push('line-through');\n\t}\n\t\n\tif (txtDecor.length > 0)\n\t{\n\t\tnode.setAttribute('text-decoration', txtDecor.join(' '));\n\t}\n};\n\n/**\n * Function: addTextBackground\n * \n * Background color and border\n */\nmxSvgCanvas2D.prototype.addTextBackground = function(node, str, x, y, w, h, align, valign, overflow)\n{\n\tvar s = this.state;\n\n\tif (s.fontBackgroundColor != null || s.fontBorderColor != null)\n\t{\n\t\tvar bbox = null;\n\t\t\n\t\tif (overflow == 'fill' || overflow == 'width')\n\t\t{\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, y * s.scale, (w - 2) * s.scale, (h + 2) * s.scale);\n\t\t}\n\t\telse if (node.getBBox != null && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Uses getBBox only if inside document for correct size\n\t\t\ttry\n\t\t\t{\n\t\t\t\tbbox = node.getBBox();\n\t\t\t\tvar ie = mxClient.IS_IE && mxClient.IS_SVG;\n\t\t\t\tbbox = new mxRectangle(bbox.x, bbox.y + ((ie) ? 0 : 1), bbox.width, bbox.height + ((ie) ? 1 : 0));\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bbox == null || bbox.width == 0 || bbox.height == 0)\n\t\t{\n\t\t\t// Computes size if not in document or no getBBox available\n\t\t\tvar div = document.createElement('div');\n\n\t\t\t// Wrapping and clipping can be ignored here\n\t\t\tdiv.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\t\tdiv.style.fontSize = s.fontSize + 'px';\n\t\t\tdiv.style.fontFamily = s.fontFamily;\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.visibility = 'hidden';\n\t\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv.style.zoom = '1';\n\t\t\t\n\t\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\n\t\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tstr = mxUtils.htmlEntities(str, false);\n\t\t\tdiv.innerHTML = str.replace(/\\n/g, '<br/>');\n\t\t\t\n\t\t\tdocument.body.appendChild(div);\n\t\t\tvar w = div.offsetWidth;\n\t\t\tvar h = div.offsetHeight;\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, (y + 2) * s.scale, w * s.scale, (h + 1) * s.scale);\n\t\t}\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tvar n = this.createElement('rect');\n\t\t\tn.setAttribute('fill', s.fontBackgroundColor || 'none');\n\t\t\tn.setAttribute('stroke', s.fontBorderColor || 'none');\n\t\t\tn.setAttribute('x', Math.floor(bbox.x - 1));\n\t\t\tn.setAttribute('y', Math.floor(bbox.y - 1));\n\t\t\tn.setAttribute('width', Math.ceil(bbox.width + 2));\n\t\t\tn.setAttribute('height', Math.ceil(bbox.height));\n\n\t\t\tvar sw = (s.fontBorderColor != null) ? Math.max(1, this.format(s.scale)) : 0;\n\t\t\tn.setAttribute('stroke-width', sw);\n\t\t\t\n\t\t\t// Workaround for crisp rendering - only required if not exporting\n\t\t\tif (this.root.ownerDocument == document && mxUtils.mod(sw, 2) == 1)\n\t\t\t{\n\t\t\t\tn.setAttribute('transform', 'translate(0.5, 0.5)');\n\t\t\t}\n\t\t\t\n\t\t\tnode.insertBefore(n, node.firstChild);\n\t\t}\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxSvgCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxSvgCanvas2D = typeof mxSvgCanvas2D !== 'undefined' ? mxSvgCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxVmlCanvas2D\n * \n * Implements a canvas to be used for rendering VML. Here is an example of implementing a\n * fallback for SVG images which are not supported in VML-based browsers.\n * \n * (code)\n * var mxVmlCanvas2DImage = mxVmlCanvas2D.prototype.image;\n * mxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n * {\n *   if (src.substring(src.length - 4, src.length) == '.svg')\n *   {\n *     src = 'http://www.jgraph.com/images/mxgraph.gif';\n *   }\n *   \n *   mxVmlCanvas2DImage.apply(this, arguments);\n * };\n * (end)\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * document.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{antialias:false;)}';\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>. Note that\n * there is a known issue in VML where gradients are painted using the outer\n * bounding box of rotated shapes, not the actual bounds of the shape. See\n * also <text> for plain text label restrictions in shapes for VML.\n */\nvar mxVmlCanvas2D = function(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxVmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxVmlCanvas2D.prototype.node = null;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabledetB. Default is true.\n */\nmxVmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'm'.\n */\nmxVmlCanvas2D.prototype.moveOp = 'm';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'l'.\n */\nmxVmlCanvas2D.prototype.lineOp = 'l';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'c'.\n */\nmxVmlCanvas2D.prototype.curveOp = 'c';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'x e'.\n */\nmxVmlCanvas2D.prototype.closeOp = 'x';\n\n/**\n * Variable: rotatedHtmlBackground\n * \n * Background color for rotated HTML. Default is ''. This can be set to eg.\n * white to improve rendering of rotated text in VML for IE9.\n */\nmxVmlCanvas2D.prototype.rotatedHtmlBackground = '';\n\n/**\n * Variable: vmlScale\n * \n * Specifies the scale used to draw VML shapes.\n */\nmxVmlCanvas2D.prototype.vmlScale = 1;\n\n/**\n * Function: createElement\n * \n * Creates the given element using the document.\n */\nmxVmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn document.createElement(name);\n};\n\n/**\n * Function: createVmlElement\n * \n * Creates a new element using <createElement> and prefixes the given name with\n * <mxClient.VML_PREFIX>.\n */\nmxVmlCanvas2D.prototype.createVmlElement = function(name)\n{\n\treturn this.createElement(mxClient.VML_PREFIX + ':' + name);\n};\n\n/**\n * Function: addNode\n * \n * Adds the current node to the <root>.\n */\nmxVmlCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\t\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.path = this.path.join(' ') + ' e';\n\t\t\t\tnode.style.width = this.root.style.width;\n\t\t\t\tnode.style.height = this.root.style.height;\n\t\t\t\tnode.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tnode.strokeweight = this.format(Math.max(1, s.strokeWidth * s.scale / this.vmlScale)) + 'px';\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node,\n\t\t\t\tfilled && s.fillColor != null,\n\t\t\t\tstroked && s.strokeColor != null));\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tnode.stroked = 'true';\n\t\t\tnode.strokecolor = s.strokeColor;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.stroked = 'false';\n\t\t}\n\n\t\tnode.appendChild(this.createStroke());\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tnode.appendChild(this.createFill());\n\t\t}\n\t\telse if (this.pointerEvents && (node.nodeName != 'shape' ||\n\t\t\tthis.path[this.path.length - 1] == this.closeOp))\n\t\t{\n\t\t\tnode.appendChild(this.createTransparentFill());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.filled = 'false';\n\t\t}\n\n\t\t// LATER: Update existing DOM for performance\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: createTransparentFill\n * \n * Creates a transparent fill.\n */\nmxVmlCanvas2D.prototype.createTransparentFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.src = mxClient.imageBasePath + '/transparent.gif';\n\tfill.type = 'tile';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createFill\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createFill = function()\n{\n\tvar s = this.state;\n\t\n\t// Gradients in foregrounds not supported because special gradients\n\t// with bounds must be created for each element in graphics-canvases\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fillColor;\n\n\tif (s.gradientColor != null)\n\t{\n\t\tfill.type = 'gradient';\n\t\tfill.method = 'none';\n\t\tfill.color2 = s.gradientColor;\n\t\tvar angle = 180 - s.rotation;\n\t\t\n\t\tif (s.gradientDirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tangle -= 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_EAST)\n\t\t{\n\t\t\tangle += 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tangle -= 180 + ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t angle += ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\t\n\t\tif (this.root.style.flip == 'x' || this.root.style.flip == 'y')\n\t\t{\n\t\t\tangle *= -1;\n\t\t}\n\n\t\t// LATER: Fix outer bounding box for rotated shapes used in VML.\n\t\tfill.angle = mxUtils.mod(angle, 360);\n\t\tfill.opacity = (s.alpha * s.gradientFillAlpha * 100) + '%';\n\t\tfill.setAttribute(mxClient.OFFICE_PREFIX + ':opacity2', (s.alpha * s.gradientAlpha * 100) + '%');\n\t}\n\telse if (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tfill.opacity = (s.alpha * s.fillAlpha * 100) + '%';\t\t\t\n\t}\n\t\n\treturn fill;\n};\n/**\n * Function: createStroke\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createStroke = function()\n{\n\tvar s = this.state;\n\tvar stroke = this.createVmlElement('stroke');\n\tstroke.endcap = s.lineCap || 'flat';\n\tstroke.joinstyle = s.lineJoin || 'miter';\n\tstroke.miterlimit = s.miterLimit || '10';\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tstroke.opacity = (s.alpha * s.strokeAlpha * 100) + '%';\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tstroke.dashstyle = this.getVmlDashStyle();\n\t}\n\t\n\treturn stroke;\n};\n\n/**\n * Function: getVmlDashPattern\n * \n * Returns a VML dash pattern for the current dashPattern.\n * See http://msdn.microsoft.com/en-us/library/bb264085(v=vs.85).aspx\n */\nmxVmlCanvas2D.prototype.getVmlDashStyle = function()\n{\n\tvar result = 'dash';\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar tok = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (tok.length > 0 && tok[0] == 1)\n\t\t{\n\t\t\tresult = '0 2';\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxVmlCanvas2D.prototype.createShadow = function(node, filled, stroked)\n{\n\tvar s = this.state;\n\tvar rad = -s.rotation * (Math.PI / 180);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\n\tvar dx = s.shadowDx * s.scale;\n\tvar dy = s.shadowDy * s.scale;\n\n\tif (this.root.style.flip == 'x')\n\t{\n\t\tdx *= -1;\n\t}\n\telse if (this.root.style.flip == 'y')\n\t{\n\t\tdy *= -1;\n\t}\n\t\n\tvar shadow = node.cloneNode(true);\n\tshadow.style.marginLeft = Math.round(dx * cos - dy * sin) + 'px';\n\tshadow.style.marginTop = Math.round(dx * sin + dy * cos) + 'px';\n\n\t// Workaround for wrong cloning in IE8 standards mode\n\tif (document.documentMode == 8)\n\t{\n\t\tshadow.strokeweight = node.strokeweight;\n\t\t\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\tshadow.path = this.path.join(' ') + ' e';\n\t\t\tshadow.style.width = this.root.style.width;\n\t\t\tshadow.style.height = this.root.style.height;\n\t\t\tshadow.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t}\n\t}\n\t\n\tif (stroked)\n\t{\n\t\tshadow.strokecolor = s.shadowColor;\n\t\tshadow.appendChild(this.createShadowStroke());\n\t}\n\telse\n\t{\n\t\tshadow.stroked = 'false';\n\t}\n\t\n\tif (filled)\n\t{\n\t\tshadow.appendChild(this.createShadowFill());\n\t}\n\telse\n\t{\n\t\tshadow.filled = 'false';\n\t}\n\t\n\treturn shadow;\n};\n\n/**\n * Function: createShadowFill\n * \n * Creates the fill for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = this.state.shadowColor;\n\tfill.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createShadowStroke\n * \n * Creates the stroke for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowStroke = function()\n{\n\tvar stroke = this.createStroke();\n\tstroke.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn stroke;\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxVmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (flipH && flipV)\n\t{\n\t\ttheta += 180;\n\t}\n\telse if (flipH)\n\t{\n\t\tthis.root.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tthis.root.style.flip = 'y';\n\t}\n\n\tif (flipH ? !flipV : flipV)\n\t{\n\t\ttheta *= -1;\n\t}\n\n\tthis.root.style.rotation = theta;\n\tthis.state.rotation = this.state.rotation + theta;\n\tthis.state.rotationCx = cx;\n\tthis.state.rotationCy = cy;\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxVmlCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createVmlElement('shape');\n\tthis.node.style.position = 'absolute';\n};\n\n/**\n * Function: quadTo\n * \n * Replaces quadratic curve with bezier curve in VML.\n */\nmxVmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar s = this.state;\n\n\tvar cpx0 = (this.lastX + s.dx) * s.scale;\n\tvar cpy0 = (this.lastY + s.dy) * s.scale;\n\tvar qpx1 = (x1 + s.dx) * s.scale;\n\tvar qpy1 = (y1 + s.dy) * s.scale;\n\tvar cpx3 = (x2 + s.dx) * s.scale;\n\tvar cpy3 = (y2 + s.dy) * s.scale;\n\t\n\tvar cpx1 = cpx0 + 2/3 * (qpx1 - cpx0);\n\tvar cpy1 = cpy0 + 2/3 * (qpy1 - cpy0);\n\t\n\tvar cpx2 = cpx3 + 2/3 * (qpx1 - cpx3);\n\tvar cpy2 = cpy3 + 2/3 * (qpy1 - cpy3);\n\t\n\tthis.path.push('c ' + this.format(cpx1) + ' ' + this.format(cpy1) +\n\t\t\t' ' + this.format(cpx2) + ' ' + this.format(cpy2) +\n\t\t\t' ' + this.format(cpx3) + ' ' + this.format(cpy3));\n\tthis.lastX = (cpx3 / s.scale) - s.dx;\n\tthis.lastY = (cpy3 / s.scale) - s.dy;\n\t\n};\n\n/**\n * Function: createRect\n * \n * Sets the glass gradient.\n */\nmxVmlCanvas2D.prototype.createRect = function(nodeName, x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createVmlElement(nodeName);\n\tn.style.position = 'absolute';\n\tn.style.left = this.format((x + s.dx) * s.scale) + 'px';\n\tn.style.top = this.format((y + s.dy) * s.scale) + 'px';\n\tn.style.width = this.format(w * s.scale) + 'px';\n\tn.style.height = this.format(h * s.scale) + 'px';\n\t\n\treturn n;\n};\n\n/**\n * Function: rect\n * \n * Sets the current path to a rectangle.\n */\nmxVmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tthis.node = this.createRect('rect', x, y, w, h);\n};\n\n/**\n * Function: roundrect\n * \n * Sets the current path to a rounded rectangle.\n */\nmxVmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.node = this.createRect('roundrect', x, y, w, h);\n\t// SetAttribute needed here for IE8\n\tthis.node.setAttribute('arcsize', Math.max(dx * 100 / w, dy * 100 / h) + '%');\n};\n\n/**\n * Function: ellipse\n * \n * Sets the current path to an ellipse.\n */\nmxVmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tthis.node = this.createRect('oval', x, y, w, h);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n */\nmxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tvar node = null;\n\t\n\tif (!aspect)\n\t{\n\t\tnode = this.createRect('image', x, y, w, h);\n\t\tnode.src = src;\n\t}\n\telse\n\t{\n\t\t// Uses fill with aspect to avoid asynchronous update of size\n\t\tnode = this.createRect('rect', x, y, w, h);\n\t\tnode.stroked = 'false';\n\t\t\n\t\t// Handles image aspect via fill\n\t\tvar fill = this.createVmlElement('fill');\n\t\tfill.aspect = (aspect) ? 'atmost' : 'ignore';\n\t\tfill.rotate = 'true';\n\t\tfill.type = 'frame';\n\t\tfill.src = src;\n\n\t\tnode.appendChild(fill);\n\t}\n\t\n\tif (flipH && flipV)\n\t{\n\t\tnode.style.rotation = '180';\n\t}\n\telse if (flipH)\n\t{\n\t\tnode.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tnode.style.flip = 'y';\n\t}\n\t\n\tif (this.state.alpha < 1 || this.state.fillAlpha < 1)\n\t{\n\t\t// KNOWN: Borders around transparent images in IE<9. Using fill.opacity\n\t\t// fixes this problem by adding a white background in all IE versions.\n\t\tnode.style.filter += 'alpha(opacity=' + (this.state.alpha * this.state.fillAlpha * 100) + ')';\n\t}\n\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: createText\n * \n * Creates the innermost element that contains the HTML text.\n */\nmxVmlCanvas2D.prototype.createDiv = function(str, align, valign, overflow)\n{\n\tvar div = this.createElement('div');\n\tvar state = this.state;\n\n\tvar css = '';\n\t\n\tif (state.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + mxUtils.htmlEntities(state.fontBackgroundColor) + ';';\n\t}\n\t\n\tif (state.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(state.fontBorderColor) + ';';\n\t}\n\t\n\tif (mxUtils.isNode(str))\n\t{\n\t\tdiv.appendChild(str);\n\t}\n\telse\n\t{\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\tvar div2 = this.createElement('div');\n\t\t\tdiv2.style.cssText = css;\n\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv2.style.zoom = '1';\n\t\t\tdiv2.style.textDecoration = 'inherit';\n\t\t\tdiv2.innerHTML = str;\n\t\t\tdiv.appendChild(div2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.cssText = css;\n\t\t\tdiv.innerHTML = str;\n\t\t}\n\t}\n\t\n\tvar style = div.style;\n\n\tstyle.fontSize = (state.fontSize / this.vmlScale) + 'px';\n\tstyle.fontFamily = state.fontFamily;\n\tstyle.color = state.fontColor;\n\tstyle.verticalAlign = 'top';\n\tstyle.textAlign = align || 'left';\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (state.fontSize * mxConstants.LINE_HEIGHT / this.vmlScale) + 'px' : mxConstants.LINE_HEIGHT;\n\n\tif ((state.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\n\tif ((state.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\t\n\tif ((state.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\t\n\treturn div;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Clipping, text background and border are not\n * supported for plain text in VML.\n */\nmxVmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tvar s = this.state;\n\t\t\n\t\tif (format == 'html')\n\t\t{\n\t\t\tif (s.rotation != null)\n\t\t\t{\n\t\t\t\tvar pt = this.rotatePoint(x, y, s.rotation, s.rotationCx, s.rotationCy);\n\t\t\t\t\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tx += s.dx;\n\t\t\t\ty += s.dy;\n\t\t\t\t\n\t\t\t\t// Workaround for rendering offsets\n\t\t\t\tif (overflow != 'fill' && valign == mxConstants.ALIGN_TOP)\n\t\t\t\t{\n\t\t\t\t\ty -= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\t// Adds event transparency in IE8 standards without the transparent background\n\t\t\t// filter which cannot be used due to bugs in the zoomed bounding box (too slow)\n\t\t\t// FIXME: No event transparency if inside v:rect (ie part of shape)\n\t\t\t// KNOWN: Offset wrong for rotated text with word that are longer than the wrapping\n\t\t\t// width in IE8 because real width of text cannot be determined here.\n\t\t\t// This should be fixed in mxText.updateBoundingBox by calling before this and\n\t\t\t// passing the real width to this method if not clipped and wrapped.\n\t\t\tvar abs = (document.documentMode == 8 && !mxClient.IS_EM) ? this.createVmlElement('group') : this.createElement('div');\n\t\t\tabs.style.position = 'absolute';\n\t\t\tabs.style.display = 'inline';\n\t\t\tabs.style.left = this.format(x) + 'px';\n\t\t\tabs.style.top = this.format(y) + 'px';\n\t\t\tabs.style.zoom = s.scale;\n\n\t\t\tvar box = this.createElement('div');\n\t\t\tbox.style.position = 'relative';\n\t\t\tbox.style.display = 'inline';\n\t\t\t\n\t\t\tvar margin = mxUtils.getAlignmentAsPoint(align, valign);\n\t\t\tvar dx = margin.x;\n\t\t\tvar dy = margin.y;\n\n\t\t\tvar div = this.createDiv(str, align, valign, overflow);\n\t\t\tvar inner = this.createElement('div');\n\t\t\t\n\t\t\tif (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tif (!clip)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\t// LATER: Check if other cases need to be handled\n\t\t\t\tif (div.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div;\n\t\t\t\t\t\n\t\t\t\t\tif (tmp.firstChild != null && tmp.firstChild.nodeName == 'DIV')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.firstChild.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\t}\n\t\t\t\n\t\t\tvar rot = s.rotation + (rotation || 0);\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tinner.style.display = 'inline';\n\t\t\t\tinner.style.zoom = '1';\n\t\t\t\tinner.appendChild(div);\n\n\t\t\t\t// Box not needed for rendering in IE8 standards\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM && this.root.nodeName != 'DIV')\n\t\t\t\t{\n\t\t\t\t\tbox.appendChild(inner);\n\t\t\t\t\tabs.appendChild(box);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tabs.appendChild(inner);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tbox.appendChild(div);\n\t\t\t\tabs.appendChild(box);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.display = 'inline';\n\t\t\t\tabs.appendChild(div);\n\t\t\t}\n\t\t\t\n\t\t\t// Inserts the node into the DOM\n\t\t\tif (this.root.nodeName != 'DIV')\n\t\t\t{\n\t\t\t\t// Rectangle to fix position in group\n\t\t\t\tvar rect = this.createVmlElement('rect');\n\t\t\t\trect.stroked = 'false';\n\t\t\t\trect.filled = 'false';\n\n\t\t\t\trect.appendChild(abs);\n\t\t\t\tthis.root.appendChild(rect);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.root.appendChild(abs);\n\t\t\t}\n\t\t\t\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.height = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.maxHeight = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tvar rad = rot * (Math.PI / 180);\n\t\t\t\t\n\t\t\t\t// Precalculate cos and sin for the rotation\n\t\t\t\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\t\t\t\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\t\t\t\trad %= 2 * Math.PI;\n\t\t\t\tif (rad < 0) rad += 2 * Math.PI;\n\t\t\t\trad %= Math.PI;\n\t\t\t\tif (rad > Math.PI / 2) rad = Math.PI - rad;\n\t\t\t\t\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.display = 'inline-block';\n\t\t\t\t\tinner.style.display = 'inline-block';\n\t\t\t\t\tbox.style.display = 'inline-block';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdiv.style.position = 'absolute';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tvar sizeDiv = div;\n\t\t\t\t\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar tmp = sizeDiv.offsetWidth + 3;\n\t\t\t\tvar oh = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tif (clip)\n\t\t\t\t{\n\t\t\t\t\tw = Math.min(w, tmp);\n\t\t\t\t\toh = Math.min(oh, h);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tw = tmp;\n\t\t\t\t}\n\n\t\t\t\t// Handles words that are longer than the given wrapping width\n\t\t\t\tif (wrap)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = w + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && (clip || overflow == 'width') && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\n\t\t\t\tvar top_fix = (h - h * cos + w * -sin) / 2 - real_sin * w * (dx + 0.5) + real_cos * h * (dy + 0.5);\n\t\t\t\tvar left_fix = (w - w * cos + h * -sin) / 2 + real_cos * w * (dx + 0.5) + real_sin * h * (dy + 0.5);\n\n\t\t\t\tif (abs.nodeName == 'group' && this.root.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\t// Workaround for bug where group gets moved away if left and top are non-zero in IE8 standards\n\t\t\t\t\tvar pos = this.createElement('div');\n\t\t\t\t\tpos.style.display = 'inline-block';\n\t\t\t\t\tpos.style.position = 'absolute';\n\t\t\t\t\tpos.style.left = this.format(x + (left_fix - w / 2) * s.scale) + 'px';\n\t\t\t\t\tpos.style.top = this.format(y + (top_fix - h / 2) * s.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\tabs.parentNode.appendChild(pos);\n\t\t\t\t\tpos.appendChild(abs);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar sc = (document.documentMode == 8 && !mxClient.IS_EM) ? 1 : s.scale;\n\t\t\t\t\t\n\t\t\t\t\tabs.style.left = this.format(x + (left_fix - w / 2) * sc) + 'px';\n\t\t\t\t\tabs.style.top = this.format(y + (top_fix - h / 2) * sc) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// KNOWN: Rotated text rendering quality is bad for IE9 quirks\n\t\t\t\tinner.style.filter = \"progid:DXImageTransform.Microsoft.Matrix(M11=\"+real_cos+\", M12=\"+\n\t\t\t\t\treal_sin+\", M21=\"+(-real_sin)+\", M22=\"+real_cos+\", sizingMethod='auto expand')\";\n\t\t\t\tinner.style.backgroundColor = this.rotatedHtmlBackground;\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tinner.style.filter += 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\n\t\t\t\t// Restore parent node for DIV\n\t\t\t\tinner.appendChild(div);\n\t\t\t\tdiv.style.position = '';\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t}\n\t\t\telse if (document.documentMode != 8 || mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tdiv.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tabs.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tvar divParent = div.parentNode;\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tw = div.offsetWidth;\n\t\t\t\tvar oh = div.offsetHeight;\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && clip && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t\tdivParent.appendChild(div);\n\t\t\t\t\n\t\t\t\tabs.style.left = this.format(x + w * dx * this.state.scale) + 'px';\n\t\t\t\tabs.style.top = this.format(y + h * dy * this.state.scale) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Faster rendering in IE8 without offsetWidth/Height\n\t\t\t\tbox.style.left = (dx * 100) + '%';\n\t\t\t\tbox.style.top = (dy * 100) + '%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, mxUtils.htmlEntities(str, false), align, valign, wrap, format, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: plainText\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\t// TextDirection is ignored since this code is not used (format is always HTML in the text function)\n\tvar s = this.state;\n\tx = (x + s.dx) * s.scale;\n\ty = (y + s.dy) * s.scale;\n\t\n\tvar node = this.createVmlElement('shape');\n\tnode.style.width = '1px';\n\tnode.style.height = '1px';\n\tnode.stroked = 'false';\n\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fontColor;\n\tfill.opacity = (s.alpha * 100) + '%';\n\tnode.appendChild(fill);\n\t\n\tvar path = this.createVmlElement('path');\n\tpath.textpathok = 'true';\n\tpath.v = 'm ' + this.format(0) + ' ' + this.format(0) + ' l ' + this.format(1) + ' ' + this.format(0);\n\t\n\tnode.appendChild(path);\n\t\n\t// KNOWN: Font family and text decoration ignored\n\tvar tp = this.createVmlElement('textpath');\n\ttp.style.cssText = 'v-text-align:' + align;\n\ttp.style.align = align;\n\ttp.style.fontFamily = s.fontFamily;\n\ttp.string = str;\n\ttp.on = 'true';\n\t\n\t// Scale via fontsize instead of node.style.zoom for correct offsets in IE8\n\tvar size = s.fontSize * s.scale / this.vmlScale;\n\ttp.style.fontSize = size + 'px';\n\t\n\t// Bold\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\ttp.style.fontWeight = 'bold';\n\t}\n\t\n\t// Italic\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\ttp.style.fontStyle = 'italic';\n\t}\n\n\t// Underline\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttp.style.textDecoration = 'underline';\n\t}\n\n\tvar lines = str.split('\\n');\n\tvar textHeight = size + (lines.length - 1) * size * mxConstants.LINE_HEIGHT;\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = - textHeight / 2;\n\t}\n\telse if (valign != mxConstants.ALIGN_MIDDLE) // top\n\t{\n\t\tdy = textHeight / 2;\n\t}\n\n\tif (rotation != null)\n\t{\n\t\tnode.style.rotation = rotation;\n\t\tvar rad = rotation * (Math.PI / 180);\n\t\tdx = Math.sin(rad) * dy;\n\t\tdy = Math.cos(rad) * dy;\n\t}\n\n\t// FIXME: Clipping is relative to bounding box\n\t/*if (clip)\n\t{\n\t\tnode.style.clip = 'rect(0px ' + this.format(w) + 'px ' + this.format(h) + 'px 0px)';\n\t}*/\n\t\n\tnode.appendChild(tp);\n\tnode.style.left = this.format(x - dx) + 'px';\n\tnode.style.top = this.format(y + dy) + 'px';\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxVmlCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n\n__mxOutput.mxVmlCanvas2D = typeof mxVmlCanvas2D !== 'undefined' ? mxVmlCanvas2D : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGuide\n *\n * Implements the alignment of selection cells to other cells in the graph.\n * \n * Constructor: mxGuide\n * \n * Constructs a new guide object.\n */\nfunction mxGuide(graph, states)\n{\n\tthis.graph = graph;\n\tthis.setStates(states);\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph> instance.\n */\nmxGuide.prototype.graph = null;\n\n/**\n * Variable: states\n * \n * Contains the <mxCellStates> that are used for alignment.\n */\nmxGuide.prototype.states = null;\n\n/**\n * Variable: horizontal\n *\n * Specifies if horizontal guides are enabled. Default is true.\n */\nmxGuide.prototype.horizontal = true;\n\n/**\n * Variable: vertical\n *\n * Specifies if vertical guides are enabled. Default is true.\n */\nmxGuide.prototype.vertical = true;\n\n/**\n * Variable: guideX\n *\n * Holds the <mxShape> for the horizontal guide.\n */\nmxGuide.prototype.guideX = null;\n\n/**\n * Variable: guideY\n *\n * Holds the <mxShape> for the vertical guide.\n */\nmxGuide.prototype.guideY = null;\n\n/**\n * Variable: rounded\n *\n * Specifies if rounded coordinates should be used. Default is false.\n */\nmxGuide.prototype.rounded = false;\n\n/**\n * Variable: tolerance\n * \n * Default tolerance in px if grid is disabled. Default is 2.\n */\nmxGuide.prototype.tolerance = 2;\n\n/**\n * Function: setStates\n * \n * Sets the <mxCellStates> that should be used for alignment.\n */\nmxGuide.prototype.setStates = function(states)\n{\n\tthis.states = states;\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the guide should be enabled for the given native event. This\n * implementation always returns true.\n */\nmxGuide.prototype.isEnabledForEvent = function(evt)\n{\n\treturn true;\n};\n\n/**\n * Function: getGuideTolerance\n * \n * Returns the tolerance for the guides. Default value is gridSize / 2.\n */\nmxGuide.prototype.getGuideTolerance = function(gridEnabled)\n{\n\treturn (gridEnabled && this.graph.gridEnabled) ? this.graph.gridSize / 2 : this.tolerance;\n};\n\n/**\n * Function: createGuideShape\n * \n * Returns the mxShape to be used for painting the respective guide. This\n * implementation returns a new, dashed and crisp <mxPolyline> using\n * <mxConstants.GUIDE_COLOR> and <mxConstants.GUIDE_STROKEWIDTH> as the format.\n * \n * Parameters:\n * \n * horizontal - Boolean that specifies which guide should be created.\n */\nmxGuide.prototype.createGuideShape = function(horizontal)\n{\n\tvar guide = new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH);\n\tguide.isDashed = true;\n\t\n\treturn guide;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored.\n */\nmxGuide.prototype.isStateIgnored = function(state)\n{\n\treturn false;\n};\n\n/**\n * Function: move\n * \n * Moves the <bounds> by the given <mxPoint> and returnt the snapped point.\n */\nmxGuide.prototype.move = function(bounds, delta, gridEnabled, clone)\n{\n\tif (this.states != null && (this.horizontal || this.vertical) && bounds != null && delta != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar tt = this.getGuideTolerance(gridEnabled) * scale;\n\t\tvar b = bounds.clone();\n\t\tb.x += delta.x;\n\t\tb.y += delta.y;\n\t\tvar overrideX = false;\n\t\tvar stateX = null;\n\t\tvar valueX = null;\n\t\tvar overrideY = false;\n\t\tvar stateY = null;\n\t\tvar valueY = null;\n\t\tvar ttX = tt;\n\t\tvar ttY = tt;\n\t\tvar left = b.x;\n\t\tvar right = b.x + b.width;\n\t\tvar center = b.getCenterX();\n\t\tvar top = b.y;\n\t\tvar bottom = b.y + b.height;\n\t\tvar middle = b.getCenterY();\n\t\n\t\t// Snaps the left, center and right to the given x-coordinate\n\t\tfunction snapX(x, state, centerAlign)\n\t\t{\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (centerAlign && Math.abs(x - center) < ttX)\n\t\t\t{\n\t\t\t\tdelta.x = x - bounds.getCenterX();\n\t\t\t\tttX = Math.abs(x - center);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (!centerAlign)\n\t\t\t{\n\t\t\t\tif (Math.abs(x - left) < ttX)\n\t\t\t\t{\n\t\t\t\t\tdelta.x = x - bounds.x;\n\t\t\t\t\tttX = Math.abs(x - left);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(x - right) < ttX)\n\t\t\t\t{\n\t\t\t\t\tdelta.x = x - bounds.x - bounds.width;\n\t\t\t\t\tttX = Math.abs(x - right);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateX = state;\n\t\t\t\tvalueX = x;\n\t\t\t\t\n\t\t\t\tif (this.guideX == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideX = this.createGuideShape(true);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideX.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideX.pointerEvents = false;\n\t\t\t\t\tthis.guideX.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideX = overrideX || override;\n\t\t};\n\t\t\n\t\t// Snaps the top, middle or bottom to the given y-coordinate\n\t\tfunction snapY(y, state, centerAlign)\n\t\t{\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (centerAlign && Math.abs(y - middle) < ttY)\n\t\t\t{\n\t\t\t\tdelta.y = y - bounds.getCenterY();\n\t\t\t\tttY = Math.abs(y -  middle);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (!centerAlign)\n\t\t\t{\n\t\t\t\tif (Math.abs(y - top) < ttY)\n\t\t\t\t{\n\t\t\t\t\tdelta.y = y - bounds.y;\n\t\t\t\t\tttY = Math.abs(y - top);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(y - bottom) < ttY)\n\t\t\t\t{\n\t\t\t\t\tdelta.y = y - bounds.y - bounds.height;\n\t\t\t\t\tttY = Math.abs(y - bottom);\n\t\t\t\t\toverride = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateY = state;\n\t\t\t\tvalueY = y;\n\t\t\t\t\n\t\t\t\tif (this.guideY == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideY = this.createGuideShape(false);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideY.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideY.pointerEvents = false;\n\t\t\t\t\tthis.guideY.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideY = overrideY || override;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < this.states.length; i++)\n\t\t{\n\t\t\tvar state =  this.states[i];\n\t\t\t\n\t\t\tif (state != null && !this.isStateIgnored(state))\n\t\t\t{\n\t\t\t\t// Align x\n\t\t\t\tif (this.horizontal)\n\t\t\t\t{\n\t\t\t\t\tsnapX.call(this, state.getCenterX(), state, true);\n\t\t\t\t\tsnapX.call(this, state.x, state, false);\n\t\t\t\t\tsnapX.call(this, state.x + state.width, state, false);\n\t\t\t\t\t\n\t\t\t\t\t// Aligns left and right of shape to center of page\n\t\t\t\t\tif (state.cell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsnapX.call(this, state.getCenterX(), state, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Align y\n\t\t\t\tif (this.vertical)\n\t\t\t\t{\n\t\t\t\t\tsnapY.call(this, state.getCenterY(), state, true);\n\t\t\t\t\tsnapY.call(this, state.y, state, false);\n\t\t\t\t\tsnapY.call(this, state.y + state.height, state, false);\n\t\t\t\t\t\n\t\t\t\t\t// Aligns left and right of shape to center of page\n\t\t\t\t\tif (state.cell == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tsnapY.call(this, state.getCenterY(), state, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Moves cells to the raster if not aligned\n\t\tthis.graph.snapDelta(delta, bounds, !gridEnabled, overrideX, overrideY);\n\t\tdelta = this.getDelta(bounds, stateX, delta.x, stateY, delta.y)\n\t\t\n\t\t// Redraws the guides\n\t\tvar c = this.graph.container;\n\t\t\n\t\tif (!overrideX && this.guideX != null)\n\t\t{\n\t\t\tthis.guideX.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideX != null)\n\t\t{\n\t\t\tvar minY = null;\n        \tvar maxY = null;\n        \t\n\t\t\tif (stateX != null && bounds != null)\n\t\t\t{\n\t\t\t\tminY = Math.min(bounds.y + delta.y - this.graph.panDy, stateX.y);\n\t\t\t\tmaxY = Math.max(bounds.y + bounds.height + delta.y - this.graph.panDy, stateX.y + stateX.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (minY != null && maxY != null)\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, minY), new mxPoint(valueX, maxY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, -this.graph.panDy),\n\t\t\t\t\tnew mxPoint(valueX, c.scrollHeight - 3 - this.graph.panDy)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideX.stroke = this.getGuideColor(stateX, true);\n\t\t\tthis.guideX.node.style.visibility = 'visible';\n\t\t\tthis.guideX.redraw();\n\t\t}\n\t\t\n\t\tif (!overrideY && this.guideY != null)\n\t\t{\n\t\t\tthis.guideY.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideY != null)\n\t\t{\n\t\t\tvar minX = null;\n        \tvar maxX = null;\n        \t\n\t\t\tif (stateY != null && bounds != null)\n\t\t\t{\n\t\t\t\tminX = Math.min(bounds.x + delta.x - this.graph.panDx, stateY.x);\n\t\t\t\tmaxX = Math.max(bounds.x + bounds.width + delta.x - this.graph.panDx, stateY.x + stateY.width);\n\t\t\t}\n\t\t\t\n\t\t\tif (minX != null && maxX != null)\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(minX, valueY), new mxPoint(maxX, valueY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(-this.graph.panDx, valueY),\n\t\t\t\t\tnew mxPoint(c.scrollWidth - 3 - this.graph.panDx, valueY)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideY.stroke = this.getGuideColor(stateY, false);\n\t\t\tthis.guideY.node.style.visibility = 'visible';\n\t\t\tthis.guideY.redraw();\n\t\t}\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: getDelta\n * \n * Rounds to pixels for virtual states (eg. page guides)\n */\nmxGuide.prototype.getDelta = function(bounds, stateX, dx, stateY, dy)\n{\n\tvar s = this.graph.view.scale;\n\t\n\tif (this.rounded || (stateX != null && stateX.cell == null))\n\t{\n\t\tdx = Math.round((bounds.x + dx) / s) * s - bounds.x;\n\t}\n\n\tif (this.rounded || (stateY != null && stateY.cell == null))\n\t{\n\t\tdy = Math.round((bounds.y + dy) / s) * s - bounds.y;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n/**\n * Function: getGuideColor\n * \n * Returns the color for the given state.\n */\nmxGuide.prototype.getGuideColor = function(state, horizontal)\n{\n\treturn mxConstants.GUIDE_COLOR;\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.hide = function()\n{\n\tthis.setVisible(false);\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides the current guides.\n */\nmxGuide.prototype.setVisible = function(visible)\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys all resources that this object uses.\n */\nmxGuide.prototype.destroy = function()\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.destroy();\n\t\tthis.guideX = null;\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.destroy();\n\t\tthis.guideY = null;\n\t}\n};\n\n__mxOutput.mxGuide = typeof mxGuide !== 'undefined' ? mxGuide : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxShape\n *\n * Base class for all shapes. A shape in mxGraph is a\n * separate implementation for SVG, VML and HTML. Which\n * implementation to use is controlled by the <dialect>\n * property which is assigned from within the <mxCellRenderer>\n * when the shape is created. The dialect must be assigned\n * for a shape, and it does normally depend on the browser and\n * the confiuration of the graph (see <mxGraph> rendering hint).\n *\n * For each supported shape in SVG and VML, a corresponding\n * shape exists in mxGraph, namely for text, image, rectangle,\n * rhombus, ellipse and polyline. The other shapes are a\n * combination of these shapes (eg. label and swimlane)\n * or they consist of one or more (filled) path objects\n * (eg. actor and cylinder). The HTML implementation is\n * optional but may be required for a HTML-only view of\n * the graph.\n *\n * Custom Shapes:\n *\n * To extend from this class, the basic code looks as follows.\n * In the special case where the custom shape consists only of\n * one filled region or one filled region and an additional stroke\n * the <mxActor> and <mxCylinder> should be subclassed,\n * respectively.\n *\n * (code)\n * function CustomShape() { }\n * \n * CustomShape.prototype = new mxShape();\n * CustomShape.prototype.constructor = CustomShape; \n * (end)\n *\n * To register a custom shape in an existing graph instance,\n * one must register the shape under a new name in the graph's\n * cell renderer as follows:\n *\n * (code)\n * mxCellRenderer.registerShape('customShape', CustomShape);\n * (end)\n *\n * The second argument is the name of the constructor.\n *\n * In order to use the shape you can refer to the given name above\n * in a stylesheet. For example, to change the shape for the default\n * vertex style, the following code is used:\n *\n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'customShape';\n * (end)\n * \n * Constructor: mxShape\n *\n * Constructs a new shape.\n */\nfunction mxShape(stencil)\n{\n\tthis.stencil = stencil;\n\tthis.initStyles();\n};\n\n/**\n * Variable: dialect\n *\n * Holds the dialect in which the shape is to be painted.\n * This can be one of the DIALECT constants in <mxConstants>.\n */\nmxShape.prototype.dialect = null;\n\n/**\n * Variable: scale\n *\n * Holds the scale in which the shape is being painted.\n */\nmxShape.prototype.scale = 1;\n\n/**\n * Variable: antiAlias\n * \n * Rendering hint for configuring the canvas.\n */\nmxShape.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxShape.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: bounds\n *\n * Holds the <mxRectangle> that specifies the bounds of this shape.\n */\nmxShape.prototype.bounds = null;\n\n/**\n * Variable: points\n *\n * Holds the array of <mxPoints> that specify the points of this shape.\n */\nmxShape.prototype.points = null;\n\n/**\n * Variable: node\n *\n * Holds the outermost DOM node that represents this shape.\n */\nmxShape.prototype.node = null;\n \n/**\n * Variable: state\n * \n * Optional reference to the corresponding <mxCellState>.\n */\nmxShape.prototype.state = null;\n\n/**\n * Variable: style\n *\n * Optional reference to the style of the corresponding <mxCellState>.\n */\nmxShape.prototype.style = null;\n\n/**\n * Variable: boundingBox\n *\n * Contains the bounding box of the shape, that is, the smallest rectangle\n * that includes all pixels of the shape.\n */\nmxShape.prototype.boundingBox = null;\n\n/**\n * Variable: stencil\n *\n * Holds the <mxStencil> that defines the shape.\n */\nmxShape.prototype.stencil = null;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Event-tolerance for SVG strokes (in px). Default is 8. This is only passed\n * to the canvas in <createSvgCanvas> if <pointerEvents> is true.\n */\nmxShape.prototype.svgStrokeTolerance = 8;\n\n/**\n * Variable: pointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.pointerEvents = true;\n\n/**\n * Variable: svgPointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.svgPointerEvents = 'all';\n\n/**\n * Variable: shapePointerEvents\n * \n * Specifies if pointer events outside of shape should be handled. Default\n * is false.\n */\nmxShape.prototype.shapePointerEvents = false;\n\n/**\n * Variable: stencilPointerEvents\n * \n * Specifies if pointer events outside of stencils should be handled. Default\n * is false. Set this to true for backwards compatibility with the 1.x branch.\n */\nmxShape.prototype.stencilPointerEvents = false;\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 1.\n */\nmxShape.prototype.vmlScale = 1;\n\n/**\n * Variable: outline\n * \n * Specifies if the shape should be drawn as an outline. This disables all\n * fill colors and can be used to disable other drawing states that should\n * not be painted for outlines. Default is false. This should be set before\n * calling <apply>.\n */\nmxShape.prototype.outline = false;\n\n/**\n * Variable: visible\n * \n * Specifies if the shape is visible. Default is true.\n */\nmxShape.prototype.visible = true;\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxShape.prototype.useSvgBoundingBox = false;\n\n/**\n * Function: init\n *\n * Initializes the shape by creaing the DOM node using <create>\n * and adding it into the given container.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.init = function(container)\n{\n\tif (this.node == null)\n\t{\n\t\tthis.node = this.create(container);\n\t\t\n\t\tif (container != null)\n\t\t{\n\t\t\tcontainer.appendChild(this.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: initStyles\n *\n * Sets the styles to their default values.\n */\nmxShape.prototype.initStyles = function(container)\n{\n\tthis.strokewidth = 1;\n\tthis.rotation = 0;\n\tthis.opacity = 100;\n\tthis.fillOpacity = 100;\n\tthis.strokeOpacity = 100;\n\tthis.flipH = false;\n\tthis.flipV = false;\n};\n\n/**\n * Function: isParseVml\n * \n * Specifies if any VML should be added via insertAdjacentHtml to the DOM. This\n * is only needed in IE8 and only if the shape contains VML markup. This method\n * returns true.\n */\nmxShape.prototype.isParseVml = function()\n{\n\treturn true;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxShape.prototype.isHtmlAllowed = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Returns 0, or 0.5 if <strokewidth> % 2 == 1.\n */\nmxShape.prototype.getSvgScreenOffset = function()\n{\n\tvar sw = this.stencil && this.stencil.strokewidth != 'inherit' ? Number(this.stencil.strokewidth) : this.strokewidth;\n\t\n\treturn (mxUtils.mod(Math.max(1, Math.round(sw * this.scale)), 2) == 1) ? 0.5 : 0;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM node(s) for the shape in\n * the given container. This implementation invokes\n * <createSvg>, <createHtml> or <createVml> depending\n * on the <dialect> and style settings.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.create = function(container)\n{\n\tvar node = null;\n\t\n\tif (container != null && container.ownerSVGElement != null)\n\t{\n\t\tnode = this.createSvg(container);\n\t}\n\telse if (document.documentMode == 8 || !mxClient.IS_VML ||\n\t\t(this.dialect != mxConstants.DIALECT_VML && this.isHtmlAllowed()))\n\t{\n\t\tnode = this.createHtml(container);\n\t}\n\telse\n\t{\n\t\tnode = this.createVml(container);\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.createSvg = function()\n{\n\treturn document.createElementNS(mxConstants.NS_SVG, 'g');\n};\n\n/**\n * Function: createVml\n *\n * Creates and returns the VML node to represent this shape.\n */\nmxShape.prototype.createVml = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: reconfigure\n *\n * Reconfigures this shape. This will update the colors etc in\n * addition to the bounds or points.\n */\nmxShape.prototype.reconfigure = function()\n{\n\tthis.redraw();\n};\n\n/**\n * Function: redraw\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.redraw = function()\n{\n\tthis.updateBoundsFromPoints();\n\t\n\tif (this.visible && this.checkBounds())\n\t{\n\t\tthis.node.style.visibility = 'visible';\n\t\tthis.clear();\n\t\t\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.redrawHtmlShape();\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tthis.redrawShape();\n\t\t}\n\n\t\tthis.updateBoundingBox();\n\t}\n\telse\n\t{\n\t\tthis.node.style.visibility = 'hidden';\n\t\tthis.boundingBox = null;\n\t}\n};\n\n/**\n * Function: clear\n * \n * Removes all child nodes and resets all CSS.\n */\nmxShape.prototype.clear = function()\n{\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\twhile (this.node.lastChild != null)\n\t\t{\n\t\t\tthis.node.removeChild(this.node.lastChild);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.node.style.cssText = 'position:absolute;' + ((this.cursor != null) ?\n\t\t\t('cursor:' + this.cursor + ';') : '');\n\t\tthis.node.innerHTML = '';\n\t}\n};\n\n/**\n * Function: updateBoundsFromPoints\n * \n * Updates the bounds based on the points.\n */\nmxShape.prototype.updateBoundsFromPoints = function()\n{\n\tvar pts = this.points;\n\t\n\tif (pts != null && pts.length > 0 && pts[0] != null)\n\t{\n\t\tthis.bounds = new mxRectangle(Number(pts[0].x), Number(pts[0].y), 1, 1);\n\t\t\n\t\tfor (var i = 1; i < this.points.length; i++)\n\t\t{\n\t\t\tif (pts[i] != null)\n\t\t\t{\n\t\t\t\tthis.bounds.add(new mxRectangle(Number(pts[i].x), Number(pts[i].y), 1, 1));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the <mxRectangle> for the label bounds of this shape, based on the\n * given scaled and translated bounds of the shape. This method should not\n * change the rectangle in-place. This implementation returns the given rect.\n */\nmxShape.prototype.getLabelBounds = function(rect)\n{\n\tvar d = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar bounds = rect;\n\t\n\t// Normalizes argument for getLabelMargins hook\n\tif (d != mxConstants.DIRECTION_SOUTH && d != mxConstants.DIRECTION_NORTH &&\n\t\tthis.state != null && this.state.text != null &&\n\t\tthis.state.text.isPaintBoundsInverted())\n\t{\n\t\tbounds = bounds.clone();\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\t\n\tvar m = this.getLabelMargins(bounds);\n\t\n\tif (m != null)\n\t{\n\t\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, false) == '1';\n\t\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, false) == '1';\n\t\t\n\t\t// Handles special case for vertical labels\n\t\tif (this.state != null && this.state.text != null &&\n\t\t\tthis.state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.height;\n\t\t\tm.height = m.width;\n\t\t\tm.width = m.y;\n\t\t\tm.y = tmp;\n\n\t\t\ttmp = flipH;\n\t\t\tflipH = flipV;\n\t\t\tflipV = tmp;\n\t\t}\n\t\t\n\t\treturn mxUtils.getDirectedBounds(rect, m, this.style, flipH, flipV);\n\t}\n\t\n\treturn rect;\n};\n\n/**\n * Function: getLabelMargins\n * \n * Returns the scaled top, left, bottom and right margin to be used for\n * computing the label bounds as an <mxRectangle>, where the bottom and right\n * margin are defined in the width and height of the rectangle, respectively.\n */\nmxShape.prototype.getLabelMargins= function(rect)\n{\n\treturn null;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxShape.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height) &&\n\t\t\tthis.bounds.width > 0 && this.bounds.height > 0);\n};\n\n/**\n * Function: createVmlGroup\n *\n * Returns the temporary element used for rendering in IE8 standards mode.\n */\nmxShape.prototype.createVmlGroup = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\tnode.style.width = this.node.style.width;\n\tnode.style.height = this.node.style.height;\n\t\n\treturn node;\n};\n\n/**\n * Function: redrawShape\n *\n * Updates the SVG or VML shape.\n */\nmxShape.prototype.redrawShape = function()\n{\n\tvar canvas = this.createCanvas();\n\t\n\tif (canvas != null)\n\t{\n\t\t// Specifies if events should be handled\n\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\tthis.beforePaint(canvas);\n\t\tthis.paint(canvas);\n\t\tthis.afterPaint(canvas);\n\t\n\t\tif (this.node != canvas.root)\n\t\t{\n\t\t\t// Forces parsing in IE8 standards mode - slow! avoid\n\t\t\tthis.node.insertAdjacentHTML('beforeend', canvas.root.outerHTML);\n\t\t}\n\t\n\t\tif (this.node.nodeName == 'DIV' && document.documentMode == 8)\n\t\t{\n\t\t\t// Makes DIV transparent to events for IE8 in IE8 standards\n\t\t\t// mode (Note: Does not work for IE9 in IE8 standards mode\n\t\t\t// and not for IE11 in enterprise mode)\n\t\t\tthis.node.style.filter = '';\n\t\t\t\n\t\t\t// Adds event transparency in IE8 standards\n\t\t\tmxUtils.addTransparentBackgroundFilter(this.node);\n\t\t}\n\t\t\n\t\tthis.destroyCanvas(canvas);\n\t}\n};\n\n/**\n * Function: createCanvas\n * \n * Creates a new canvas for drawing this shape. May return null.\n */\nmxShape.prototype.createCanvas = function()\n{\n\tvar canvas = null;\n\t\n\t// LATER: Check if reusing existing DOM nodes improves performance\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\tcanvas = this.createSvgCanvas();\n\t}\n\telse if (mxClient.IS_VML)\n\t{\n\t\tthis.updateVmlContainer();\n\t\tcanvas = this.createVmlCanvas();\n\t}\n\t\n\tif (canvas != null && this.outline)\n\t{\n\t\tcanvas.setStrokeWidth(this.strokewidth);\n\t\tcanvas.setStrokeColor(this.stroke);\n\t\t\n\t\tif (this.isDashed != null)\n\t\t{\n\t\t\tcanvas.setDashed(this.isDashed);\n\t\t}\n\t\t\n\t\tcanvas.setStrokeWidth = function() {};\n\t\tcanvas.setStrokeColor = function() {};\n\t\tcanvas.setFillColor = function() {};\n\t\tcanvas.setGradient = function() {};\n\t\tcanvas.setDashed = function() {};\n\t\tcanvas.text = function() {};\n\t}\n\n\treturn canvas;\n};\n\n/**\n * Function: createSvgCanvas\n * \n * Creates and returns an <mxSvgCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createSvgCanvas = function()\n{\n\tvar canvas = new mxSvgCanvas2D(this.node, false);\n\tcanvas.strokeTolerance = (this.pointerEvents) ? this.svgStrokeTolerance : 0;\n\tcanvas.pointerEventsValue = this.svgPointerEvents;\n\tvar off = this.getSvgScreenOffset();\n\n\tif (off != 0)\n\t{\n\t\tthis.node.setAttribute('transform', 'translate(' + off + ',' + off + ')');\n\t}\n\telse\n\t{\n\t\tthis.node.removeAttribute('transform');\n\t}\n\n\tcanvas.minStrokeWidth = this.minSvgStrokeWidth;\n\t\n\tif (!this.antiAlias)\n\t{\n\t\t// Rounds all numbers in the SVG output to integers\n\t\tcanvas.format = function(value)\n\t\t{\n\t\t\treturn Math.round(parseFloat(value));\n\t\t};\n\t}\n\t\n\treturn canvas;\n};\n\n/**\n * Function: createVmlCanvas\n * \n * Creates and returns an <mxVmlCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createVmlCanvas = function()\n{\n\t// Workaround for VML rendering bug in IE8 standards mode\n\tvar node = (document.documentMode == 8 && this.isParseVml()) ? this.createVmlGroup() : this.node;\n\tvar canvas = new mxVmlCanvas2D(node, false);\n\t\n\tif (node.tagUrn != '')\n\t{\n\t\tvar w = Math.max(1, Math.round(this.bounds.width));\n\t\tvar h = Math.max(1, Math.round(this.bounds.height));\n\t\tnode.coordsize = (w * this.vmlScale) + ',' + (h * this.vmlScale);\n\t\tcanvas.scale(this.vmlScale);\n\t\tcanvas.vmlScale = this.vmlScale;\n\t}\n\n\t// Painting relative to top, left shape corner\n\tvar s = this.scale;\n\tcanvas.translate(-Math.round(this.bounds.x / s), -Math.round(this.bounds.y / s));\n\t\n\treturn canvas;\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Updates the bounds of the VML container.\n */\nmxShape.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tvar w = Math.max(1, Math.round(this.bounds.width));\n\tvar h = Math.max(1, Math.round(this.bounds.height));\n\tthis.node.style.width = w + 'px';\n\tthis.node.style.height = h + 'px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.redrawHtmlShape = function()\n{\n\t// LATER: Refactor methods\n\tthis.updateHtmlBounds(this.node);\n\tthis.updateHtmlFilters(this.node);\n\tthis.updateHtmlColors(this.node);\n};\n\n/**\n * Function: updateHtmlFilters\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlFilters = function(node)\n{\n\tvar f = '';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tf += 'alpha(opacity=' + (this.opacity) + ')';\n\t}\n\t\n\tif (this.isShadow)\n\t{\n\t\t// FIXME: Cannot implement shadow transparency with filter\n\t\tf += 'progid:DXImageTransform.Microsoft.dropShadow (' +\n\t\t\t'OffX=\\'' + Math.round(mxConstants.SHADOW_OFFSET_X * this.scale) + '\\', ' +\n\t\t\t'OffY=\\'' + Math.round(mxConstants.SHADOW_OFFSET_Y * this.scale) + '\\', ' +\n\t\t\t'Color=\\'' + mxConstants.VML_SHADOWCOLOR + '\\')';\n\t}\n\t\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar start = this.fill;\n\t\tvar end = this.gradient;\n\t\tvar type = '0';\n\t\t\n\t\tvar lookup = {east:0,south:1,west:2,north:3};\n\t\tvar dir = (this.direction != null) ? lookup[this.direction] : 0;\n\t\t\n\t\tif (this.gradientDirection != null)\n\t\t{\n\t\t\tdir = mxUtils.mod(dir + lookup[this.gradientDirection] - 1, 4);\n\t\t}\n\n\t\tif (dir == 1)\n\t\t{\n\t\t\ttype = '1';\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 2)\n\t\t{\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 3)\n\t\t{\n\t\t\ttype = '1';\n\t\t}\n\t\t\n\t\tf += 'progid:DXImageTransform.Microsoft.gradient(' +\n\t\t\t'startColorStr=\\'' + start + '\\', endColorStr=\\'' + end +\n\t\t\t'\\', gradientType=\\'' + type + '\\')';\n\t}\n\n\tnode.style.filter = f;\n};\n\n/**\n * Function: updateHtmlColors\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlColors = function(node)\n{\n\tvar color = this.stroke;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.borderColor = color;\n\n\t\tif (this.isDashed)\n\t\t{\n\t\t\tnode.style.borderStyle = 'dashed';\n\t\t}\n\t\telse if (this.strokewidth > 0)\n\t\t{\n\t\t\tnode.style.borderStyle = 'solid';\n\t\t}\n\n\t\tnode.style.borderWidth = Math.max(1, Math.ceil(this.strokewidth * this.scale)) + 'px';\n\t}\n\telse\n\t{\n\t\tnode.style.borderWidth = '0px';\n\t}\n\n\tcolor = (this.outline) ? null : this.fill;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.backgroundColor = color;\n\t\tnode.style.backgroundImage = 'none';\n\t}\n\telse if (this.pointerEvents)\n\t{\n\t\t node.style.backgroundColor = 'transparent';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tmxUtils.addTransparentBackgroundFilter(node);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(node);\n\t}\n};\n\n/**\n * Function: updateHtmlBounds\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlBounds = function(node)\n{\n\tvar sw = (document.documentMode >= 9) ? 0 : Math.ceil(this.strokewidth * this.scale);\n\tnode.style.borderWidth = Math.max(1, sw) + 'px';\n\tnode.style.overflow = 'hidden';\n\t\n\tnode.style.left = Math.round(this.bounds.x - sw / 2) + 'px';\n\tnode.style.top = Math.round(this.bounds.y - sw / 2) + 'px';\n\n\tif (document.compatMode == 'CSS1Compat')\n\t{\n\t\tsw = -sw;\n\t}\n\t\n\tnode.style.width = Math.round(Math.max(0, this.bounds.width + sw)) + 'px';\n\tnode.style.height = Math.round(Math.max(0, this.bounds.height + sw)) + 'px';\n};\n\n/**\n * Function: destroyCanvas\n * \n * Destroys the given canvas which was used for drawing. This implementation\n * increments the reference counts on all shared gradients used in the canvas.\n */\nmxShape.prototype.destroyCanvas = function(canvas)\n{\n\t// Manages reference counts\n\tif (canvas instanceof mxSvgCanvas2D)\n\t{\n\t\t// Increments ref counts\n\t\tfor (var key in canvas.gradients)\n\t\t{\n\t\t\tvar gradient = canvas.gradients[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.releaseSvgGradients(this.oldGradients);\n\t\tthis.oldGradients = canvas.gradients;\n\t}\n};\n\n/**\n * Function: beforePaint\n * \n * Invoked before paint is called.\n */\nmxShape.prototype.beforePaint = function(c) { }\n\n/**\n * Function: afterPaint\n * \n * Invokes after paint was called.\n */\nmxShape.prototype.afterPaint = function(c) { }\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxShape.prototype.paint = function(c)\n{\n\tvar strokeDrawn = false;\n\t\n\tif (c != null && this.outline)\n\t{\n\t\tvar stroke = c.stroke;\n\t\t\n\t\tc.stroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tstroke.apply(this, arguments);\n\t\t};\n\n\t\tvar fillAndStroke = c.fillAndStroke;\n\t\t\n\t\tc.fillAndStroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tfillAndStroke.apply(this, arguments);\n\t\t};\n\t}\n\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\tif (this.isPaintBoundsInverted())\n\t{\n\t\tvar t = (w - h) / 2;\n\t\tx += t;\n\t\ty -= t;\n\t\tvar tmp = w;\n\t\tw = h;\n\t\th = tmp;\n\t}\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\t// Adds background rectangle to capture events\n\tvar bg = null;\n\t\n\tif ((this.stencil == null && this.points == null && this.shapePointerEvents) ||\n\t\t(this.stencil != null && this.stencilPointerEvents))\n\t{\n\t\tvar bb = this.createBoundingBox();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tbg = this.createTransparentSvgRectangle(bb.x, bb.y, bb.width, bb.height);\n\t\t\tthis.node.appendChild(bg);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar rect = c.createRect('rect', bb.x / s, bb.y / s, bb.width / s, bb.height / s);\n\t\t\trect.appendChild(c.createTransparentFill());\n\t\t\trect.stroked = 'false';\n\t\t\tc.root.appendChild(rect);\n\t\t}\n\t}\n\n\tif (this.stencil != null)\n\t{\n\t\tthis.stencil.drawShape(c, this, x, y, w, h);\n\t}\n\telse\n\t{\n\t\t// Stencils have separate strokewidth\n\t\tc.setStrokeWidth(this.strokewidth);\n\t\t\n\t\tif (this.points != null)\n\t\t{\n\t\t\t// Paints edge shape\n\t\t\tvar pts = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t\t{\n\t\t\t\tif (this.points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tpts.push(new mxPoint(this.points[i].x / s, this.points[i].y / s));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.paintEdgeShape(c, pts);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Paints vertex shape\n\t\t\tthis.paintVertexShape(c, x, y, w, h);\n\t\t}\n\t}\n\t\n\tif (bg != null && c.state != null && c.state.transform != null)\n\t{\n\t\tbg.setAttribute('transform', c.state.transform);\n\t}\n\t\n\t// Draws highlight rectangle if no stroke was used\n\tif (c != null && this.outline && !strokeDrawn)\n\t{\n\t\tc.rect(x, y, w, h);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxShape.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tvar dash = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tdash = this.style['dashPattern'];\t\t\n\t}\n\n\tc.setAlpha(this.opacity / 100);\n\tc.setFillAlpha(this.fillOpacity / 100);\n\tc.setStrokeAlpha(this.strokeOpacity / 100);\n\n\t// Sets alpha, colors and gradients\n\tif (this.isShadow != null)\n\t{\n\t\tc.setShadow(this.isShadow);\n\t}\n\t\n\t// Dash pattern\n\tif (this.isDashed != null)\n\t{\n\t\tc.setDashed(this.isDashed, (this.style != null) ?\n\t\t\tmxUtils.getValue(this.style, mxConstants.STYLE_FIX_DASH, false) == 1 : false);\n\t}\n\n\tif (dash != null)\n\t{\n\t\tc.setDashPattern(dash);\n\t}\n\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar b = this.getGradientBounds(c, x, y, w, h);\n\t\tc.setGradient(this.fill, this.gradient, b.x, b.y, b.width, b.height, this.gradientDirection);\n\t}\n\telse\n\t{\n\t\tc.setFillColor(this.fill);\n\t}\n\n\tc.setStrokeColor(this.stroke);\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxShape.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\treturn new mxRectangle(x, y, w, h);\n};\n\n/**\n * Function: updateTransform\n * \n * Sets the scale and rotation on the given canvas.\n */\nmxShape.prototype.updateTransform = function(c, x, y, w, h)\n{\n\t// NOTE: Currently, scale is implemented in state and canvas. This will\n\t// move to canvas in a later version, so that the states are unscaled\n\t// and untranslated and do not need an update after zooming or panning.\n\tc.scale(this.scale);\n\tc.rotate(this.getShapeRotation(), this.flipH, this.flipV, x + w / 2, y + h / 2);\n};\n\n/**\n * Function: paintVertexShape\n * \n * Paints the vertex shape.\n */\nmxShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tthis.paintBackground(c, x, y, w, h);\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintForeground(c, x, y, w, h);\n\t}\n};\n\n/**\n * Function: paintBackground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintBackground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintForeground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintForeground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintEdgeShape\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintEdgeShape = function(c, pts) { };\n\n/**\n * Function: getArcSize\n * \n * Returns the arc size for the given dimension.\n */\nmxShape.prototype.getArcSize = function(w, h)\n{\n\tvar r = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\tr = Math.min(w * f, h * f);\n\t}\n\t\n\treturn r;\n};\n\n/**\n * Function: paintGlassEffect\n * \n * Paints the glass gradient effect.\n */\nmxShape.prototype.paintGlassEffect = function(c, x, y, w, h, arc)\n{\n\tvar sw = Math.ceil(this.strokewidth / 2);\n\tvar size = 0.4;\n\t\n\tc.setGradient('#ffffff', '#ffffff', x, y, w, h * 0.6, 'south', 0.9, 0.1);\n\tc.begin();\n\tarc += 2 * sw;\n\t\t\n\tif (this.isRounded)\n\t{\n\t\tc.moveTo(x - sw + arc, y - sw);\n\t\tc.quadTo(x - sw, y - sw, x - sw, y - sw + arc);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw + arc);\n\t\tc.quadTo(x + w + sw, y - sw, x + w + sw - arc, y - sw);\n\t}\n\telse\n\t{\n\t\tc.moveTo(x - sw, y - sw);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw);\n\t}\n\t\n\tc.close();\n\tc.fill();\n};\n\n/**\n * Function: addPoints\n * \n * Paints the given points with rounded corners.\n */\nmxShape.prototype.addPoints = function(c, pts, rounded, arcSize, close, exclude, initialMove)\n{\n\tif (pts != null && pts.length > 0)\n\t{\n\t\tinitialMove = (initialMove != null) ? initialMove : true;\n\t\tvar pe = pts[pts.length - 1];\n\t\t\n\t\t// Adds virtual waypoint in the center between start and end point\n\t\tif (close && rounded)\n\t\t{\n\t\t\tpts = pts.slice();\n\t\t\tvar p0 = pts[0];\n\t\t\tvar wp = new mxPoint(pe.x + (p0.x - pe.x) / 2, pe.y + (p0.y - pe.y) / 2);\n\t\t\tpts.splice(0, 0, wp);\n\t\t}\n\t\n\t\tvar pt = pts[0];\n\t\tvar i = 1;\n\t\n\t\t// Draws the line segments\n\t\tif (initialMove)\n\t\t{\n\t\t\tc.moveTo(pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pt.x, pt.y);\n\t\t}\n\t\t\n\t\twhile (i < ((close) ? pts.length : pts.length - 1))\n\t\t{\n\t\t\tvar tmp = pts[mxUtils.mod(i, pts.length)];\n\t\t\tvar dx = pt.x - tmp.x;\n\t\t\tvar dy = pt.y - tmp.y;\n\t\n\t\t\tif (rounded && (dx != 0 || dy != 0) && (exclude == null || mxUtils.indexOf(exclude, i - 1) < 0))\n\t\t\t{\n\t\t\t\t// Draws a line from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the last point\n\t\t\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tvar nx1 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny1 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x1 = tmp.x + nx1;\n\t\t\t\tvar y1 = tmp.y + ny1;\n\t\t\t\tc.lineTo(x1, y1);\n\t\n\t\t\t\t// Draws a curve from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the next point\n\t\t\t\tvar next = pts[mxUtils.mod(i + 1, pts.length)];\n\t\t\t\t\n\t\t\t\t// Uses next non-overlapping point\n\t\t\t\twhile (i < pts.length - 2 && Math.round(next.x - tmp.x) == 0 && Math.round(next.y - tmp.y) == 0)\n\t\t\t\t{\n\t\t\t\t\tnext = pts[mxUtils.mod(i + 2, pts.length)];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdx = next.x - tmp.x;\n\t\t\t\tdy = next.y - tmp.y;\n\t\n\t\t\t\tdist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\t\tvar nx2 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny2 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x2 = tmp.x + nx2;\n\t\t\t\tvar y2 = tmp.y + ny2;\n\t\n\t\t\t\tc.quadTo(tmp.x, tmp.y, x2, y2);\n\t\t\t\ttmp = new mxPoint(x2, y2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.lineTo(tmp.x, tmp.y);\n\t\t\t}\n\t\n\t\t\tpt = tmp;\n\t\t\ti++;\n\t\t}\n\t\n\t\tif (close)\n\t\t{\n\t\t\tc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pe.x, pe.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxShape.prototype.resetStyles = function()\n{\n\tthis.initStyles();\n\n\tthis.spacing = 0;\n\t\n\tdelete this.fill;\n\tdelete this.gradient;\n\tdelete this.gradientDirection;\n\tdelete this.stroke;\n\tdelete this.startSize;\n\tdelete this.endSize;\n\tdelete this.startArrow;\n\tdelete this.endArrow;\n\tdelete this.direction;\n\tdelete this.isShadow;\n\tdelete this.isDashed;\n\tdelete this.isRounded;\n\tdelete this.glass;\n};\n\n/**\n * Function: apply\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_FILLCOLOR> => fill\n * - <mxConstants.STYLE_GRADIENTCOLOR> => gradient\n * - <mxConstants.STYLE_GRADIENT_DIRECTION> => gradientDirection\n * - <mxConstants.STYLE_OPACITY> => opacity\n * - <mxConstants.STYLE_FILL_OPACITY> => fillOpacity\n * - <mxConstants.STYLE_STROKE_OPACITY> => strokeOpacity\n * - <mxConstants.STYLE_STROKECOLOR> => stroke\n * - <mxConstants.STYLE_STROKEWIDTH> => strokewidth\n * - <mxConstants.STYLE_SHADOW> => isShadow\n * - <mxConstants.STYLE_DASHED> => isDashed\n * - <mxConstants.STYLE_SPACING> => spacing\n * - <mxConstants.STYLE_STARTSIZE> => startSize\n * - <mxConstants.STYLE_ENDSIZE> => endSize\n * - <mxConstants.STYLE_ROUNDED> => isRounded\n * - <mxConstants.STYLE_STARTARROW> => startArrow\n * - <mxConstants.STYLE_ENDARROW> => endArrow\n * - <mxConstants.STYLE_ROTATION> => rotation\n * - <mxConstants.STYLE_DIRECTION> => direction\n * - <mxConstants.STYLE_GLASS> => glass\n *\n * This keeps a reference to the <style>. If you need to keep a reference to\n * the cell, you can override this method and store a local reference to\n * state.cell or the <mxCellState> itself. If <outline> should be true, make\n * sure to set it before calling this method.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxShape.prototype.apply = function(state)\n{\n\tthis.state = state;\n\tthis.style = state.style;\n\n\tif (this.style != null)\n\t{\n\t\tthis.fill = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, this.fill);\n\t\tthis.gradient = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENTCOLOR, this.gradient);\n\t\tthis.gradientDirection = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENT_DIRECTION, this.gradientDirection);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_OPACITY, this.opacity);\n\t\tthis.fillOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_FILL_OPACITY, this.fillOpacity);\n\t\tthis.strokeOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_STROKE_OPACITY, this.strokeOpacity);\n\t\tthis.stroke = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, this.stroke);\n\t\tthis.strokewidth = mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth);\n\t\tthis.spacing = mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing);\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, this.startSize);\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, this.endSize);\n\t\tthis.startArrow = mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, this.startArrow);\n\t\tthis.endArrow = mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, this.endArrow);\n\t\tthis.rotation = mxUtils.getValue(this.style, mxConstants.STYLE_ROTATION, this.rotation);\n\t\tthis.direction = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, this.direction);\n\t\tthis.flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\tthis.flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\t\n\t\t// Legacy support for stencilFlipH/V\n\t\tif (this.stencil != null)\n\t\t{\n\t\t\tthis.flipH = mxUtils.getValue(this.style, 'stencilFlipH', 0) == 1 || this.flipH;\n\t\t\tthis.flipV = mxUtils.getValue(this.style, 'stencilFlipV', 0) == 1 || this.flipV;\n\t\t}\n\t\t\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH || this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tvar tmp = this.flipH;\n\t\t\tthis.flipH = this.flipV;\n\t\t\tthis.flipV = tmp;\n\t\t}\n\n\t\tthis.isShadow = mxUtils.getValue(this.style, mxConstants.STYLE_SHADOW, this.isShadow) == 1;\n\t\tthis.isDashed = mxUtils.getValue(this.style, mxConstants.STYLE_DASHED, this.isDashed) == 1;\n\t\tthis.isRounded = mxUtils.getValue(this.style, mxConstants.STYLE_ROUNDED, this.isRounded) == 1;\n\t\tthis.glass = mxUtils.getValue(this.style, mxConstants.STYLE_GLASS, this.glass) == 1;\n\t\t\n\t\tif (this.fill == mxConstants.NONE)\n\t\t{\n\t\t\tthis.fill = null;\n\t\t}\n\n\t\tif (this.gradient == mxConstants.NONE)\n\t\t{\n\t\t\tthis.gradient = null;\n\t\t}\n\n\t\tif (this.stroke == mxConstants.NONE)\n\t\t{\n\t\t\tthis.stroke = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the cursor on the given shape.\n *\n * Parameters:\n *\n * cursor - The cursor to be used.\n */\nmxShape.prototype.setCursor = function(cursor)\n{\n\tif (cursor == null)\n\t{\n\t\tcursor = '';\n\t}\n\t\n\tthis.cursor = cursor;\n\n\tif (this.node != null)\n\t{\n\t\tthis.node.style.cursor = cursor;\n\t}\n};\n\n/**\n * Function: getCursor\n * \n * Returns the current cursor.\n */\nmxShape.prototype.getCursor = function()\n{\n\treturn this.cursor;\n};\n\n/**\n * Function: isRoundable\n * \n * Hook for subclassers.\n */\nmxShape.prototype.isRoundable = function()\n{\n\treturn false;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxShape.prototype.updateBoundingBox = function()\n{\n\t// Tries to get bounding box from SVG subsystem\n\t// LATER: Use getBoundingClientRect for fallback in VML\n\tif (this.useSvgBoundingBox && this.node != null && this.node.ownerSVGElement != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar b = this.node.getBBox();\n\t\n\t\t\tif (b.width > 0 && b.height > 0)\n\t\t\t{\n\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\n\t\t\t\t// Adds strokeWidth\n\t\t\t\tthis.boundingBox.grow(this.strokewidth * this.scale / 2);\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tcatch(e)\n\t\t{\n\t\t\t// fallback to code below\n\t\t}\n\t}\n\n\tif (this.bounds != null)\n\t{\n\t\tvar bbox = this.createBoundingBox();\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tthis.augmentBoundingBox(bbox);\n\t\t\tvar rot = this.getShapeRotation();\n\t\t\t\n\t\t\tif (rot != 0)\n\t\t\t{\n\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, rot);\n\t\t\t}\n\t\t}\n\n\t\tthis.boundingBox = bbox;\n\t}\n};\n\n/**\n * Function: createBoundingBox\n *\n * Returns a new rectangle that represents the bounding box of the bare shape\n * with no shadows or strokewidths.\n */\nmxShape.prototype.createBoundingBox = function()\n{\n\tvar bb = this.bounds.clone();\n\n\tif ((this.stencil != null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\tthis.direction == mxConstants.DIRECTION_SOUTH)) || this.isPaintBoundsInverted())\n\t{\n\t\tbb.rotate90();\n\t}\n\t\n\treturn bb;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxShape.prototype.augmentBoundingBox = function(bbox)\n{\n\tif (this.isShadow)\n\t{\n\t\tbbox.width += Math.ceil(mxConstants.SHADOW_OFFSET_X * this.scale);\n\t\tbbox.height += Math.ceil(mxConstants.SHADOW_OFFSET_Y * this.scale);\n\t}\n\t\n\t// Adds strokeWidth\n\tbbox.grow(this.strokewidth * this.scale / 2);\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns true if the bounds should be inverted.\n */\nmxShape.prototype.isPaintBoundsInverted = function()\n{\n\t// Stencil implements inversion via aspect\n\treturn this.stencil == null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation from the style.\n */\nmxShape.prototype.getRotation = function()\n{\n\treturn (this.rotation != null) ? this.rotation : 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label.\n */\nmxShape.prototype.getTextRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) != 1)\n\t{\n\t\trot += mxText.prototype.verticalTextRotation;\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns the actual rotation of the shape.\n */\nmxShape.prototype.getShapeRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (this.direction != null)\n\t{\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\trot += 270;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\trot += 180;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\trot += 90;\n\t\t}\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: createTransparentSvgRectangle\n * \n * Adds a transparent rectangle that catches all events.\n */\nmxShape.prototype.createTransparentSvgRectangle = function(x, y, w, h)\n{\n\tvar rect = document.createElementNS(mxConstants.NS_SVG, 'rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\trect.setAttribute('fill', 'none');\n\trect.setAttribute('stroke', 'none');\n\trect.setAttribute('pointer-events', 'all');\n\t\n\treturn rect;\n};\n\n/**\n * Function: setTransparentBackgroundImage\n * \n * Sets a transparent background CSS style to catch all events.\n * \n * Paints the line shape.\n */\nmxShape.prototype.setTransparentBackgroundImage = function(node)\n{\n\tnode.style.backgroundImage = 'url(\\'' + mxClient.imageBasePath + '/transparent.gif\\')';\n};\n\n/**\n * Function: releaseSvgGradients\n * \n * Paints the line shape.\n */\nmxShape.prototype.releaseSvgGradients = function(grads)\n{\n\tif (grads != null)\n\t{\n\t\tfor (var key in grads)\n\t\t{\n\t\t\tvar gradient = grads[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) - 1;\n\t\t\t\t\n\t\t\t\tif (gradient.mxRefCount == 0 && gradient.parentNode != null)\n\t\t\t\t{\n\t\t\t\t\tgradient.parentNode.removeChild(gradient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the shape by removing it from the DOM and releasing the DOM\n * node associated with the shape using <mxEvent.release>.\n */\nmxShape.prototype.destroy = function()\n{\n\tif (this.node != null)\n\t{\n\t\tmxEvent.release(this.node);\n\t\t\n\t\tif (this.node.parentNode != null)\n\t\t{\n\t\t\tthis.node.parentNode.removeChild(this.node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n\t\n\t// Decrements refCount and removes unused\n\tthis.releaseSvgGradients(this.oldGradients);\n\tthis.oldGradients = null;\n};\n\n__mxOutput.mxShape = typeof mxShape !== 'undefined' ? mxShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStencil\n *\n * Implements a generic shape which is based on a XML node as a description.\n * \n * shape:\n * \n * The outer element is *shape*, that has attributes:\n * \n * - \"name\", string, required. The stencil name that uniquely identifies the shape.\n * - \"w\" and \"h\" are optional decimal view bounds. This defines your co-ordinate\n * system for the graphics operations in the shape. The default is 100,100.\n * - \"aspect\", optional string. Either \"variable\", the default, or \"fixed\". Fixed\n * means always render the shape with the aspect ratio defined by the ratio w/h.\n * Variable causes the ratio to match that of the geometry of the current vertex.\n * - \"strokewidth\", optional string. Either an integer or the string \"inherit\".\n * \"inherit\" indicates that the strokeWidth of the cell is only changed on scaling,\n * not on resizing. Default is \"1\".\n * If numeric values are used, the strokeWidth of the cell is changed on both\n * scaling and resizing and the value defines the multiple that is applied to\n * the width.\n * \n * connections:\n * \n * If you want to define specific fixed connection points on the shape use the\n * *connections* element. Each *constraint* element within connections defines\n * a fixed connection point on the shape. Constraints have attributes:\n * \n * - \"perimeter\", required. 1 or 0. 0 sets the connection point where specified\n * by x,y. 1 Causes the position of the connection point to be extrapolated from\n * the center of the shape, through x,y to the point of intersection with the\n * perimeter of the shape.\n * - \"x\" and \"y\" are the position of the fixed point relative to the bounds of\n * the shape. They can be automatically adjusted if perimeter=1. So, (0,0) is top\n * left, (0.5,0.5) the center, (1,0.5) the center of the right hand edge of the\n * bounds, etc. Values may be less than 0 or greater than 1 to be positioned\n * outside of the shape.\n * - \"name\", optional string. A unique identifier for the port on the shape.\n * \n * background and foreground:\n * \n * The path of the graphics drawing is split into two elements, *foreground* and\n * *background*. The split is to define which part any shadow applied to the shape\n * is derived from (the background). This, generally, means the background is the\n * line tracing of the outside of the shape, but not always.\n * \n * Any stroke, fill or fillstroke of a background must be the first element of the\n * foreground element, they must not be used within *background*. If the background\n * is empty, this is not required.\n * \n * Because the background cannot have any fill or stroke, it can contain only one\n * *path*, *rect*, *roundrect* or *ellipse* element (or none). It can also not\n * include *image*, *text* or *include-shape*.\n * \n * Note that the state, styling and drawing in mxGraph stencils is very close in\n * design to that of HTML 5 canvas. Tutorials on this subject, if you're not\n * familiar with the topic, will give a good high-level introduction to the\n * concepts used.\n * \n * State:\n * \n * Rendering within the foreground and background elements has the concept of\n * state. There are two types of operations other than state save/load, styling\n * and drawing. The styling operations change the current state, so you can save\n * the current state with <save/> and pull the last saved state from the state\n * stack using <restore/>.\n * \n * Styling:\n * \n * The elements that change colors within the current state all take a hash\n * prefixed hex color code (\"#FFEA80\").\n * \n * - *strokecolor*, this sets the color that drawing paths will be rendered in\n * when a stroke or fillstroke command is issued.\n * - *fillcolor*, this sets the color that the inside of closed paths will be\n * rendered in when a fill or fillstroke command is issued.\n * - *fontcolor*, this sets the color that fonts are rendered in when text is drawn.\n * \n * *alpha* defines the degree of transparency used between 1.0 for fully opaque\n * and 0.0 for fully transparent.\n * \n * *fillalpha* defines the degree of fill transparency used between 1.0 for fully\n * opaque and 0.0 for fully transparent.\n * \n * *strokealpha* defines the degree of stroke transparency used between 1.0 for\n * fully opaque and 0.0 for fully transparent.\n * \n * *strokewidth* defines the integer thickness of drawing elements rendered by\n * stroking. Use fixed=\"1\" to apply the value as-is, without scaling.\n * \n * *dashed* is \"1\" for dashing enabled and \"0\" for disabled.\n * \n * When *dashed* is enabled the current dash pattern, defined by *dashpattern*,\n * is used on strokes. dashpattern is a sequence of space separated \"on, off\"\n * lengths that define what distance to paint the stroke for, then what distance\n * to paint nothing for, repeat... The default is \"3 3\". You could define a more\n * complex pattern with \"5 3 2 6\", for example. Generally, it makes sense to have\n * an even number of elements in the dashpattern, but that's not required.\n * \n * *linejoin*, *linecap* and *miterlimit* are best explained by the Mozilla page\n * on Canvas styling (about halfway down). The values are all the same except we\n * use \"flat\" for linecap, instead of Canvas' \"butt\".\n * \n * For font styling there are.\n * \n * - *fontsize*, an integer,\n * - *fontstyle*, an ORed bit pattern of bold (1), italic (2) and underline (4),\n * i.e bold underline is \"5\".\n * - *fontfamily*, is a string defining the typeface to be used.\n * \n * Drawing:\n * \n * Most drawing is contained within a *path* element. Again, the graphic\n * primitives are very similar to that of HTML 5 canvas.\n * \n * - *move* to attributes required decimals (x,y).\n * - *line* to attributes required decimals (x,y).\n * - *quad* to required decimals (x2,y2) via control point required decimals\n * (x1,y1).\n * - *curve* to required decimals (x3,y3), via control points required decimals\n * (x1,y1) and (x2,y2).\n * - *arc*, this doesn't follow the HTML Canvas signatures, instead it's a copy\n * of the SVG arc command. The SVG specification documentation gives the best\n * description of its behaviors. The attributes are named identically, they are\n * decimals and all required.\n * - *close* ends the current subpath and causes an automatic straight line to\n * be drawn from the current point to the initial point of the current subpath.\n * \n * Complex drawing:\n * \n * In addition to the graphics primitive operations there are non-primitive\n * operations. These provide an easy method to draw some basic shapes.\n * \n * - *rect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals\n * - *roundrect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals. Also\n * \"arcsize\" an optional decimal attribute defining how large, the corner curves\n * are.\n * - *ellipse*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals.\n * \n * Note that these 3 shapes and all paths must be followed by either a fill,\n * stroke, or fillstroke.\n * \n * Text:\n * \n * *text* elements have the following attributes.\n * \n * - \"str\", the text string to display, required.\n * - \"x\" and \"y\", the decimal location (x,y) of the text element, required.\n * - \"align\", the horizontal alignment of the text element, either \"left\",\n * \"center\" or \"right\". Optional, default is \"left\".\n * - \"valign\", the vertical alignment of the text element, either \"top\", \"middle\"\n * or \"bottom\". Optional, default is \"top\".\n * - \"localized\", 0 or 1, if 1 then the \"str\" actually contains a key to use to\n * fetch the value out of mxResources. Optional, default is\n * <mxStencil.defaultLocalized>.\n * - \"vertical\", 0 or 1, if 1 the label is rendered vertically (rotated by 90\n * degrees). Optional, default is 0.\n * - \"rotation\", angle in degrees (0 to 360). The angle to rotate the text by.\n * Optional, default is 0.\n * - \"align-shape\", 0 or 1, if 0 ignore the rotation of the shape when setting\n * the text rotation. Optional, default is 1.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the text element (ignored if the str attribute is not null).\n * \n * Images:\n * \n * *image* elements can either be external URLs, or data URIs, where supported\n * (not in IE 7-). Attributes are:\n * \n * - \"src\", required string. Either a data URI or URL.\n * - \"x\", \"y\", required decimals. The (x,y) position of the image.\n * - \"w\", \"h\", required decimals. The width and height of the image.\n * - \"flipH\" and \"flipV\", optional 0 or 1. Whether to flip the image along the\n * horizontal/vertical axis. Default is 0 for both.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the image source (ignored if the src attribute is not null).\n * \n * Sub-shapes:\n * \n * *include-shape* allow stencils to be rendered within the current stencil by\n * referencing the sub-stencil by name. Attributes are:\n * \n * - \"name\", required string. The unique shape name of the stencil.\n * - \"x\", \"y\", \"w\", \"h\", required decimals. The (x,y) position of the sub-shape\n * and its width and height.\n * \n * Constructor: mxStencil\n * \n * Constructs a new generic shape by setting <desc> to the given XML node and\n * invoking <parseDescription> and <parseConstraints>.\n * \n * Parameters:\n * \n * desc - XML node that contains the stencil description.\n */\nfunction mxStencil(desc)\n{\n\tthis.desc = desc;\n\tthis.parseDescription();\n\tthis.parseConstraints();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxStencil, mxShape);\n\n/**\n * Variable: defaultLocalized\n * \n * Static global variable that specifies the default value for the localized\n * attribute of the text element. Default is false.\n */\nmxStencil.defaultLocalized = false;\n\n/**\n * Function: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content and images. Default is false. Set this to true\n * if stencils can not contain user input.\n */\nmxStencil.allowEval = false;\n\n/**\n * Variable: desc\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.desc = null;\n\n/**\n * Variable: constraints\n * \n * Holds an array of <mxConnectionConstraints> as defined in the shape.\n */\nmxStencil.prototype.constraints = null;\n\n/**\n * Variable: aspect\n *\n * Holds the aspect of the shape. Default is 'auto'.\n */\nmxStencil.prototype.aspect = null;\n\n/**\n * Variable: w0\n *\n * Holds the width of the shape. Default is 100.\n */\nmxStencil.prototype.w0 = null;\n\n/**\n * Variable: h0\n *\n * Holds the height of the shape. Default is 100.\n */\nmxStencil.prototype.h0 = null;\n\n/**\n * Variable: bgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.bgNode = null;\n\n/**\n * Variable: fgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.fgNode = null;\n\n/**\n * Variable: strokewidth\n *\n * Holds the strokewidth direction from the description.\n */\nmxStencil.prototype.strokewidth = null;\n\n/**\n * Function: parseDescription\n *\n * Reads <w0>, <h0>, <aspect>, <bgNodes> and <fgNodes> from <desc>.\n */\nmxStencil.prototype.parseDescription = function()\n{\n\t// LATER: Preprocess nodes for faster painting\n\tthis.fgNode = this.desc.getElementsByTagName('foreground')[0];\n\tthis.bgNode = this.desc.getElementsByTagName('background')[0];\n\tthis.w0 = Number(this.desc.getAttribute('w') || 100);\n\tthis.h0 = Number(this.desc.getAttribute('h') || 100);\n\t\n\t// Possible values for aspect are: variable and fixed where\n\t// variable means fill the available space and fixed means\n\t// use w0 and h0 to compute the aspect.\n\tvar aspect = this.desc.getAttribute('aspect');\n\tthis.aspect = (aspect != null) ? aspect : 'variable';\n\t\n\t// Possible values for strokewidth are all numbers and \"inherit\"\n\t// where the inherit means take the value from the style (ie. the\n\t// user-defined stroke-width). Note that the strokewidth is scaled\n\t// by the minimum scaling that is used to draw the shape (sx, sy).\n\tvar sw = this.desc.getAttribute('strokewidth');\n\tthis.strokewidth = (sw != null) ? sw : '1';\n};\n\n/**\n * Function: parseConstraints\n *\n * Reads the constraints from <desc> into <constraints> using\n * <parseConstraint>.\n */\nmxStencil.prototype.parseConstraints = function()\n{\n\tvar conns = this.desc.getElementsByTagName('connections')[0];\n\t\n\tif (conns != null)\n\t{\n\t\tvar tmp = mxUtils.getChildNodes(conns);\n\t\t\n\t\tif (tmp != null && tmp.length > 0)\n\t\t{\n\t\t\tthis.constraints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t{\n\t\t\t\tthis.constraints.push(this.parseConstraint(tmp[i]));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: parseConstraint\n *\n * Parses the given XML node and returns its <mxConnectionConstraint>.\n */\nmxStencil.prototype.parseConstraint = function(node)\n{\n\tvar x = Number(node.getAttribute('x'));\n\tvar y = Number(node.getAttribute('y'));\n\tvar perimeter = node.getAttribute('perimeter') == '1';\n\tvar name = node.getAttribute('name');\n\t\n\treturn new mxConnectionConstraint(new mxPoint(x, y), perimeter, name);\n};\n\n/**\n * Function: evaluateTextAttribute\n * \n * Gets the given attribute as a text. The return value from <evaluateAttribute>\n * is used as a key to <mxResources.get> if the localized attribute in the text\n * node is 1 or if <defaultLocalized> is true.\n */\nmxStencil.prototype.evaluateTextAttribute = function(node, attribute, shape)\n{\n\tvar result = this.evaluateAttribute(node, attribute, shape);\n\tvar loc = node.getAttribute('localized');\n\t\n\tif ((mxStencil.defaultLocalized && loc == null) || loc == '1')\n\t{\n\t\tresult = mxResources.get(result);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: evaluateAttribute\n *\n * Gets the attribute for the given name from the given node. If the attribute\n * does not exist then the text content of the node is evaluated and if it is\n * a function it is invoked with <shape> as the only argument and the return\n * value is used as the attribute value to be returned.\n */\nmxStencil.prototype.evaluateAttribute = function(node, attribute, shape)\n{\n\tvar result = node.getAttribute(attribute);\n\t\n\tif (result == null)\n\t{\n\t\tvar text = mxUtils.getTextContent(node);\n\t\t\n\t\tif (text != null && mxStencil.allowEval)\n\t\t{\n\t\t\tvar funct = mxUtils.eval(text);\n\t\t\t\n\t\t\tif (typeof(funct) == 'function')\n\t\t\t{\n\t\t\t\tresult = funct(shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: drawShape\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawShape = function(canvas, shape, x, y, w, h)\n{\n\tvar stack = canvas.states.slice();\n\t\n\t// TODO: Internal structure (array of special structs?), relative and absolute\n\t// coordinates (eg. note shape, process vs star, actor etc.), text rendering\n\t// and non-proportional scaling, how to implement pluggable edge shapes\n\t// (start, segment, end blocks), pluggable markers, how to implement\n\t// swimlanes (title area) with this API, add icon, horizontal/vertical\n\t// label, indicator for all shapes, rotation\n\tvar direction = mxUtils.getValue(shape.style, mxConstants.STYLE_DIRECTION, null);\n\tvar aspect = this.computeAspect(shape.style, x, y, w, h, direction);\n\tvar minScale = Math.min(aspect.width, aspect.height);\n\tvar sw = (this.strokewidth == 'inherit') ?\n\t\t\tNumber(mxUtils.getNumber(shape.style, mxConstants.STYLE_STROKEWIDTH, 1)) :\n\t\t\tNumber(this.strokewidth) * minScale;\n\tcanvas.setStrokeWidth(sw);\n\n\t// Draws a transparent rectangle for catching events\n\tif (shape.style != null && mxUtils.getValue(shape.style, mxConstants.STYLE_POINTER_EVENTS, '0') == '1')\n\t{\n\t\tcanvas.setStrokeColor(mxConstants.NONE);\n\t\tcanvas.rect(x, y, w, h);\n\t\tcanvas.stroke();\n\t\tcanvas.setStrokeColor(shape.stroke);\n\t}\n\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.bgNode, aspect, false, true);\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.fgNode, aspect, true,\n\t\t!shape.outline || shape.style == null || mxUtils.getValue(\n\t\tshape.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0);\n\t\n\t// Restores stack for unequal count of save/restore calls\n\tif (canvas.states.length != stack.length)\n\t{\n\t\tcanvas.states = stack;\n\t}\n};\n\n/**\n * Function: drawChildren\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawChildren = function(canvas, shape, x, y, w, h, node, aspect, disableShadow, paint)\n{\n\tif (node != null && w > 0 && h > 0)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t{\n\t\t\t\tthis.drawNode(canvas, shape, tmp, aspect, disableShadow, paint);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t}\n};\n\n/**\n * Function: computeAspect\n *\n * Returns a rectangle that contains the offset in x and y and the horizontal\n * and vertical scale in width and height used to draw this shape inside the\n * given <mxRectangle>.\n * \n * Parameters:\n * \n * shape - <mxShape> to be drawn.\n * bounds - <mxRectangle> that should contain the stencil.\n * direction - Optional direction of the shape to be darwn.\n */\nmxStencil.prototype.computeAspect = function(shape, x, y, w, h, direction)\n{\n\tvar x0 = x;\n\tvar y0 = y;\n\tvar sx = w / this.w0;\n\tvar sy = h / this.h0;\n\t\n\tvar inverse = (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH);\n\n\tif (inverse)\n\t{\n\t\tsy = w / this.h0;\n\t\tsx = h / this.w0;\n\t\t\n\t\tvar delta = (w - h) / 2;\n\n\t\tx0 += delta;\n\t\ty0 -= delta;\n\t}\n\n\tif (this.aspect == 'fixed')\n\t{\n\t\tsy = Math.min(sx, sy);\n\t\tsx = sy;\n\t\t\n\t\t// Centers the shape inside the available space\n\t\tif (inverse)\n\t\t{\n\t\t\tx0 += (h - this.w0 * sx) / 2;\n\t\t\ty0 += (w - this.h0 * sy) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx0 += (w - this.w0 * sx) / 2;\n\t\t\ty0 += (h - this.h0 * sy) / 2;\n\t\t}\n\t}\n\n\treturn new mxRectangle(x0, y0, sx, sy);\n};\n\n/**\n * Function: drawNode\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawNode = function(canvas, shape, node, aspect, disableShadow, paint)\n{\n\tvar name = node.nodeName;\n\tvar x0 = aspect.x;\n\tvar y0 = aspect.y;\n\tvar sx = aspect.width;\n\tvar sy = aspect.height;\n\tvar minScale = Math.min(sx, sy);\n\t\n\tif (name == 'save')\n\t{\n\t\tcanvas.save();\n\t}\n\telse if (name == 'restore')\n\t{\n\t\tcanvas.restore();\n\t}\n\telse if (paint)\n\t{\n\t\tif (name == 'path')\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\t\n\t\t\tvar parseRegularly = true;\n\t\t\t\n\t\t\tif (node.getAttribute('rounded') == '1')\n\t\t\t{\n\t\t\t\tparseRegularly = false;\n\t\t\t\t\n\t\t\t\tvar arcSize = Number(node.getAttribute('arcSize'));\n\t\t\t\tvar pointCount = 0;\n\t\t\t\tvar segs = [];\n\t\t\t\t\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childName = childNode.nodeName;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (childName == 'move' || childName == 'line')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (childName == 'move' || segs.length == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsegs.push([]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsegs[segs.length - 1].push(new mxPoint(x0 + Number(childNode.getAttribute('x')) * sx,\n\t\t\t\t\t\t\t\ty0 + Number(childNode.getAttribute('y')) * sy));\n\t\t\t\t\t\t\tpointCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//We only support move and line for rounded corners\n\t\t\t\t\t\t\tparseRegularly = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\n\t\t\t\tif (!parseRegularly && pointCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < segs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar close = false, ps = segs[i][0], pe = segs[i][segs[i].length - 1];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (ps.x == pe.x && ps.y == pe.y) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsegs[i].pop();\n\t\t\t\t\t\t\tclose = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.addPoints(canvas, segs[i], true, arcSize, close);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparseRegularly = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (parseRegularly)\n\t\t\t{\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.drawNode(canvas, shape, childNode, aspect, disableShadow, paint);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (name == 'close')\n\t\t{\n\t\t\tcanvas.close();\n\t\t}\n\t\telse if (name == 'move')\n\t\t{\n\t\t\tcanvas.moveTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'line')\n\t\t{\n\t\t\tcanvas.lineTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'quad')\n\t\t{\n\t\t\tcanvas.quadTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy);\n\t\t}\n\t\telse if (name == 'curve')\n\t\t{\n\t\t\tcanvas.curveTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x3')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y3')) * sy);\n\t\t}\n\t\telse if (name == 'arc')\n\t\t{\n\t\t\tcanvas.arcTo(Number(node.getAttribute('rx')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('ry')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('x-axis-rotation')),\n\t\t\t\t\tNumber(node.getAttribute('large-arc-flag')),\n\t\t\t\t\tNumber(node.getAttribute('sweep-flag')),\n\t\t\t\t\tx0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'rect')\n\t\t{\n\t\t\tcanvas.rect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'roundrect')\n\t\t{\n\t\t\tvar arcsize = Number(node.getAttribute('arcsize'));\n\t\n\t\t\tif (arcsize == 0)\n\t\t\t{\n\t\t\t\tarcsize = mxConstants.RECTANGLE_ROUNDING_FACTOR * 100;\n\t\t\t}\n\t\t\t\n\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\tvar factor = Number(arcsize) / 100;\n\t\t\tvar r = Math.min(w * factor, h * factor);\n\t\t\t\n\t\t\tcanvas.roundrect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tw, h, r, r);\n\t\t}\n\t\telse if (name == 'ellipse')\n\t\t{\n\t\t\tcanvas.ellipse(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'image')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar src = this.evaluateAttribute(node, 'src', shape);\n\t\t\t\t\n\t\t\t\tcanvas.image(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy,\n\t\t\t\t\tsrc, false, node.getAttribute('flipH') == '1',\n\t\t\t\t\tnode.getAttribute('flipV') == '1');\n\t\t\t}\n\t\t}\n\t\telse if (name == 'text')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar str = this.evaluateTextAttribute(node, 'str', shape);\n\t\t\t\tvar rotation = node.getAttribute('vertical') == '1' ? -90 : 0;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('align-shape') == '0')\n\t\t\t\t{\n\t\t\t\t\tvar dr = shape.rotation;\n\t\t\n\t\t\t\t\t// Depends on flipping\n\t\t\t\t\tvar flipH = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (flipH && flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t\telse if (flipH || flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation += dr;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\trotation -= node.getAttribute('rotation');\n\t\t\n\t\t\t\tcanvas.text(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\t\t0, 0, str, node.getAttribute('align') || 'left',\n\t\t\t\t\t\tnode.getAttribute('valign') || 'top', false, '',\n\t\t\t\t\t\tnull, false, rotation);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'include-shape')\n\t\t{\n\t\t\tvar stencil = mxStencilRegistry.getStencil(node.getAttribute('name'));\n\t\t\t\n\t\t\tif (stencil != null)\n\t\t\t{\n\t\t\t\tvar x = x0 + Number(node.getAttribute('x')) * sx;\n\t\t\t\tvar y = y0 + Number(node.getAttribute('y')) * sy;\n\t\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\t\t\n\t\t\t\tstencil.drawShape(canvas, shape, x, y, w, h);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'fillstroke')\n\t\t{\n\t\t\tcanvas.fillAndStroke();\n\t\t}\n\t\telse if (name == 'fill')\n\t\t{\n\t\t\tcanvas.fill();\n\t\t}\n\t\telse if (name == 'stroke')\n\t\t{\n\t\t\tcanvas.stroke();\n\t\t}\n\t\telse if (name == 'strokewidth')\n\t\t{\n\t\t\tvar s = (node.getAttribute('fixed') == '1') ? 1 : minScale;\n\t\t\tcanvas.setStrokeWidth(Number(node.getAttribute('width')) * s);\n\t\t}\n\t\telse if (name == 'dashed')\n\t\t{\n\t\t\tcanvas.setDashed(node.getAttribute('dashed') == '1');\n\t\t}\n\t\telse if (name == 'dashpattern')\n\t\t{\n\t\t\tvar value = node.getAttribute('pattern');\n\t\t\t\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\tvar tmp = value.split(' ');\n\t\t\t\tvar pat = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (tmp[i].length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tpat.push(Number(tmp[i]) * minScale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = pat.join(' ');\n\t\t\t\tcanvas.setDashPattern(value);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'strokecolor')\n\t\t{\n\t\t\tcanvas.setStrokeColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'linecap')\n\t\t{\n\t\t\tcanvas.setLineCap(node.getAttribute('cap'));\n\t\t}\n\t\telse if (name == 'linejoin')\n\t\t{\n\t\t\tcanvas.setLineJoin(node.getAttribute('join'));\n\t\t}\n\t\telse if (name == 'miterlimit')\n\t\t{\n\t\t\tcanvas.setMiterLimit(Number(node.getAttribute('limit')));\n\t\t}\n\t\telse if (name == 'fillcolor')\n\t\t{\n\t\t\tcanvas.setFillColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'alpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fillalpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'strokealpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fontcolor')\n\t\t{\n\t\t\tcanvas.setFontColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'fontstyle')\n\t\t{\n\t\t\tcanvas.setFontStyle(node.getAttribute('style'));\n\t\t}\n\t\telse if (name == 'fontfamily')\n\t\t{\n\t\t\tcanvas.setFontFamily(node.getAttribute('family'));\n\t\t}\n\t\telse if (name == 'fontsize')\n\t\t{\n\t\t\tcanvas.setFontSize(Number(node.getAttribute('size')) * minScale);\n\t\t}\n\t\t\n\t\tif (disableShadow && (name == 'fillstroke' || name == 'fill' || name == 'stroke'))\n\t\t{\n\t\t\tdisableShadow = false;\n\t\t\tcanvas.setShadow(false);\n\t\t}\n\t}\n};\n\n__mxOutput.mxStencil = typeof mxStencil !== 'undefined' ? mxStencil : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n * \n * Code to add stencils.\n * \n * (code)\n * var req = mxUtils.load('test/stencils.xml');\n * var root = req.getDocumentElement();\n * var shape = root.firstChild;\n * \n * while (shape != null)\n * {\n * \t if (shape.nodeType == mxConstants.NODETYPE_ELEMENT)\n *   {\n *     mxStencilRegistry.addStencil(shape.getAttribute('name'), new mxStencil(shape));\n *   }\n *   \n *   shape = shape.nextSibling;\n * }\n * (end)\n */\nvar mxStencilRegistry =\n{\n\t/**\n\t * Class: mxStencilRegistry\n\t * \n\t * A singleton class that provides a registry for stencils and the methods\n\t * for painting those stencils onto a canvas or into a DOM.\n\t */\n\tstencils: {},\n\t\n\t/**\n\t * Function: addStencil\n\t * \n\t * Adds the given <mxStencil>.\n\t */\n\taddStencil: function(name, stencil)\n\t{\n\t\tmxStencilRegistry.stencils[name] = stencil;\n\t},\n\t\n\t/**\n\t * Function: getStencil\n\t * \n\t * Returns the <mxStencil> for the given name.\n\t */\n\tgetStencil: function(name)\n\t{\n\t\treturn mxStencilRegistry.stencils[name];\n\t}\n\n};\n\n__mxOutput.mxStencilRegistry = typeof mxStencilRegistry !== 'undefined' ? mxStencilRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxMarker =\n{\n\t/**\n\t * Class: mxMarker\n\t * \n\t * A static class that implements all markers for VML and SVG using a\n\t * registry. NOTE: The signatures in this class will change.\n\t * \n\t * Variable: markers\n\t * \n\t * Maps from markers names to functions to paint the markers.\n\t */\n\tmarkers: [],\n\t\n\t/**\n\t * Function: addMarker\n\t * \n\t * Adds a factory method that updates a given endpoint and returns a\n\t * function to paint the marker onto the given canvas.\n\t */\n\taddMarker: function(type, funct)\n\t{\n\t\tmxMarker.markers[type] = funct;\n\t},\n\t\n\t/**\n\t * Function: createMarker\n\t * \n\t * Returns a function to paint the given marker.\n\t */\n\tcreateMarker: function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar funct = mxMarker.markers[type];\n\t\t\n\t\treturn (funct != null) ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) : null;\n\t}\n\n};\n\n/**\n * Adds the classic and block marker factory method.\n */\n(function()\n{\n\tfunction createArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tvar f = (type != mxConstants.ARROW_CLASSIC && type != mxConstants.ARROW_CLASSIC_THIN) ? 1 : 3 / 4;\n\t\t\tpe.x += -unitX * f - endOffsetX;\n\t\t\tpe.y += -unitY * f - endOffsetY;\n\t\t\t\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\n\t\t\t\tif (type == mxConstants.ARROW_CLASSIC || type == mxConstants.ARROW_CLASSIC_THIN)\n\t\t\t\t{\n\t\t\t\t\tcanvas.lineTo(pt.x - unitX * 3 / 4, pt.y - unitY * 3 / 4);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.close();\n\t\n\t\t\t\tif (filled)\n\t\t\t\t{\n\t\t\t\t\tcanvas.fillAndStroke();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.stroke();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('classic', createArrow(2));\n\tmxMarker.addMarker('classicThin', createArrow(3));\n\tmxMarker.addMarker('block', createArrow(2));\n\tmxMarker.addMarker('blockThin', createArrow(3));\n\t\n\tfunction createOpenArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\t\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tpe.x += -endOffsetX * 2;\n\t\t\tpe.y += -endOffsetY * 2;\n\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\tcanvas.lineTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.stroke();\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('open', createOpenArrow(2));\n\tmxMarker.addMarker('openThin', createOpenArrow(3));\n\t\n\tmxMarker.addMarker('oval', function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar a = size / 2;\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpe.x -= unitX * a;\n\t\tpe.y -= unitY * a;\n\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.ellipse(pt.x - a, pt.y - a, size, size);\n\t\t\t\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction diamond(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t// 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n\t\t// only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n\t\t// Note these values and the tk variable below are dependent, update\n\t\t// both together (saves trig hard coding it).\n\t\tvar swFactor = (type == mxConstants.ARROW_DIAMOND) ?  0.7071 : 0.9862;\n\t\tvar endOffsetX = unitX * sw * swFactor;\n\t\tvar endOffsetY = unitY * sw * swFactor;\n\t\t\n\t\tunitX = unitX * (size + sw);\n\t\tunitY = unitY * (size + sw);\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpt.x -= endOffsetX;\n\t\tpt.y -= endOffsetY;\n\t\t\n\t\tpe.x += -unitX - endOffsetX;\n\t\tpe.y += -unitY - endOffsetY;\n\t\t\n\t\t// thickness factor for diamond\n\t\tvar tk = ((type == mxConstants.ARROW_DIAMOND) ?  2 : 3.4);\n\t\t\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n\t\t\tcanvas.lineTo(pt.x - unitX, pt.y - unitY);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n\t\t\tcanvas.close();\n\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t};\n\n\tmxMarker.addMarker('diamond', diamond);\n\tmxMarker.addMarker('diamondThin', diamond);\n})();\n\n__mxOutput.mxMarker = typeof mxMarker !== 'undefined' ? mxMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxActor\n *\n * Extends <mxShape> to implement an actor shape. If a custom shape with one\n * filled area is needed, then this shape's <redrawPath> should be overridden.\n * \n * Example:\n * \n * (code)\n * function SampleShape() { }\n * \n * SampleShape.prototype = new mxActor();\n * SampleShape.prototype.constructor = vsAseShape;\n * \n * mxCellRenderer.registerShape('sample', SampleShape);\n * SampleShape.prototype.redrawPath = function(path, x, y, w, h)\n * {\n *   path.moveTo(0, 0);\n *   path.lineTo(w, h);\n *   // ...\n *   path.close();\n * }\n * (end)\n * \n * This shape is registered under <mxConstants.SHAPE_ACTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxActor\n *\n * Constructs a new actor shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxActor(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxActor, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxActor.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxActor.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar width = w/3;\n\tc.moveTo(0, h);\n\tc.curveTo(0, 3 * h / 5, 0, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w / 2 - width, 2 * h / 5, w / 2 - width, 0, w / 2, 0);\n\tc.curveTo(w / 2 + width, 0, w / 2 + width, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w, 2 * h / 5, w, 3 * h / 5, w, h);\n\tc.close();\n};\n\n__mxOutput.mxActor = typeof mxActor !== 'undefined' ? mxActor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCloud\n *\n * Extends <mxActor> to implement a cloud shape.\n * \n * This shape is registered under <mxConstants.SHAPE_CLOUD> in\n * <mxCellRenderer>.\n * \n * Constructor: mxCloud\n *\n * Constructs a new cloud shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCloud(bounds, fill, stroke, strokewidth)\n{\n\tmxActor.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxCloud, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCloud.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tc.moveTo(0.25 * w, 0.25 * h);\n\tc.curveTo(0.05 * w, 0.25 * h, 0, 0.5 * h, 0.16 * w, 0.55 * h);\n\tc.curveTo(0, 0.66 * h, 0.18 * w, 0.9 * h, 0.31 * w, 0.8 * h);\n\tc.curveTo(0.4 * w, h, 0.7 * w, h, 0.8 * w, 0.8 * h);\n\tc.curveTo(w, 0.8 * h, w, 0.6 * h, 0.875 * w, 0.5 * h);\n\tc.curveTo(w, 0.3 * h, 0.8 * w, 0.1 * h, 0.625 * w, 0.2 * h);\n\tc.curveTo(0.5 * w, 0.05 * h, 0.3 * w, 0.05 * h, 0.25 * w, 0.25 * h);\n\tc.close();\n};\n\n__mxOutput.mxCloud = typeof mxCloud !== 'undefined' ? mxCloud : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangleShape\n *\n * Extends <mxShape> to implement a rectangle shape.\n * This shape is registered under <mxConstants.SHAPE_RECTANGLE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRectangleShape\n *\n * Constructs a new rectangle shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRectangleShape(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRectangleShape, mxShape);\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient.\n */\nmxRectangleShape.prototype.isHtmlAllowed = function()\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\t\t\n\t}\n\t\n\treturn !this.isRounded && !this.glass && this.rotation == 0 && (events ||\n\t\t(this.fill != null && this.fill != mxConstants.NONE));\n};\n\n/**\n * Function: paintBackground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (events || (this.fill != null && this.fill != mxConstants.NONE) ||\n\t\t(this.stroke != null && this.stroke != mxConstants.NONE))\n\t{\n\t\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t\t{\n\t\t\tc.pointerEvents = false;\n\t\t}\n\t\t\n\t\tif (this.isRounded)\n\t\t{\n\t\t\tvar r = 0;\n\t\t\t\n\t\t\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t\t\t{\n\t\t\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\t\t\tr = Math.min(w * f, h * f);\n\t\t\t}\n\t\t\t\n\t\t\tc.roundrect(x, y, w, h, r, r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.rect(x, y, w, h);\n\t\t}\n\t\t\t\n\t\tc.fillAndStroke();\n\t}\n};\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRectangleShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (this.glass && !this.outline && this.fill != null && this.fill != mxConstants.NONE)\n\t{\n\t\tthis.paintGlassEffect(c, x, y, w, h, this.getArcSize(w + this.strokewidth, h + this.strokewidth));\n\t}\n};\n\n__mxOutput.mxRectangleShape = typeof mxRectangleShape !== 'undefined' ? mxRectangleShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEllipse\n *\n * Extends <mxShape> to implement an ellipse shape.\n * This shape is registered under <mxConstants.SHAPE_ELLIPSE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxEllipse\n *\n * Constructs a new ellipse shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxEllipse, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Paints the ellipse shape.\n */\nmxEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxEllipse = typeof mxEllipse !== 'undefined' ? mxEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDoubleEllipse\n *\n * Extends <mxShape> to implement a double ellipse shape. This shape is\n * registered under <mxConstants.SHAPE_DOUBLE_ELLIPSE> in <mxCellRenderer>.\n * Use the following override to only fill the inner ellipse in this shape:\n * \n * (code)\n * mxDoubleEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n * {\n *   c.ellipse(x, y, w, h);\n *   c.stroke();\n *   \n *   var inset = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n *   x += inset;\n *   y += inset;\n *   w -= 2 * inset;\n *   h -= 2 * inset;\n *   \n *   if (w > 0 && h > 0)\n *   {\n *     c.ellipse(x, y, w, h);\n *   }\n *   \n *   c.fillAndStroke();\n * };\n * (end)\n * \n * Constructor: mxDoubleEllipse\n *\n * Constructs a new ellipse shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxDoubleEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxDoubleEllipse, mxShape);\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 10.\n */\nmxDoubleEllipse.prototype.vmlScale = 10;\n\n/**\n * Function: paintBackground\n * \n * Paints the background.\n */\nmxDoubleEllipse.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: paintForeground\n * \n * Paints the foreground.\n */\nmxDoubleEllipse.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (!this.outline)\n\t{\n\t\tvar margin = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n\t\tx += margin;\n\t\ty += margin;\n\t\tw -= 2 * margin;\n\t\th -= 2 * margin;\n\t\t\n\t\t// FIXME: Rounding issues in IE8 standards mode (not in 1.x)\n\t\tif (w > 0 && h > 0)\n\t\t{\n\t\t\tc.ellipse(x, y, w, h);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds for the label.\n */\nmxDoubleEllipse.prototype.getLabelBounds = function(rect)\n{\n\tvar margin = (mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth,\n\t\t\tMath.min(rect.width / 5 / this.scale, rect.height / 5 / this.scale)))) * this.scale;\n\n\treturn new mxRectangle(rect.x + margin, rect.y + margin, rect.width - 2 * margin, rect.height - 2 * margin);\n};\n\n__mxOutput.mxDoubleEllipse = typeof mxDoubleEllipse !== 'undefined' ? mxDoubleEllipse : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRhombus\n *\n * Extends <mxShape> to implement a rhombus (aka diamond) shape.\n * This shape is registered under <mxConstants.SHAPE_RHOMBUS>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRhombus\n *\n * Constructs a new rhombus shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRhombus(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRhombus, mxShape);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRhombus.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic painting implementation.\n */\nmxRhombus.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar hw = w / 2;\n\tvar hh = h / 2;\n\t\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, [new mxPoint(x + hw, y), new mxPoint(x + w, y + hh), new mxPoint(x + hw, y + h),\n\t     new mxPoint(x, y + hh)], this.isRounded, arcSize, true);\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxRhombus = typeof mxRhombus !== 'undefined' ? mxRhombus : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPolyline\n *\n * Extends <mxShape> to implement a polyline (a line with multiple points).\n * This shape is registered under <mxConstants.SHAPE_POLYLINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxPolyline\n *\n * Constructs a new polyline shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxPolyline(points, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxPolyline, mxShape);\n\n/**\n * Function: getRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns false.\n */\nmxPolyline.prototype.isPaintBoundsInverted = function()\n{\n\treturn false;\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintEdgeShape = function(c, pts)\n{\n\tvar prev = c.pointerEventsValue;\n\tc.pointerEventsValue = 'stroke';\n\t\n\tif (this.style == null || this.style[mxConstants.STYLE_CURVED] != 1)\n\t{\n\t\tthis.paintLine(c, pts, this.isRounded);\n\t}\n\telse\n\t{\n\t\tthis.paintCurvedLine(c, pts);\n\t}\n\t\n\tc.pointerEventsValue = prev;\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintLine = function(c, pts, rounded)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, pts, rounded, arcSize, false);\n\tc.stroke();\n};\n\n/**\n * Function: paintCurvedLine\n * \n * Paints a curved line.\n */\nmxPolyline.prototype.paintCurvedLine = function(c, pts)\n{\n\tc.begin();\n\t\n\tvar pt = pts[0];\n\tvar n = pts.length;\n\t\n\tc.moveTo(pt.x, pt.y);\n\t\n\tfor (var i = 1; i < n - 2; i++)\n\t{\n\t\tvar p0 = pts[i];\n\t\tvar p1 = pts[i + 1];\n\t\tvar ix = (p0.x + p1.x) / 2;\n\t\tvar iy = (p0.y + p1.y) / 2;\n\t\t\n\t\tc.quadTo(p0.x, p0.y, ix, iy);\n\t}\n\t\n\tvar p0 = pts[n - 2];\n\tvar p1 = pts[n - 1];\n\t\n\tc.quadTo(p0.x, p0.y, p1.x, p1.y);\n\tc.stroke();\n};\n\n__mxOutput.mxPolyline = typeof mxPolyline !== 'undefined' ? mxPolyline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrow\n *\n * Extends <mxShape> to implement an arrow shape. (The shape\n * is used to represent edges, not vertices.)\n * This shape is registered under <mxConstants.SHAPE_ARROW>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrow\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrow(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.spacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.endSize = (endSize != null) ? endSize : mxConstants.ARROW_SIZE;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrow, mxShape);\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrow.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = Math.max(this.arrowWidth, this.endSize);\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrow.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar spacing =  mxConstants.ARROW_SPACING;\n\tvar width = mxConstants.ARROW_WIDTH;\n\tvar arrow = mxConstants.ARROW_SIZE;\n\n\t// Base vector (between end points)\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\tvar dx = pe.x - p0.x;\n\tvar dy = pe.y - p0.y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\tvar length = dist - 2 * spacing - arrow;\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar ny = dy / dist;\n\tvar basex = length * nx;\n\tvar basey = length * ny;\n\tvar floorx = width * ny/3;\n\tvar floory = -width * nx/3;\n\t\n\t// Computes points\n\tvar p0x = p0.x - floorx / 2 + spacing * nx;\n\tvar p0y = p0.y - floory / 2 + spacing * ny;\n\tvar p1x = p0x + floorx;\n\tvar p1y = p0y + floory;\n\tvar p2x = p1x + basex;\n\tvar p2y = p1y + basey;\n\tvar p3x = p2x + floorx;\n\tvar p3y = p2y + floory;\n\t// p4 not necessary\n\tvar p5x = p3x - 3 * floorx;\n\tvar p5y = p3y - 3 * floory;\n\t\n\tc.begin();\n\tc.moveTo(p0x, p0y);\n\tc.lineTo(p1x, p1y);\n\tc.lineTo(p2x, p2y);\n\tc.lineTo(p3x, p3y);\n\tc.lineTo(pe.x - spacing * nx, pe.y - spacing * ny);\n\tc.lineTo(p5x, p5y);\n\tc.lineTo(p5x + floorx, p5y + floory);\n\tc.close();\n\n\tc.fillAndStroke();\n};\n\n__mxOutput.mxArrow = typeof mxArrow !== 'undefined' ? mxArrow : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrowConnector\n *\n * Extends <mxShape> to implement an new rounded arrow shape with support for\n * waypoints and double arrows. (The shape is used to represent edges, not\n * vertices.) This shape is registered under <mxConstants.SHAPE_ARROW_CONNECTOR>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrowConnector\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrowConnector(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.arrowSpacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.startSize = mxConstants.ARROW_SIZE / 5;\n\tthis.endSize = mxConstants.ARROW_SIZE / 5;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrowConnector, mxShape);\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxArrowConnector.prototype.useSvgBoundingBox = true;\n\n/**\n * Function: isRoundable\n * \n * Hook for subclassers.\n */\nmxArrowConnector.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Variable: resetStyles\n * \n * Overrides mxShape to reset spacing.\n */\nmxArrowConnector.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.arrowSpacing = mxConstants.ARROW_SPACING;\n};\n\n/**\n * Overrides apply to get smooth transition from default start- and endsize.\n */\nmxArrowConnector.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\n\tif (this.style != null)\n\t{\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t}\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrowConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = this.getEdgeWidth();\n\t\n\tif (this.isMarkerStart())\n\t{\n\t\tw = Math.max(w, this.getStartArrowWidth());\n\t}\n\t\n\tif (this.isMarkerEnd())\n\t{\n\t\tw = Math.max(w, this.getEndArrowWidth());\n\t}\n\t\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar strokeWidth = this.strokewidth;\n\t\n\tif (this.outline)\n\t{\n\t\tstrokeWidth = Math.max(1, mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth));\n\t}\n\t\n\tvar startWidth = this.getStartArrowWidth() + strokeWidth;\n\tvar endWidth = this.getEndArrowWidth() + strokeWidth;\n\tvar edgeWidth = this.outline ? this.getEdgeWidth() + strokeWidth : this.getEdgeWidth();\n\tvar openEnded = this.isOpenEnded();\n\tvar markerStart = this.isMarkerStart();\n\tvar markerEnd = this.isMarkerEnd();\n\tvar spacing = (openEnded) ? 0 : this.arrowSpacing + strokeWidth / 2;\n\tvar startSize = this.startSize + strokeWidth;\n\tvar endSize = this.endSize + strokeWidth;\n\tvar isRounded = this.isArrowRounded();\n\t\n\t// Base vector (between first points)\n\tvar pe = pts[pts.length - 1];\n\n\t// Finds first non-overlapping point\n\tvar i0 = 1;\n\t\n\twhile (i0 < pts.length - 1 && pts[i0].x == pts[0].x && pts[i0].y == pts[0].y)\n\t{\n\t\ti0++;\n\t}\n\t\n\tvar dx = pts[i0].x - pts[0].x;\n\tvar dy = pts[i0].y - pts[0].y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\n\tif (dist == 0)\n\t{\n\t\treturn;\n\t}\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar nx2, nx1 = nx;\n\tvar ny = dy / dist;\n\tvar ny2, ny1 = ny;\n\tvar orthx = edgeWidth * ny;\n\tvar orthy = -edgeWidth * nx;\n\t\n\t// Stores the inbound function calls in reverse order in fns\n\tvar fns = [];\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('round');\n\t}\n\telse if (pts.length > 2)\n\t{\n\t\t// Only mitre if there are waypoints\n\t\tc.setMiterLimit(1.42);\n\t}\n\n\tc.begin();\n\n\tvar startNx = nx;\n\tvar startNy = ny;\n\n\tif (markerStart && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n\t}\n\telse\n\t{\n\t\tvar outStartX = pts[0].x + orthx / 2 + spacing * nx;\n\t\tvar outStartY = pts[0].y + orthy / 2 + spacing * ny;\n\t\tvar inEndX = pts[0].x - orthx / 2 + spacing * nx;\n\t\tvar inEndY = pts[0].y - orthy / 2 + spacing * ny;\n\t\t\n\t\tif (openEnded)\n\t\t{\n\t\t\tc.moveTo(outStartX, outStartY);\n\t\t\t\n\t\t\tfns.push(function()\n\t\t\t{\n\t\t\t\tc.lineTo(inEndX, inEndY);\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inEndX, inEndY);\n\t\t\tc.lineTo(outStartX, outStartY);\n\t\t}\n\t}\n\t\n\tvar dx1 = 0;\n\tvar dy1 = 0;\n\tvar dist1 = 0;\n\n\tfor (var i = 0; i < pts.length - 2; i++)\n\t{\n\t\t// Work out in which direction the line is bending\n\t\tvar pos = mxUtils.relativeCcw(pts[i].x, pts[i].y, pts[i+1].x, pts[i+1].y, pts[i+2].x, pts[i+2].y);\n\n\t\tdx1 = pts[i+2].x - pts[i+1].x;\n\t\tdy1 = pts[i+2].y - pts[i+1].y;\n\n\t\tdist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n\t\t\n\t\tif (dist1 != 0)\n\t\t{\n\t\t\tnx1 = dx1 / dist1;\n\t\t\tny1 = dy1 / dist1;\n\t\t\t\n\t\t\tvar tmp1 = nx * nx1 + ny * ny1;\n\t\t\tvar tmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n\t\t\t\n\t\t\t// Work out the normal orthogonal to the line through the control point and the edge sides intersection\n\t\t\tnx2 = (nx + nx1);\n\t\t\tny2 = (ny + ny1);\n\t\n\t\t\tvar dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n\t\t\t\n\t\t\tif (dist2 != 0)\n\t\t\t{\n\t\t\t\tnx2 = nx2 / dist2;\n\t\t\t\tny2 = ny2 / dist2;\n\t\t\t\t\n\t\t\t\t// Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n\t\t\t\tvar strokeWidthFactor = Math.max(tmp, Math.min(this.strokewidth / 200 + 0.04, 0.35));\n\t\t\t\tvar angleFactor = (pos != 0 && isRounded) ? Math.max(0.1, strokeWidthFactor) : Math.max(tmp, 0.06);\n\n\t\t\t\tvar outX = pts[i+1].x + ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar outY = pts[i+1].y - nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inX = pts[i+1].x - ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inY = pts[i+1].y + nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\t\n\t\t\t\tif (pos == 0 || !isRounded)\n\t\t\t\t{\n\t\t\t\t\t// If the two segments are aligned, or if we're not drawing curved sections between segments\n\t\t\t\t\t// just draw straight to the intersection point\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse if (pos == -1)\n\t\t\t\t{\n\t\t\t\t\tvar c1x = inX + ny * edgeWidth;\n\t\t\t\t\tvar c1y = inY - nx * edgeWidth;\n\t\t\t\t\tvar c2x = inX + ny1 * edgeWidth;\n\t\t\t\t\tvar c2y = inY - nx1 * edgeWidth;\n\t\t\t\t\tc.lineTo(c1x, c1y);\n\t\t\t\t\tc.quadTo(outX, outY, c2x, c2y);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c1x = outX - ny * edgeWidth;\n\t\t\t\t\t\tvar c1y = outY + nx * edgeWidth;\n\t\t\t\t\t\tvar c2x = outX - ny1 * edgeWidth;\n\t\t\t\t\t\tvar c2y = outY + nx1 * edgeWidth;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.quadTo(x, y, c1x, c1y);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(c2x, c2y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnx = nx1;\n\t\t\t\tny = ny1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\torthx = edgeWidth * ny1;\n\torthy = - edgeWidth * nx1;\n\n\tif (markerEnd && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n\t}\n\telse\n\t{\n\t\tc.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n\t\t\n\t\tvar inStartX = pe.x - spacing * nx1 - orthx / 2;\n\t\tvar inStartY = pe.y - spacing * ny1 - orthy / 2;\n\n\t\tif (!openEnded)\n\t\t{\n\t\t\tc.lineTo(inStartX, inStartY);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t\n\t\t\tfns.splice(0, 0, function()\n\t\t\t{\n\t\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t});\n\t\t}\n\t}\n\t\n\tfor (var i = fns.length - 1; i >= 0; i--)\n\t{\n\t\tfns[i]();\n\t}\n\n\tif (openEnded)\n\t{\n\t\tc.end();\n\t\tc.stroke();\n\t}\n\telse\n\t{\n\t\tc.close();\n\t\tc.fillAndStroke();\n\t}\n\t\n\t// Workaround for shadow on top of base arrow\n\tc.setShadow(false);\n\t\n\t// Need to redraw the markers without the low miter limit\n\tc.setMiterLimit(4);\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('flat');\n\t}\n\n\tif (pts.length > 2)\n\t{\n\t\t// Only to repaint markers if no waypoints\n\t\t// Need to redraw the markers without the low miter limit\n\t\tc.setMiterLimit(4);\n\t\tif (markerStart && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t\t\n\t\tif (markerEnd && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t}\n};\n\n/**\n * Function: paintMarker\n * \n * Paints the marker.\n */\nmxArrowConnector.prototype.paintMarker = function(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove)\n{\n\tvar widthArrowRatio = edgeWidth / arrowWidth;\n\tvar orthx = edgeWidth * ny / 2;\n\tvar orthy = -edgeWidth * nx / 2;\n\n\tvar spaceX = (spacing + size) * nx;\n\tvar spaceY = (spacing + size) * ny;\n\n\tif (initialMove)\n\t{\n\t\tc.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\telse\n\t{\n\t\tc.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\n\tc.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n\tc.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n}\n\n/**\n * Function: isArrowRounded\n * \n * Returns wether the arrow is rounded\n */\nmxArrowConnector.prototype.isArrowRounded = function()\n{\n\treturn this.isRounded;\n};\n\n/**\n * Function: getStartArrowWidth\n * \n * Returns the width of the start arrow\n */\nmxArrowConnector.prototype.getStartArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEndArrowWidth\n * \n * Returns the width of the end arrow\n */\nmxArrowConnector.prototype.getEndArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEdgeWidth\n * \n * Returns the width of the body of the edge\n */\nmxArrowConnector.prototype.getEdgeWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH / 3;\n};\n\n/**\n * Function: isOpenEnded\n * \n * Returns whether the ends of the shape are drawn\n */\nmxArrowConnector.prototype.isOpenEnded = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isMarkerStart\n * \n * Returns whether the start marker is drawn\n */\nmxArrowConnector.prototype.isMarkerStart = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n\n/**\n * Function: isMarkerEnd\n * \n * Returns whether the end marker is drawn\n */\nmxArrowConnector.prototype.isMarkerEnd = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n__mxOutput.mxArrowConnector = typeof mxArrowConnector !== 'undefined' ? mxArrowConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxText\n *\n * Extends <mxShape> to implement a text shape. To change vertical text from\n * bottom to top to top to bottom, the following code can be used:\n * \n * (code)\n * mxText.prototype.verticalTextRotation = 90;\n * (end)\n * \n * Constructor: mxText\n *\n * Constructs a new text shape.\n * \n * Parameters:\n * \n * value - String that represents the text to be displayed. This is stored in\n * <value>.\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * align - Specifies the horizontal alignment. Default is ''. This is stored in\n * <align>.\n * valign - Specifies the vertical alignment. Default is ''. This is stored in\n * <valign>.\n * color - String that specifies the text color. Default is 'black'. This is\n * stored in <color>.\n * family - String that specifies the font family. Default is\n * <mxConstants.DEFAULT_FONTFAMILY>. This is stored in <family>.\n * size - Integer that specifies the font size. Default is\n * <mxConstants.DEFAULT_FONTSIZE>. This is stored in <size>.\n * fontStyle - Specifies the font style. Default is 0. This is stored in\n * <fontStyle>.\n * spacing - Integer that specifies the global spacing. Default is 2. This is\n * stored in <spacing>.\n * spacingTop - Integer that specifies the top spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingTop>.\n * spacingRight - Integer that specifies the right spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingRight>.\n * spacingBottom - Integer that specifies the bottom spacing. Default is 0.The\n * sum of the spacing and this is stored in <spacingBottom>.\n * spacingLeft - Integer that specifies the left spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingLeft>.\n * horizontal - Boolean that specifies if the label is horizontal. Default is\n * true. This is stored in <horizontal>.\n * background - String that specifies the background color. Default is null.\n * This is stored in <background>.\n * border - String that specifies the label border color. Default is null.\n * This is stored in <border>.\n * wrap - Specifies if word-wrapping should be enabled. Default is false.\n * This is stored in <wrap>.\n * clipped - Specifies if the label should be clipped. Default is false.\n * This is stored in <clipped>.\n * overflow - Value of the overflow style. Default is 'visible'.\n */\nfunction mxText(value, bounds, align, valign, color,\n\tfamily,\tsize, fontStyle, spacing, spacingTop, spacingRight,\n\tspacingBottom, spacingLeft, horizontal, background, border,\n\twrap, clipped, overflow, labelPadding, textDirection)\n{\n\tmxShape.call(this);\n\tthis.value = value;\n\tthis.bounds = bounds;\n\tthis.color = (color != null) ? color : 'black';\n\tthis.align = (align != null) ? align : mxConstants.ALIGN_CENTER;\n\tthis.valign = (valign != null) ? valign : mxConstants.ALIGN_MIDDLE;\n\tthis.family = (family != null) ? family : mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = (size != null) ? size : mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = (fontStyle != null) ? fontStyle : mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = parseInt(spacing || 2);\n\tthis.spacingTop = this.spacing + parseInt(spacingTop || 0);\n\tthis.spacingRight = this.spacing + parseInt(spacingRight || 0);\n\tthis.spacingBottom = this.spacing + parseInt(spacingBottom || 0);\n\tthis.spacingLeft = this.spacing + parseInt(spacingLeft || 0);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.background = background;\n\tthis.border = border;\n\tthis.wrap = (wrap != null) ? wrap : false;\n\tthis.clipped = (clipped != null) ? clipped : false;\n\tthis.overflow = (overflow != null) ? overflow : 'visible';\n\tthis.labelPadding = (labelPadding != null) ? labelPadding : 0;\n\tthis.textDirection = textDirection;\n\tthis.rotation = 0;\n\tthis.updateMargin();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxText, mxShape);\n\n/**\n * Variable: baseSpacingTop\n * \n * Specifies the spacing to be added to the top spacing. Default is 0. Use the\n * value 5 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingTop = 0;\n\n/**\n * Variable: baseSpacingBottom\n * \n * Specifies the spacing to be added to the bottom spacing. Default is 0. Use the\n * value 1 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingBottom = 0;\n\n/**\n * Variable: baseSpacingLeft\n * \n * Specifies the spacing to be added to the left spacing. Default is 0.\n */\nmxText.prototype.baseSpacingLeft = 0;\n\n/**\n * Variable: baseSpacingRight\n * \n * Specifies the spacing to be added to the right spacing. Default is 0.\n */\nmxText.prototype.baseSpacingRight = 0;\n\n/**\n * Variable: replaceLinefeeds\n * \n * Specifies if linefeeds in HTML labels should be replaced with BR tags.\n * Default is true.\n */\nmxText.prototype.replaceLinefeeds = true;\n\n/**\n * Variable: verticalTextRotation\n * \n * Rotation for vertical text. Default is -90 (bottom to top).\n */\nmxText.prototype.verticalTextRotation = -90;\n\n/**\n * Variable: ignoreClippedStringSize\n * \n * Specifies if the string size should be measured in <updateBoundingBox> if\n * the label is clipped and the label position is center and middle. If this is\n * true, then the bounding box will be set to <bounds>. Default is true.\n * <ignoreStringSize> has precedence over this switch.\n */\nmxText.prototype.ignoreClippedStringSize = true;\n\n/**\n * Variable: ignoreStringSize\n * \n * Specifies if the actual string size should be measured. If disabled the\n * boundingBox will not ignore the actual size of the string, otherwise\n * <bounds> will be used instead. Default is false.\n */\nmxText.prototype.ignoreStringSize = false;\n\n/**\n * Variable: textWidthPadding\n * \n * Specifies the padding to be added to the text width for the bounding box.\n * This is needed to make sure no clipping is applied to borders. Default is 4\n * for IE 8 standards mode and 3 for all others.\n */\nmxText.prototype.textWidthPadding = (document.documentMode == 8 && !mxClient.IS_EM) ? 4 : 3;\n\n/**\n * Variable: lastValue\n * \n * Contains the last rendered text value. Used for caching.\n */\nmxText.prototype.lastValue = null;\n\n/**\n * Variable: cacheEnabled\n * \n * Specifies if caching for HTML labels should be enabled. Default is true.\n */\nmxText.prototype.cacheEnabled = true;\n\n/**\n * Function: isParseVml\n * \n * Text shapes do not contain VML markup and do not need to be parsed. This\n * method returns false to speed up rendering in IE8.\n */\nmxText.prototype.isParseVml = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation returns\n * true if the browser is not in IE8 standards mode.\n */\nmxText.prototype.isHtmlAllowed = function()\n{\n\treturn document.documentMode != 8 || mxClient.IS_EM;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxText.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxText.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height));\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxText.prototype.paint = function(c, update)\n{\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\t\n\tif (update)\n\t{\n\t\tc.updateText(x, y, w, h, this.align, this.valign, this.wrap, this.overflow,\n\t\t\t\tthis.clipped, this.getTextRotation(), this.node);\n\t}\n\telse\n\t{\n\t\t// Checks if text contains HTML markup\n\t\tvar realHtml = mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML;\n\t\t\n\t\t// Always renders labels as HTML in VML\n\t\tvar fmt = (realHtml || c instanceof mxVmlCanvas2D) ? 'html' : '';\n\t\tvar val = this.value;\n\t\t\n\t\tif (!realHtml && fmt == 'html')\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\tif (fmt == 'html' && !mxUtils.isNode(this.value))\n\t\t{\n\t\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\t\t\t\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = (!mxUtils.isNode(this.value) && this.replaceLinefeeds && fmt == 'html') ?\n\t\t\tval.replace(/\\n/g, '<br/>') : val;\n\t\t\t\n\t\tvar dir = this.textDirection;\n\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && !realHtml)\n\t\t{\n\t\t\tdir = this.getAutoDirection();\n\t\t}\n\t\t\n\t\tif (dir != mxConstants.TEXT_DIRECTION_LTR && dir != mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tdir = null;\n\t\t}\n\t\t\n\t\tc.text(x, y, w, h, val, this.align, this.valign, this.wrap, fmt,\n\t\t\tthis.overflow, this.clipped, this.getTextRotation(), dir);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Renders the text using the given DOM nodes.\n */\nmxText.prototype.redraw = function()\n{\n\tif (this.visible && this.checkBounds() && this.cacheEnabled && this.lastValue == this.value &&\n\t\t(mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML))\n\t{\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tif (mxClient.IS_SVG)\n\t\t\t{\n\t\t\t\tthis.redrawHtmlShapeWithCss3();\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\n\t\t\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t\t\t{\n\t\t\t\t\tthis.updateHtmlFilter();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.updateHtmlTransform();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.updateBoundingBox();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar canvas = this.createCanvas();\n\n\t\t\tif (canvas != null && canvas.updateText != null)\n\t\t\t{\n\t\t\t\t// Specifies if events should be handled\n\t\t\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\t\t\tthis.paint(canvas, true);\n\t\t\t\tthis.destroyCanvas(canvas);\n\t\t\t\tthis.updateBoundingBox();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Fallback if canvas does not support updateText (VML)\n\t\t\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\n\t\tif (mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tthis.lastValue = this.value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.lastValue = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxText.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.color = 'black';\n\tthis.align = mxConstants.ALIGN_CENTER;\n\tthis.valign = mxConstants.ALIGN_MIDDLE;\n\tthis.family = mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = 2;\n\tthis.spacingTop = 2;\n\tthis.spacingRight = 2;\n\tthis.spacingBottom = 2;\n\tthis.spacingLeft = 2;\n\tthis.horizontal = true;\n\tdelete this.background;\n\tdelete this.border;\n\tthis.textDirection = mxConstants.DEFAULT_TEXT_DIRECTION;\n\tdelete this.margin;\n};\n\n/**\n * Function: apply\n * \n * Extends mxShape to update the text styles.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxText.prototype.apply = function(state)\n{\n\tvar old = this.spacing;\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.fontStyle = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSTYLE, this.fontStyle);\n\t\tthis.family = mxUtils.getValue(this.style, mxConstants.STYLE_FONTFAMILY, this.family);\n\t\tthis.size = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, this.size);\n\t\tthis.color = mxUtils.getValue(this.style, mxConstants.STYLE_FONTCOLOR, this.color);\n\t\tthis.align = mxUtils.getValue(this.style, mxConstants.STYLE_ALIGN, this.align);\n\t\tthis.valign = mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_ALIGN, this.valign);\n\t\tthis.spacing = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing));\n\t\tthis.spacingTop = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_TOP, this.spacingTop - old)) + this.spacing;\n\t\tthis.spacingRight = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_RIGHT, this.spacingRight - old)) + this.spacing;\n\t\tthis.spacingBottom = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_BOTTOM, this.spacingBottom - old)) + this.spacing;\n\t\tthis.spacingLeft = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_LEFT, this.spacingLeft - old)) + this.spacing;\n\t\tthis.horizontal = mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, this.horizontal);\n\t\tthis.background = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, this.background);\n\t\tthis.border = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BORDERCOLOR, this.border);\n\t\tthis.textDirection = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tthis.updateMargin();\n\t}\n\t\n\tthis.flipV = null;\n\tthis.flipH = null;\n};\n\n/**\n * Function: getAutoDirection\n * \n * Used to determine the automatic text direction. Returns\n * <mxConstants.TEXT_DIRECTION_LTR> or <mxConstants.TEXT_DIRECTION_RTL>\n * depending on the contents of <value>. This is not invoked for HTML, wrapped\n * content or if <value> is a DOM node.\n */\nmxText.prototype.getAutoDirection = function()\n{\n\t// Looks for strong (directional) characters\n\tvar tmp = /[A-Za-z\\u05d0-\\u065f\\u066a-\\u06ef\\u06fa-\\u07ff\\ufb1d-\\ufdff\\ufe70-\\ufefc]/.exec(this.value);\n\t\n\t// Returns the direction defined by the character\n\treturn (tmp != null && tmp.length > 0 && tmp[0] > 'z') ?\n\t\tmxConstants.TEXT_DIRECTION_RTL : mxConstants.TEXT_DIRECTION_LTR;\n};\n\n/**\n * Function: getContentNode\n * \n * Returns the node that contains the rendered input.\n */\nmxText.prototype.getContentNode = function()\n{\n\tvar result = this.node;\n\t\n\tif (result != null)\n\t{\n\t\t// Rendered with no foreignObject\n\t\tif (result.ownerSVGElement == null)\n\t\t{\n\t\t\tresult = this.node.firstChild.firstChild;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Innermost DIV that contains the actual content\n\t\t\tresult = result.firstChild.firstChild.firstChild.firstChild.firstChild;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using the given node and position.\n */\nmxText.prototype.updateBoundingBox = function()\n{\n\tvar node = this.node;\n\tthis.boundingBox = this.bounds.clone();\n\tvar rot = this.getTextRotation();\n\t\n\tvar h = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER) : null;\n\tvar v = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE) : null;\n\n\tif (!this.ignoreStringSize && node != null && this.overflow != 'fill' && (!this.clipped ||\n\t\t!this.ignoreClippedStringSize || h != mxConstants.ALIGN_CENTER || v != mxConstants.ALIGN_MIDDLE))\n\t{\n\t\tvar ow = null;\n\t\tvar oh = null;\n\t\t\n\t\tif (node.ownerSVGElement != null)\n\t\t{\n\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t{\n\t\t\t\t// Uses second inner DIV for font metrics\n\t\t\t\tnode = node.firstChild.firstChild.firstChild.firstChild;\n\t\t\t\toh = node.offsetHeight * this.scale;\n\t\t\t\t\n\t\t\t\tif (this.overflow == 'width')\n\t\t\t\t{\n\t\t\t\t\tow = this.boundingBox.width;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tow = node.offsetWidth * this.scale;\t\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar b = node.getBBox();\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for bounding box of empty string\n\t\t\t\t\tif (typeof(this.value) == 'string' && mxUtils.trim(this.value) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (b.width == 0 && b.height == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\n\t\t\t// Use cached offset size\n\t\t\tif (this.offsetWidth != null && this.offsetHeight != null)\n\t\t\t{\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Cannot get node size while container hidden so a\n\t\t\t\t// shared temporary DIV is used for text measuring\n\t\t\t\tif (td != null)\n\t\t\t\t{\n\t\t\t\t\tthis.updateFont(td);\n\t\t\t\t\tthis.updateSize(td, false);\n\t\t\t\t\tthis.updateInnerHtml(td);\n\n\t\t\t\t\tnode = td;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar sizeDiv = node;\n\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tvar w = Math.round(this.bounds.width / this.scale);\n\t\n\t\t\t\t\tif (this.wrap && w > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\t\t\tnode.style.whiteSpace = 'normal';\n\n\t\t\t\t\t\tif (node.style.wordWrap != 'break-word')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Innermost DIV is used for measuring text\n\t\t\t\t\t\t\tvar divs = sizeDiv.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (divs.length > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsizeDiv = divs[divs.length - 1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tow = sizeDiv.offsetWidth + 2;\n\t\t\t\t\t\t\tdivs = this.node.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.clipped)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tow = Math.min(w, ow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Second last DIV width must be updated in DOM tree\n\t\t\t\t\t\t\tif (divs.length > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdivs[divs.length - 2].style.width = ow + 'px';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.whiteSpace = 'nowrap';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\n\t\t\t\tthis.offsetWidth = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\t\tthis.offsetHeight = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t}\n\n\t\tif (ow != null && oh != null)\n\t\t{\t\n\t\t\tthis.boundingBox = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y, ow, oh);\n\t\t}\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tif (rot != 0)\n\t\t{\n\t\t\t// Accounts for pre-rotated x and y\n\t\t\tvar bbox = mxUtils.getBoundingBox(new mxRectangle(\n\t\t\t\tthis.margin.x * this.boundingBox.width,\n\t\t\t\tthis.margin.y * this.boundingBox.height,\n\t\t\t\tthis.boundingBox.width, this.boundingBox.height),\n\t\t\t\trot, new mxPoint(0, 0));\n\t\t\t\n\t\t\tthis.unrotatedBoundingBox = mxRectangle.fromRectangle(this.boundingBox);\n\t\t\tthis.unrotatedBoundingBox.x += this.margin.x * this.unrotatedBoundingBox.width;\n\t\t\tthis.unrotatedBoundingBox.y += this.margin.y * this.unrotatedBoundingBox.height;\n\t\t\t\n\t\t\tthis.boundingBox.x += bbox.x;\n\t\t\tthis.boundingBox.y += bbox.y;\n\t\t\tthis.boundingBox.width = bbox.width;\n\t\t\tthis.boundingBox.height = bbox.height;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.boundingBox.x += this.margin.x * this.boundingBox.width;\n\t\t\tthis.boundingBox.y += this.margin.y * this.boundingBox.height;\n\t\t\tthis.unrotatedBoundingBox = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0 to avoid using rotation in the canvas via updateTransform.\n */\nmxText.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label of the corresponding shape.\n */\nmxText.prototype.getTextRotation = function()\n{\n\treturn (this.state != null && this.state.shape != null) ? this.state.shape.getTextRotation() : 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Inverts the bounds if <mxShape.isBoundsInverted> returns true or if the\n * horizontal style is false.\n */\nmxText.prototype.isPaintBoundsInverted = function()\n{\n\treturn !this.horizontal && this.state != null && this.state.view.graph.model.isVertex(this.state.cell);\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxText.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tmxShape.prototype.configureCanvas.apply(this, arguments);\n\t\n\tc.setFontColor(this.color);\n\tc.setFontBackgroundColor(this.background);\n\tc.setFontBorderColor(this.border);\n\tc.setFontFamily(this.family);\n\tc.setFontSize(this.size);\n\tc.setFontStyle(this.fontStyle);\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Sets the width and height of the container to 1px.\n */\nmxText.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = '1px';\n\tthis.node.style.height = '1px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: getHtmlValue\n * \n * Private helper function to create SVG elements\n */\nmxText.prototype.getHtmlValue = function()\n{\n\tvar val = this.value;\n\t\n\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t{\n\t\tval = mxUtils.htmlEntities(val, false);\n\t}\n\t\n\t// Handles trailing newlines to make sure they are visible in rendering output\n\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\n\treturn val;\n};\n\n/**\n * Function: getTextCss\n * \n * Private helper function to create SVG elements\n */\nmxText.prototype.getTextCss = function()\n{\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\tmxConstants.LINE_HEIGHT;\n\n\tvar css = 'display: inline-block; font-size: ' + this.size + 'px; ' +\n\t\t'font-family: ' + this.family + '; color: ' + this.color + '; line-height: ' + lh +\n\t\t'; pointer-events: ' + ((this.pointerEvents) ? 'all' : 'none') + '; ';\n\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tcss += 'font-weight: bold; ';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tcss += 'font-style: italic; ';\n\t}\n\t\n\tvar deco = [];\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tdeco.push('underline');\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\tdeco.push('line-through');\n\t}\n\t\n\tif (deco.length > 0)\n\t{\n\t\tcss += 'text-decoration: ' + deco.join(' ') + '; ';\n\t}\n\n\treturn css;\n};\n\n/**\n * Function: redrawHtmlShape\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShape = function()\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.redrawHtmlShapeWithCss3();\t\n\t}\n\telse\n\t{\n\t\tvar style = this.node.style;\n\t\n\t\t// Resets CSS styles\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.overflow = '';\n\t\tstyle.width = '';\n\t\tstyle.height = '';\n\t\t\n\t\tthis.updateValue();\n\t\tthis.updateFont(this.node);\n\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\t\n\t\tthis.offsetWidth = null;\n\t\tthis.offsetHeight = null;\n\t\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t{\n\t\t\tthis.updateHtmlFilter();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateHtmlTransform();\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHtmlShapeWithCss3\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShapeWithCss3 = function()\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar flex = 'position: absolute; left: ' + Math.round(this.bounds.x) + 'px; ' +\n\t\t'top: ' + Math.round(this.bounds.y) + 'px; pointer-events: none; ';\n\tvar block = this.getTextCss();\n\t\n\tmxSvgCanvas2D.createCss(w + 2, h, this.align, this.valign, this.wrap, this.overflow, this.clipped,\n\t\t(this.background != null) ? mxUtils.htmlEntities(this.background) : null,\n\t\t(this.border != null) ? mxUtils.htmlEntities(this.border) : null,\n\t\tflex, block, this.scale, mxUtils.bind(this, function(dx, dy, flex, item, block, ofl)\n\t{\n\t\tvar r = this.getTextRotation();\n\t\tvar tr = ((this.scale != 1) ? 'scale(' + this.scale + ') ' : '') +\n\t\t\t((r != 0) ? 'rotate(' + r + 'deg) ' : '') +\n\t\t\t((this.margin.x != 0 || this.margin.y != 0) ?\n\t\t\t\t'translate(' + (this.margin.x * 100) + '%,' +\n\t\t\t\t\t(this.margin.y * 100) + '%)' : '');\n\t\t\n\t\tif (tr != '')\n\t\t{\n\t\t\ttr = 'transform-origin: 0 0; transform: ' + tr + '; ';\n\t\t}\n\n\t\tif (ofl == '')\n\t\t{\n\t\t\tflex += item;\n\t\t\titem = 'display:inline-block; min-width: 100%; ' + tr;\n\t\t}\n\t\telse\n\t\t{\n\t\t\titem += tr;\n\t\t\t\n\t\t\tif (mxClient.IS_SF)\n\t\t\t{\n\t\t\t\titem += '-webkit-clip-path: content-box;';\n\t\t\t}\n\t\t}\n\n\t\tif (this.opacity < 100)\n\t\t{\n\t\t\tblock += 'opacity: ' + (this.opacity / 100) + '; ';\n\t\t}\n\t\t\n\t\tthis.node.setAttribute('style', flex);\n\t\t\n\t\tvar html = (mxUtils.isNode(this.value)) ? this.value.outerHTML : this.getHtmlValue();\n\t\t\n\t\tif (this.node.firstChild == null)\n\t\t{\n\t\t\tthis.node.innerHTML = '<div><div>' + html +'</div></div>';\n\t\t}\n\n\t\tthis.node.firstChild.firstChild.setAttribute('style', block);\n\t\tthis.node.firstChild.setAttribute('style', item);\n\t}));\n};\n\n/**\n * Function: updateHtmlTransform\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateHtmlTransform = function()\n{\n\tvar theta = this.getTextRotation();\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\t\n\tif (theta != 0)\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', (-dx * 100) + '%' + ' ' + (-dy * 100) + '%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%) ' +\n\t\t\t'scale(' + this.scale + ') rotate(' + theta + 'deg)');\n\t}\n\telse\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', '0% 0%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'scale(' + this.scale + ') ' +\n\t\t\t'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)');\n\t}\n\n\tstyle.left = Math.round(this.bounds.x - Math.ceil(dx * ((this.overflow != 'fill' &&\n\t\tthis.overflow != 'width') ? 3 : 1))) + 'px';\n\tstyle.top = Math.round(this.bounds.y - dy * ((this.overflow != 'fill') ? 3 : 1)) + 'px';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tstyle.opacity = this.opacity / 100;\n\t}\n\telse\n\t{\n\t\tstyle.opacity = '';\n\t}\n};\n\n/**\n * Function: updateInnerHtml\n * \n * Sets the inner HTML of the given element to the <value>.\n */\nmxText.prototype.updateInnerHtml = function(elt)\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\telt.innerHTML = this.value.outerHTML;\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\t// LATER: Can be cached in updateValue\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div>&nbsp;</div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tval = '<div style=\"display:inline-block;_display:inline;\">' + val + '</div>';\n\t\t\n\t\telt.innerHTML = val;\n\t}\n};\n\n/**\n * Function: updateHtmlFilter\n *\n * Rotated text rendering quality is bad for IE9 quirks/IE8 standards\n */\nmxText.prototype.updateHtmlFilter = function()\n{\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\tvar s = this.scale;\n\t\n\t// Resets filter before getting offsetWidth\n\tmxUtils.setOpacity(this.node, this.opacity);\n\t\n\t// Adds 1 to match table height in 1.x\n\tvar ow = 0;\n\tvar oh = 0;\n\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\tvar sizeDiv = this.node;\n\t\n\t// Fallback for hidden text rendering in IE quirks mode\n\tif (td != null)\n\t{\n\t\ttd.style.overflow = '';\n\t\ttd.style.height = '';\n\t\ttd.style.width = '';\n\t\t\n\t\tthis.updateFont(td);\n\t\tthis.updateSize(td, false);\n\t\tthis.updateInnerHtml(td);\n\t\t\n\t\tvar w = Math.round(this.bounds.width / this.scale);\n\n\t\tif (this.wrap && w > 0)\n\t\t{\n\t\t\ttd.style.whiteSpace = 'normal';\n\t\t\ttd.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\tow = w;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, this.bounds.width);\n\t\t\t}\n\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttd.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\tsizeDiv = td;\n\t\t\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\n\t\t\tif (this.wrap && td.style.wordWrap == 'break-word')\n\t\t\t{\n\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t}\n\t\t}\n\n\t\t// Required to update the height of the text box after wrapping width is known \n\t\tif (!this.clipped && this.wrap && w > 0)\n\t\t{\n\t\t\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\t\n\t\toh = sizeDiv.offsetHeight + 2;\n\t\t\n\t\tif (mxClient.IS_QUIRKS && this.border != null && this.border != mxConstants.NONE)\n\t\t{\n\t\t\toh += 3;\n\t\t}\n\t}\n\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t{\n\t\tsizeDiv = sizeDiv.firstChild;\n\t\toh = sizeDiv.offsetHeight;\n\t}\n\n\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\n\tif (this.clipped)\n\t{\n\t\toh = Math.min(oh, this.bounds.height);\n\t}\n\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\t// Handles special case for live preview with no wrapper DIV and no textDiv\n\tif (this.overflow == 'fill')\n\t{\n\t\toh = h;\n\t\tow = w;\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\toh = sizeDiv.scrollHeight;\n\t\tow = w;\n\t}\n\t\n\t// Stores for later use\n\tthis.offsetWidth = ow;\n\tthis.offsetHeight = oh;\n\t\n\t// Simulates max-height CSS in quirks mode\n\tif (mxClient.IS_QUIRKS && (this.clipped || (this.overflow == 'width' && h > 0)))\n\t{\n\t\th = Math.min(h, oh);\n\t\tstyle.height = Math.round(h) + 'px';\n\t}\n\telse\n\t{\n\t\th = oh;\n\t}\n\n\tif (this.overflow != 'fill' && this.overflow != 'width')\n\t{\n\t\tif (this.clipped)\n\t\t{\n\t\t\tow = Math.min(w, ow);\n\t\t}\n\t\t\n\t\tw = ow;\n\n\t\t// Simulates max-width CSS in quirks mode\n\t\tif ((mxClient.IS_QUIRKS && this.clipped) || this.wrap)\n\t\t{\n\t\t\tstyle.width = Math.round(w) + 'px';\n\t\t}\n\t}\n\n\th *= s;\n\tw *= s;\n\t\n\t// Rotation case is handled via VML canvas\n\tvar rad = this.getTextRotation() * (Math.PI / 180);\n\t\n\t// Precalculate cos and sin for the rotation\n\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\trad %= 2 * Math.PI;\n\t\n\tif (rad < 0)\n\t{\n\t\trad += 2 * Math.PI;\n\t}\n\t\n\trad %= Math.PI;\n\t\n\tif (rad > Math.PI / 2)\n\t{\n\t\trad = Math.PI - rad;\n\t}\n\t\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(-rad);\n\n\tvar tx = w * -(dx + 0.5);\n\tvar ty = h * -(dy + 0.5);\n\n\tvar top_fix = (h - h * cos + w * sin) / 2 + real_sin * tx - real_cos * ty;\n\tvar left_fix = (w - w * cos + h * sin) / 2 - real_cos * tx - real_sin * ty;\n\t\n\tif (rad != 0)\n\t{\n\t\tvar f = 'progid:DXImageTransform.Microsoft.Matrix(M11=' + real_cos + ', M12='+\n\t\t\treal_sin + ', M21=' + (-real_sin) + ', M22=' + real_cos + ', sizingMethod=\\'auto expand\\')';\n\t\t\n\t\tif (style.filter != null && style.filter.length > 0)\n\t\t{\n\t\t\tstyle.filter += ' ' + f;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.filter = f;\n\t\t}\n\t}\n\t\n\t// Workaround for rendering offsets\n\tvar dy = 0;\n\t\n\tif (this.overflow != 'fill' && mxClient.IS_QUIRKS)\n\t{\n\t\tif (this.valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy -= 1;\n\t\t}\n\t\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdy += 1;\n\t\t}\n\t}\n\n\tstyle.zoom = s;\n\tstyle.left = Math.round(this.bounds.x + left_fix - w / 2) + 'px';\n\tstyle.top = Math.round(this.bounds.y + top_fix - h / 2 + dy) + 'px';\n};\n\n/**\n * Function: updateValue\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateValue = function()\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\tthis.node.innerHTML = '';\n\t\tthis.node.appendChild(this.value);\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tvar bg = (this.background != null && this.background != mxConstants.NONE) ? this.background : null;\n\t\tvar bd = (this.border != null && this.border != mxConstants.NONE) ? this.border : null;\n\n\t\tif (this.overflow == 'fill' || this.overflow == 'width')\n\t\t{\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tthis.node.style.backgroundColor = bg;\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tthis.node.style.border = '1px solid ' + bd;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar css = '';\n\t\t\t\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tcss += 'background-color:' + mxUtils.htmlEntities(bg) + ';';\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(bd) + ';';\n\t\t\t}\n\t\t\t\n\t\t\t// Wrapper DIV for background, zoom needed for inline in quirks\n\t\t\t// and to measure wrapped font sizes in all browsers\n\t\t\t// FIXME: Background size in quirks mode for wrapped text\n\t\t\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t\t\tmxConstants.LINE_HEIGHT;\n\t\t\tval = '<div style=\"zoom:1;' + css + 'display:inline-block;_display:inline;text-decoration:inherit;' +\n\t\t\t\t'padding-bottom:1px;padding-right:1px;line-height:' + lh + '\">' + val + '</div>';\n\t\t}\n\n\t\tthis.node.innerHTML = val;\n\t\t\n\t\t// Sets text direction\n\t\tvar divs = this.node.getElementsByTagName('div');\n\t\t\n\t\tif (divs.length > 0)\n\t\t{\n\t\t\tvar dir = this.textDirection;\n\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t\t{\n\t\t\t\tdir = this.getAutoDirection();\n\t\t\t}\n\t\t\t\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].setAttribute('dir', dir);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].removeAttribute('dir');\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateFont\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateFont = function(node)\n{\n\tvar style = node.style;\n\t\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\tstyle.fontSize = this.size + 'px';\n\tstyle.fontFamily = this.family;\n\tstyle.verticalAlign = 'top';\n\tstyle.color = this.color;\n\t\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\telse\n\t{\n\t\tstyle.fontWeight = '';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\telse\n\t{\n\t\tstyle.fontStyle = '';\n\t}\n\t\n\tvar txtDecor = [];\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttxtDecor.push('underline');\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t{\n\t\ttxtDecor.push('line-through');\n\t}\n\t\n\tstyle.textDecoration = txtDecor.join(' ');\n\t\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle.textAlign = 'center';\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle.textAlign = 'right';\n\t}\n\telse\n\t{\n\t\tstyle.textAlign = 'left';\n\t}\n};\n\n/**\n * Function: updateSize\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateSize = function(node, enableWrap)\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar style = node.style;\n\t\n\t// NOTE: Do not use maxWidth here because wrapping will\n\t// go wrong if the cell is outside of the viewable area\n\tif (this.clipped)\n\t{\n\t\tstyle.overflow = 'hidden';\n\t\t\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tstyle.maxHeight = h + 'px';\n\t\t\tstyle.maxWidth = w + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.width = w + 'px';\n\t\t}\n\t}\n\telse if (this.overflow == 'fill')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.height = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.maxHeight = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\t\n\tif (this.wrap && w > 0)\n\t{\n\t\tstyle.wordWrap = mxConstants.WORD_WRAP;\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.width = w + 'px';\n\n\t\tif (enableWrap && this.overflow != 'fill' && this.overflow != 'width')\n\t\t{\n\t\t\tvar sizeDiv = node;\n\t\t\t\n\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t{\n\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t\n\t\t\t\tif (node.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar tmp = sizeDiv.offsetWidth;\n\t\t\t\n\t\t\t// Workaround for text measuring in hidden containers\n\t\t\tif (tmp == 0)\n\t\t\t{\n\t\t\t\tvar prev = node.parentNode;\n\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(node);\n\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\tnode.style.visibility = '';\n\t\t\t\tprev.appendChild(node);\n\t\t\t}\n\n\t\t\ttmp += 3;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t}\n\t\t\t\n\t\t\tstyle.width = tmp + 'px';\n\t\t}\n\t}\n\telse\n\t{\n\t\tstyle.whiteSpace = 'nowrap';\n\t}\n};\n\n/**\n * Function: getMargin\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateMargin = function()\n{\n\tthis.margin = mxUtils.getAlignmentAsPoint(this.align, this.valign);\n};\n\n/**\n * Function: getSpacing\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.getSpacing = function()\n{\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tdx = (this.spacingLeft - this.spacingRight) / 2;\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tdx = -this.spacingRight - this.baseSpacingRight;\n\t}\n\telse\n\t{\n\t\tdx = this.spacingLeft + this.baseSpacingLeft;\n\t}\n\n\tif (this.valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tdy = (this.spacingTop - this.spacingBottom) / 2;\n\t}\n\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = -this.spacingBottom - this.baseSpacingBottom;;\n\t}\n\telse\n\t{\n\t\tdy = this.spacingTop + this.baseSpacingTop;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n__mxOutput.mxText = typeof mxText !== 'undefined' ? mxText : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTriangle\n * \n * Implementation of the triangle shape.\n * \n * Constructor: mxTriangle\n *\n * Constructs a new triangle shape.\n */\nfunction mxTriangle()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxTriangle, mxActor);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxTriangle.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxTriangle.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0, 0), new mxPoint(w, 0.5 * h), new mxPoint(0, h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxTriangle = typeof mxTriangle !== 'undefined' ? mxTriangle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHexagon\n * \n * Implementation of the hexagon shape.\n * \n * Constructor: mxHexagon\n *\n * Constructs a new hexagon shape.\n */\nfunction mxHexagon()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxHexagon, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxHexagon.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0.25 * w, 0), new mxPoint(0.75 * w, 0), new mxPoint(w, 0.5 * h), new mxPoint(0.75 * w, h),\n\t                   new mxPoint(0.25 * w, h), new mxPoint(0, 0.5 * h)], this.isRounded, arcSize, true);\n};\n\n__mxOutput.mxHexagon = typeof mxHexagon !== 'undefined' ? mxHexagon : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLine\n *\n * Extends <mxShape> to implement a horizontal line shape.\n * This shape is registered under <mxConstants.SHAPE_LINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLine\n *\n * Constructs a new line shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLine(bounds, stroke, strokewidth, vertical)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.vertical = (vertical != null) ? vertical : this.vertical;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLine, mxShape);\n\n/**\n * Function: vertical\n * \n * Whether to paint a vertical line.\n */\nmxLine.prototype.vertical = false;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxLine.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.begin();\n\n\tif (this.vertical)\n\t{\n\t\tvar mid = x + w / 2;\n\t\tc.moveTo(mid, y);\n\t\tc.lineTo(mid, y + h);\n\t}\n\telse\n\t{\n\t\tvar mid = y + h / 2;\n\t\tc.moveTo(x, mid);\n\t\tc.lineTo(x + w, mid);\n\t}\n\n\tc.stroke();\n};\n\n__mxOutput.mxLine = typeof mxLine !== 'undefined' ? mxLine : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageShape\n *\n * Extends <mxShape> to implement an image shape. This shape is registered\n * under <mxConstants.SHAPE_IMAGE> in <mxCellRenderer>.\n * \n * Constructor: mxImageShape\n * \n * Constructs a new image shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * image - String that specifies the URL of the image. This is stored in\n * <image>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 0. This is stored in <strokewidth>.\n */\nfunction mxImageShape(bounds, image, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.image = image;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.shadow = false;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxImageShape, mxRectangleShape);\n\n/**\n * Variable: preserveImageAspect\n *\n * Switch to preserve image aspect. Default is true.\n */\nmxImageShape.prototype.preserveImageAspect = true;\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxImageShape.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: apply\n * \n * Overrides <mxShape.apply> to replace the fill and stroke colors with the\n * respective values from <mxConstants.STYLE_IMAGE_BACKGROUND> and\n * <mxConstants.STYLE_IMAGE_BORDER>.\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_IMAGE_BACKGROUND> => fill\n * - <mxConstants.STYLE_IMAGE_BORDER> => stroke\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxImageShape.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tthis.fill = null;\n\tthis.stroke = null;\n\tthis.gradient = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.preserveImageAspect = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_ASPECT, 1) == 1;\n\t\t\n\t\t// Legacy support for imageFlipH/V\n\t\tthis.flipH = this.flipH || mxUtils.getValue(this.style, 'imageFlipH', 0) == 1;\n\t\tthis.flipV = this.flipV || mxUtils.getValue(this.style, 'imageFlipV', 0) == 1;\n\t}\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxImageShape.prototype.isHtmlAllowed = function()\n{\n\treturn !this.preserveImageAspect;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxImageShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\n\treturn node;\n};\n\n/**\n * Function: isRoundable\n * \n * Disables inherited roundable support.\n */\nmxImageShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn false;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic background painting implementation.\n */\nmxImageShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, null);\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (fill != null)\n\t\t{\n\t\t\t// Stroke rendering required for shadow\n\t\t\tc.setFillColor(fill);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.fillAndStroke();\n\t\t}\n\n\t\t// FlipH/V are implicit via mxShape.updateTransform\n\t\tc.image(x, y, w, h, this.image, this.preserveImageAspect, false, false);\n\t\t\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (stroke != null)\n\t\t{\n\t\t\tc.setShadow(false);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.stroke();\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxRectangleShape.prototype.paintBackground.apply(this, arguments);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Overrides <mxShape.redraw> to preserve the aspect ratio of images.\n */\nmxImageShape.prototype.redrawHtmlShape = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = Math.max(0, Math.round(this.bounds.width)) + 'px';\n\tthis.node.style.height = Math.max(0, Math.round(this.bounds.height)) + 'px';\n\tthis.node.innerHTML = '';\n\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, '');\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, '');\n\t\tthis.node.style.backgroundColor = fill;\n\t\tthis.node.style.borderColor = stroke;\n\t\t\n\t\t// VML image supports PNG in IE6\n\t\tvar useVml = mxClient.IS_IE6 || ((document.documentMode == null || document.documentMode <= 8) && this.rotation != 0);\n\t\tvar img = document.createElement((useVml) ? mxClient.VML_PREFIX + ':image' : 'img');\n\t\timg.setAttribute('border', '0');\n\t\timg.style.position = 'absolute';\n\t\timg.src = this.image;\n\n\t\tvar filter = (this.opacity < 100) ? 'alpha(opacity=' + this.opacity + ')' : '';\n\t\tthis.node.style.filter = filter;\n\t\t\n\t\tif (this.flipH && this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2)';\n\t\t}\n\t\telse if (this.flipH)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(mirror=1)';\n\t\t}\n\t\telse if (this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)';\n\t\t}\n\n\t\tif (img.style.filter != filter)\n\t\t{\n\t\t\timg.style.filter = filter;\n\t\t}\n\n\t\tif (img.nodeName == 'image')\n\t\t{\n\t\t\timg.style.rotation = this.rotation;\n\t\t}\n\t\telse if (this.rotation != 0)\n\t\t{\n\t\t\t// LATER: Add flipV/H support\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', 'rotate(' + this.rotation + 'deg)');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', '');\n\t\t}\n\n\t\t// Known problem: IE clips top line of image for certain angles\n\t\timg.style.width = this.node.style.width;\n\t\timg.style.height = this.node.style.height;\n\t\t\n\t\tthis.node.style.backgroundImage = '';\n\t\tthis.node.appendChild(img);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(this.node);\n\t}\n};\n\n__mxOutput.mxImageShape = typeof mxImageShape !== 'undefined' ? mxImageShape : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLabel\n *\n * Extends <mxShape> to implement an image shape with a label.\n * This shape is registered under <mxConstants.SHAPE_LABEL> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLabel\n *\n * Constructs a new label shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLabel(bounds, fill, stroke, strokewidth)\n{\n\tmxRectangleShape.call(this, bounds, fill, stroke, strokewidth);\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLabel, mxRectangleShape);\n\n/**\n * Variable: imageSize\n *\n * Default width and height for the image. Default is\n * <mxConstants.DEFAULT_IMAGESIZE>.\n */\nmxLabel.prototype.imageSize = mxConstants.DEFAULT_IMAGESIZE;\n\n/**\n * Variable: spacing\n *\n * Default value for image spacing. Default is 2.\n */\nmxLabel.prototype.spacing = 2;\n\n/**\n * Variable: indicatorSize\n *\n * Default width and height for the indicicator. Default is 10.\n */\nmxLabel.prototype.indicatorSize = 10;\n\n/**\n * Variable: indicatorSpacing\n *\n * Default spacing between image and indicator. Default is 2.\n */\nmxLabel.prototype.indicatorSpacing = 2;\n\n/**\n * Function: init\n *\n * Initializes the shape and the <indicator>.\n */\nmxLabel.prototype.init = function(container)\n{\n\tmxShape.prototype.init.apply(this, arguments);\n\n\tif (this.indicatorShape != null)\n\t{\n\t\tthis.indicator = new this.indicatorShape();\n\t\tthis.indicator.dialect = this.dialect;\n\t\tthis.indicator.init(this.node);\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Reconfigures this shape. This will update the colors of the indicator\n * and reconfigure it if required.\n */\nmxLabel.prototype.redraw = function()\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.fill = this.indicatorColor;\n\t\tthis.indicator.stroke = this.indicatorStrokeColor;\n\t\tthis.indicator.gradient = this.indicatorGradientColor;\n\t\tthis.indicator.direction = this.indicatorDirection;\n\t\tthis.indicator.redraw();\n\t}\n\t\n\tmxShape.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n * no indicator shape.\n */\nmxLabel.prototype.isHtmlAllowed = function()\n{\n\treturn mxRectangleShape.prototype.isHtmlAllowed.apply(this, arguments) &&\n\t\tthis.indicatorColor == null && this.indicatorShape == null;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tthis.paintImage(c, x, y, w, h);\n\tthis.paintIndicator(c, x, y, w, h);\n\t\n\tmxRectangleShape.prototype.paintForeground.apply(this, arguments);\n};\n\n/**\n * Function: paintImage\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintImage = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.image, false, false, false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getImageBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_WIDTH, mxConstants.DEFAULT_IMAGESIZE);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_HEIGHT, mxConstants.DEFAULT_IMAGESIZE);\n\tvar spacing = mxUtils.getNumber(this.style, mxConstants.STYLE_SPACING, this.spacing) + 5;\n\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\n\tif (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n\n/**\n * Function: paintIndicator\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintIndicator = function(c, x, y, w, h)\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tthis.indicator.paint(c);\n\t}\n\telse if (this.indicatorImage != null)\n\t{\n\t\tvar bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImage, false, false, false);\n\t}\n};\n\n/**\n * Function: getIndicatorBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getIndicatorBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_WIDTH, this.indicatorSize);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_HEIGHT, this.indicatorSize);\n\tvar spacing = this.spacing + 5;\t\t\n\t\n\tif (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse if (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\t\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n/**\n * Function: redrawHtmlShape\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.redrawHtmlShape = function()\n{\n\tmxRectangleShape.prototype.redrawHtmlShape.apply(this, arguments);\n\t\n\t// Removes all children\n\twhile(this.node.hasChildNodes())\n\t{\n\t\tthis.node.removeChild(this.node.lastChild);\n\t}\n\t\n\tif (this.image != null)\n\t{\n\t\tvar node = document.createElement('img');\n\t\tnode.style.position = 'relative';\n\t\tnode.setAttribute('border', '0');\n\t\t\n\t\tvar bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t\tbounds.x -= this.bounds.x;\n\t\tbounds.y -= this.bounds.y;\n\n\t\tnode.style.left = Math.round(bounds.x) + 'px';\n\t\tnode.style.top = Math.round(bounds.y) + 'px';\n\t\tnode.style.width = Math.round(bounds.width) + 'px';\n\t\tnode.style.height = Math.round(bounds.height) + 'px';\n\t\t\n\t\tnode.src = this.image;\n\t\t\n\t\tthis.node.appendChild(node);\n\t}\n};\n\n__mxOutput.mxLabel = typeof mxLabel !== 'undefined' ? mxLabel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCylinder\n *\n * Extends <mxShape> to implement an cylinder shape. If a\n * custom shape with one filled area and an overlay path is\n * needed, then this shape's <redrawPath> should be overridden.\n * This shape is registered under <mxConstants.SHAPE_CYLINDER>\n * in <mxCellRenderer>.\n * \n * Constructor: mxCylinder\n *\n * Constructs a new cylinder shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCylinder(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxCylinder, mxShape);\n\n/**\n * Variable: maxHeight\n *\n * Defines the maximum height of the top and bottom part\n * of the cylinder shape.\n */\nmxCylinder.prototype.maxHeight = 40;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Sets stroke tolerance to 0 for SVG.\n */\nmxCylinder.prototype.svgStrokeTolerance = 0;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxCylinder.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h, false);\n\tc.fillAndStroke();\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tc.begin();\n\t\tthis.redrawPath(c, x, y, w, h, true);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getCylinderSize\n *\n * Returns the cylinder size.\n */\nmxCylinder.prototype.getCylinderSize = function(x, y, w, h)\n{\n\treturn Math.min(this.maxHeight, Math.round(h / 5));\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.redrawPath = function(c, x, y, w, h, isForeground)\n{\n\tvar dy = this.getCylinderSize(x, y, w, h);\n\t\n\tif ((isForeground && this.fill != null) || (!isForeground && this.fill == null))\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n\t\t\n\t\t// Needs separate shapes for correct hit-detection\n\t\tif (!isForeground)\n\t\t{\n\t\t\tc.stroke();\n\t\t\tc.begin();\n\t\t}\n\t}\n\t\n\tif (!isForeground)\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n\t\tc.lineTo(w, h - dy);\n\t\tc.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n\t\tc.close();\n\t}\n};\n\n__mxOutput.mxCylinder = typeof mxCylinder !== 'undefined' ? mxCylinder : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnector\n * \n * Extends <mxShape> to implement a connector shape. The connector\n * shape allows for arrow heads on either side.\n * \n * This shape is registered under <mxConstants.SHAPE_CONNECTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxConnector\n * \n * Constructs a new connector shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * Default is 'black'.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxConnector(points, stroke, strokewidth)\n{\n\tmxPolyline.call(this, points, stroke, strokewidth);\n};\n\n/**\n * Extends mxPolyline.\n */\nmxUtils.extend(mxConnector, mxPolyline);\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxConnector.prototype.updateBoundingBox = function()\n{\n\tthis.useSvgBoundingBox = this.style != null && this.style[mxConstants.STYLE_CURVED] == 1;\n\tmxShape.prototype.updateBoundingBox.apply(this, arguments);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// The indirection via functions for markers is needed in\n\t// order to apply the offsets before painting the line and\n\t// paint the markers after painting the line.\n\tvar sourceMarker = this.createMarker(c, pts, true);\n\tvar targetMarker = this.createMarker(c, pts, false);\n\n\tmxPolyline.prototype.paintEdgeShape.apply(this, arguments);\n\t\n\t// Disables shadows, dashed styles and fixes fill color for markers\n\tc.setFillColor(this.stroke);\n\tc.setShadow(false);\n\tc.setDashed(false);\n\t\n\tif (sourceMarker != null)\n\t{\n\t\tsourceMarker();\n\t}\n\t\n\tif (targetMarker != null)\n\t{\n\t\ttargetMarker();\n\t}\n};\n\n/**\n * Function: createMarker\n * \n * Prepares the marker by adding offsets in pts and returning a function to\n * paint the marker.\n */\nmxConnector.prototype.createMarker = function(c, pts, source)\n{\n\tvar result = null;\n\tvar n = pts.length;\n\tvar type = mxUtils.getValue(this.style, (source) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW);\n\tvar p0 = (source) ? pts[1] : pts[n - 2];\n\tvar pe = (source) ? pts[0] : pts[n - 1];\n\t\n\tif (type != null && p0 != null && pe != null)\n\t{\n\t\tvar count = 1;\n\t\t\n\t\t// Uses next non-overlapping point\n\t\twhile (count < n - 1 && Math.round(p0.x - pe.x) == 0 && Math.round(p0.y - pe.y) == 0)\n\t\t{\n\t\t\tp0 = (source) ? pts[1 + count] : pts[n - 2 - count];\n\t\t\tcount++;\n\t\t}\n\t\n\t\t// Computes the norm and the inverse norm\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\n\t\tvar dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\n\t\tvar unitX = dx / dist;\n\t\tvar unitY = dy / dist;\n\t\n\t\tvar size = mxUtils.getNumber(this.style, (source) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\n\t\t// Allow for stroke width in the end point used and the \n\t\t// orthogonal vectors describing the direction of the marker\n\t\tvar filled = this.style[(source) ? mxConstants.STYLE_STARTFILL : mxConstants.STYLE_ENDFILL] != 0;\n\t\t\n\t\tresult = mxMarker.createMarker(c, this, type, pe, unitX, unitY, size, source, this.strokewidth, filled);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\t// Adds marker sizes\n\tvar size = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_MARKERSIZE) + 1;\n\t}\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = Math.max(size, mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE)) + 1;\n\t}\n\t\n\tbbox.grow(size * this.scale);\n};\n\n__mxOutput.mxConnector = typeof mxConnector !== 'undefined' ? mxConnector : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlane\n *\n * Extends <mxShape> to implement a swimlane shape. This shape is registered\n * under <mxConstants.SHAPE_SWIMLANE> in <mxCellRenderer>. Use the\n * <mxConstants.STYLE_STYLE_STARTSIZE> to define the size of the title\n * region, <mxConstants.STYLE_SWIMLANE_FILLCOLOR> for the content area fill,\n * <mxConstants.STYLE_SEPARATORCOLOR> to draw an additional vertical separator\n * and <mxConstants.STYLE_SWIMLANE_LINE> to hide the line between the title\n * region and the content area. The <mxConstants.STYLE_HORIZONTAL> affects\n * the orientation of this shape, not only its label.\n * \n * Constructor: mxSwimlane\n *\n * Constructs a new swimlane shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxSwimlane(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxSwimlane, mxShape);\n\n/**\n * Variable: imageSize\n *\n * Default imagewidth and imageheight if an image but no imagewidth\n * and imageheight are defined in the style. Value is 16.\n */\nmxSwimlane.prototype.imageSize = 16;\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxSwimlane.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: getTitleSize\n * \n * Returns the title size.\n */\nmxSwimlane.prototype.getTitleSize = function()\n{\n\treturn Math.max(0, mxUtils.getValue(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounding box for the label.\n */\nmxSwimlane.prototype.getLabelBounds = function(rect)\n{\n\tvar start = this.getTitleSize();\n\tvar bounds = new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n\tvar horizontal = this.isHorizontal();\n\t\n\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t// East is default\n\tvar shapeVertical = (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n\tvar realHorizontal = horizontal == !shapeVertical;\n\t\n\tvar realFlipH = !realHorizontal && flipH != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\tvar realFlipV = realHorizontal && flipV != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\n\t// Shape is horizontal\n\tif (!shapeVertical)\n\t{\n\t\tvar tmp = Math.min(bounds.height, start * this.scale);\n\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.y += bounds.height - tmp;\n\t\t}\n\n\t\tbounds.height = tmp;\n\t}\n\telse\n\t{\n\t\tvar tmp = Math.min(bounds.width, start * this.scale);\n\t\t\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.x += bounds.width - tmp;\t\n\t\t}\n\n\t\tbounds.width = tmp;\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t\treturn new mxRectangle(x, y, w, start);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t\treturn new mxRectangle(x, y, start, h);\n\t}\n};\n\n/**\n * Function: getSwimlaneArcSize\n * \n * Returns the arcsize for the swimlane.\n */\nmxSwimlane.prototype.getSwimlaneArcSize = function(w, h, start)\n{\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\treturn Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\n\t\treturn start * f * 3; \n\t}\n};\n\n/**\n * Function: isHorizontal\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.isHorizontal = function()\n{\n\treturn mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_FILLCOLOR, mxConstants.NONE);\n\tvar swimlaneLine = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_LINE, 1) == 1;\n\tvar r = 0;\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t}\n\t\n\tc.translate(x, y);\n\t\n\tif (!this.isRounded)\n\t{\n\t\tthis.paintSwimlane(c, x, y, w, h, start, fill, swimlaneLine);\n\t}\n\telse\n\t{\n\t\tr = this.getSwimlaneArcSize(w, h, start);\n\t\tr = Math.min(((this.isHorizontal()) ? h : w) - start, Math.min(start, r));\n\t\tthis.paintRoundedSwimlane(c, x, y, w, h, start, r, fill, swimlaneLine);\n\t}\n\t\n\tvar sep = mxUtils.getValue(this.style, mxConstants.STYLE_SEPARATORCOLOR, mxConstants.NONE);\n\tthis.paintSeparator(c, x, y, w, h, start, sep);\n\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x - x, bounds.y - y, bounds.width, bounds.height,\n\t\t\t\tthis.image, false, false, false);\n\t}\n\t\n\tif (this.glass)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintGlassEffect(c, 0, 0, w, start, r);\n\t}\n};\n\n/**\n * Function: paintSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintSwimlane = function(c, x, y, w, h, start, fill, swimlaneLine)\n{\n\tc.begin();\n\t\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t{\n\t\tc.pointerEvents = false;\n\t}\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(w, 0);\n\t\tc.lineTo(w, start);\n\t\tc.fillAndStroke();\n\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(0, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(start, h);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintRoundedSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintRoundedSwimlane = function(c, x, y, w, h, start, r, fill, swimlaneLine)\n{\n\tc.begin();\n\t\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t{\n\t\tc.pointerEvents = false;\n\t}\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(w, start);\n\t\tc.lineTo(w, r);\n\t\tc.quadTo(w, 0, w - Math.min(w / 2, r), 0);\n\t\tc.lineTo(Math.min(w / 2, r), 0);\n\t\tc.quadTo(0, 0, 0, r);\n\t\tc.lineTo(0, start);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h - r);\n\t\t\tc.quadTo(0, h, Math.min(w / 2, r), h);\n\t\t\tc.lineTo(w - Math.min(w / 2, r), h);\n\t\t\tc.quadTo(w, h, w, h - r);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(r, 0);\n\t\tc.quadTo(0, 0, 0, Math.min(h / 2, r));\n\t\tc.lineTo(0, h - Math.min(h / 2, r));\n\t\tc.quadTo(0, h, r, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE || !events)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (fill != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, h);\n\t\t\tc.lineTo(w - r, h);\n\t\t\tc.quadTo(w, h, w, h - Math.min(h / 2, r));\n\t\t\tc.lineTo(w, Math.min(h / 2, r));\n\t\t\tc.quadTo(w, 0, w - r, 0);\n\t\t\tc.lineTo(start, 0);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintDivider\n *\n * Paints the divider between swimlane title and content area.\n */\nmxSwimlane.prototype.paintDivider = function(c, x, y, w, h, start, shadow)\n{\n\tif (!shadow)\n\t{\n\t\tc.setShadow(false);\n\t}\n\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(w, start);\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(start, h);\n\t}\n\n\tc.stroke();\n};\n\n/**\n * Function: paintSeparator\n *\n * Paints the vertical or horizontal separator line between swimlanes.\n */\nmxSwimlane.prototype.paintSeparator = function(c, x, y, w, h, start, color)\n{\n\tif (color != mxConstants.NONE)\n\t{\n\t\tc.setStrokeColor(color);\n\t\tc.setDashed(true);\n\t\tc.begin();\n\t\t\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tc.moveTo(w, start);\n\t\t\tc.lineTo(w, h);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t\tc.setDashed(false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.getImageBounds = function(x, y, w, h)\n{\n\tif (this.isHorizontal())\n\t{\n\t\treturn new mxRectangle(x + w - this.imageSize, y, this.imageSize, this.imageSize);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangle(x, y, this.imageSize, this.imageSize);\n\t}\n};\n\n__mxOutput.mxSwimlane = typeof mxSwimlane !== 'undefined' ? mxSwimlane : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphLayout\n * \n * Base class for all layout algorithms in mxGraph. Main public functions are\n * <moveCell> for handling a moved cell within a layouted parent, and <execute> for\n * running the layout on a given parent cell.\n *\n * Known Subclasses:\n *\n * <mxCircleLayout>, <mxCompactTreeLayout>, <mxCompositeLayout>,\n * <mxFastOrganicLayout>, <mxParallelEdgeLayout>, <mxPartitionLayout>,\n * <mxStackLayout>\n * \n * Constructor: mxGraphLayout\n *\n * Constructs a new layout using the given layouts.\n *\n * Arguments:\n * \n * graph - Enclosing \n */\nfunction mxGraphLayout(graph)\n{\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphLayout.prototype.graph = null;\n\n/**\n * Variable: useBoundingBox\n *\n * Boolean indicating if the bounding box of the label should be used if\n * its available. Default is true.\n */\nmxGraphLayout.prototype.useBoundingBox = true;\n\n/**\n * Variable: parent\n *\n * The parent cell of the layout, if any\n */\nmxGraphLayout.prototype.parent = null;\n\n/**\n * Function: moveCell\n * \n * Notified when a cell is being moved in a parent that has automatic\n * layout to update the cell state (eg. index) so that the outcome of the\n * layout will position the vertex as close to the point (x, y) as\n * possible.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * x - X-coordinate of the new cell location.\n * y - Y-coordinate of the new cell location.\n */\nmxGraphLayout.prototype.moveCell = function(cell, x, y) { };\n\n/**\n * Function: resizeCell\n * \n * Notified when a cell is being resized in a parent that has automatic\n * layout to update the other cells in the layout.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * bounds - <mxRectangle> that represents the new cell bounds.\n */\nmxGraphLayout.prototype.resizeCell = function(cell, bounds) { };\n\n/**\n * Function: execute\n * \n * Executes the layout algorithm for the children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be layed out.\n */\nmxGraphLayout.prototype.execute = function(parent) { };\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxGraphLayout.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: getConstraint\n * \n * Returns the constraint for the given key and cell. The optional edge and\n * source arguments are used to return inbound and outgoing routing-\n * constraints for the given edge and vertex. This implementation always\n * returns the value for the given key in the style of the given cell.\n * \n * Parameters:\n * \n * key - Key of the constraint to be returned.\n * cell - <mxCell> whose constraint should be returned.\n * edge - Optional <mxCell> that represents the connection whose constraint\n * should be returned. Default is null.\n * source - Optional boolean that specifies if the connection is incoming\n * or outgoing. Default is null.\n */\nmxGraphLayout.prototype.getConstraint = function(key, cell, edge, source)\n{\n\treturn this.graph.getCurrentCellStyle(cell)[key]\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> of cell paths for the visited cells.\n */\nmxGraphLayout.traverse = function(vertex, directed, func, edge, visited)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.graph.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.graph.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.graph.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || isSource)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.graph.view.getVisibleTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n * traverseAncestors - boolean whether to \n */\nmxGraphLayout.prototype.isAncestor = function(parent, child, traverseAncestors)\n{\n\tif (!traverseAncestors)\n\t{\n\t\treturn (this.graph.model.getParent(child) == parent);\n\t}\t\n\t\n\tif (child == parent)\n\t{\n\t\treturn false;\n\t}\n\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.graph.model.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: isVertexMovable\n * \n * Returns a boolean indicating if the given <mxCell> is movable or\n * bendable by the algorithm. This implementation returns true if the given\n * cell is movable in the graph.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraphLayout.prototype.isVertexMovable = function(cell)\n{\n\treturn this.graph.isCellMovable(cell);\n};\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn !this.graph.getModel().isVertex(vertex) ||\n\t\t!this.graph.isCellVisible(vertex);\n};\n\n/**\n * Function: isEdgeIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * cell - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isEdgeIgnored = function(edge)\n{\n\tvar model = this.graph.getModel();\n\t\n\treturn !model.isEdge(edge) ||\n\t\t!this.graph.isCellVisible(edge) ||\n\t\tmodel.getTerminal(edge, true) == null ||\n\t\tmodel.getTerminal(edge, false) == null;\n};\n\n/**\n * Function: setEdgeStyleEnabled\n * \n * Disables or enables the edge style of the given edge.\n */\nmxGraphLayout.prototype.setEdgeStyleEnabled = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_NOEDGESTYLE,\n\t\t\t(value) ? '0' : '1', [edge]);\n};\n\n/**\n * Function: setOrthogonalEdge\n * \n * Disables or enables orthogonal end segments of the given edge.\n */\nmxGraphLayout.prototype.setOrthogonalEdge = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_ORTHOGONAL,\n\t\t\t(value) ? '1' : '0', [edge]);\n};\n\n/**\n * Function: getParentOffset\n * \n * Determines the offset of the given parent to the parent\n * of the layout\n */\nmxGraphLayout.prototype.getParentOffset = function(parent)\n{\n\tvar result = new mxPoint();\n\n\tif (parent != null && parent != this.parent)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isAncestor(this.parent, parent))\n\t\t{\n\t\t\tvar parentGeo = model.getGeometry(parent);\n\n\t\t\twhile (parent != this.parent)\n\t\t\t{\n\t\t\t\tresult.x = result.x + parentGeo.x;\n\t\t\t\tresult.y = result.y + parentGeo.y;\n\n\t\t\t\tparent = model.getParent(parent);;\n\t\t\t\tparentGeo = model.getGeometry(parent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: setEdgePoints\n * \n * Replaces the array of mxPoints in the geometry of the given edge\n * with the given array of mxPoints.\n */\nmxGraphLayout.prototype.setEdgePoints = function(edge, points)\n{\n\tif (edge != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar geometry = model.getGeometry(edge);\n\n\t\tif (geometry == null)\n\t\t{\n\t\t\tgeometry = new mxGeometry();\n\t\t\tgeometry.setRelative(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t}\n\n\t\tif (this.parent != null && points != null)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tpoints[i].x = points[i].x - parentOffset.x;\n\t\t\t\tpoints[i].y = points[i].y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tgeometry.points = points;\n\t\tmodel.setGeometry(edge, geometry);\n\t}\n};\n\n/**\n * Function: setVertexLocation\n * \n * Sets the new position of the given cell taking into account the size of\n * the bounding box if <useBoundingBox> is true. The change is only carried\n * out if the new location is not equal to the existing location, otherwise\n * the geometry is not replaced with an updated instance. The new or old\n * bounds are returned (including overlapping labels).\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry is to be set.\n * x - Integer that defines the x-coordinate of the new location.\n * y - Integer that defines the y-coordinate of the new location.\n */\nmxGraphLayout.prototype.setVertexLocation = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(cell);\n\tvar result = null;\n\t\n\tif (geometry != null)\n\t{\n\t\tresult = new mxRectangle(x, y, geometry.width, geometry.height);\n\t\t\n\t\t// Checks for oversize labels and shifts the result\n\t\t// TODO: Use mxUtils.getStringSize for label bounds\n\t\tif (this.useBoundingBox)\n\t\t{\n\t\t\tvar state = this.graph.getView().getState(cell);\n\t\t\t\n\t\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar box = state.text.boundingBox;\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.x < state.x)\n\t\t\t\t{\n\t\t\t\t\tx += (state.x - box.x) / scale;\n\t\t\t\t\tresult.width = box.width;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y < state.y)\n\t\t\t\t{\n\t\t\t\t\ty += (state.y - box.y) / scale;\n\t\t\t\t\tresult.height = box.height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.parent != null)\n\t\t{\n\t\t\tvar parent = model.getParent(cell);\n\n\t\t\tif (parent != null && parent != this.parent)\n\t\t\t{\n\t\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\t\tx = x - parentOffset.x;\n\t\t\t\ty = y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tif (geometry.x != x || geometry.y != y)\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t\tgeometry.x = x;\n\t\t\tgeometry.y = y;\n\t\t\t\n\t\t\tmodel.setGeometry(cell, geometry);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVertexBounds\n * \n * Returns an <mxRectangle> that defines the bounds of the given cell or\n * the bounding box if <useBoundingBox> is true.\n */\nmxGraphLayout.prototype.getVertexBounds = function(cell)\n{\n\tvar geo = this.graph.getModel().getGeometry(cell);\n\n\t// Checks for oversize label bounding box and corrects\n\t// the return value accordingly\n\t// TODO: Use mxUtils.getStringSize for label bounds\n\tif (this.useBoundingBox)\n\t{\n\t\tvar state = this.graph.getView().getState(cell);\n\n\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tvar scale = this.graph.getView().scale;\n\t\t\tvar tmp = state.text.boundingBox;\n\n\t\t\tvar dx0 = Math.max(state.x - tmp.x, 0) / scale;\n\t\t\tvar dy0 = Math.max(state.y - tmp.y, 0) / scale;\n\t\t\tvar dx1 = Math.max((tmp.x + tmp.width) - (state.x + state.width), 0) / scale;\n  \t\t\tvar dy1 = Math.max((tmp.y + tmp.height) - (state.y + state.height), 0) / scale;\n\n\t\t\tgeo = new mxRectangle(geo.x - dx0, geo.y - dy0, geo.width + dx0 + dx1, geo.height + dy0 + dy1);\n\t\t}\n\t}\n\n\tif (this.parent != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tgeo = geo.clone();\n\n\t\tif (parent != null && parent != this.parent)\n\t\t{\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\t\t\tgeo.x = geo.x + parentOffset.x;\n\t\t\tgeo.y = geo.y + parentOffset.y;\n\t\t}\n\t}\n\n\treturn new mxRectangle(geo.x, geo.y, geo.width, geo.height);\n};\n\n/**\n * Function: arrangeGroups\n * \n * Shortcut to <mxGraph.updateGroupBounds> with moveGroup set to true.\n */\nmxGraphLayout.prototype.arrangeGroups = function(cells, border, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\treturn this.graph.updateGroupBounds(cells, border, true, topBorder, rightBorder, bottomBorder, leftBorder);\n};\n\n/**\n * Class: WeightedCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the weighted\n * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==\n * (x.equals(y))\n *\n * Constructor: WeightedCellSorter\n * \n * Constructs a new weighted cell sorted for the given cell and weight.\n */\nfunction WeightedCellSorter(cell, weightedValue)\n{\n\tthis.cell = cell;\n\tthis.weightedValue = weightedValue;\n};\n\n/**\n * Variable: weightedValue\n * \n * The weighted value of the cell stored.\n */\nWeightedCellSorter.prototype.weightedValue = 0;\n\n/**\n * Variable: nudge\n * \n * Whether or not to flip equal weight values.\n */\nWeightedCellSorter.prototype.nudge = false;\n\n/**\n * Variable: visited\n * \n * Whether or not this cell has been visited in the current assignment.\n */\nWeightedCellSorter.prototype.visited = false;\n\n/**\n * Variable: rankIndex\n * \n * The index this cell is in the model rank.\n */\nWeightedCellSorter.prototype.rankIndex = null;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated.\n */\nWeightedCellSorter.prototype.cell = null;\n\n/**\n * Function: compare\n * \n * Compares two WeightedCellSorters.\n */\nWeightedCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.weightedValue > a.weightedValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.weightedValue < a.weightedValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b.nudge)\n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxGraphLayout = typeof mxGraphLayout !== 'undefined' ? mxGraphLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStackLayout\n * \n * Extends <mxGraphLayout> to create a horizontal or vertical stack of the\n * child vertices. The children do not need to be connected for this layout\n * to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxStackLayout(graph, true);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxStackLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxStackLayout(graph, horizontal, spacing, x0, y0, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = (spacing != null) ? spacing : 0;\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.border = (border != null) ? border : 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxStackLayout.prototype = new mxGraphLayout();\nmxStackLayout.prototype.constructor = mxStackLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxStackLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n *\n * Specifies the spacing between the cells. Default is 0.\n */\nmxStackLayout.prototype.spacing = null;\n\n/**\n * Variable: x0\n *\n * Specifies the horizontal origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.x0 = null;\n\n/**\n * Variable: y0\n *\n * Specifies the vertical origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.y0 = null;\n\n/**\n * Variable: border\n *\n * Border to be added if fill is true. Default is 0.\n */\nmxStackLayout.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginTop = 0;\n\n/**\n * Variable: marginLeft\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginLeft = 0;\n\n/**\n * Variable: marginRight\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginRight = 0;\n\n/**\n * Variable: marginBottom\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginBottom = 0;\n\n/**\n * Variable: keepFirstLocation\n * \n * Boolean indicating if the location of the first cell should be\n * kept, that is, it will not be moved to x0 or y0. Default is false.\n */\nmxStackLayout.prototype.keepFirstLocation = false;\n\n/**\n * Variable: fill\n * \n * Boolean indicating if dimension should be changed to fill out the parent\n * cell. Default is false.\n */\nmxStackLayout.prototype.fill = false;\n\t\n/**\n * Variable: resizeParent\n * \n * If the parent should be resized to match the width/height of the\n * stack. Default is false.\n */\nmxStackLayout.prototype.resizeParent = false;\n\n/**\n * Variable: resizeParentMax\n * \n * Use maximum of existing value and new value for resize of parent.\n * Default is false.\n */\nmxStackLayout.prototype.resizeParentMax = false;\n\n/**\n * Variable: resizeLast\n * \n * If the last element should be resized to fill out the parent. Default is\n * false. If <resizeParent> is true then this is ignored.\n */\nmxStackLayout.prototype.resizeLast = false;\n\n/**\n * Variable: wrap\n * \n * Value at which a new column or row should be created. Default is null.\n */\nmxStackLayout.prototype.wrap = null;\n\n/**\n * Variable: borderCollapse\n * \n * If the strokeWidth should be ignored. Default is true.\n */\nmxStackLayout.prototype.borderCollapse = true;\n\n/**\n * Variable: allowGaps\n * \n * If gaps should be allowed in the stack. Default is false.\n */\nmxStackLayout.prototype.allowGaps = false;\n\n/**\n * Variable: gridSize\n * \n * Grid size for alignment of position and size. Default is 0.\n */\nmxStackLayout.prototype.gridSize = 0;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxStackLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxStackLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\tvar horizontal = this.isHorizontal();\n\t\n\tif (cell != null && parent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar value = (horizontal) ? x : y;\n\t\tvar pstate = this.graph.getView().getState(parent);\n\n\t\tif (pstate != null)\n\t\t{\n\t\t\tvalue -= (horizontal) ? pstate.x : pstate.y;\n\t\t}\n\t\t\n\t\tvalue /= this.graph.view.scale;\n\t\t\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != cell)\n\t\t\t{\n\t\t\t\tvar bounds = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = (horizontal) ?\n\t\t\t\t\t\tbounds.x + bounds.width / 2 :\n\t\t\t\t\t\tbounds.y + bounds.height / 2;\n\t\t\t\t\t\n\t\t\t\t\tif (last <= value && tmp > value)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlast = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: getParentSize\n * \n * Returns the size for the parent container or the size of the graph\n * container if the parent is a layer or the root of the model.\n */\nmxStackLayout.prototype.getParentSize = function(parent)\n{\n\tvar model = this.graph.getModel();\t\t\t\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null && ((pgeo == null &&\n\t\tmodel.isLayer(parent)) || parent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\t\n\treturn pgeo;\n};\n\n/**\n * Function: getLayoutCells\n * \n * Returns the cells to be layouted.\n */\nmxStackLayout.prototype.getLayoutCells = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(parent);\n\tvar cells = [];\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isVertexIgnored(child) && this.isVertexMovable(child))\n\t\t{\n\t\t\tcells.push(child);\n\t\t}\n\t}\n\t\n\tif (this.allowGaps)\n\t{\n\t\tcells.sort(mxUtils.bind(this, function(c1, c2)\n\t\t{\n\t\t\tvar geo1 = this.graph.getCellGeometry(c1);\n\t\t\tvar geo2 = this.graph.getCellGeometry(c2);\n\t\t\t\n\t\t\treturn (this.horizontal) ?\n\t\t\t\t((geo1.x == geo2.x) ? 0 : ((geo1.x > geo2.x > 0) ? 1 : -1)) :\n\t\t\t\t((geo1.y == geo2.y) ? 0 : ((geo1.y > geo2.y > 0) ? 1 : -1));\n\t\t}));\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: snap\n * \n * Snaps the given value to the grid size.\n */\nmxStackLayout.prototype.snap = function(value)\n{\n\tif (this.gridSize != null && this.gridSize > 0)\n\t{\n\t\tvalue = Math.max(value, this.gridSize);\n\t\t\n\t\tif (value / this.gridSize > 1)\n\t\t{\n\t\t\tvar mod = value % this.gridSize;\n\t\t\tvalue += mod > this.gridSize / 2 ? (this.gridSize - mod) : -mod;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.execute = function(parent)\n{\n\tif (parent != null)\n\t{\n\t\tvar pgeo = this.getParentSize(parent);\n\t\tvar horizontal = this.isHorizontal();\n\t\tvar model = this.graph.getModel();\t\n\t\tvar fillValue = null;\n\t\t\n\t\tif (pgeo != null)\n\t\t{\n\t\t\tfillValue = (horizontal) ? pgeo.height - this.marginTop - this.marginBottom :\n\t\t\t\tpgeo.width - this.marginLeft - this.marginRight;\n\t\t}\n\t\t\n\t\tfillValue -= 2 * this.border;\n\t\tvar x0 = this.x0 + this.border + this.marginLeft;\n\t\tvar y0 = this.y0 + this.border + this.marginTop;\n\t\t\n\t\t// Handles swimlane start size\n\t\tif (this.graph.isSwimlane(parent))\n\t\t{\n\t\t\t// Uses computed style to get latest \n\t\t\tvar style = this.graph.getCellStyle(parent);\n\t\t\tvar start = mxUtils.getNumber(style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE);\n\t\t\tvar horz = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true) == 1;\n\n\t\t\tif (pgeo != null)\n\t\t\t{\n\t\t\t\tif (horz)\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.height);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.width);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal == horz)\n\t\t\t{\n\t\t\t\tfillValue -= start;\n\t\t\t}\n\n\t\t\tif (horz)\n\t\t\t{\n\t\t\t\ty0 += start;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx0 += start;\n\t\t\t}\n\t\t}\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar tmp = 0;\n\t\t\tvar last = null;\n\t\t\tvar lastValue = 0;\n\t\t\tvar lastChild = null;\n\t\t\tvar cells = this.getLayoutCells(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar child = cells[i];\n\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (this.wrap != null && last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((horizontal && last.x + last.width +\n\t\t\t\t\t\t\tgeo.width + 2 * this.spacing > this.wrap) ||\n\t\t\t\t\t\t\t(!horizontal && last.y + last.height +\n\t\t\t\t\t\t\tgeo.height + 2 * this.spacing > this.wrap))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlast = null;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ty0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tx0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = 0;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttmp = Math.max(tmp, (horizontal) ? geo.height : geo.width);\n\t\t\t\t\tvar sw = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (!this.borderCollapse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childStyle = this.graph.getCellStyle(child);\n\t\t\t\t\t\tsw = mxUtils.getNumber(childStyle, mxConstants.STYLE_STROKEWIDTH, 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar temp = lastValue + this.spacing + Math.floor(sw / 2);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = this.snap(((this.allowGaps) ? Math.max(temp, geo.x) :\n\t\t\t\t\t\t\t\ttemp) - this.marginLeft) + this.marginLeft;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = this.snap(((this.allowGaps) ? Math.max(temp, geo.y) :\n\t\t\t\t\t\t\t\ttemp) - this.marginTop) + this.marginTop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!this.keepFirstLocation)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = (this.allowGaps && geo.x > x0) ? Math.max(this.snap(geo.x -\n\t\t\t\t\t\t\t\tthis.marginLeft) + this.marginLeft, x0) : x0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = (this.allowGaps && geo.y > y0) ? Math.max(this.snap(geo.y -\n\t\t\t\t\t\t\t\tthis.marginTop) + this.marginTop, y0) : y0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y = y0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.fill && fillValue != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = fillValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = fillValue;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = this.snap(geo.width);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = this.snap(geo.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.setChildGeometry(child, geo);\n\t\t\t\t\tlastChild = child;\n\t\t\t\t\tlast = geo;\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.x + last.width + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.y + last.height + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resizeParent && pgeo != null && last != null && !this.graph.isCellCollapsed(parent))\n\t\t\t{\n\t\t\t\tthis.updateParentGeometry(parent, pgeo, last);\n\t\t\t}\n\t\t\telse if (this.resizeLast && pgeo != null && last != null && lastChild != null)\n\t\t\t{\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tlast.width = pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlast.height = pgeo.height - last.y - this.spacing - this.marginBottom;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.setChildGeometry(lastChild, last);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: setChildGeometry\n * \n * Sets the specific geometry to the given child cell.\n * \n * Parameters:\n * \n * child - The given child of <mxCell>.\n * geo - The specific geometry of <mxGeometry>.\n */\nmxStackLayout.prototype.setChildGeometry = function(child, geo)\n{\n\tvar geo2 = this.graph.getCellGeometry(child);\n\t\n\tif (geo2 == null || geo.x != geo2.x || geo.y != geo2.y ||\n\t\tgeo.width != geo2.width || geo.height != geo2.height)\n\t{\n\t\tthis.graph.getModel().setGeometry(child, geo);\n\t}\n};\n\n/**\n * Function: updateParentGeometry\n * \n * Updates the geometry of the given parent cell.\n * \n * Parameters:\n * \n * parent - The given parent of <mxCell>.\n * pgeo - The new <mxGeometry> for parent.\n * last - The last <mxGeometry>.\n */\nmxStackLayout.prototype.updateParentGeometry = function(parent, pgeo, last)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\t\n\n\tvar pgeo2 = pgeo.clone();\n\t\n\tif (horizontal)\n\t{\n\t\tvar tmp = last.x + last.width + this.marginRight + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.width = Math.max(pgeo2.width, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.width = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tmp = last.y + last.height + this.marginBottom + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.height = Math.max(pgeo2.height, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.height = tmp;\n\t\t}\n\t}\n\t\n\tif (pgeo.x != pgeo2.x || pgeo.y != pgeo2.y ||\n\t\tpgeo.width != pgeo2.width || pgeo.height != pgeo2.height)\n\t{\n\t\tmodel.setGeometry(parent, pgeo2);\n\t}\n};\n\n__mxOutput.mxStackLayout = typeof mxStackLayout !== 'undefined' ? mxStackLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPartitionLayout\n * \n * Extends <mxGraphLayout> for partitioning the parent cell vertically or\n * horizontally by filling the complete area with the child cells. A horizontal\n * layout partitions the height of the given parent whereas a a non-horizontal\n * layout partitions the width. If the parent is a layer (that is, a child of\n * the root node), then the current graph size is partitioned. The children do\n * not need to be connected for this layout to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxPartitionLayout(graph, true, 10, 20);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxPartitionLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxPartitionLayout(graph, horizontal, spacing, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = spacing || 0;\n\tthis.border = border || 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxPartitionLayout.prototype = new mxGraphLayout();\nmxPartitionLayout.prototype.constructor = mxPartitionLayout;\n\n/**\n * Variable: horizontal\n * \n * Boolean indicating the direction in which the space is partitioned.\n * Default is true.\n */\nmxPartitionLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n * \n * Integer that specifies the absolute spacing in pixels between the\n * children. Default is 0.\n */\nmxPartitionLayout.prototype.spacing = null;\n\n/**\n * Variable: border\n * \n * Integer that specifies the absolute inset in pixels for the parent that\n * contains the children. Default is 0.\n */\nmxPartitionLayout.prototype.border = null;\n\n/**\n * Variable: resizeVertices\n * \n * Boolean that specifies if vertices should be resized. Default is true.\n */\nmxPartitionLayout.prototype.resizeVertices = true;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxPartitionLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxPartitionLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\t\n\tif (cell != null &&\n\t\tparent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\t// Finds index of the closest swimlane\n\t\t// TODO: Take into account the orientation\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\tvar bounds = this.getVertexBounds(child);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tvar tmp = bounds.x + bounds.width / 2;\n\t\t\t\t\n\t\t\t\tif (last < x && tmp > x)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlast = tmp;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\t\t\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. All children where <isVertexIgnored>\n * returns false and <isVertexMovable> returns true are modified.\n */\nmxPartitionLayout.prototype.execute = function(parent)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null &&\n\t\t((pgeo == null &&\n\t\tmodel.isLayer(parent)) ||\n\t\tparent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\n\tif (pgeo != null)\n\t{\n\t\tvar children = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(child) &&\n\t\t\t\tthis.isVertexMovable(child))\n\t\t\t{\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar n = children.length;\n\n\t\tif (n > 0)\n\t\t{\n\t\t\tvar x0 = this.border;\n\t\t\tvar y0 = this.border;\n\t\t\tvar other = (horizontal) ? pgeo.height : pgeo.width;\n\t\t\tother -= 2 * this.border;\n\n\t\t\tvar size = (this.graph.isSwimlane(parent)) ?\n\t\t\t\tthis.graph.getStartSize(parent) :\n\t\t\t\tnew mxRectangle();\n\n\t\t\tother -= (horizontal) ? size.height : size.width;\n\t\t\tx0 = x0 + size.width;\n\t\t\ty0 = y0 + size.height;\n\n\t\t\tvar tmp = this.border + (n - 1) * this.spacing;\n\t\t\tvar value = (horizontal) ?\n\t\t\t\t((pgeo.width - x0 - tmp) / n) :\n\t\t\t\t((pgeo.height - y0 - tmp) / n);\n\t\t\t\n\t\t\t// Avoids negative values, that is values where the sum of the\n\t\t\t// spacing plus the border is larger then the available space\n\t\t\tif (value > 0)\n\t\t\t{\n\t\t\t\tmodel.beginUpdate();\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t\tgeo.y = y0;\n\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.width = value;\n\t\t\t\t\t\t\t\t\tgeo.height = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tx0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.height = value;\n\t\t\t\t\t\t\t\t\tgeo.width = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ty0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel.setGeometry(child, geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxPartitionLayout = typeof mxPartitionLayout !== 'undefined' ? mxPartitionLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCompactTreeLayout\n * \n * Extends <mxGraphLayout> to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new compact tree layout for the specified graph\n * and orientation.\n */\nfunction mxCompactTreeLayout(graph, horizontal, invert)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.invert = (invert != null) ? invert : false;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompactTreeLayout.prototype = new mxGraphLayout();\nmxCompactTreeLayout.prototype.constructor = mxCompactTreeLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxCompactTreeLayout.prototype.horizontal = null;\t \n\n/**\n * Variable: invert\n *\n * Specifies if edge directions should be inverted. Default is false.\n */\nmxCompactTreeLayout.prototype.invert = null;\t \n\n/**\n * Variable: resizeParent\n * \n * If the parents should be resized to match the width/height of the\n * children. Default is true.\n */\nmxCompactTreeLayout.prototype.resizeParent = true;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxCompactTreeLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents. Default is 10.\n */\nmxCompactTreeLayout.prototype.groupPadding = 10;\n\n/**\n * Variable: groupPaddingTop\n * \n * Top padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingTop = 0;\n\n/**\n * Variable: groupPaddingRight\n * \n * Right padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingRight = 0;\n\n/**\n * Variable: groupPaddingBottom\n * \n * Bottom padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingBottom = 0;\n\n/**\n * Variable: groupPaddingLeft\n * \n * Left padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingLeft = 0;\n\n/**\n * Variable: parentsChanged\n *\n * A set of the parents that need updating based on children\n * process as part of the layout.\n */\nmxCompactTreeLayout.prototype.parentsChanged = null;\n\n/**\n * Variable: moveTree\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.moveTree = false;\n\n/**\n * Variable: visited\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.visited = null;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 10.\n */\nmxCompactTreeLayout.prototype.levelDistance = 10;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 20.\n */\nmxCompactTreeLayout.prototype.nodeDistance = 20;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCompactTreeLayout.prototype.resetEdges = true;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefVertEdgeOff = 4;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex.\n */\nmxCompactTreeLayout.prototype.minEdgeJetty = 8;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed.\n */\nmxCompactTreeLayout.prototype.channelBuffer = 4;\n\n/**\n * Variable: edgeRouting\n * \n * Whether or not to apply the internal tree edge routing.\n */\nmxCompactTreeLayout.prototype.edgeRouting = true;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxCompactTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: alignRanks\n * \n * Whether or not the tops of cells in each rank should be aligned\n * across the rank\n */\nmxCompactTreeLayout.prototype.alignRanks = false;\n\n/**\n * Variable: maxRankHeight\n * \n * An array of the maximum height of cells (relative to the layout direction)\n * per rank\n */\nmxCompactTreeLayout.prototype.maxRankHeight = null;\n\n/**\n * Variable: root\n * \n * The cell to use as the root of the tree\n */\nmxCompactTreeLayout.prototype.root = null;\n\n/**\n * Variable: node\n * \n * The internal node representation of the root cell. Do not set directly\n * , this value is only exposed to assist with post-processing functionality\n */\nmxCompactTreeLayout.prototype.node = null;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxCompactTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxCompactTreeLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n * Overrides <root> if specified.\n */\nmxCompactTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.getModel();\n\n\tif (root == null)\n\t{\n\t\t// Takes the parent as the root if it has outgoing edges\n\t\tif (this.graph.getEdges(parent, model.getParent(parent),\n\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t{\n\t\t\tthis.root = parent;\n\t\t}\n\t\t\n\t\t// Tries to find a suitable root in the parent's\n\t\t// children\n\t\telse\n\t\t{\n\t\t\tvar roots = this.graph.findTreeRoots(parent, true, this.invert);\n\t\t\t\n\t\t\tif (roots.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < roots.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (!this.isVertexIgnored(roots[i]) &&\n\t\t\t\t\t\tthis.graph.getEdges(roots[i], null,\n\t\t\t\t\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.root = roots[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.root = root;\n\t}\n\t\n\tif (this.root != null)\n\t{\n\t\tif (this.resizeParent)\n\t\t{\n\t\t\tthis.parentsChanged = new Object();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.parentsChanged = null;\n\t\t}\n\n\t\t//  Maintaining parent location\n\t\tthis.parentX = null;\n\t\tthis.parentY = null;\n\t\t\n\t\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tthis.parentX = geo.x;\n\t\t\t\tthis.parentY = geo.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmodel.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tthis.visited = new Object();\n\t\t\tthis.node = this.dfs(this.root, parent);\n\t\t\t\n\t\t\tif (this.alignRanks)\n\t\t\t{\n\t\t\t\tthis.maxRankHeight = [];\n\t\t\t\tthis.findRankHeights(this.node, 0);\n\t\t\t\tthis.setCellHeights(this.node, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.node != null)\n\t\t\t{\n\t\t\t\tthis.layout(this.node);\n\t\t\t\tvar x0 = this.graph.gridSize;\n\t\t\t\tvar y0 = x0;\n\t\t\t\t\n\t\t\t\tif (!this.moveTree)\n\t\t\t\t{\n\t\t\t\t\tvar g = this.getVertexBounds(this.root);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx0 = g.x;\n\t\t\t\t\t\ty0 = g.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bounds = null;\n\t\t\t\t\n\t\t\t\tif (this.isHorizontal())\n\t\t\t\t{\n\t\t\t\t\tbounds = this.horizontalLayout(this.node, x0, y0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbounds = this.verticalLayout(this.node, null, x0, y0);\n\t\t\t\t}\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\tvar dy = 0;\n\n\t\t\t\t\tif (bounds.x < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = Math.abs(x0 - bounds.x);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bounds.y < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = Math.abs(y0 - bounds.y);\t\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.moveNode(this.node, dx, dy);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.resizeParent)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.adjustParents();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.edgeRouting)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Iterate through all edges setting their positions\n\t\t\t\t\t\tthis.localEdgeProcessing(this.node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Maintaining parent location\n\t\t\t\tif (this.parentX != null && this.parentY != null)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\tgeo.x = this.parentX;\n\t\t\t\t\t\tgeo.y = this.parentY;\n\t\t\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: moveNode\n * \n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.moveNode = function(node, dx, dy)\n{\n\tnode.x += dx;\n\tnode.y += dy;\n\tthis.apply(node);\n\t\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.moveNode(child, dx, dy);\n\t\tchild = child.next;\n\t}\n};\n\n\n/**\n * Function: sortOutgoingEdges\n * \n * Called if <sortEdges> is true to sort the array of outgoing edges in place.\n */\nmxCompactTreeLayout.prototype.sortOutgoingEdges = function(source, edges)\n{\n\tvar lookup = new mxDictionary();\n\t\n\tedges.sort(function(e1, e2)\n\t{\n\t\tvar end1 = e1.getTerminal(e1.getTerminal(false) == source);\n\t\tvar p1 = lookup.get(end1);\n\t\t\n\t\tif (p1 == null)\n\t\t{\n\t\t\tp1 = mxCellPath.create(end1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end1, p1);\n\t\t}\n\n\t\tvar end2 = e2.getTerminal(e2.getTerminal(false) == source);\n\t\tvar p2 = lookup.get(end2);\n\t\t\n\t\tif (p2 == null)\n\t\t{\n\t\t\tp2 = mxCellPath.create(end2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end2, p2);\n\t\t}\n\n\t\treturn mxCellPath.compare(p1, p2);\n\t});\n};\n\n/**\n * Function: findRankHeights\n * \n * Stores the maximum height (relative to the layout\n * direction) of cells in each rank\n */\nmxCompactTreeLayout.prototype.findRankHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] == null || this.maxRankHeight[rank] < node.height)\n\t{\n\t\tthis.maxRankHeight[rank] = node.height;\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.findRankHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: setCellHeights\n * \n * Set the cells heights (relative to the layout\n * direction) when the tops of each rank are to be aligned\n */\nmxCompactTreeLayout.prototype.setCellHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] != null && this.maxRankHeight[rank] > node.height)\n\t{\n\t\tnode.height = this.maxRankHeight[rank];\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.setCellHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: dfs\n * \n * Does a depth first search starting at the specified cell.\n * Makes sure the specified parent is never left by the\n * algorithm.\n */\nmxCompactTreeLayout.prototype.dfs = function(cell, parent)\n{\n\tvar id = mxCellPath.create(cell);\n\tvar node = null;\n\t\n\tif (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell))\n\t{\n\t\tthis.visited[id] = cell;\n\t\tnode = this.createNode(cell);\n\n\t\tvar model = this.graph.getModel();\n\t\tvar prev = null;\n\t\tvar out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n\t\tvar view = this.graph.getView();\n\t\t\n\t\tif (this.sortEdges)\n\t\t{\n\t\t\tthis.sortOutgoingEdges(cell, out);\n\t\t}\n\n\t\tfor (var i = 0; i < out.length; i++)\n\t\t{\n\t\t\tvar edge = out[i];\n\t\t\t\n\t\t\tif (!this.isEdgeIgnored(edge))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.edgeRouting)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if terminal in same swimlane\n\t\t\t\tvar state = view.getState(edge);\n\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);\n\t\t\t\tvar tmp = this.dfs(target, parent);\n\t\t\t\t\n\t\t\t\tif (tmp != null && model.getGeometry(target) != null)\n\t\t\t\t{\n\t\t\t\t\tif (prev == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.child = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprev.next = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tprev = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: layout\n * \n * Starts the actual compact tree layout algorithm\n * at the given node.\n */\nmxCompactTreeLayout.prototype.layout = function(node)\n{\n\tif (node != null)\n\t{\n\t\tvar child = node.child;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tthis.layout(child);\n\t\t\tchild = child.next;\n\t\t}\n\t\t\n\t\tif (node.child != null)\n\t\t{\n\t\t\tthis.attachParent(node, this.join(node));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.layoutLeaf(node);\n\t\t}\n\t}\n};\n\n/**\n * Function: horizontalLayout\n */\nmxCompactTreeLayout.prototype.horizontalLayout = function(node, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetX;\n\tnode.y += y0 + node.offsetY;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.horizontalLayout(child, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.y + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\t\n/**\n * Function: verticalLayout\n */\nmxCompactTreeLayout.prototype.verticalLayout = function(node, parent, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetY;\n\tnode.y += y0 + node.offsetX;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.x + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: attachParent\n */\nmxCompactTreeLayout.prototype.attachParent = function(node, height)\n{\n\tvar x = this.nodeDistance + this.levelDistance;\n\tvar y2 = (height - node.width) / 2 - this.nodeDistance;\n\tvar y1 = y2 + node.width + 2 * this.nodeDistance - height;\n\t\n\tnode.child.offsetX = x + node.height;\n\tnode.child.offsetY = y1;\n\t\n\tnode.contour.upperHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y1, node.contour.upperHead));\n\tnode.contour.lowerHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y2, node.contour.lowerHead));\n};\n\n/**\n * Function: layoutLeaf\n */\nmxCompactTreeLayout.prototype.layoutLeaf = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tnode.contour.upperTail = this.createLine(\n\t\tnode.height + dist, 0);\n\tnode.contour.upperHead = node.contour.upperTail;\n\tnode.contour.lowerTail = this.createLine(\n\t\t0, -node.width - dist);\n\tnode.contour.lowerHead = this.createLine(\n\t\tnode.height + dist, 0, node.contour.lowerTail);\n};\n\n/**\n * Function: join\n */\nmxCompactTreeLayout.prototype.join = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tvar child = node.child;\n\tnode.contour = child.contour;\n\tvar h = child.width + dist;\n\tvar sum = h;\n\tchild = child.next;\n\t\n\twhile (child != null)\n\t{\n\t\tvar d = this.merge(node.contour, child.contour);\n\t\tchild.offsetY = d + h;\n\t\tchild.offsetX = 0;\n\t\th = child.width + dist;\n\t\tsum += d + h;\n\t\tchild = child.next;\n\t}\n\t\n\treturn sum;\n};\n\n/**\n * Function: merge\n */\nmxCompactTreeLayout.prototype.merge = function(p1, p2)\n{\n\tvar x = 0;\n\tvar y = 0;\n\tvar total = 0;\n\t\n\tvar upper = p1.lowerHead;\n\tvar lower = p2.upperHead;\n\t\n\twhile (lower != null && upper != null)\n\t{\n\t\tvar d = this.offset(x, y, lower.dx, lower.dy,\n\t\t\tupper.dx, upper.dy);\n\t\ty += d;\n\t\ttotal += d;\n\t\t\n\t\tif (x + lower.dx <= upper.dx)\n\t\t{\n\t\t\tx += lower.dx;\n\t\t\ty += lower.dy;\n\t\t\tlower = lower.next;\n\t\t}\n\t\telse\n\t\t{\t\t\t\t\n\t\t\tx -= upper.dx;\n\t\t\ty -= upper.dy;\n\t\t\tupper = upper.next;\n\t\t}\n\t}\n\t\n\tif (lower != null)\n\t{\n\t\tvar b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n\t\tp1.upperTail = (b.next != null) ? p2.upperTail : b;\n\t\tp1.lowerTail = p2.lowerTail;\n\t}\n\telse\n\t{\n\t\tvar b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n\t\t\n\t\tif (b.next == null)\n\t\t{\n\t\t\tp1.lowerTail = b;\n\t\t}\n\t}\n\t\n\tp1.lowerHead = p2.lowerHead;\n\t\n\treturn total;\n};\n\n/**\n * Function: offset\n */\nmxCompactTreeLayout.prototype.offset = function(p1, p2, a1, a2, b1, b2)\n{\n\tvar d = 0;\n\t\n\tif (b1 <= p1 || p1 + a1 <= 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar t = b1 * a2 - a1 * b2;\n\t\n\tif (t > 0)\n\t{\n\t\tif (p1 < 0)\n\t\t{\n\t\t\tvar s = p1 * a2;\n\t\t\td = s / a1 - p2;\n\t\t}\n\t\telse if (p1 > 0)\n\t\t{\n\t\t\tvar s = p1 * b2;\n\t\t\td = s / b1 - p2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\td = -p2;\n\t\t}\n\t}\n\telse if (b1 < p1 + a1)\n\t{\n\t\tvar s = (b1 - p1) * a2;\n\t\td = b2 - (p2 + s / a1);\n\t}\n\telse if (b1 > p1 + a1)\n\t{\n\t\tvar s = (a1 + p1) * b2;\n\t\td = s / b1 - (p2 + a2);\n\t}\n\telse\n\t{\n\t\td = b2 - (p2 + a2);\n\t}\n\n\tif (d > 0)\n\t{\n\t\treturn d;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n/**\n * Function: bridge\n */\nmxCompactTreeLayout.prototype.bridge = function(line1, x1, y1, line2, x2, y2)\n{\n\tvar dx = x2 + line2.dx - x1;\n\tvar dy = 0;\n\tvar s = 0;\n\t\n\tif (line2.dx == 0)\n\t{\n\t\tdy = line2.dy;\n\t}\n\telse\n\t{\n\t\ts = dx * line2.dy;\n\t\tdy = s / line2.dx;\n\t}\n\t\n\tvar r = this.createLine(dx, dy, line2.next);\n\tline1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n\t\n\treturn r;\n};\n\n/**\n * Function: createNode\n */\nmxCompactTreeLayout.prototype.createNode = function(cell)\n{\n\tvar node = new Object();\n\tnode.cell = cell;\n\tnode.x = 0;\n\tnode.y = 0;\n\tnode.width = 0;\n\tnode.height = 0;\n\t\n\tvar geo = this.getVertexBounds(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tnode.width = geo.height;\n\t\t\tnode.height = geo.width;\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.width = geo.width;\n\t\t\tnode.height = geo.height;\n\t\t}\n\t}\n\t\n\tnode.offsetX = 0;\n\tnode.offsetY = 0;\n\tnode.contour = new Object();\n\t\n\treturn node;\n};\n\n/**\n * Function: apply\n */\nmxCompactTreeLayout.prototype.apply = function(node, bounds)\n{\n\tvar model = this.graph.getModel();\n\tvar cell = node.cell;\n\tvar g = model.getGeometry(cell);\n\n\tif (cell != null && g != null)\n\t{\n\t\tif (this.isVertexMovable(cell))\n\t\t{\n\t\t\tg = this.setVertexLocation(cell, node.x, node.y);\n\t\t\t\n\t\t\tif (this.resizeParent)\n\t\t\t{\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\tvar id = mxCellPath.create(parent);\n\t\t\t\t\n\t\t\t\t// Implements set semantic\n\t\t\t\tif (this.parentsChanged[id] == null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentsChanged[id] = parent;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bounds == null)\n\t\t{\n\t\t\tbounds = new mxRectangle(g.x, g.y, g.width, g.height);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds = new mxRectangle(Math.min(bounds.x, g.x),\n\t\t\t\tMath.min(bounds.y, g.y),\n\t\t\t\tMath.max(bounds.x + bounds.width, g.x + g.width),\n\t\t\t\tMath.max(bounds.y + bounds.height, g.y + g.height));\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: createLine\n */\nmxCompactTreeLayout.prototype.createLine = function(dx, dy, next)\n{\n\tvar line = new Object();\n\tline.dx = dx;\n\tline.dy = dy;\n\tline.next = next;\n\t\n\treturn line;\n};\n\n/**\n * Function: adjustParents\n * \n * Adjust parent cells whose child geometries have changed. The default \n * implementation adjusts the group to just fit around the children with \n * a padding.\n */\nmxCompactTreeLayout.prototype.adjustParents = function()\n{\n\tvar tmp = [];\n\t\n\tfor (var id in this.parentsChanged)\n\t{\n\t\ttmp.push(this.parentsChanged[id]);\n\t}\n\t\n\tthis.arrangeGroups(mxUtils.sortCells(tmp, true), this.groupPadding, this.groupPaddingTop,\n\t\tthis.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.localEdgeProcessing = function(node)\n{\n\tthis.processNodeOutgoing(node);\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.localEdgeProcessing(child);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: processNodeOutgoing\n *\n * Separates the x position of edges as they connect to vertices\n */\nmxCompactTreeLayout.prototype.processNodeOutgoing = function(node)\n{\n\tvar child = node.child;\n\tvar parentCell = node.cell;\n\n\tvar childCount = 0;\n\tvar sortedCells = [];\n\n\twhile (child != null)\n\t{\n\t\tchildCount++;\n\n\t\tvar sortingCriterion = child.x;\n\n\t\tif (this.horizontal)\n\t\t{\n\t\t\tsortingCriterion = child.y;\n\t\t}\n\n\t\tsortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n\t\tchild = child.next;\n\t}\n\n\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\tvar availableWidth = node.width;\n\n\tvar requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n\n\t// Add a buffer on the edges of the vertex if the edge count allows\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tavailableWidth -= 2 * this.prefHozEdgeSep;\n\t}\n\n\tvar edgeSpacing = availableWidth / childCount;\n\n\tvar currentXOffset = edgeSpacing / 2.0;\n\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tcurrentXOffset += this.prefHozEdgeSep;\n\t}\n\n\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\tvar maxYOffset = 0;\n\n\tvar parentBounds = this.getVertexBounds(parentCell);\n\tchild = node.child;\n\n\tfor (var j = 0; j < sortedCells.length; j++)\n\t{\n\t\tvar childCell = sortedCells[j].cell.cell;\n\t\tvar childBounds = this.getVertexBounds(childCell);\n\n\t\tvar edges = this.graph.getEdgesBetween(parentCell,\n\t\t\t\tchildCell, false);\n\t\t\n\t\tvar newPoints = [];\n\t\tvar x = 0;\n\t\tvar y = 0;\n\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.horizontal)\n\t\t\t{\n\t\t\t\t// Use opposite co-ords, calculation was done for \n\t\t\t\t// \n\t\t\t\tx = parentBounds.x + parentBounds.width;\n\t\t\t\ty = parentBounds.y + currentXOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = parentBounds.x + parentBounds.width\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = childBounds.y + childBounds.height / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = parentBounds.x + currentXOffset;\n\t\t\t\ty = parentBounds.y + parentBounds.height;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = parentBounds.y + parentBounds.height\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = childBounds.x + childBounds.width / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t}\n\n\t\tif (j < childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t}\n\t\telse if (j > childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t}\n\t\t// Ignore the case if equals, this means the second of 2\n\t\t// jettys with the same y (even number of edges)\n\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2] = currentX;\n\t\tcurrentXOffset += edgeSpacing;\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2 + 1] = currentYOffset;\n\n\t\tmaxYOffset = Math.max(maxYOffset, currentYOffset);\n\t}\n};\n__mxOutput.mxCompactTreeLayout = typeof mxCompactTreeLayout !== 'undefined' ? mxCompactTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRadialTreeLayout\n * \n * Extends <mxGraphLayout> to implement a radial tree algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxRadialTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxRadialTreeLayout\n * \n * Constructs a new radial tree layout for the specified graph\n */\nfunction mxRadialTreeLayout(graph)\n{\n\tmxCompactTreeLayout.call(this, graph , false);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxUtils.extend(mxRadialTreeLayout, mxCompactTreeLayout);\n\n/**\n * Variable: angleOffset\n *\n * The initial offset to compute the angle position.\n */\nmxRadialTreeLayout.prototype.angleOffset = 0.5;\n\n/**\n * Variable: rootx\n *\n * The X co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rootx = 0;\n\n/**\n * Variable: rooty\n *\n * The Y co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rooty = 0;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 120.\n */\nmxRadialTreeLayout.prototype.levelDistance = 120;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 10.\n */\nmxRadialTreeLayout.prototype.nodeDistance = 10;\n\n/**\n * Variable: autoRadius\n * \n * Specifies if the radios should be computed automatically\n */\nmxRadialTreeLayout.prototype.autoRadius = false;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxRadialTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: rowMinX\n * \n * Array of leftmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMinX = [];\n\n/**\n * Variable: rowMaxX\n * \n * Array of rightmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMaxX = [];\n\n/**\n * Variable: rowMinCenX\n * \n * Array of x coordinate of leftmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMinCenX = [];\n\n/**\n * Variable: rowMaxCenX\n * \n * Array of x coordinate of rightmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMaxCenX = [];\n\n/**\n * Variable: rowRadi\n * \n * Array of y deltas of each row behind root vertex, also the radius in the tree\n */\nmxRadialTreeLayout.prototype.rowRadi = [];\n\n/**\n * Variable: row\n * \n * Array of vertices on each row\n */\nmxRadialTreeLayout.prototype.row = [];\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxRadialTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n */\nmxRadialTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\t\n\tthis.useBoundingBox = false;\n\tthis.edgeRouting = false;\n\t//this.horizontal = false;\n\n\tmxCompactTreeLayout.prototype.execute.apply(this, arguments);\n\t\n\tvar bounds = null;\n\tvar rootBounds = this.getVertexBounds(this.root);\n\tthis.centerX = rootBounds.x + rootBounds.width / 2;\n\tthis.centerY = rootBounds.y + rootBounds.height / 2;\n\n\t// Calculate the bounds of the involved vertices directly from the values set in the compact tree\n\tfor (var vertex in this.visited)\n\t{\n\t\tvar vertexBounds = this.getVertexBounds(this.visited[vertex]);\n\t\tbounds = (bounds != null) ? bounds : vertexBounds.clone();\n\t\tbounds.add(vertexBounds);\n\t}\n\t\n\tthis.calcRowDims([this.node], 0);\n\t\n\tvar maxLeftGrad = 0;\n\tvar maxRightGrad = 0;\n\n\t// Find the steepest left and right gradients\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar leftGrad = (this.centerX - this.rowMinX[i] - this.nodeDistance) / this.rowRadi[i];\n\t\tvar rightGrad = (this.rowMaxX[i] - this.centerX - this.nodeDistance) / this.rowRadi[i];\n\t\t\n\t\tmaxLeftGrad = Math.max (maxLeftGrad, leftGrad);\n\t\tmaxRightGrad = Math.max (maxRightGrad, rightGrad);\n\t}\n\t\n\t// Extend out row so they meet the maximum gradient and convert to polar co-ords\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar xLeftLimit = this.centerX - this.nodeDistance - maxLeftGrad * this.rowRadi[i];\n\t\tvar xRightLimit = this.centerX + this.nodeDistance + maxRightGrad * this.rowRadi[i];\n\t\tvar fullWidth = xRightLimit - xLeftLimit;\n\t\t\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tvar xProportion = (vertexBounds.x + vertexBounds.width / 2 - xLeftLimit) / (fullWidth);\n\t\t\tvar theta =  2 * Math.PI * xProportion;\n\t\t\tnode.theta = theta;\n\t\t}\n\t}\n\n\t// Post-process from outside inwards to try to align parents with children\n\tfor (var i = this.row.length - 2; i >= 0; i--)\n\t{\n\t\tvar row = this.row[i];\n\t\t\n\t\tfor (var j = 0; j < row.length; j++)\n\t\t{\n\t\t\tvar node = row[j];\n\t\t\tvar child = node.child;\n\t\t\tvar counter = 0;\n\t\t\tvar totalTheta = 0;\n\t\t\t\n\t\t\twhile (child != null)\n\t\t\t{\n\t\t\t\ttotalTheta += child.theta;\n\t\t\t\tcounter++;\n\t\t\t\tchild = child.next;\n\t\t\t}\n\t\t\t\n\t\t\tif (counter > 0)\n\t\t\t{\n\t\t\t\tvar averTheta = totalTheta / counter;\n\t\t\t\t\n\t\t\t\tif (averTheta > node.theta && j < row.length - 1)\n\t\t\t\t{\n\t\t\t\t\tvar nextTheta = row[j+1].theta;\n\t\t\t\t\tnode.theta = Math.min (averTheta, nextTheta - Math.PI/10);\n\t\t\t\t}\n\t\t\t\telse if (averTheta < node.theta && j > 0 )\n\t\t\t\t{\n\t\t\t\t\tvar lastTheta = row[j-1].theta;\n\t\t\t\t\tnode.theta = Math.max (averTheta, lastTheta + Math.PI/10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Set locations\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tthis.setVertexLocation(node.cell,\n\t\t\t\t\t\t\t\t\tthis.centerX - vertexBounds.width / 2 + this.rowRadi[i] * Math.cos(node.theta),\n\t\t\t\t\t\t\t\t\tthis.centerY - vertexBounds.height / 2 + this.rowRadi[i] * Math.sin(node.theta));\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRowDims\n * \n * Recursive function to calculate the dimensions of each row\n * \n * Parameters:\n * \n * row - Array of internal nodes, the children of which are to be processed.\n * rowNum - Integer indicating which row is being processed.\n */\nmxRadialTreeLayout.prototype.calcRowDims = function(row, rowNum)\n{\n\tif (row == null || row.length == 0)\n\t{\n\t\treturn;\n\t}\n\n\t// Place root's children proportionally around the first level\n\tthis.rowMinX[rowNum] = this.centerX;\n\tthis.rowMaxX[rowNum] = this.centerX;\n\tthis.rowMinCenX[rowNum] = this.centerX;\n\tthis.rowMaxCenX[rowNum] = this.centerX;\n\tthis.row[rowNum] = [];\n\n\tvar rowHasChildren = false;\n\n\tfor (var i = 0; i < row.length; i++)\n\t{\n\t\tvar child = row[i] != null ? row[i].child : null;\n\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar cell = child.cell;\n\t\t\tvar vertexBounds = this.getVertexBounds(cell);\n\t\t\t\n\t\t\tthis.rowMinX[rowNum] = Math.min(vertexBounds.x, this.rowMinX[rowNum]);\n\t\t\tthis.rowMaxX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width, this.rowMaxX[rowNum]);\n\t\t\tthis.rowMinCenX[rowNum] = Math.min(vertexBounds.x + vertexBounds.width / 2, this.rowMinCenX[rowNum]);\n\t\t\tthis.rowMaxCenX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width / 2, this.rowMaxCenX[rowNum]);\n\t\t\tthis.rowRadi[rowNum] = vertexBounds.y - this.getVertexBounds(this.root).y;\n\t\n\t\t\tif (child.child != null)\n\t\t\t{\n\t\t\t\trowHasChildren = true;\n\t\t\t}\n\t\t\t\n\t\t\tthis.row[rowNum].push(child);\n\t\t\tchild = child.next;\n\t\t}\n\t}\n\t\n\tif (rowHasChildren)\n\t{\n\t\tthis.calcRowDims(this.row[rowNum], rowNum + 1);\n\t}\n};\n\n__mxOutput.mxRadialTreeLayout = typeof mxRadialTreeLayout !== 'undefined' ? mxRadialTreeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxFastOrganicLayout\n * \n * Extends <mxGraphLayout> to implement a fast organic layout algorithm.\n * The vertices need to be connected for this layout to work, vertices\n * with no connections are ignored.\n * \n * Example:\n * \n * (code)\n * var layout = new mxFastOrganicLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new fast organic layout for the specified graph.\n */\nfunction mxFastOrganicLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxFastOrganicLayout.prototype = new mxGraphLayout();\nmxFastOrganicLayout.prototype.constructor = mxFastOrganicLayout;\n\n/**\n * Variable: useInputOrigin\n * \n * Specifies if the top left corner of the input cells should be the origin\n * of the layout result. Default is true.\n */\nmxFastOrganicLayout.prototype.useInputOrigin = true;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxFastOrganicLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxFastOrganicLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: forceConstant\n * \n * The force constant by which the attractive forces are divided and the\n * replusive forces are multiple by the square of. The value equates to the\n * average radius there is of free space around each node. Default is 50.\n */\nmxFastOrganicLayout.prototype.forceConstant = 50;\n\n/**\n * Variable: forceConstantSquared\n * \n * Cache of <forceConstant>^2 for performance.\n */\nmxFastOrganicLayout.prototype.forceConstantSquared = 0;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.minDistanceLimit = 2;\n\n/**\n * Variable: maxDistanceLimit\n * \n * Maximal distance limit. Default is 500. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.maxDistanceLimit = 500;\n\n/**\n * Variable: minDistanceLimitSquared\n * \n * Cached version of <minDistanceLimit> squared.\n */\nmxFastOrganicLayout.prototype.minDistanceLimitSquared = 4;\n\n/**\n * Variable: initialTemp\n * \n * Start value of temperature. Default is 200.\n */\nmxFastOrganicLayout.prototype.initialTemp = 200;\n\n/**\n * Variable: temperature\n * \n * Temperature to limit displacement at later stages of layout.\n */\nmxFastOrganicLayout.prototype.temperature = 0;\n\n/**\n * Variable: maxIterations\n * \n * Total number of iterations to run the layout though.\n */\nmxFastOrganicLayout.prototype.maxIterations = 0;\n\n/**\n * Variable: iteration\n * \n * Current iteration count.\n */\nmxFastOrganicLayout.prototype.iteration = 0;\n\n/**\n * Variable: vertexArray\n * \n * An array of all vertices to be laid out.\n */\nmxFastOrganicLayout.prototype.vertexArray;\n\n/**\n * Variable: dispX\n * \n * An array of locally stored X co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispX;\n\n/**\n * Variable: dispY\n * \n * An array of locally stored Y co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispY;\n\n/**\n * Variable: cellLocation\n * \n * An array of locally stored co-ordinate positions for the vertices.\n */\nmxFastOrganicLayout.prototype.cellLocation;\n\n/**\n * Variable: radius\n * \n * The approximate radius of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radius;\n\n/**\n * Variable: radiusSquared\n * \n * The approximate radius squared of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radiusSquared;\n\n/**\n * Variable: isMoveable\n * \n * Array of booleans representing the movable states of the vertices.\n */\nmxFastOrganicLayout.prototype.isMoveable;\n\n/**\n * Variable: neighbours\n * \n * Local copy of cell neighbours.\n */\nmxFastOrganicLayout.prototype.neighbours;\n\n/**\n * Variable: indices\n * \n * Hashtable from cells to local indices.\n */\nmxFastOrganicLayout.prototype.indices;\n\n/**\n * Variable: allowedToRun\n * \n * Boolean flag that specifies if the layout is allowed to run. If this is\n * set to false, then the layout exits in the following iteration.\n */\nmxFastOrganicLayout.prototype.allowedToRun = true;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxFastOrganicLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. This operates on all children of the\n * given parent where <isVertexIgnored> returns false.\n */\nmxFastOrganicLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tthis.vertexArray = [];\n\tvar cells = this.graph.getChildVertices(parent);\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.isVertexIgnored(cells[i]))\n\t\t{\n\t\t\tthis.vertexArray.push(cells[i]);\n\t\t}\n\t}\n\t\n\tvar initialBounds = (this.useInputOrigin) ?\n\t\t\tthis.graph.getBoundingBoxFromGeometry(this.vertexArray) :\n\t\t\t\tnull;\n\tvar n = this.vertexArray.length;\n\n\tthis.indices = [];\n\tthis.dispX = [];\n\tthis.dispY = [];\n\tthis.cellLocation = [];\n\tthis.isMoveable = [];\n\tthis.neighbours = [];\n\tthis.radius = [];\n\tthis.radiusSquared = [];\n\n\tif (this.forceConstant < 0.001)\n\t{\n\t\tthis.forceConstant = 0.001;\n\t}\n\n\tthis.forceConstantSquared = this.forceConstant * this.forceConstant;\n\n\t// Create a map of vertices first. This is required for the array of\n\t// arrays called neighbours which holds, for each vertex, a list of\n\t// ints which represents the neighbours cells to that vertex as\n\t// the indices into vertexArray\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tvar vertex = this.vertexArray[i];\n\t\tthis.cellLocation[i] = [];\n\t\t\n\t\t// Set up the mapping from array indices to cells\n\t\tvar id = mxObjectIdentity.get(vertex);\n\t\tthis.indices[id] = i;\n\t\tvar bounds = this.getVertexBounds(vertex);\n\n\t\t// Set the X,Y value of the internal version of the cell to\n\t\t// the center point of the vertex for better positioning\n\t\tvar width = bounds.width;\n\t\tvar height = bounds.height;\n\t\t\n\t\t// Randomize (0, 0) locations\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\t\n\t\tthis.cellLocation[i][0] = x + width / 2.0;\n\t\tthis.cellLocation[i][1] = y + height / 2.0;\n\t\tthis.radius[i] = Math.min(width, height);\n\t\tthis.radiusSquared[i] = this.radius[i] * this.radius[i];\n\t}\n\n\t// Moves cell location back to top-left from center locations used in\n\t// algorithm, resetting the edge points is part of the transaction\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < n; i++)\n\t\t{\n\t\t\tthis.dispX[i] = 0;\n\t\t\tthis.dispY[i] = 0;\n\t\t\tthis.isMoveable[i] = this.isVertexMovable(this.vertexArray[i]);\n\n\t\t\t// Get lists of neighbours to all vertices, translate the cells\n\t\t\t// obtained in indices into vertexArray and store as an array\n\t\t\t// against the orginial cell index\n\t\t\tvar edges = this.graph.getConnections(this.vertexArray[i], parent);\n\t\t\tvar cells = this.graph.getOpposites(edges, this.vertexArray[i]);\n\t\t\tthis.neighbours[i] = [];\n\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(edges[j]);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \tthis.setEdgeStyleEnabled(edges[j], false);\n\t\t\t    }\n\n\t\t\t\t// Looks the cell up in the indices dictionary\n\t\t\t\tvar id = mxObjectIdentity.get(cells[j]);\n\t\t\t\tvar index = this.indices[id];\n\n\t\t\t\t// Check the connected cell in part of the vertex list to be\n\t\t\t\t// acted on by this layout\n\t\t\t\tif (index != null)\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = index;\n\t\t\t\t}\n\n\t\t\t\t// Else if index of the other cell doesn't correspond to\n\t\t\t\t// any cell listed to be acted upon in this layout. Set\n\t\t\t\t// the index to the value of this vertex (a dummy self-loop)\n\t\t\t\t// so the attraction force of the edge is not calculated\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.temperature = this.initialTemp;\n\n\t\t// If max number of iterations has not been set, guess it\n\t\tif (this.maxIterations == 0)\n\t\t{\n\t\t\tthis.maxIterations = 20 * Math.sqrt(n);\n\t\t}\n\t\t\n\t\t// Main iteration loop\n\t\tfor (this.iteration = 0; this.iteration < this.maxIterations; this.iteration++)\n\t\t{\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Calculate repulsive forces on all vertices\n\t\t\tthis.calcRepulsion();\n\n\t\t\t// Calculate attractive forces through edges\n\t\t\tthis.calcAttraction();\n\n\t\t\tthis.calcPositions();\n\t\t\tthis.reduceTemperature();\n\t\t}\n\n\t\tvar minx = null;\n\t\tvar miny = null;\n\t\t\n\t\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t\t{\n\t\t\tvar vertex = this.vertexArray[i];\n\t\t\t\n\t\t\tif (this.isVertexMovable(vertex))\n\t\t\t{\n\t\t\t\tvar bounds = this.getVertexBounds(vertex);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tthis.cellLocation[i][0] -= bounds.width / 2.0;\n\t\t\t\t\tthis.cellLocation[i][1] -= bounds.height / 2.0;\n\t\t\t\t\t\n\t\t\t\t\tvar x = this.graph.snap(Math.round(this.cellLocation[i][0]));\n\t\t\t\t\tvar y = this.graph.snap(Math.round(this.cellLocation[i][1]));\n\t\t\t\t\t\n\t\t\t\t\tthis.setVertexLocation(vertex, x, y);\n\t\t\t\t\t\n\t\t\t\t\tif (minx == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = Math.min(minx, x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (miny == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = y;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = Math.min(miny, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Modifies the cloned geometries in-place. Not needed\n\t\t// to clone the geometries again as we're in the same\n\t\t// undoable change.\n\t\tvar dx = -(minx || 0) + 1;\n\t\tvar dy = -(miny || 0) + 1;\n\t\t\n\t\tif (initialBounds != null)\n\t\t{\n\t\t\tdx += initialBounds.x;\n\t\t\tdy += initialBounds.y;\n\t\t}\n\t\t\n\t\tthis.graph.moveCells(this.vertexArray, dx, dy);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: calcPositions\n * \n * Takes the displacements calculated for each cell and applies them to the\n * local cache of cell positions. Limits the displacement to the current\n * temperature.\n */\nmxFastOrganicLayout.prototype.calcPositions = function()\n{\n\tfor (var index = 0; index < this.vertexArray.length; index++)\n\t{\n\t\tif (this.isMoveable[index])\n\t\t{\n\t\t\t// Get the distance of displacement for this node for this\n\t\t\t// iteration\n\t\t\tvar deltaLength = Math.sqrt(this.dispX[index] * this.dispX[index] +\n\t\t\t\tthis.dispY[index] * this.dispY[index]);\n\n\t\t\tif (deltaLength < 0.001)\n\t\t\t{\n\t\t\t\tdeltaLength = 0.001;\n\t\t\t}\n\n\t\t\t// Scale down by the current temperature if less than the\n\t\t\t// displacement distance\n\t\t\tvar newXDisp = this.dispX[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\tvar newYDisp = this.dispY[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\t// reset displacements\n\t\t\tthis.dispX[index] = 0;\n\t\t\tthis.dispY[index] = 0;\n\n\t\t\t// Update the cached cell locations\n\t\t\tthis.cellLocation[index][0] += newXDisp;\n\t\t\tthis.cellLocation[index][1] += newYDisp;\n\t\t}\n\t}\n};\n\n/**\n * Function: calcAttraction\n * \n * Calculates the attractive forces between all laid out nodes linked by\n * edges\n */\nmxFastOrganicLayout.prototype.calcAttraction = function()\n{\n\t// Check the neighbours of each vertex and calculate the attractive\n\t// force of the edge connecting them\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tfor (var k = 0; k < this.neighbours[i].length; k++)\n\t\t{\n\t\t\t// Get the index of the othe cell in the vertex array\n\t\t\tvar j = this.neighbours[i][k];\n\t\t\t\n\t\t\t// Do not proceed self-loops\n\t\t\tif (i != j &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\t// The distance between the nodes\n\t\t\t\tvar deltaLengthSquared = xDelta * xDelta + yDelta\n\t\t\t\t\t\t* yDelta - this.radiusSquared[i] - this.radiusSquared[j];\n\n\t\t\t\tif (deltaLengthSquared < this.minDistanceLimitSquared)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthSquared = this.minDistanceLimitSquared;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar deltaLength = Math.sqrt(deltaLengthSquared);\n\t\t\t\tvar force = (deltaLengthSquared) / this.forceConstant;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] -= displacementX;\n\t\t\t\tthis.dispY[i] -= displacementY;\n\t\t\t\t\n\t\t\t\tthis.dispX[j] += displacementX;\n\t\t\t\tthis.dispY[j] += displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRepulsion\n * \n * Calculates the repulsive forces between all laid out nodes\n */\nmxFastOrganicLayout.prototype.calcRepulsion = function()\n{\n\tvar vertexCount = this.vertexArray.length;\n\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tfor (var j = i; j < vertexCount; j++)\n\t\t{\n\t\t\t// Exits if the layout is no longer allowed to run\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (j != i &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\tif (xDelta == 0)\n\t\t\t\t{\n\t\t\t\t\txDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (yDelta == 0)\n\t\t\t\t{\n\t\t\t\t\tyDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Distance between nodes\n\t\t\t\tvar deltaLength = Math.sqrt((xDelta * xDelta)\n\t\t\t\t\t\t+ (yDelta * yDelta));\n\t\t\t\tvar deltaLengthWithRadius = deltaLength - this.radius[i]\n\t\t\t\t\t\t- this.radius[j];\n\n\t\t\t\tif (deltaLengthWithRadius > this.maxDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\t// Ignore vertices too far apart\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (deltaLengthWithRadius < this.minDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthWithRadius = this.minDistanceLimit;\n\t\t\t\t}\n\n\t\t\t\tvar force = this.forceConstantSquared / deltaLengthWithRadius;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] += displacementX;\n\t\t\t\tthis.dispY[i] += displacementY;\n\n\t\t\t\tthis.dispX[j] -= displacementX;\n\t\t\t\tthis.dispY[j] -= displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reduceTemperature\n * \n * Reduces the temperature of the layout from an initial setting in a linear\n * fashion to zero.\n */\nmxFastOrganicLayout.prototype.reduceTemperature = function()\n{\n\tthis.temperature = this.initialTemp * (1.0 - this.iteration / this.maxIterations);\n};\n\n__mxOutput.mxFastOrganicLayout = typeof mxFastOrganicLayout !== 'undefined' ? mxFastOrganicLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCircleLayout\n * \n * Extends <mxGraphLayout> to implement a circluar layout for a given radius.\n * The vertices do not need to be connected for this layout to work and all\n * connections between vertices are not taken into account.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCircleLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCircleLayout\n *\n * Constructs a new circular layout for the specified radius.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n * radius - Optional radius as an int. Default is 100.\n */\nfunction mxCircleLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.radius = (radius != null) ? radius : 100;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCircleLayout.prototype = new mxGraphLayout();\nmxCircleLayout.prototype.constructor = mxCircleLayout;\n\n/**\n * Variable: radius\n * \n * Integer specifying the size of the radius. Default is 100.\n */\nmxCircleLayout.prototype.radius = null;\n\n/**\n * Variable: moveCircle\n * \n * Boolean specifying if the circle should be moved to the top,\n * left corner specified by <x0> and <y0>. Default is false.\n */\nmxCircleLayout.prototype.moveCircle = false;\n\n/**\n * Variable: x0\n * \n * Integer specifying the left coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.x0 = 0;\n\n/**\n * Variable: y0\n * \n * Integer specifying the top coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.y0 = 0;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCircleLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxCircleLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxCircleLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\t// Gets all vertices inside the parent and finds\n\t\t// the maximum dimension of the largest vertex\n\t\tvar max = 0;\n\t\tvar top = null;\n\t\tvar left = null;\n\t\tvar vertices = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(cell);\n\t\t\t\tvar bounds = this.getVertexBounds(cell);\n\t\t\t\t\n\t\t\t\tif (top == null)\n\t\t\t\t{\n\t\t\t\t\ttop = bounds.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttop = Math.min(top, bounds.y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (left == null)\n\t\t\t\t{\n\t\t\t\t\tleft = bounds.x;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleft = Math.min(left, bounds.x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmax = Math.max(max, Math.max(bounds.width, bounds.height));\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(cell);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \t\tthis.setEdgeStyleEnabled(cell, false);\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar r = this.getRadius(vertices.length, max);\n\n\t\t// Moves the circle to the specified origin\n\t\tif (this.moveCircle)\n\t\t{\n\t\t\tleft = this.x0;\n\t\t\ttop = this.y0;\n\t\t}\n\t\t\n\t\tthis.circle(vertices, r, left, top);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: getRadius\n * \n * Returns the radius to be used for the given vertex count. Max is the maximum\n * width or height of all vertices in the layout.\n */\nmxCircleLayout.prototype.getRadius = function(count, max)\n{\n\treturn Math.max(count * max / Math.PI, this.radius);\n};\n\n/**\n * Function: circle\n * \n * Executes the circular layout for the specified array\n * of vertices and the given radius. This is called from\n * <execute>.\n */\nmxCircleLayout.prototype.circle = function(vertices, r, left, top)\n{\n\tvar vertexCount = vertices.length;\n\tvar phi = 2 * Math.PI / vertexCount;\n\t\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tif (this.isVertexMovable(vertices[i]))\n\t\t{\n\t\t\tthis.setVertexLocation(vertices[i],\n\t\t\t\tMath.round(left + r + r * Math.sin(i * phi)),\n\t\t\t\tMath.round(top + r + r * Math.cos(i * phi)));\n\t\t}\n\t}\n};\n\n__mxOutput.mxCircleLayout = typeof mxCircleLayout !== 'undefined' ? mxCircleLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxParallelEdgeLayout\n * \n * Extends <mxGraphLayout> for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n * \n * Example:\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * \n * graph.addListener(mxEvent.CELL_CONNECTED, function(sender, evt)\n * {\n *   var model = graph.getModel();\n *   var edge = evt.getProperty('edge');\n *   var src = model.getTerminal(edge, true);\n *   var trg = model.getTerminal(edge, false);\n *   \n *   layout.isEdgeIgnored = function(edge2)\n *   {\n *     var src2 = model.getTerminal(edge2, true);\n *     var trg2 = model.getTerminal(edge2, false);\n *     \n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *   \n *   layout.execute(graph.getDefaultParent());\n * });\n * (end)\n * \n * Constructor: mxParallelEdgeLayout\n * \n * Constructs a new parallel edge layout for the specified graph.\n */\nfunction mxParallelEdgeLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxParallelEdgeLayout.prototype = new mxGraphLayout();\nmxParallelEdgeLayout.prototype.constructor = mxParallelEdgeLayout;\n\n/**\n * Variable: spacing\n * \n * Defines the spacing between the parallels. Default is 20.\n */\nmxParallelEdgeLayout.prototype.spacing = 20;\n\n/**\n * Variable: checkOverlap\n * \n * Specifies if only overlapping edges should be considered\n * parallel. Default is false.\n */\nmxParallelEdgeLayout.prototype.checkOverlap = false;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxParallelEdgeLayout.prototype.execute = function(parent, cells)\n{\n\tvar lookup = this.findParallels(parent, cells);\n\t\n\tthis.graph.model.beginUpdate();\t\n\ttry\n\t{\n\t\tfor (var i in lookup)\n\t\t{\n\t\t\tvar parallels = lookup[i];\n\n\t\t\tif (parallels.length > 1)\n\t\t\t{\n\t\t\t\tthis.layout(parallels);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.model.endUpdate();\n\t}\n};\n\n/**\n * Function: findParallels\n * \n * Finds the parallel edges in the given parent.\n */\nmxParallelEdgeLayout.prototype.findParallels = function(parent, cells)\n{\n\tvar lookup = [];\n\t\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!this.isEdgeIgnored(cell))\n\t\t{\n\t\t\tvar id = this.getEdgeId(cell);\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tif (lookup[id] == null)\n\t\t\t\t{\n\t\t\t\t\tlookup[id] = [];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlookup[id].push(cell);\n\t\t\t}\n\t\t}\n\t});\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\taddCell(cells[i]);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\taddCell(model.getChildAt(parent, i));\n\t\t}\n\t}\n\t\n\treturn lookup;\n};\n\n/**\n * Function: getEdgeId\n * \n * Returns a unique ID for the given edge. The id is independent of the\n * edge direction and is built using the visible terminal of the given\n * edge.\n */\nmxParallelEdgeLayout.prototype.getEdgeId = function(edge)\n{\n\tvar view = this.graph.getView();\n\t\n\t// Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n\tvar src = view.getVisibleTerminal(edge, true);\n\tvar trg = view.getVisibleTerminal(edge, false);\n\tvar pts = '';\n\n\tif (src != null && trg != null)\n\t{\n\t\tsrc = mxObjectIdentity.get(src);\n\t\ttrg = mxObjectIdentity.get(trg);\n\t\t\n\t\tif (this.checkOverlap)\n\t\t{\n\t\t\tvar state = this.graph.view.getState(edge);\n\t\t\t\n\t\t\tif (state != null && state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tvar tmp = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < state.absolutePoints.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = state.absolutePoints[i];\n\t\t\t\t\t\n\t\t\t\t\tif (pt != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.push(pt.x, pt.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpts = tmp.join(',');\n\t\t\t}\n\t\t};\n\t\t\n\t\treturn ((src > trg) ? trg + '-' + src : src + '-' + trg) + pts;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: layout\n * \n * Lays out the parallel edges in the given array.\n */\nmxParallelEdgeLayout.prototype.layout = function(parallels)\n{\n\tvar edge = parallels[0];\n\tvar view = this.graph.getView();\n\tvar model = this.graph.getModel();\n\tvar src = model.getGeometry(view.getVisibleTerminal(edge, true));\n\tvar trg = model.getGeometry(view.getVisibleTerminal(edge, false));\n\t\n\t// Routes multiple loops\n\tif (src == trg)\n\t{\n\t\tvar x0 = src.x + src.width + this.spacing;\n\t\tvar y0 = src.y + src.height / 2;\n\n\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t{\n\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\tx0 += this.spacing;\n\t\t}\n\t}\n\telse if (src != null && trg != null)\n\t{\n\t\t// Routes parallel edges\n\t\tvar scx = src.x + src.width / 2;\n\t\tvar scy = src.y + src.height / 2;\n\t\t\n\t\tvar tcx = trg.x + trg.width / 2;\n\t\tvar tcy = trg.y + trg.height / 2;\n\t\t\n\t\tvar dx = tcx - scx;\n\t\tvar dy = tcy - scy;\n\n\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (len > 0)\n\t\t{\n\t\t\tvar x0 = scx + dx / 2;\n\t\t\tvar y0 = scy + dy / 2;\n\t\t\t\n\t\t\tvar nx = dy * this.spacing / len;\n\t\t\tvar ny = dx * this.spacing / len;\n\t\t\t\n\t\t\tx0 += nx * (parallels.length - 1) / 2;\n\t\t\ty0 -= ny * (parallels.length - 1) / 2;\n\t\n\t\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t\t{\n\t\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\t\tx0 -= nx;\n\t\t\t\ty0 += ny;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: route\n * \n * Routes the given edge via the given point.\n */\nmxParallelEdgeLayout.prototype.route = function(edge, x, y)\n{\n\tif (this.graph.isCellMovable(edge))\n\t{\n\t\tthis.setEdgePoints(edge, [new mxPoint(x, y)]);\n\t}\n};\n\n__mxOutput.mxParallelEdgeLayout = typeof mxParallelEdgeLayout !== 'undefined' ? mxParallelEdgeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCompositeLayout\n * \n * Allows to compose multiple layouts into a single layout. The master layout\n * is the layout that handles move operations if another layout than the first\n * element in <layouts> should be used. The <master> layout is not executed as\n * the code assumes that it is part of <layouts>.\n * \n * Example:\n * (code)\n * var first = new mxFastOrganicLayout(graph);\n * var second = new mxParallelEdgeLayout(graph);\n * var layout = new mxCompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompositeLayout\n *\n * Constructs a new layout using the given layouts. The graph instance is\n * required for creating the transaction that contains all layouts.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * layouts - Array of <mxGraphLayouts>.\n * master - Optional layout that handles moves. If no layout is given then\n * the first layout of the above array is used to handle moves.\n */\nfunction mxCompositeLayout(graph, layouts, master)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.layouts = layouts;\n\tthis.master = master;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompositeLayout.prototype = new mxGraphLayout();\nmxCompositeLayout.prototype.constructor = mxCompositeLayout;\n\t\n/**\n * Variable: layouts\n * \n * Holds the array of <mxGraphLayouts> that this layout contains.\n */\nmxCompositeLayout.prototype.layouts = null;\n\n/**\n * Variable: master\n * \n * Reference to the <mxGraphLayouts> that handles moves. If this is null\n * then the first layout in <layouts> is used.\n */\nmxCompositeLayout.prototype.master = null;\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell> by calling move on <master> or the first\n * layout in <layouts>.\n */\nmxCompositeLayout.prototype.moveCell = function(cell, x, y)\n{\n\tif (this.master != null)\n\t{\n\t\tthis.master.moveCell.apply(this.master, arguments);\n\t}\n\telse\n\t{\n\t\tthis.layouts[0].moveCell.apply(this.layouts[0], arguments);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute> by executing all <layouts> in a\n * single transaction.\n */\nmxCompositeLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < this.layouts.length; i++)\n\t\t{\n\t\t\tthis.layouts[i].execute.apply(this.layouts[i], arguments);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n__mxOutput.mxCompositeLayout = typeof mxCompositeLayout !== 'undefined' ? mxCompositeLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeLabelLayout\n * \n * Extends <mxGraphLayout> to implement an edge label layout. This layout\n * makes use of cell states, which means the graph must be validated in\n * a graph view (so that the label bounds are available) before this layout\n * can be executed.\n * \n * Example:\n * \n * (code)\n * var layout = new mxEdgeLabelLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxEdgeLabelLayout\n *\n * Constructs a new edge label layout.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n */\nfunction mxEdgeLabelLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxEdgeLabelLayout.prototype = new mxGraphLayout();\nmxEdgeLabelLayout.prototype.constructor = mxEdgeLabelLayout;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxEdgeLabelLayout.prototype.execute = function(parent)\n{\n\tvar view = this.graph.view;\n\tvar model = this.graph.getModel();\n\t\n\t// Gets all vertices and edges inside the parent\n\tvar edges = [];\n\tvar vertices = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar cell = model.getChildAt(parent, i);\n\t\tvar state = view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(state);\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\tedges.push(state);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.placeLabels(vertices, edges);\n};\n\n/**\n * Function: placeLabels\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.placeLabels = function(v, e)\n{\n\tvar model = this.graph.getModel();\n\t\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < e.length; i++)\n\t\t{\n\t\t\tvar edge = e[i];\n\t\t\t\n\t\t\tif (edge != null && edge.text != null &&\n\t\t\t\tedge.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < v.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar vertex = v[j];\n\t\t\t\t\t\n\t\t\t\t\tif (vertex != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.avoid(edge, vertex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: avoid\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.avoid = function(edge, vertex)\n{\n\tvar model = this.graph.getModel();\n\tvar labRect = edge.text.boundingBox;\n\t\n\tif (mxUtils.intersects(labRect, vertex))\n\t{\n\t\tvar dy1 = -labRect.y - labRect.height + vertex.y;\n\t\tvar dy2 = -labRect.y + vertex.y + vertex.height;\n\t\t\n\t\tvar dy = (Math.abs(dy1) < Math.abs(dy2)) ? dy1 : dy2;\n\t\t\n\t\tvar dx1 = -labRect.x - labRect.width + vertex.x;\n\t\tvar dx2 = -labRect.x + vertex.x + vertex.width;\n\t\n\t\tvar dx = (Math.abs(dx1) < Math.abs(dx2)) ? dx1 : dx2;\n\t\t\n\t\tif (Math.abs(dx) < Math.abs(dy))\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\n\t\tvar g = model.getGeometry(edge.cell);\n\t\t\n\t\tif (g != null)\n\t\t{\n\t\t\tg = g.clone();\n\t\t\t\n\t\t\tif (g.offset != null)\n\t\t\t{\n\t\t\t\tg.offset.x += dx;\n\t\t\t\tg.offset.y += dy;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\t\n\t\t\tmodel.setGeometry(edge.cell, g);\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeLabelLayout = typeof mxEdgeLabelLayout !== 'undefined' ? mxEdgeLabelLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphAbstractHierarchyCell\n * \n * An abstraction of an internal hierarchy node or edge\n * \n * Constructor: mxGraphAbstractHierarchyCell\n *\n * Constructs a new hierarchical layout algorithm.\n */\nfunction mxGraphAbstractHierarchyCell()\n{\n\tthis.x = [];\n\tthis.y = [];\n\tthis.temp = [];\n};\n\n/**\n * Variable: maxRank\n * \n * The maximum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.maxRank = -1;\n\n/**\n * Variable: minRank\n * \n * The minimum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.minRank = -1;\n\n/**\n * Variable: x\n * \n * The x position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.x = null;\n\n/**\n * Variable: y\n * \n * The y position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.y = null;\n\n/**\n * Variable: width\n * \n * The width of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.width = 0;\n\n/**\n * Variable: height\n * \n * The height of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.height = 0;\n\n/**\n * Variable: nextLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.nextLayerConnectedCells = null;\n\n/**\n * Variable: previousLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.previousLayerConnectedCells = null;\n\n/**\n * Variable: temp\n * \n * Temporary variable for general use. Generally, try to avoid\n * carrying information between stages. Currently, the longest\n * path layering sets temp to the rank position in fixRanks()\n * and the crossing reduction uses this. This meant temp couldn't\n * be used for hashing the nodes in the model dfs and so hashCode\n * was created\n */\nmxGraphAbstractHierarchyCell.prototype.temp = null;\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.getNextLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: isEdge\n * \n * Returns whether or not this cell is an edge\n */\nmxGraphAbstractHierarchyCell.prototype.isEdge = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isVertex\n * \n * Returns whether or not this cell is a node\n */\nmxGraphAbstractHierarchyCell.prototype.isVertex = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\treturn null;\n};\n\n/**\n * Function: setX\n * \n * Set the value of x for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setX = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.x[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.x[layer - this.minRank - 1] = value;\n\t}\n};\n\n/**\n * Function: getX\n * \n * Gets the value of x on the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getX = function(layer)\n{\n\tif (this.isVertex())\n\t{\n\t\treturn this.x[0];\n\t}\n\telse if (this.isEdge())\n\t{\n\t\treturn this.x[layer - this.minRank - 1];\n\t}\n\n\treturn 0.0;\n};\n\n/**\n * Function: setY\n * \n * Set the value of y for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setY = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.y[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.y[layer -this. minRank - 1] = value;\n\t}\n};\n\n__mxOutput.mxGraphAbstractHierarchyCell = typeof mxGraphAbstractHierarchyCell !== 'undefined' ? mxGraphAbstractHierarchyCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyNode\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyNode\n *\n * Constructs an internal node to represent the specified real graph cell\n *\n * Arguments:\n * \n * cell - the real graph cell this node represents\n */\nfunction mxGraphHierarchyNode(cell)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.cell = cell;\n\tthis.id = mxObjectIdentity.get(cell);\n\tthis.connectsAsTarget = [];\n\tthis.connectsAsSource = [];\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyNode.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyNode.prototype.constructor = mxGraphHierarchyNode;\n\n/**\n * Variable: cell\n * \n * The graph cell this object represents.\n */\nmxGraphHierarchyNode.prototype.cell = null;\n\n/**\n * Variable: id\n * \n * The object identity of the wrapped cell\n */\nmxGraphHierarchyNode.prototype.id = null;\n\n/**\n * Variable: connectsAsTarget\n * \n * Collection of hierarchy edges that have this node as a target\n */\nmxGraphHierarchyNode.prototype.connectsAsTarget = null;\n\n/**\n * Variable: connectsAsSource\n * \n * Collection of hierarchy edges that have this node as a source\n */\nmxGraphHierarchyNode.prototype.connectsAsSource = null;\n\n/**\n * Variable: hashCode\n * \n * Assigns a unique hashcode for each node. Used by the model dfs instead\n * of copying HashSets\n */\nmxGraphHierarchyNode.prototype.hashCode = false;\n\n/**\n * Function: getRankValue\n * \n * Returns the integer value of the layer that this node resides in\n */\nmxGraphHierarchyNode.prototype.getRankValue = function(layer)\n{\n\treturn this.maxRank;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyNode.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\tthis.nextLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsTarget.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsTarget[i];\n\n\t\t\tif (edge.maxRank == -1 || edge.maxRank == layer + 1)\n\t\t\t{\n\t\t\t\t// Either edge is not in any rank or\n\t\t\t\t// no dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.nextLayerConnectedCells[0];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyNode.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\t\tthis.previousLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsSource.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsSource[i];\n\n\t\t\tif (edge.minRank == -1 || edge.minRank == layer - 1)\n\t\t\t{\n\t\t\t\t// No dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[0];\n};\n\n/**\n * Function: isVertex\n * \n * Returns true.\n */\nmxGraphHierarchyNode.prototype.isVertex = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[0];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[0] = value;\n};\n\n/**\n * Function: isAncestor\n */\nmxGraphHierarchyNode.prototype.isAncestor = function(otherNode)\n{\n\t// Firstly, the hash code of this node needs to be shorter than the\n\t// other node\n\tif (otherNode != null && this.hashCode != null && otherNode.hashCode != null\n\t\t\t&& this.hashCode.length < otherNode.hashCode.length)\n\t{\n\t\tif (this.hashCode == otherNode.hashCode)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (this.hashCode == null || this.hashCode == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Secondly, this hash code must match the start of the other\n\t\t// node's hash code. Arrays.equals cannot be used here since\n\t\t// the arrays are different length, and we do not want to\n\t\t// perform another array copy.\n\t\tfor (var i = 0; i < this.hashCode.length; i++)\n\t\t{\n\t\t\tif (this.hashCode[i] != otherNode.hashCode[i])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the core vertex associated with this wrapper\n */\nmxGraphHierarchyNode.prototype.getCoreCell = function()\n{\n\treturn this.cell;\n};\n\n__mxOutput.mxGraphHierarchyNode = typeof mxGraphHierarchyNode !== 'undefined' ? mxGraphHierarchyNode : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyEdge\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyEdge\n *\n * Constructs a hierarchy edge\n *\n * Arguments:\n * \n * edges - a list of real graph edges this abstraction represents\n */\nfunction mxGraphHierarchyEdge(edges)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.edges = edges;\n\tthis.ids = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.ids.push(mxObjectIdentity.get(edges[i]));\n\t}\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyEdge.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyEdge.prototype.constructor = mxGraphHierarchyEdge;\n\n/**\n * Variable: edges\n * \n * The graph edge(s) this object represents. Parallel edges are all grouped\n * together within one hierarchy edge.\n */\nmxGraphHierarchyEdge.prototype.edges = null;\n\n/**\n * Variable: ids\n * \n * The object identities of the wrapped cells\n */\nmxGraphHierarchyEdge.prototype.ids = null;\n\n/**\n * Variable: source\n * \n * The node this edge is sourced at\n */\nmxGraphHierarchyEdge.prototype.source = null;\n\n/**\n * Variable: target\n * \n * The node this edge targets\n */\nmxGraphHierarchyEdge.prototype.target = null;\n\n/**\n * Variable: isReversed\n * \n * Whether or not the direction of this edge has been reversed\n * internally to create a DAG for the hierarchical layout\n */\nmxGraphHierarchyEdge.prototype.isReversed = false;\n\n/**\n * Function: invert\n * \n * Inverts the direction of this internal edge(s)\n */\nmxGraphHierarchyEdge.prototype.invert = function(layer)\n{\n\tvar temp = this.source;\n\tthis.source = this.target;\n\tthis.target = temp;\n\tthis.isReversed = !this.isReversed;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyEdge.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\t\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.nextLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == this.temp.length - 1)\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn this.nextLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyEdge.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.previousLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: isEdge\n * \n * Returns true.\n */\nmxGraphHierarchyEdge.prototype.isEdge = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[layer - this.minRank - 1];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[layer - this.minRank - 1] = value;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the first core edge associated with this wrapper\n */\nmxGraphHierarchyEdge.prototype.getCoreCell = function()\n{\n\tif (this.edges != null && this.edges.length > 0)\n\t{\n\t\treturn this.edges[0];\n\t}\n\t\n\treturn null;\n};\n\n__mxOutput.mxGraphHierarchyEdge = typeof mxGraphHierarchyEdge !== 'undefined' ? mxGraphHierarchyEdge : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxGraphHierarchyModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxGraphHierarchyModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxGraphHierarchyModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxGraphHierarchyModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxGraphHierarchyModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxGraphHierarchyModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxGraphHierarchyModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxGraphHierarchyModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxGraphHierarchyModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxGraphHierarchyModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxGraphHierarchyModel.prototype.tightenToSource = false;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxGraphHierarchyModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxGraphHierarchyModel.prototype.initialRank = function()\n{\n\tvar startNodes = [];\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = this.SOURCESCANSTARTRANK;\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\t\t\tthis.maxRank = Math.min(this.maxRank, minimumLayer);\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] -= this.maxRank;\n\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n\tfor ( var i = 0; i < startNodesCopy.length; i++)\n\t{\n\t\tvar internalNode = startNodesCopy[i];\n\t\tvar currentMaxLayer = 0;\n\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n\n\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[j];\n\t\t\tvar otherNode = internalEdge.target;\n\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n\t\t\t\t\totherNode.temp[0] + 1);\n\t\t\tcurrentMaxLayer = internalNode.temp[0];\n\t\t}\n\t}\n\t\n\t// Reset the maxRank to that which would be expected for a from-sink\n\t// scan\n\tthis.maxRank = this.SOURCESCANSTARTRANK - this.maxRank;\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxGraphHierarchyModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxGraphHierarchyModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxGraphHierarchyModel = typeof mxGraphHierarchyModel !== 'undefined' ? mxGraphHierarchyModel : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxSwimlaneModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxSwimlaneModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxSwimlaneModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxSwimlaneModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxSwimlaneModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxSwimlaneModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxSwimlaneModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxSwimlaneModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxSwimlaneModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxSwimlaneModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxSwimlaneModel.prototype.tightenToSource = false;\n\n/**\n * Variable: ranksPerGroup\n *\n * An array of the number of ranks within each swimlane\n */\nmxSwimlaneModel.prototype.ranksPerGroup = null;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxSwimlaneModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\tvar swimlanes = layout.swimlanes;\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\t\tinternalVertices[i].swimlaneIndex = -1;\n\n\t\tfor (var ii = 0; ii < swimlanes.length; ii++)\n\t\t{\n\t\t\tif (graph.model.getParent(vertices[i]) == swimlanes[ii])\n\t\t\t{\n\t\t\t\tinternalVertices[i].swimlaneIndex = ii;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxSwimlaneModel.prototype.initialRank = function()\n{\n\tthis.ranksPerGroup = [];\n\t\n\tvar startNodes = [];\n\tvar seen = new Object();\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\t\t\tthis.maxChainDfs(null, internalNode, null, seen, 0);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Calculate the lower and upper rank bounds of each swimlane\n\tvar lowerRank = [];\n\tvar upperRank = [];\n\t\n\tfor (var i = this.ranksPerGroup.length - 1; i >= 0; i--)\n\t{\n\t\tif (i == this.ranksPerGroup.length - 1)\n\t\t{\n\t\t\tlowerRank[i] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlowerRank[i] = upperRank[i+1] + 1;\n\t\t}\n\t\t\n\t\tupperRank[i] = lowerRank[i] + this.ranksPerGroup[i];\n\t}\n\t\n\tthis.maxRank = upperRank[0];\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\t\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = upperRank[0];\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tif (minimumLayer > upperRank[internalNode.swimlaneIndex])\n\t\t\t{\n\t\t\t\tminimumLayer = upperRank[internalNode.swimlaneIndex];\n\t\t\t}\n\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n//\tfor (var key in this.vertexMapper)\n//\t{\n//\t\tvar internalNode = this.vertexMapper[key];\n//\t\t// Mark the node as not having had a layer assigned\n//\t\tinternalNode.temp[0] -= this.maxRank;\n//\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n//\tfor ( var i = 0; i < startNodesCopy.length; i++)\n//\t{\n//\t\tvar internalNode = startNodesCopy[i];\n//\t\tvar currentMaxLayer = 0;\n//\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n//\n//\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n//\t\t{\n//\t\t\tvar internalEdge = layerDeterminingEdges[j];\n//\t\t\tvar otherNode = internalEdge.target;\n//\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n//\t\t\t\t\totherNode.temp[0] + 1);\n//\t\t\tcurrentMaxLayer = internalNode.temp[0];\n//\t\t}\n//\t}\n};\n\n/**\n * Function: maxChainDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of chains within groups.\n * Any cycles should be removed prior to running, but previously seen cells\n * are ignored.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * seen - a set of all nodes seen by this dfs\n * chainCount - the number of edges in the chain of vertices going through\n * the current swimlane\n */\nmxSwimlaneModel.prototype.maxChainDfs = function(parent, root, connectingEdge, seen, chainCount)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = mxCellPath.create(root.cell);\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvar slIndex = root.swimlaneIndex;\n\t\t\t\n\t\t\tif (this.ranksPerGroup[slIndex] == null || this.ranksPerGroup[slIndex] < chainCount)\n\t\t\t{\n\t\t\t\tthis.ranksPerGroup[slIndex] = chainCount;\n\t\t\t}\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), 0);\n\t\t\t\t}\n\t\t\t\telse if (root.swimlaneIndex == targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), chainCount + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxSwimlaneModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxSwimlaneModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\tvar incomingEdges = root.connectsAsTarget.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\t\t\t\t\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex <= targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < incomingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = incomingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.source;\n\n\t\t\t\t// Only navigate in target->source direction from a lower index \n\t\t\t\t// swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n__mxOutput.mxSwimlaneModel = typeof mxSwimlaneModel !== 'undefined' ? mxSwimlaneModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayoutStage\n * \n * The specific layout interface for hierarchical layouts. It adds a\n * <code>run</code> method with a parameter for the hierarchical layout model\n * that is shared between the layout stages.\n * \n * Constructor: mxHierarchicalLayoutStage\n *\n * Constructs a new hierarchical layout stage.\n */\nfunction mxHierarchicalLayoutStage() { };\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxHierarchicalLayoutStage.prototype.execute = function(parent) { };\n\n__mxOutput.mxHierarchicalLayoutStage = typeof mxHierarchicalLayoutStage !== 'undefined' ? mxHierarchicalLayoutStage : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMedianHybridCrossingReduction\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well heuristic to straighten edges as\n * far as possible.\n * \n * Constructor: mxMedianHybridCrossingReduction\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxMedianHybridCrossingReduction(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxMedianHybridCrossingReduction.\n */\nmxMedianHybridCrossingReduction.prototype = new mxHierarchicalLayoutStage();\nmxMedianHybridCrossingReduction.prototype.constructor = mxMedianHybridCrossingReduction;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMedianHybridCrossingReduction.prototype.layout = null;\n\n/**\n * Variable: maxIterations\n * \n * The maximum number of iterations to perform whilst reducing edge\n * crossings. Default is 24.\n */\nmxMedianHybridCrossingReduction.prototype.maxIterations = 24;\n\n/**\n * Variable: nestedBestRanks\n * \n * Stores each rank as a collection of cells in the best order found for\n * each layer so far\n */\nmxMedianHybridCrossingReduction.prototype.nestedBestRanks = null;\n\n/**\n * Variable: currentBestCrossings\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.currentBestCrossings = 0;\n\n/**\n * Variable: iterationsWithoutImprovement\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.iterationsWithoutImprovement = 0;\n\n/**\n * Variable: maxNoImprovementIterations\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.maxNoImprovementIterations = 2;\n\n/**\n * Function: execute\n * \n * Performs a vertex ordering within ranks as described by Gansner et al\n * 1993\n */\nmxMedianHybridCrossingReduction.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\n\t// Stores initial ordering as being the best one found so far\n\tthis.nestedBestRanks = [];\n\t\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.nestedBestRanks[i] = model.ranks[i].slice();\n\t}\n\n\tvar iterationsWithoutImprovement = 0;\n\tvar currentBestCrossings = this.calculateCrossings(model);\n\n\tfor (var i = 0; i < this.maxIterations &&\n\t\titerationsWithoutImprovement < this.maxNoImprovementIterations; i++)\n\t{\n\t\tthis.weightedMedian(i, model);\n\t\tthis.transpose(i, model);\n\t\tvar candidateCrossings = this.calculateCrossings(model);\n\n\t\tif (candidateCrossings < currentBestCrossings)\n\t\t{\n\t\t\tcurrentBestCrossings = candidateCrossings;\n\t\t\titerationsWithoutImprovement = 0;\n\n\t\t\t// Store the current rankings as the best ones\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tthis.nestedBestRanks[j][cell.getGeneralPurposeVariable(j)] = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Increase count of iterations where we haven't improved the\n\t\t\t// layout\n\t\t\titerationsWithoutImprovement++;\n\n\t\t\t// Restore the best values to the cells\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tcell.setGeneralPurposeVariable(j, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (currentBestCrossings == 0)\n\t\t{\n\t\t\t// Do nothing further\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Store the best rankings but in the model\n\tvar ranks = [];\n\tvar rankList = [];\n\n\tfor (var i = 0; i < model.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tranks[i] = rankList[i];\n\t}\n\n\tfor (var i = 0; i < this.nestedBestRanks.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.nestedBestRanks[i].length; j++)\n\t\t{\n\t\t\trankList[i].push(this.nestedBestRanks[i][j]);\n\t\t}\n\t}\n\n\tmodel.ranks = ranks;\n};\n\n\n/**\n * Function: calculateCrossings\n * \n * Calculates the total number of edge crossing in the current graph.\n * Returns the current number of edge crossings in the hierarchy graph\n * model in the current candidate layout\n * \n * Parameters:\n * \n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateCrossings = function(model)\n{\n\tvar numRanks = model.ranks.length;\n\tvar totalCrossings = 0;\n\n\tfor (var i = 1; i < numRanks; i++)\n\t{\n\t\ttotalCrossings += this.calculateRankCrossing(i, model);\n\t}\n\t\n\treturn totalCrossings;\n};\n\n/**\n * Function: calculateRankCrossing\n * \n * Calculates the number of edges crossings between the specified rank and\n * the rank below it. Returns the number of edges crossings with the rank\n * beneath\n * \n * Parameters:\n * \n * i -  the topmost rank of the pair ( higher rank value )\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateRankCrossing = function(i, model)\n{\n\tvar totalCrossings = 0;\n\tvar rank = model.ranks[i];\n\tvar previousRank = model.ranks[i - 1];\n\n\tvar tmpIndices = [];\n\n\t// Iterate over the top rank and fill in the connection information\n\tfor (var j = 0; j < rank.length; j++)\n\t{\n\t\tvar node = rank[j];\n\t\tvar rankPosition = node.getGeneralPurposeVariable(i);\n\t\tvar connectedCells = node.getPreviousLayerConnectedCells(i);\n\t\tvar nodeIndices = [];\n\n\t\tfor (var k = 0; k < connectedCells.length; k++)\n\t\t{\n\t\t\tvar connectedNode = connectedCells[k];\n\t\t\tvar otherCellRankPosition = connectedNode.getGeneralPurposeVariable(i - 1);\n\t\t\tnodeIndices.push(otherCellRankPosition);\n\t\t}\n\t\t\n\t\tnodeIndices.sort(function(x, y) { return x - y; });\n\t\ttmpIndices[rankPosition] = nodeIndices;\n\t}\n\t\n\tvar indices = [];\n\n\tfor (var j = 0; j < tmpIndices.length; j++)\n\t{\n\t\tindices = indices.concat(tmpIndices[j]);\n\t}\n\n\tvar firstIndex = 1;\n\t\n\twhile (firstIndex < previousRank.length)\n\t{\n\t\tfirstIndex <<= 1;\n\t}\n\n\tvar treeSize = 2 * firstIndex - 1;\n\tfirstIndex -= 1;\n\n\tvar tree = [];\n\t\n\tfor (var j = 0; j < treeSize; ++j)\n\t{\n\t\ttree[j] = 0;\n\t}\n\n\tfor (var j = 0; j < indices.length; j++)\n\t{\n\t\tvar index = indices[j];\n\t    var treeIndex = index + firstIndex;\n\t    ++tree[treeIndex];\n\t    \n\t    while (treeIndex > 0)\n\t    {\n\t    \tif (treeIndex % 2)\n\t    \t{\n\t    \t\ttotalCrossings += tree[treeIndex + 1];\n\t    \t}\n\t      \n\t    \ttreeIndex = (treeIndex - 1) >> 1;\n\t    \t++tree[treeIndex];\n\t    }\n\t}\n\n\treturn totalCrossings;\n};\n\n/**\n * Function: transpose\n * \n * Takes each possible adjacent cell pair on each rank and checks if\n * swapping them around reduces the number of crossing\n * \n * Parameters:\n * \n * mainLoopIteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.transpose = function(mainLoopIteration, model)\n{\n\tvar improved = true;\n\n\t// Track the number of iterations in case of looping\n\tvar count = 0;\n\tvar maxCount = 10;\n\twhile (improved && count++ < maxCount)\n\t{\n\t\t// On certain iterations allow allow swapping of cell pairs with\n\t\t// equal edge crossings switched or not switched. This help to\n\t\t// nudge a stuck layout into a lower crossing total.\n\t\tvar nudge = mainLoopIteration % 2 == 1 && count % 2 == 1;\n\t\timproved = false;\n\t\t\n\t\tfor (var i = 0; i < model.ranks.length; i++)\n\t\t{\n\t\t\tvar rank = model.ranks[i];\n\t\t\tvar orderedCells = [];\n\t\t\t\n\t\t\tfor (var j = 0; j < rank.length; j++)\n\t\t\t{\n\t\t\t\tvar cell = rank[j];\n\t\t\t\tvar tempRank = cell.getGeneralPurposeVariable(i);\n\t\t\t\t\n\t\t\t\t// FIXME: Workaround to avoid negative tempRanks\n\t\t\t\tif (tempRank < 0)\n\t\t\t\t{\n\t\t\t\t\ttempRank = j;\n\t\t\t\t}\n\t\t\t\torderedCells[tempRank] = cell;\n\t\t\t}\n\t\t\t\n\t\t\tvar leftCellAboveConnections = null;\n\t\t\tvar leftCellBelowConnections = null;\n\t\t\tvar rightCellAboveConnections = null;\n\t\t\tvar rightCellBelowConnections = null;\n\t\t\t\n\t\t\tvar leftAbovePositions = null;\n\t\t\tvar leftBelowPositions = null;\n\t\t\tvar rightAbovePositions = null;\n\t\t\tvar rightBelowPositions = null;\n\t\t\t\n\t\t\tvar leftCell = null;\n\t\t\tvar rightCell = null;\n\n\t\t\tfor (var j = 0; j < (rank.length - 1); j++)\n\t\t\t{\n\t\t\t\t// For each intra-rank adjacent pair of cells\n\t\t\t\t// see if swapping them around would reduce the\n\t\t\t\t// number of edges crossing they cause in total\n\t\t\t\t// On every cell pair except the first on each rank, we\n\t\t\t\t// can save processing using the previous values for the\n\t\t\t\t// right cell on the new left cell\n\t\t\t\tif (j == 0)\n\t\t\t\t{\n\t\t\t\t\tleftCell = orderedCells[j];\n\t\t\t\t\tleftCellAboveConnections = leftCell\n\t\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\t\tleftCellBelowConnections = leftCell\n\t\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\t\t\t\t\tleftAbovePositions = [];\n\t\t\t\t\tleftBelowPositions = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellAboveConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftAbovePositions[k] = leftCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellBelowConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftBelowPositions[k] = leftCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftCellAboveConnections = rightCellAboveConnections;\n\t\t\t\t\tleftCellBelowConnections = rightCellBelowConnections;\n\t\t\t\t\tleftAbovePositions = rightAbovePositions;\n\t\t\t\t\tleftBelowPositions = rightBelowPositions;\n\t\t\t\t\tleftCell = rightCell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trightCell = orderedCells[j + 1];\n\t\t\t\trightCellAboveConnections = rightCell\n\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\trightCellBelowConnections = rightCell\n\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\n\t\t\t\trightAbovePositions = [];\n\t\t\t\trightBelowPositions = [];\n\n\t\t\t\tfor (var k = 0; k < rightCellAboveConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightAbovePositions[k] = rightCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rightCellBelowConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightBelowPositions[k] = rightCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t}\n\n\t\t\t\tvar totalCurrentCrossings = 0;\n\t\t\t\tvar totalSwitchedCrossings = 0;\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftAbovePositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightAbovePositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftAbovePositions[k] > rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftAbovePositions[k] < rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftBelowPositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightBelowPositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftBelowPositions[k] > rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftBelowPositions[k] < rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((totalSwitchedCrossings < totalCurrentCrossings) ||\n\t\t\t\t\t(totalSwitchedCrossings == totalCurrentCrossings &&\n\t\t\t\t\tnudge))\n\t\t\t\t{\n\t\t\t\t\tvar temp = leftCell.getGeneralPurposeVariable(i);\n\t\t\t\t\tleftCell.setGeneralPurposeVariable(i, rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(i));\n\t\t\t\t\trightCell.setGeneralPurposeVariable(i, temp);\n\n\t\t\t\t\t// With this pair exchanged we have to switch all of\n\t\t\t\t\t// values for the left cell to the right cell so the\n\t\t\t\t\t// next iteration for this rank uses it as the left\n\t\t\t\t\t// cell again\n\t\t\t\t\trightCellAboveConnections = leftCellAboveConnections;\n\t\t\t\t\trightCellBelowConnections = leftCellBelowConnections;\n\t\t\t\t\trightAbovePositions = leftAbovePositions;\n\t\t\t\t\trightBelowPositions = leftBelowPositions;\n\t\t\t\t\trightCell = leftCell;\n\t\t\t\t\t\n\t\t\t\t\tif (!nudge)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Don't count nudges as improvement or we'll end\n\t\t\t\t\t\t// up stuck in two combinations and not finishing\n\t\t\t\t\t\t// as early as we should\n\t\t\t\t\t\timproved = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: weightedMedian\n * \n * Sweeps up or down the layout attempting to minimise the median placement\n * of connected cells on adjacent ranks\n * \n * Parameters:\n * \n * iteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.weightedMedian = function(iteration, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (iteration % 2 == 0);\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank - 1; j >= 0; j--)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 1; j < model.maxRank; j++)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianRank\n * \n * Attempts to minimise the median placement of connected cells on this rank\n * and one of the adjacent ranks\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * downwardSweep - whether or not this is a downward sweep through the graph\n */\nmxMedianHybridCrossingReduction.prototype.medianRank = function(rankValue, downwardSweep)\n{\n\tvar numCellsForRank = this.nestedBestRanks[rankValue].length;\n\tvar medianValues = [];\n\tvar reservedPositions = [];\n\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tvar cell = this.nestedBestRanks[rankValue][i];\n\t\tvar sorterEntry = new MedianCellSorter();\n\t\tsorterEntry.cell = cell;\n\n\t\t// Flip whether or not equal medians are flipped on up and down\n\t\t// sweeps\n\t\t// TODO re-implement some kind of nudge\n\t\t// medianValues[i].nudge = !downwardSweep;\n\t\tvar nextLevelConnectedCells;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\t\n\t\tvar nextRankValue;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextRankValue = rankValue + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextRankValue = rankValue - 1;\n\t\t}\n\n\t\tif (nextLevelConnectedCells != null\n\t\t\t\t&& nextLevelConnectedCells.length != 0)\n\t\t{\n\t\t\tsorterEntry.medianValue = this.medianValue(\n\t\t\t\t\tnextLevelConnectedCells, nextRankValue);\n\t\t\tmedianValues.push(sorterEntry);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Nodes with no adjacent vertices are flagged in the reserved array\n\t\t\t// to indicate they should be left in their current position.\n\t\t\treservedPositions[cell.getGeneralPurposeVariable(rankValue)] = true;\n\t\t}\n\t}\n\t\n\tmedianValues.sort(MedianCellSorter.prototype.compare);\n\t\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tif (reservedPositions[i] == null)\n\t\t{\n\t\t\tvar cell = medianValues.shift().cell;\n\t\t\tcell.setGeneralPurposeVariable(rankValue, i);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianValue\n * \n * Calculates the median rank order positioning for the specified cell using\n * the connected cells on the specified rank. Returns the median rank\n * ordering value of the connected cells\n * \n * Parameters:\n * \n * connectedCells - the cells on the specified rank connected to the\n * specified cell\n * rankValue - the rank that the connected cell lie upon\n */\nmxMedianHybridCrossingReduction.prototype.medianValue = function(connectedCells, rankValue)\n{\n\tvar medianValues = [];\n\tvar arrayCount = 0;\n\t\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tvar cell = connectedCells[i];\n\t\tmedianValues[arrayCount++] = cell.getGeneralPurposeVariable(rankValue);\n\t}\n\n\t// Sort() sorts lexicographically by default (i.e. 11 before 9) so force\n\t// numerical order sort\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (arrayCount % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(arrayCount / 2)];\n\t}\n\telse if (arrayCount == 2)\n\t{\n\t\treturn ((medianValues[0] + medianValues[1]) / 2.0);\n\t}\n\telse\n\t{\n\t\tvar medianPoint = arrayCount / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1] - medianValues[0];\n\t\tvar rightMedian = medianValues[arrayCount - 1]\n\t\t\t\t- medianValues[medianPoint];\n\n\t\treturn (medianValues[medianPoint - 1] * rightMedian + medianValues[medianPoint]\n\t\t\t\t* leftMedian)\n\t\t\t\t/ (leftMedian + rightMedian);\n\t}\n};\n\n/**\n * Class: MedianCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the median\n * values. Does not violate (x.compareTo(y)==0) == (x.equals(y))\n *\n * Constructor: MedianCellSorter\n * \n * Constructs a new median cell sorter.\n */\nfunction MedianCellSorter()\n{\n\t// empty\n};\n\n/**\n * Variable: medianValue\n * \n * The weighted value of the cell stored.\n */\nMedianCellSorter.prototype.medianValue = 0;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated\n */\nMedianCellSorter.prototype.cell = false;\n\n/**\n * Function: compare\n * \n * Compares two MedianCellSorters.\n */\nMedianCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.medianValue > a.medianValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.medianValue < a.medianValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n__mxOutput.mxMedianHybridCrossingReduction = typeof mxMedianHybridCrossingReduction !== 'undefined' ? mxMedianHybridCrossingReduction : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMinimumCycleRemover\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxMinimumCycleRemover\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxMinimumCycleRemover(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxMinimumCycleRemover.prototype = new mxHierarchicalLayoutStage();\nmxMinimumCycleRemover.prototype.constructor = mxMinimumCycleRemover;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMinimumCycleRemover.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxMinimumCycleRemover.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodesArray = model.vertexMapper.getValues();\n\tvar unseenNodes = new Object();\n\t\n\tfor (var i = 0; i < unseenNodesArray.length; i++)\n\t{\n\t\tunseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n\t}\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, rootsArray, true, null);\n\n\t// If there are any nodes that should be nodes that the dfs can miss\n\t// these need to be processed with the dfs and the roots assigned\n\t// correctly to form a correct internal model\n\tvar seenNodesCopy = mxUtils.clone(seenNodes, null, true);\n\n\t// Pick a random cell and dfs from it\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, unseenNodes, true, seenNodesCopy);\n};\n\n__mxOutput.mxMinimumCycleRemover = typeof mxMinimumCycleRemover !== 'undefined' ? mxMinimumCycleRemover : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCoordinateAssignment\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well as heuristics to straighten edges as\n * far as possible.\n * \n * Constructor: mxCoordinateAssignment\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxCoordinateAssignment(layout, intraCellSpacing, interRankCellSpacing,\n\torientation, initialX, parallelEdgeSpacing)\n{\n\tthis.layout = layout;\n\tthis.intraCellSpacing = intraCellSpacing;\n\tthis.interRankCellSpacing = interRankCellSpacing;\n\tthis.orientation = orientation;\n\tthis.initialX = initialX;\n\tthis.parallelEdgeSpacing = parallelEdgeSpacing;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxCoordinateAssignment.prototype = new mxHierarchicalLayoutStage();\nmxCoordinateAssignment.prototype.constructor = mxCoordinateAssignment;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxCoordinateAssignment.prototype.layout = null;\n\n/**\n * Variable: intraCellSpacing\n * \n * The minimum buffer between cells on the same rank. Default is 30.\n */\nmxCoordinateAssignment.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The minimum distance between cells on adjacent ranks. Default is 100.\n */\nmxCoordinateAssignment.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxCoordinateAssignment.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: maxIterations\n * \n * The number of heuristic iterations to run. Default is 8.\n */\nmxCoordinateAssignment.prototype.maxIterations = 8;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex Default is 5.\n */\nmxCoordinateAssignment.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex Default is 2.\n */\nmxCoordinateAssignment.prototype.prefVertEdgeOff = 2;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex Default is 12.\n */\nmxCoordinateAssignment.prototype.minEdgeJetty = 12;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed Default is 4.\n */\nmxCoordinateAssignment.prototype.channelBuffer = 4;\n\n/**\n * Variable: jettyPositions\n * \n * Map of internal edges and (x,y) pair of positions of the start and end jetty\n * for that edge where it connects to the source and target vertices.\n * Note this should technically be a WeakHashMap, but since JS does not\n * have an equivalent, housekeeping must be performed before using.\n * i.e. check all edges are still in the model and clear the values.\n * Note that the y co-ord is the offset of the jetty, not the\n * absolute point\n */\nmxCoordinateAssignment.prototype.jettyPositions = null;\n\n/**\n * Variable: orientation\n * \n * The position of the root ( start ) node(s) relative to the rest of the\n * laid out graph. Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxCoordinateAssignment.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: initialX\n * \n * The minimum x position node placement starts at\n */\nmxCoordinateAssignment.prototype.initialX = null;\n\n/**\n * Variable: limitX\n * \n * The maximum x value this positioning lays up to\n */\nmxCoordinateAssignment.prototype.limitX = null;\n\n/**\n * Variable: currentXDelta\n * \n * The sum of x-displacements for the current iteration\n */\nmxCoordinateAssignment.prototype.currentXDelta = null;\n\n/**\n * Variable: widestRank\n * \n * The rank that has the widest x position\n */\nmxCoordinateAssignment.prototype.widestRank = null;\n\n/**\n * Variable: rankTopY\n * \n * Internal cache of top-most values of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankTopY = null;\n\n/**\n * Variable: rankBottomY\n * \n * Internal cache of bottom-most value of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankBottomY = null;\n\n/**\n * Variable: widestRankValue\n * \n * The X-coordinate of the edge of the widest rank\n */\nmxCoordinateAssignment.prototype.widestRankValue = null;\n\n/**\n * Variable: rankWidths\n * \n * The width of all the ranks\n */\nmxCoordinateAssignment.prototype.rankWidths = null;\n\n/**\n * Variable: rankY\n * \n * The Y-coordinate of all the ranks\n */\nmxCoordinateAssignment.prototype.rankY = null;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxCoordinateAssignment.prototype.fineTuning = true;\n\n/**\n * Variable: nextLayerConnectedCache\n * \n * A store of connections to the layer above for speed\n */\nmxCoordinateAssignment.prototype.nextLayerConnectedCache = null;\n\n/**\n * Variable: previousLayerConnectedCache\n * \n * A store of connections to the layer below for speed\n */\nmxCoordinateAssignment.prototype.previousLayerConnectedCache = null;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents Default is 10.\n */\nmxCoordinateAssignment.prototype.groupPadding = 10;\n\n/**\n * Utility method to display current positions\n */\nmxCoordinateAssignment.prototype.printStatus = function()\n{\n\tvar model = this.layout.getModel();\n\tmxLog.show();\n\n\tmxLog.writeln('======Coord assignment debug=======');\n\n\tfor (var j = 0; j < model.ranks.length; j++)\n\t{\n\t\tmxLog.write('Rank ', j, ' : ' );\n\t\tvar rank = model.ranks[j];\n\t\t\n\t\tfor (var k = 0; k < rank.length; k++)\n\t\t{\n\t\t\tvar cell = rank[k];\n\t\t\t\n\t\t\tmxLog.write(cell.getGeneralPurposeVariable(j), '  ');\n\t\t}\n\t\tmxLog.writeln();\n\t}\n\t\n\tmxLog.writeln('====================================');\n};\n\n/**\n * Function: execute\n * \n * A basic horizontal coordinate assignment algorithm\n */\nmxCoordinateAssignment.prototype.execute = function(parent)\n{\n\tthis.jettyPositions = Object();\n\tvar model = this.layout.getModel();\n\tthis.currentXDelta = 0.0;\n\n\tthis.initialCoords(this.layout.getGraph(), model);\n\t\n//\tthis.printStatus();\n\t\n\tif (this.fineTuning)\n\t{\n\t\tthis.minNode(model);\n\t}\n\t\n\tvar bestXDelta = 100000000.0;\n\t\n\tif (this.fineTuning)\n\t{\n\t\tfor (var i = 0; i < this.maxIterations; i++)\n\t\t{\n//\t\t\tthis.printStatus();\n\t\t\n\t\t\t// Median Heuristic\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tthis.medianPos(i, model);\n\t\t\t\tthis.minNode(model);\n\t\t\t}\n\t\t\t\n\t\t\t// if the total offset is less for the current positioning,\n\t\t\t// there are less heavily angled edges and so the current\n\t\t\t// positioning is used\n\t\t\tif (this.currentXDelta < bestXDelta)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setX(j, cell.getGeneralPurposeVariable(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbestXDelta = this.currentXDelta;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Restore the best positions\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setGeneralPurposeVariable(j, cell.getX(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.minPath(this.layout.getGraph(), model);\n\t\t\t\n\t\t\tthis.currentXDelta = 0;\n\t\t}\n\t}\n\t\n\tthis.setCellLocations(this.layout.getGraph(), model);\n};\n\n/**\n * Function: minNode\n * \n * Performs one median positioning sweep in both directions\n */\nmxCoordinateAssignment.prototype.minNode = function(model)\n{\n\t// Queue all nodes\n\tvar nodeList = [];\n\t\n\t// Need to be able to map from cell to cellWrapper\n\tvar map = new mxDictionary();\n\tvar rank = [];\n\t\n\tfor (var i = 0; i <= model.maxRank; i++)\n\t{\n\t\trank[i] = model.ranks[i];\n\t\t\n\t\tfor (var j = 0; j < rank[i].length; j++)\n\t\t{\n\t\t\t// Use the weight to store the rank and visited to store whether\n\t\t\t// or not the cell is in the list\n\t\t\tvar node = rank[i][j];\n\t\t\tvar nodeWrapper = new WeightedCellSorter(node, i);\n\t\t\tnodeWrapper.rankIndex = j;\n\t\t\tnodeWrapper.visited = true;\n\t\t\tnodeList.push(nodeWrapper);\n\t\t\t\n\t\t\tmap.put(node, nodeWrapper);\n\t\t}\n\t}\n\t\n\t// Set a limit of the maximum number of times we will access the queue\n\t// in case a loop appears\n\tvar maxTries = nodeList.length * 10;\n\tvar count = 0;\n\t\n\t// Don't move cell within this value of their median\n\tvar tolerance = 1;\n\t\n\twhile (nodeList.length > 0 && count <= maxTries)\n\t{\n\t\tvar cellWrapper = nodeList.shift();\n\t\tvar cell = cellWrapper.cell;\n\t\t\n\t\tvar rankValue = cellWrapper.weightedValue;\n\t\tvar rankIndex = parseInt(cellWrapper.rankIndex);\n\t\t\n\t\tvar nextLayerConnectedCells = cell.getNextLayerConnectedCells(rankValue);\n\t\tvar previousLayerConnectedCells = cell.getPreviousLayerConnectedCells(rankValue);\n\t\t\n\t\tvar numNextLayerConnected = nextLayerConnectedCells.length;\n\t\tvar numPreviousLayerConnected = previousLayerConnectedCells.length;\n\n\t\tvar medianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\trankValue + 1);\n\t\tvar medianPreviousLevel = this.medianXValue(previousLayerConnectedCells,\n\t\t\t\trankValue - 1);\n\n\t\tvar numConnectedNeighbours = numNextLayerConnected\n\t\t\t\t+ numPreviousLayerConnected;\n\t\tvar currentPosition = cell.getGeneralPurposeVariable(rankValue);\n\t\tvar cellMedian = currentPosition;\n\t\t\n\t\tif (numConnectedNeighbours > 0)\n\t\t{\n\t\t\tcellMedian = (medianNextLevel * numNextLayerConnected + medianPreviousLevel\n\t\t\t\t\t* numPreviousLayerConnected)\n\t\t\t\t\t/ numConnectedNeighbours;\n\t\t}\n\n\t\t// Flag storing whether or not position has changed\n\t\tvar positionChanged = false;\n\t\t\n\t\tif (cellMedian < currentPosition - tolerance)\n\t\t{\n\t\t\tif (rankIndex == 0)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar leftCell = rank[rankValue][rankIndex - 1];\n\t\t\t\tvar leftLimit = leftCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\t\t\tif (leftLimit < cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (leftLimit < cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t- tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (cellMedian > currentPosition + tolerance)\n\t\t{\n\t\t\tvar rankSize = rank[rankValue].length;\n\t\t\t\n\t\t\tif (rankIndex == rankSize - 1)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar rightCell = rank[rankValue][rankIndex + 1];\n\t\t\t\tvar rightLimit = rightCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\t\t\t\t\n\t\t\t\tif (rightLimit > cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (rightLimit > cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t+ tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (positionChanged)\n\t\t{\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < nextLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = nextLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\t\t\t\t\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < previousLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = previousLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tcellWrapper.visited = false;\n\t\tcount++;\n\t}\n};\n\n/**\n * Function: medianPos\n * \n * Performs one median positioning sweep in one direction\n * \n * Parameters:\n * \n * i - the iteration of the whole process\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.medianPos = function(i, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (i % 2 == 0);\n\t\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank; j > 0; j--)\n\t\t{\n\t\t\tthis.rankMedianPosition(j - 1, model, j);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 0; j < model.maxRank - 1; j++)\n\t\t{\n\t\t\tthis.rankMedianPosition(j + 1, model, j);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankMedianPosition\n * \n * Performs median minimisation over one rank.\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * model - an internal model of the hierarchical layout\n * nextRankValue - the layer number whose connected cels are to be laid out\n * relative to\n */\nmxCoordinateAssignment.prototype.rankMedianPosition = function(rankValue, model, nextRankValue)\n{\n\tvar rank = model.ranks[rankValue];\n\n\t// Form an array of the order in which the cell are to be processed\n\t// , the order is given by the weighted sum of the in or out edges,\n\t// depending on whether we're traveling up or down the hierarchy.\n\tvar weightedValues = [];\n\tvar cellMap = new Object();\n\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar currentCell = rank[i];\n\t\tweightedValues[i] = new WeightedCellSorter();\n\t\tweightedValues[i].cell = currentCell;\n\t\tweightedValues[i].rankIndex = i;\n\t\tcellMap[currentCell.id] = weightedValues[i];\n\t\tvar nextLayerConnectedCells = null;\n\t\t\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\n\t\t// Calculate the weighing based on this node type and those this\n\t\t// node is connected to on the next layer\n\t\tweightedValues[i].weightedValue = this.calculatedWeightedValue(\n\t\t\t\tcurrentCell, nextLayerConnectedCells);\n\t}\n\n\tweightedValues.sort(WeightedCellSorter.prototype.compare);\n\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\t\n\tfor (var i = 0; i < weightedValues.length; i++)\n\t{\n\t\tvar numConnectionsNextLevel = 0;\n\t\tvar cell = weightedValues[i].cell;\n\t\tvar nextLayerConnectedCells = null;\n\t\tvar medianNextLevel = 0;\n\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getPreviousLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getNextLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\n\t\tif (nextLayerConnectedCells != null)\n\t\t{\n\t\t\tnumConnectionsNextLevel = nextLayerConnectedCells.length;\n\t\t\t\n\t\t\tif (numConnectionsNextLevel > 0)\n\t\t\t{\n\t\t\t\tmedianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\t\t\tnextRankValue);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// For case of no connections on the next level set the\n\t\t\t\t// median to be the current position and try to be\n\t\t\t\t// positioned there\n\t\t\t\tmedianNextLevel = cell.getGeneralPurposeVariable(rankValue);\n\t\t\t}\n\t\t}\n\n\t\tvar leftBuffer = 0.0;\n\t\tvar leftLimit = -100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex - 1; j >= 0;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar leftCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\tleftLimit = leftCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t+ leftCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t+ this.intraCellSpacing\n\t\t\t\t\t\t\t+ leftBuffer + cell.width / 2.0;\n\t\t\t\t\tj = -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftBuffer += leftCell.width + this.intraCellSpacing;\n\t\t\t\t\tj--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar rightBuffer = 0.0;\n\t\tvar rightLimit = 100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex + 1; j < weightedValues.length;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar rightCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\trightLimit = rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t- rightCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t- this.intraCellSpacing\n\t\t\t\t\t\t\t- rightBuffer - cell.width / 2.0;\n\t\t\t\t\tj = weightedValues.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trightBuffer += rightCell.width + this.intraCellSpacing;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (medianNextLevel >= leftLimit && medianNextLevel <= rightLimit)\n\t\t{\n\t\t\tcell.setGeneralPurposeVariable(rankValue, medianNextLevel);\n\t\t}\n\t\telse if (medianNextLevel < leftLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\tthis.currentXDelta += leftLimit - medianNextLevel;\n\t\t}\n\t\telse if (medianNextLevel > rightLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\tthis.currentXDelta += medianNextLevel - rightLimit;\n\t\t}\n\n\t\tweightedValues[i].visited = true;\n\t}\n};\n\n/**\n * Function: calculatedWeightedValue\n * \n * Calculates the priority the specified cell has based on the type of its\n * cell and the cells it is connected to on the next layer\n * \n * Parameters:\n * \n * currentCell - the cell whose weight is to be calculated\n * collection - the cells the specified cell is connected to\n */\nmxCoordinateAssignment.prototype.calculatedWeightedValue = function(currentCell, collection)\n{\n\tvar totalWeight = 0;\n\t\n\tfor (var i = 0; i < collection.length; i++)\n\t{\n\t\tvar cell = collection[i];\n\n\t\tif (currentCell.isVertex() && cell.isVertex())\n\t\t{\n\t\t\ttotalWeight++;\n\t\t}\n\t\telse if (currentCell.isEdge() && cell.isEdge())\n\t\t{\n\t\t\ttotalWeight += 8;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttotalWeight += 2;\n\t\t}\n\t}\n\n\treturn totalWeight;\n};\n\n/**\n * Function: medianXValue\n * \n * Calculates the median position of the connected cell on the specified\n * rank\n * \n * Parameters:\n * \n * connectedCells - the cells the candidate connects to on this level\n * rankValue - the layer number of this rank\n */\nmxCoordinateAssignment.prototype.medianXValue = function(connectedCells, rankValue)\n{\n\tif (connectedCells.length == 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar medianValues = [];\n\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tmedianValues[i] = connectedCells[i].getGeneralPurposeVariable(rankValue);\n\t}\n\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (connectedCells.length % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(connectedCells.length / 2)];\n\t}\n\telse\n\t{\n\t\tvar medianPoint = connectedCells.length / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1];\n\t\tvar rightMedian = medianValues[medianPoint];\n\n\t\treturn ((leftMedian + rightMedian) / 2);\n\t}\n};\n\n/**\n * Function: initialCoords\n * \n * Sets up the layout in an initial positioning. The ranks are all centered\n * as much as possible along the middle vertex in each rank. The other cells\n * are then placed as close as possible on either side.\n * \n * Parameters:\n * \n * facade - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.initialCoords = function(facade, model)\n{\n\tthis.calculateWidestRank(facade, model);\n\n\t// Sweep up and down from the widest rank\n\tfor (var i = this.widestRank; i >= 0; i--)\n\t{\n\t\tif (i < model.maxRank)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n\n\tfor (var i = this.widestRank+1; i <= model.maxRank; i++)\n\t{\n\t\tif (i > 0)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankCoordinates\n * \n * Sets up the layout in an initial positioning. All the first cells in each\n * rank are moved to the left and the rest of the rank inserted as close\n * together as their size and buffering permits. This method works on just\n * the specified rank.\n * \n * Parameters:\n * \n * rankValue - the current rank being processed\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.rankCoordinates = function(rankValue, graph, model)\n{\n\tvar rank = model.ranks[rankValue];\n\tvar maxY = 0.0;\n\tvar localX = this.initialX + (this.widestRankValue - this.rankWidths[rankValue])\n\t\t\t/ 2;\n\n\t// Store whether or not any of the cells' bounds were unavailable so\n\t// to only issue the warning once for all cells\n\tvar boundsWarning = false;\n\t\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar node = rank[i];\n\t\t\n\t\tif (node.isVertex())\n\t\t{\n\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tboundsWarning = true;\n\t\t\t}\n\n\t\t\tmaxY = Math.max(maxY, node.height);\n\t\t}\n\t\telse if (node.isEdge())\n\t\t{\n\t\t\t// The width is the number of additional parallel edges\n\t\t\t// time the parallel edge spacing\n\t\t\tvar numEdges = 1;\n\n\t\t\tif (node.edges != null)\n\t\t\t{\n\t\t\t\tnumEdges = node.edges.length;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t}\n\n\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t}\n\n\t\t// Set the initial x-value as being the best result so far\n\t\tlocalX += node.width / 2.0;\n\t\tnode.setX(rankValue, localX);\n\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\tlocalX += node.width / 2.0;\n\t\tlocalX += this.intraCellSpacing;\n\t}\n\n\tif (boundsWarning == true)\n\t{\n\t\tmxLog.warn('At least one cell has no bounds');\n\t}\n};\n\n/**\n * Function: calculateWidestRank\n * \n * Calculates the width rank in the hierarchy. Also set the y value of each\n * rank whilst performing the calculation\n * \n * Parameters:\n * \n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.calculateWidestRank = function(graph, model)\n{\n\t// Starting y co-ordinate\n\tvar y = -this.interRankCellSpacing;\n\t\n\t// Track the widest cell on the last rank since the y\n\t// difference depends on it\n\tvar lastRankMaxCellHeight = 0.0;\n\tthis.rankWidths = [];\n\tthis.rankY = [];\n\n\tfor (var rankValue = model.maxRank; rankValue >= 0; rankValue--)\n\t{\n\t\t// Keep track of the widest cell on this rank\n\t\tvar maxCellHeight = 0.0;\n\t\tvar rank = model.ranks[rankValue];\n\t\tvar localX = this.initialX;\n\n\t\t// Store whether or not any of the cells' bounds were unavailable so\n\t\t// to only issue the warning once for all cells\n\t\tvar boundsWarning = false;\n\t\t\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar node = rank[i];\n\n\t\t\tif (node.isVertex())\n\t\t\t{\n\t\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tboundsWarning = true;\n\t\t\t\t}\n\n\t\t\t\tmaxCellHeight = Math.max(maxCellHeight, node.height);\n\t\t\t}\n\t\t\telse if (node.isEdge())\n\t\t\t{\n\t\t\t\t// The width is the number of additional parallel edges\n\t\t\t\t// time the parallel edge spacing\n\t\t\t\tvar numEdges = 1;\n\n\t\t\t\tif (node.edges != null)\n\t\t\t\t{\n\t\t\t\t\tnumEdges = node.edges.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t\t}\n\n\t\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t\t}\n\n\t\t\t// Set the initial x-value as being the best result so far\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tnode.setX(rankValue, localX);\n\t\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tlocalX += this.intraCellSpacing;\n\n\t\t\tif (localX > this.widestRankValue)\n\t\t\t{\n\t\t\t\tthis.widestRankValue = localX;\n\t\t\t\tthis.widestRank = rankValue;\n\t\t\t}\n\n\t\t\tthis.rankWidths[rankValue] = localX;\n\t\t}\n\n\t\tif (boundsWarning == true)\n\t\t{\n\t\t\tmxLog.warn('At least one cell has no bounds');\n\t\t}\n\n\t\tthis.rankY[rankValue] = y;\n\t\tvar distanceToNextRank = maxCellHeight / 2.0\n\t\t\t\t+ lastRankMaxCellHeight / 2.0 + this.interRankCellSpacing;\n\t\tlastRankMaxCellHeight = maxCellHeight;\n\n\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.orientation == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\ty += distanceToNextRank;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty -= distanceToNextRank;\n\t\t}\n\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar cell = rank[i];\n\t\t\tcell.setY(rankValue, y);\n\t\t}\n\t}\n};\n\n/**\n * Function: minPath\n * \n * Straightens out chains of virtual nodes where possibleacade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.minPath = function(graph, model)\n{\n\t// Work down and up each edge with at least 2 control points\n\t// trying to straighten each one out. If the same number of\n\t// straight segments are formed in both directions, the \n\t// preferred direction used is the one where the final\n\t// control points have the least offset from the connectable \n\t// region of the terminating vertices\n\tvar edges = model.edgeMapper.getValues();\n\t\n\tfor (var j = 0; j < edges.length; j++)\n\t{\n\t\tvar cell = edges[j];\n\t\t\n\t\tif (cell.maxRank - cell.minRank - 1 < 1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// At least two virtual nodes in the edge\n\t\t// Check first whether the edge is already straight\n\t\tvar referenceX = cell\n\t\t\t\t.getGeneralPurposeVariable(cell.minRank + 1);\n\t\tvar edgeStraight = true;\n\t\tvar refSegCount = 0;\n\t\t\n\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t{\n\t\t\tvar x = cell.getGeneralPurposeVariable(i);\n\n\t\t\tif (referenceX != x)\n\t\t\t{\n\t\t\t\tedgeStraight = false;\n\t\t\t\treferenceX = x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trefSegCount++;\n\t\t\t}\n\t\t}\n\n\t\tif (!edgeStraight)\n\t\t{\n\t\t\tvar upSegCount = 0;\n\t\t\tvar downSegCount = 0;\n\t\t\tvar upXPositions = [];\n\t\t\tvar downXPositions = [];\n\n\t\t\tvar currentX = cell.getGeneralPurposeVariable(cell.minRank + 1);\n\n\t\t\tfor (var i = cell.minRank + 1; i < cell.maxRank - 1; i++)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment up with the current control point.\n\t\t\t\tvar nextX = cell.getX(i + 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i + 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = nextX;\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\tcurrentX = cell.getX(i);\n\n\t\t\tfor (var i = cell.maxRank - 1; i > cell.minRank + 1; i--)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment down with the current control point.\n\t\t\t\tvar nextX = cell.getX(i - 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i - 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = cell.getX(i-1);\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (downSegCount > refSegCount || upSegCount > refSegCount)\n\t\t\t{\n\t\t\t\tif (downSegCount >= upSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply down calculation values\n\t\t\t\t\tfor (var i = cell.maxRank - 2; i > cell.minRank; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, downXPositions[i - cell.minRank - 1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (upSegCount > downSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply up calculation values\n\t\t\t\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, upXPositions[i - cell.minRank - 2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Neither direction provided a favourable result\n\t\t\t\t\t// But both calculations are better than the\n\t\t\t\t\t// existing solution, so apply the one with minimal\n\t\t\t\t\t// offset to attached vertices at either end.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: repositionValid\n * \n * Determines whether or not a node may be moved to the specified x \n * position on the specified rank\n * \n * Parameters:\n *\n * model - the layout model\n * cell - the cell being analysed\n * rank - the layer of the cell\n * position - the x position being sought\n */\nmxCoordinateAssignment.prototype.repositionValid = function(model, cell, rank, position)\n{\n\tvar rankArray = model.ranks[rank];\n\tvar rankIndex = -1;\n\n\tfor (var i = 0; i < rankArray.length; i++)\n\t{\n\t\tif (cell == rankArray[i])\n\t\t{\n\t\t\trankIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (rankIndex < 0)\n\t{\n\t\treturn false;\n\t}\n\n\tvar currentX = cell.getGeneralPurposeVariable(rank);\n\n\tif (position < currentX)\n\t{\n\t\t// Trying to move node to the left.\n\t\tif (rankIndex == 0)\n\t\t{\n\t\t\t// Left-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar leftCell = rankArray[rankIndex - 1];\n\t\tvar leftLimit = leftCell.getGeneralPurposeVariable(rank);\n\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\tif (leftLimit <= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (position > currentX)\n\t{\n\t\t// Trying to move node to the right.\n\t\tif (rankIndex == rankArray.length - 1)\n\t\t{\n\t\t\t// Right-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar rightCell = rankArray[rankIndex + 1];\n\t\tvar rightLimit = rightCell.getGeneralPurposeVariable(rank);\n\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\n\t\tif (rightLimit >= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Function: setCellLocations\n * \n * Sets the cell locations in the facade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the input graph\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.setCellLocations = function(graph, model)\n{\n\tthis.rankTopY = [];\n\tthis.rankBottomY = [];\n\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.rankTopY[i] = Number.MAX_VALUE;\n\t\tthis.rankBottomY[i] = -Number.MAX_VALUE;\n\t}\n\t\n\tvar vertices = model.vertexMapper.getValues();\n\n\t// Process vertices all first, since they define the lower and \n\t// limits of each rank. Between these limits lie the channels\n\t// where the edges can be routed across the graph\n\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tthis.setVertexLocation(vertices[i]);\n\t}\n\t\n\t// Post process edge styles. Needs the vertex locations set for initial\n\t// values of the top and bottoms of each rank\n\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.ORTHOGONAL\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.POLYLINE\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t{\n\t\tthis.localEdgeProcessing(model);\n\t}\n\n\tvar edges = model.edgeMapper.getValues();\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.setEdgePosition(edges[i]);\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n * \n * Separates the x position of edges as they connect to vertices\n * \n * Parameters:\n *\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.localEdgeProcessing = function(model)\n{\n\t// Iterate through each vertex, look at the edges connected in\n\t// both directions.\n\tfor (var rankIndex = 0; rankIndex < model.ranks.length; rankIndex++)\n\t{\n\t\tvar rank = model.ranks[rankIndex];\n\n\t\tfor (var cellIndex = 0; cellIndex < rank.length; cellIndex++)\n\t\t{\n\t\t\tvar cell = rank[cellIndex];\n\n\t\t\tif (cell.isVertex())\n\t\t\t{\n\t\t\t\tvar currentCells = cell.getPreviousLayerConnectedCells(rankIndex);\n\n\t\t\t\tvar currentRank = rankIndex - 1;\n\n\t\t\t\t// Two loops, last connected cells, and next\n\t\t\t\tfor (var k = 0; k < 2; k++)\n\t\t\t\t{\n\t\t\t\t\tif (currentRank > -1\n\t\t\t\t\t\t\t&& currentRank < model.ranks.length\n\t\t\t\t\t\t\t&& currentCells != null\n\t\t\t\t\t\t\t&& currentCells.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sortedCells = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < currentCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar sorter = new WeightedCellSorter(\n\t\t\t\t\t\t\t\t\tcurrentCells[j], currentCells[j].getX(currentRank));\n\t\t\t\t\t\t\tsortedCells.push(sorter);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\t\t\t\t\t\tvar leftLimit = cell.x[0] - cell.width / 2;\n\t\t\t\t\t\tvar rightLimit = leftLimit + cell.width;\n\n\t\t\t\t\t\t// Connected edge count starts at 1 to allow for buffer\n\t\t\t\t\t\t// with edge of vertex\n\t\t\t\t\t\tvar connectedEdgeCount = 0;\n\t\t\t\t\t\tvar connectedEdgeGroupCount = 0;\n\t\t\t\t\t\tvar connectedEdges = [];\n\t\t\t\t\t\t// Calculate width requirements for all connected edges\n\t\t\t\t\t\tfor (var j = 0; j < sortedCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar innerCell = sortedCells[j].cell;\n\t\t\t\t\t\t\tvar connections;\n\n\t\t\t\t\t\t\tif (innerCell.isVertex())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Get the connecting edge\n\t\t\t\t\t\t\t\tif (k == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsSource;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsTarget;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor (var connIndex = 0; connIndex < connections.length; connIndex++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (connections[connIndex].source == innerCell\n\t\t\t\t\t\t\t\t\t\t\t|| connections[connIndex].target == innerCell)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeCount += connections[connIndex].edges\n\t\t\t\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\n\t\t\t\t\t\t\t\t\t\tconnectedEdges.push(connections[connIndex]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnectedEdgeCount += innerCell.edges.length;\n\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\t\t\t\t\t\t\t\tconnectedEdges.push(innerCell);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar requiredWidth = (connectedEdgeCount + 1)\n\t\t\t\t\t\t\t\t* this.prefHozEdgeSep;\n\n\t\t\t\t\t\t// Add a buffer on the edges of the vertex if the edge count allows\n\t\t\t\t\t\tif (cell.width > requiredWidth\n\t\t\t\t\t\t\t\t+ (2 * this.prefHozEdgeSep))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tleftLimit += this.prefHozEdgeSep;\n\t\t\t\t\t\t\trightLimit -= this.prefHozEdgeSep;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar availableWidth = rightLimit - leftLimit;\n\t\t\t\t\t\tvar edgeSpacing = availableWidth / connectedEdgeCount;\n\n\t\t\t\t\t\tvar currentX = leftLimit + edgeSpacing / 2.0;\n\t\t\t\t\t\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\t\t\t\t\t\tvar maxYOffset = 0;\n\n\t\t\t\t\t\tfor (var j = 0; j < connectedEdges.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar numActualEdges = connectedEdges[j].edges\n\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\tvar pos = this.jettyPositions[connectedEdges[j].ids[0]];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (pos == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos = [];\n\t\t\t\t\t\t\t\tthis.jettyPositions[connectedEdges[j].ids[0]] = pos;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (j < connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (j > connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Ignore the case if equals, this means the second of 2\n\t\t\t\t\t\t\t// jettys with the same y (even number of edges)\n\n\t\t\t\t\t\t\tfor (var m = 0; m < numActualEdges; m++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2] = currentX;\n\t\t\t\t\t\t\t\tcurrentX += edgeSpacing;\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2 + 1] = currentYOffset;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmaxYOffset = Math.max(maxYOffset,\n\t\t\t\t\t\t\t\t\tcurrentYOffset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentCells = cell.getNextLayerConnectedCells(rankIndex);\n\n\t\t\t\t\tcurrentRank = rankIndex + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setEdgePosition\n * \n * Fixes the control points\n */\nmxCoordinateAssignment.prototype.setEdgePosition = function(cell)\n{\n\t// For parallel edges we need to seperate out the points a\n\t// little\n\tvar offsetX = 0;\n\t// Only set the edge control points once\n\n\tif (cell.temp[0] != 101207)\n\t{\n\t\tvar maxRank = cell.maxRank;\n\t\tvar minRank = cell.minRank;\n\t\t\n\t\tif (maxRank == minRank)\n\t\t{\n\t\t\tmaxRank = cell.source.maxRank;\n\t\t\tminRank = cell.target.minRank;\n\t\t}\n\t\t\n\t\tvar parallelEdgeCount = 0;\n\t\tvar jettys = this.jettyPositions[cell.ids[0]];\n\n\t\tvar source = cell.isReversed ? cell.target.cell : cell.source.cell;\n\t\tvar graph = this.layout.graph;\n\t\tvar layoutReversed = this.orientation == mxConstants.DIRECTION_EAST\n\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH;\n\n\t\tfor (var i = 0; i < cell.edges.length; i++)\n\t\t{\n\t\t\tvar realEdge = cell.edges[i];\n\t\t\tvar realSource = this.layout.getVisibleTerminal(realEdge, true);\n\n\t\t\t//List oldPoints = graph.getPoints(realEdge);\n\t\t\tvar newPoints = [];\n\n\t\t\t// Single length reversed edges end up with the jettys in the wrong\n\t\t\t// places. Since single length edges only have jettys, not segment\n\t\t\t// control points, we just say the edge isn't reversed in this section\n\t\t\tvar reversed = cell.isReversed;\n\t\t\t\n\t\t\tif (realSource != source)\n\t\t\t{\n\t\t\t\t// The real edges include all core model edges and these can go\n\t\t\t\t// in both directions. If the source of the hierarchical model edge\n\t\t\t\t// isn't the source of the specific real edge in this iteration\n\t\t\t\t// treat if as reversed\n\t\t\t\treversed = !reversed;\n\t\t\t}\n\n\t\t\t// First jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar y = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 1 + arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ty += jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelSource = graph.model.getTerminal(realEdge, true);\n\n\t\t\t\tif (this.layout.isPort(modelSource) && graph.model.getParent(modelSource) == realSource)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelSource);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realSource.geometry.x + cell.source.width * modelSource.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH\n\t\t\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y + jetty));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y + jetty, x));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Declare variables to define loop through edge points and \n\t\t\t// change direction if edge is reversed\n\n\t\t\tvar loopStart = cell.x.length - 1;\n\t\t\tvar loopLimit = -1;\n\t\t\tvar loopDelta = -1;\n\t\t\tvar currentRank = cell.maxRank - 1;\n\n\t\t\tif (reversed)\n\t\t\t{\n\t\t\t\tloopStart = 0;\n\t\t\t\tloopLimit = cell.x.length;\n\t\t\t\tloopDelta = 1;\n\t\t\t\tcurrentRank = cell.minRank + 1;\n\t\t\t}\n\t\t\t// Reversed edges need the points inserted in\n\t\t\t// reverse order\n\t\t\tfor (var j = loopStart; (cell.maxRank != cell.minRank) && j != loopLimit; j += loopDelta)\n\t\t\t{\n\t\t\t\t// The horizontal position in a vertical layout\n\t\t\t\tvar positionX = cell.x[j] + offsetX;\n\n\t\t\t\t// Work out the vertical positions in a vertical layout\n\t\t\t\t// in the edge buffer channels above and below this rank\n\t\t\t\tvar topChannelY = (this.rankTopY[currentRank] + this.rankBottomY[currentRank + 1]) / 2.0;\n\t\t\t\tvar bottomChannelY = (this.rankTopY[currentRank - 1] + this.rankBottomY[currentRank]) / 2.0;\n\n\t\t\t\tif (reversed)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = topChannelY;\n\t\t\t\t\ttopChannelY = bottomChannelY;\n\t\t\t\t\tbottomChannelY = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, topChannelY));\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, bottomChannelY));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(topChannelY, positionX));\n\t\t\t\t\tnewPoints.push(new mxPoint(bottomChannelY, positionX));\n\t\t\t\t}\n\n\t\t\t\tthis.limitX = Math.max(this.limitX, positionX);\n\t\t\t\tcurrentRank += loopDelta;\n\t\t\t}\n\n\t\t\t// Second jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar rankY = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 3 - arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\tvar y = rankY - jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + 2 - arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelTarget = graph.model.getTerminal(realEdge, false);\n\t\t\t\tvar realTarget = this.layout.getVisibleTerminal(realEdge, false);\n\n\t\t\t\tif (this.layout.isPort(modelTarget) && graph.model.getParent(modelTarget) == realTarget)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelTarget);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realTarget.geometry.x + cell.target.width * modelTarget.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y - jetty));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y - jetty, x));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cell.isReversed)\n\t\t\t{\n\t\t\t\tthis.processReversedEdge(cell, realEdge);\n\t\t\t}\n\n\t\t\tthis.layout.setEdgePoints(realEdge, newPoints);\n\n\t\t\t// Increase offset so next edge is drawn next to\n\t\t\t// this one\n\t\t\tif (offsetX == 0.0)\n\t\t\t{\n\t\t\t\toffsetX = this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\telse if (offsetX > 0)\n\t\t\t{\n\t\t\t\toffsetX = -offsetX;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toffsetX = -offsetX + this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\t\n\t\t\tparallelEdgeCount++;\n\t\t}\n\n\t\tcell.temp[0] = 101207;\n\t}\n};\n\n\n/**\n * Function: setVertexLocation\n * \n * Fixes the position of the specified vertex.\n * \n * Parameters:\n * \n * cell - the vertex to position\n */\nmxCoordinateAssignment.prototype.setVertexLocation = function(cell)\n{\n\tvar realCell = cell.cell;\n\tvar positionX = cell.x[0] - cell.width / 2;\n\tvar positionY = cell.y[0] - cell.height / 2;\n\n\tthis.rankTopY[cell.minRank] = Math.min(this.rankTopY[cell.minRank], positionY);\n\tthis.rankBottomY[cell.minRank] = Math.max(this.rankBottomY[cell.minRank],\n\t\t\tpositionY + cell.height);\n\n\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionX, positionY);\n\t}\n\telse\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionY, positionX);\n\t}\n\n\tthis.limitX = Math.max(this.limitX, positionX + cell.width);\n};\n\n/**\n * Function: processReversedEdge\n * \n * Hook to add additional processing\n * \n * Parameters:\n * \n * edge - the hierarchical model edge\n * realEdge - the real edge in the graph\n */\nmxCoordinateAssignment.prototype.processReversedEdge = function(graph, model)\n{\n\t// hook for subclassers\n};\n\n__mxOutput.mxCoordinateAssignment = typeof mxCoordinateAssignment !== 'undefined' ? mxCoordinateAssignment : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneOrdering\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxSwimlaneOrdering\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxSwimlaneOrdering(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxSwimlaneOrdering.prototype = new mxHierarchicalLayoutStage();\nmxSwimlaneOrdering.prototype.constructor = mxSwimlaneOrdering;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxSwimlaneOrdering.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxSwimlaneOrdering.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodes = mxUtils.clone(model.vertexMapper, null, true);\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\t// Ancestor hashes only line up within a swimlane\n\t\tvar isAncestor = parent != null && parent.swimlaneIndex == node.swimlaneIndex && node.isAncestor(parent);\n\n\t\t// If the source->target swimlane indices go from higher to\n\t\t// lower, the edge is reverse\n\t\tvar reversedOverSwimlane = parent != null && connectingEdge != null &&\n\t\t\t\t\t\tparent.swimlaneIndex < node.swimlaneIndex && connectingEdge.source == node;\n\n\t\tif (isAncestor)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\telse if (reversedOverSwimlane)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsTarget);\n\t\t\tnode.connectsAsTarget.push(connectingEdge);\n\t\t\tparent.connectsAsSource.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsSource);\n\t\t}\n\t\t\n\t\tvar cellId = mxCellPath.create(node.cell);\n\t\tseenNodes[cellId] = node;\n\t\tdelete unseenNodes[cellId];\n\t}, rootsArray, true, null);\n};\n\n__mxOutput.mxSwimlaneOrdering = typeof mxSwimlaneOrdering !== 'undefined' ? mxSwimlaneOrdering : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxHierarchicalLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxHierarchicalLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\nvar mxHierarchicalEdgeStyle =\n{\n\tORTHOGONAL: 1,\n\tPOLYLINE: 2,\n\tSTRAIGHT: 3,\n\tCURVE: 4\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxHierarchicalLayout.prototype = new mxGraphLayout();\nmxHierarchicalLayout.prototype.constructor = mxHierarchicalLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxHierarchicalLayout.prototype.roots = null;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxHierarchicalLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxHierarchicalLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxHierarchicalLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 0.\n */\nmxHierarchicalLayout.prototype.parentBorder = 0;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxHierarchicalLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxHierarchicalLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxHierarchicalLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxHierarchicalLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxHierarchicalLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxHierarchicalLayout.prototype.fineTuning = true;\n\n/**\n * \n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxHierarchicalLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxHierarchicalLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same \n * ancestry chain. Default is true.\n */\nmxHierarchicalLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxGraphHierarchyModel> formed of the layout.\n */\nmxHierarchicalLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxGraphHierarchyModel> for this layout algorithm.\n */\nmxHierarchicalLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * roots - Optional starting roots of the layout.\n */\nmxHierarchicalLayout.prototype.execute = function(parent, roots)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\tif (roots != null && !(roots instanceof Array))\n\t{\n\t\troots = [roots];\n\t}\n\t\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (roots == null && parent == null)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\t\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\t\n\tif (roots != null)\n\t{\n\t\tvar rootsCopy = [];\n\n\t\tfor (var i = 0; i < roots.length; i++)\n\t\t{\n\t\t\tvar ancestor = parent != null ? model.isAncestor(parent, roots[i]) : true;\n\t\t\t\n\t\t\tif (ancestor && model.isVertex(roots[i]))\n\t\t\t{\n\t\t\t\trootsCopy.push(roots[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.roots = rootsCopy;\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxHierarchicalLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (model.isVertex(cell) && this.graph.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxHierarchicalLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) ||\n\t\t\t\t((source != target) &&\n\t\t\t\t\t\t((target == cell && (this.parent == null || this.isAncestor(this.parent, source, this.traverseAncestors))) ||\n\t\t\t\t\t\t \t(source == cell && (this.parent == null || this.isAncestor(this.parent, target, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxHierarchicalLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxHierarchicalLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = [];\n\n\tif (this.roots == null && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\tthis.filterDescendants(parent, filledVertexSet);\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twhile (!filledVertexSetEmpty)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(parent, filledVertexSet);\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\t\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\t// Iterate through the result removing parents who have children in this layout\n\t\n\t// Perform a layout for each seperate hierarchy\n\t// Track initial coordinate x-positioning\n\tvar initialX = 0;\n\n\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t{\n\t\tvar vertexSet = hierarchyVertices[i];\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var key in vertexSet)\n\t\t{\n\t\t\ttmp.push(vertexSet[key]);\n\t\t}\n\t\t\n\t\tthis.model = new mxGraphHierarchyModel(this, tmp, this.roots,\n\t\t\tparent, this.tightenToSource);\n\n\t\tthis.cycleStage(parent);\n\t\tthis.layeringStage();\n\t\t\n\t\tthis.crossingStage(parent);\n\t\tinitialX = this.placementStage(initialX, parent);\n\t}\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxHierarchicalLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxHierarchicalLayout.prototype.isPort = function(cell)\n{\n\tif (cell != null && cell.geometry != null)\n\t{\n\t\treturn cell.geometry.relative;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxHierarchicalLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n */\nmxHierarchicalLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar edgeIsSource = [];\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tedgeIsSource[i] = (this.getVisibleTerminal(edges[i], true) == vertex);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tif (!directed || edgeIsSource[i])\n\t\t\t\t{\n\t\t\t\t\tvar next = this.getVisibleTerminal(edges[i], !edgeIsSource[i]);\n\t\t\t\t\t\n\t\t\t\t\t// Check whether there are more edges incoming from the target vertex than outgoing\n\t\t\t\t\t// The hierarchical model treats bi-directional parallel edges as being sourced\n\t\t\t\t\t// from the more \"sourced\" terminal. If the directions are equal in number, the direction\n\t\t\t\t\t// is that of the natural direction from the roots of the layout.\n\t\t\t\t\t// The checks below are slightly more verbose than need be for performance reasons\n\t\t\t\t\tvar netCount = 1;\n\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (j == i)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar isSource2 = edgeIsSource[j];\n\t\t\t\t\t\t\tvar otherTerm = this.getVisibleTerminal(edges[j], !isSource2);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (otherTerm == next)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (isSource2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (netCount >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentComp = this.traverse(next, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxHierarchicalLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxMinimumCycleRemover(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxHierarchicalLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxHierarchicalLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxHierarchicalLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxHierarchicalLayout = typeof mxHierarchicalLayout !== 'undefined' ? mxHierarchicalLayout : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxSwimlaneLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxSwimlaneLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxSwimlaneLayout.prototype = new mxGraphLayout();\nmxSwimlaneLayout.prototype.constructor = mxSwimlaneLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxSwimlaneLayout.prototype.roots = null;\n\n/**\n * Variable: swimlanes\n * \n * Holds the array of <mxCell> of the ordered swimlanes to lay out\n */\nmxSwimlaneLayout.prototype.swimlanes = null;\n\n/**\n * Variable: dummyVertexWidth\n * \n * The cell width of any dummy vertices inserted\n */\nmxSwimlaneLayout.prototype.dummyVertexWidth = 50;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxSwimlaneLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxSwimlaneLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxSwimlaneLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 30.\n */\nmxSwimlaneLayout.prototype.parentBorder = 30;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxSwimlaneLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxSwimlaneLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxSwimlaneLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxSwimlaneLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxSwimlaneLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxSwimlaneLayout.prototype.fineTuning = true;\n\n/**\n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxSwimlaneLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxSwimlaneLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same\n * ancestry chain. Default is true.\n */\nmxSwimlaneLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxSwimlaneModel> formed of the layout.\n */\nmxSwimlaneLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxSwimlaneLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxSwimlaneModel> for this layout algorithm.\n */\nmxSwimlaneLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * swimlanes - Ordered array of swimlanes to be laid out\n */\nmxSwimlaneLayout.prototype.execute = function(parent, swimlanes)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (swimlanes == null || swimlanes.length < 1)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\n\tif (parent == null)\n\t{\n\t\tparent = model.getParent(swimlanes[0]);\n\t}\n\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\n\tthis.swimlanes = swimlanes;\n\tvar dummyVertices = [];\n\t// Check the swimlanes all have vertices\n\t// in them\n\tfor (var i = 0; i < swimlanes.length; i++)\n\t{\n\t\tvar children = this.graph.getChildCells(swimlanes[i]);\n\t\t\n\t\tif (children == null || children.length == 0)\n\t\t{\n\t\t\tvar vertex = this.graph.insertVertex(swimlanes[i], null, null, 0, 0, this.dummyVertexWidth, 0);\n\t\t\tdummyVertices.push(vertex);\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\n\t\tthis.graph.removeCells(dummyVertices);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given array of groups so that it includes\n * all child vertices.\n * \n */\nmxSwimlaneLayout.prototype.updateGroupBounds = function()\n{\n\t// Get all vertices and edge in the layout\n\tvar cells = [];\n\tvar model = this.model;\n\t\n\tfor (var key in model.edgeMapper)\n\t{\n\t\tvar edge = model.edgeMapper[key];\n\t\t\n\t\tfor (var i = 0; i < edge.edges.length; i++)\n\t\t{\n\t\t\tcells.push(edge.edges[i]);\n\t\t}\n\t}\n\t\n\tvar layoutBounds = this.graph.getBoundingBoxFromGeometry(cells, true);\n\tvar childBounds = [];\n\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar bounds = this.graph.getBoundingBoxFromGeometry(children);\n\t\t\tchildBounds[i] = bounds;\n\t\t\tvar childrenY = bounds.y + geo.y - size.height - this.parentBorder;\n\t\t\tvar maxChildrenY = bounds.y + geo.y + bounds.height;\n\n\t\t\tif (layoutBounds == null)\n\t\t\t{\n\t\t\t\tlayoutBounds = new mxRectangle(0, childrenY, 0, maxChildrenY - childrenY);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlayoutBounds.y = Math.min(layoutBounds.y, childrenY);\n\t\t\t\tvar maxY = Math.max(layoutBounds.y + layoutBounds.height, maxChildrenY);\n\t\t\t\tlayoutBounds.height = maxY - layoutBounds.y;\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar newGeo = geo.clone();\n\t\t\t\n\t\t\tvar leftGroupBorder = (i == 0) ? this.parentBorder : this.interRankCellSpacing/2;\n\t\t\tvar w = size.width + leftGroupBorder;\n\t\t\tvar x = childBounds[i].x - w;\n\t\t\tvar y = layoutBounds.y - this.parentBorder;\n\n\t\t\tnewGeo.x += x;\n\t\t\tnewGeo.y = y;\n\t\t\t\n\t\t\tnewGeo.width = childBounds[i].width + w + this.interRankCellSpacing/2;\n\t\t\tnewGeo.height = layoutBounds.height + size.height + 2 * this.parentBorder;\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(lane, newGeo);\n\t\t\tthis.graph.moveCells(children, -x, geo.y - y);\n\t\t}\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxSwimlaneLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (cell != null && model.isVertex(cell) && this.graph.isCellVisible(cell) && model.isAncestor(parent, cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Only count connection within this swimlane\n\t\t\t\t\t\tvar other = this.getVisibleTerminal(conns[k], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (model.isAncestor(parent, other))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (model.isAncestor(parent, src))\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxSwimlaneLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) || ((source != target) && ((target == cell && (this.parent == null || this.graph.isValidAncestor(source, this.parent, this.traverseAncestors))) ||\n\t\t\t(source == cell && (this.parent == null ||\n\t\t\t\t\tthis.graph.isValidAncestor(target, this.parent, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxSwimlaneLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxSwimlaneLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = Object();\n\n\tif (this.swimlanes != null && this.swimlanes.length > 0 && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\t\n\t\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t\t{\n\t\t\tthis.filterDescendants(this.swimlanes[i], filledVertexSet);\n\t\t}\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Only test for candidates in each swimlane in order\n\t\tvar laneCounter = 0;\n\n\t\twhile (!filledVertexSetEmpty && laneCounter < this.swimlanes.length)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(this.swimlanes[laneCounter], filledVertexSet);\n\t\t\t\n\t\t\tif (candidateRoots.length == 0)\n\t\t\t{\n\t\t\t\tlaneCounter++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet, laneCounter);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\tvar tmp = [];\n\t\n\tfor (var key in allVertexSet)\n\t{\n\t\ttmp.push(allVertexSet[key]);\n\t}\n\t\n\tthis.model = new mxSwimlaneModel(this, tmp, this.roots,\n\t\tparent, this.tightenToSource);\n\n\tthis.cycleStage(parent);\n\tthis.layeringStage();\n\t\n\tthis.crossingStage(parent);\n\tthis.placementStage(0, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxSwimlaneLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && model.getParent(cell) != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxSwimlaneLayout.prototype.isPort = function(cell)\n{\n\tif (cell.geometry.relative)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxSwimlaneLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n * swimlaneIndex - the laid out order index of the swimlane vertex is contained in\n */\nmxSwimlaneLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet, swimlaneIndex)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar model = this.graph.model;\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar otherVertex = this.getVisibleTerminal(edges[i], true);\n\t\t\t\tvar isSource = otherVertex == vertex;\n\t\t\t\t\n\t\t\t\tif (isSource)\n\t\t\t\t{\n\t\t\t\t\totherVertex = this.getVisibleTerminal(edges[i], false);\n\t\t\t\t}\n\n\t\t\t\tvar otherIndex = 0;\n\t\t\t\t// Get the swimlane index of the other terminal\n\t\t\t\tfor (otherIndex = 0; otherIndex < this.swimlanes.length; otherIndex++)\n\t\t\t\t{\n\t\t\t\t\tif (model.isAncestor(this.swimlanes[otherIndex], otherVertex))\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (otherIndex >= this.swimlanes.length)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Traverse if the other vertex is within the same swimlane as\n\t\t\t\t// as the current vertex, or if the swimlane index of the other\n\t\t\t\t// vertex is greater than that of this vertex\n\t\t\t\tif ((otherIndex > swimlaneIndex) ||\n\t\t\t\t\t\t((!directed || isSource) && otherIndex == swimlaneIndex))\n\t\t\t\t{\n\t\t\t\t\tcurrentComp = this.traverse(otherVertex, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet, otherIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxSwimlaneLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxSwimlaneOrdering(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxSwimlaneLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxSwimlaneLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxSwimlaneLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n\n__mxOutput.mxSwimlaneLayout = typeof mxSwimlaneLayout !== 'undefined' ? mxSwimlaneLayout : undefined;\n\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphModel\n * \n * Extends <mxEventSource> to implement a graph model. The graph model acts as\n * a wrapper around the cells which are in charge of storing the actual graph\n * datastructure. The model acts as a transactional wrapper with event\n * notification for all changes, whereas the cells contain the atomic\n * operations for updating the actual datastructure.\n * \n * Layers:\n * \n * The cell hierarchy in the model must have a top-level root cell which\n * contains the layers (typically one default layer), which in turn contain the\n * top-level cells of the layers. This means each cell is contained in a layer.\n * If no layers are required, then all new cells should be added to the default\n * layer.\n * \n * Layers are useful for hiding and showing groups of cells, or for placing\n * groups of cells on top of other cells in the display. To identify a layer,\n * the <isLayer> function is used. It returns true if the parent of the given\n * cell is the root of the model.\n * \n * Events:\n * \n * See events section for more details. There is a new set of events for\n * tracking transactional changes as they happen. The events are called\n * startEdit for the initial beginUpdate, executed for each executed change\n * and endEdit for the terminal endUpdate. The executed event contains a\n * property called change which represents the change after execution.\n * \n * Encoding the model:\n * \n * To encode a graph model, use the following code:\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will create an XML node that contains all the model information.\n * \n * Encoding and decoding changes:\n * \n * For the encoding of changes, a graph model listener is required that encodes\n * each change from the given array of changes.\n * \n * (code)\n * model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n *   var nodes = [];\n *   var codec = new mxCodec();\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     nodes.push(codec.encode(changes[i]));\n *   }\n *   // do something with the nodes\n * });\n * (end)\n * \n * For the decoding and execution of changes, the codec needs a lookup function\n * that allows it to resolve cell IDs as follows:\n * \n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * }\n * (end)\n * \n * For each encoded change (represented by a node), the following code can be\n * used to carry out the decoding and create a change object.\n * \n * (code)\n * var changes = [];\n * var change = codec.decode(node);\n * change.model = model;\n * change.execute();\n * changes.push(change);\n * (end)\n * \n * The changes can then be dispatched using the model as follows.\n * \n * (code)\n * var edit = new mxUndoableEdit(model, false);\n * edit.changes = changes;\n * \n * edit.notify = function()\n * {\n *   edit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n *   \t'edit', edit, 'changes', edit.changes));\n *   edit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n *   \t'edit', edit, 'changes', edit.changes));\n * }\n * \n * model.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n * model.fireEvent(new mxEventObject(mxEvent.CHANGE,\n * \t\t'edit', edit, 'changes', changes));\n * (end)\n *\n * Event: mxEvent.CHANGE\n *\n * Fires when an undoable edit is dispatched. The <code>edit</code> property\n * contains the <mxUndoableEdit>. The <code>changes</code> property contains\n * the array of atomic changes inside the undoable edit. The changes property\n * is <strong>deprecated</strong>, please use edit.changes instead.\n *\n * Example:\n * \n * For finding newly inserted cells, the following code can be used:\n * \n * (code)\n * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     var change = changes[i];\n *     \n *     if (change instanceof mxChildChange &&\n *       change.change.previous == null)\n *     {\n *       graph.startEditingAtCell(change.child);\n *       break;\n *     }\n *   }\n * });\n * (end)\n * \n * \n * Event: mxEvent.NOTIFY\n *\n * Same as <mxEvent.CHANGE>, this event can be used for classes that need to\n * implement a sync mechanism between this model and, say, a remote model. In\n * such a setup, only local changes should trigger a notify event and all\n * changes should trigger a change event.\n * \n * Event: mxEvent.EXECUTE\n * \n * Fires between begin- and endUpdate and after an atomic change was executed\n * in the model. The <code>change</code> property contains the atomic change\n * that was executed.\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n *\n * Event: mxEvent.BEGIN_UPDATE\n *\n * Fires after the <updateLevel> was incremented in <beginUpdate>. This event\n * contains no properties.\n * \n * Event: mxEvent.START_EDIT\n *\n * Fires after the <updateLevel> was changed from 0 to 1. This event\n * contains no properties.\n * \n * Event: mxEvent.END_UPDATE\n * \n * Fires after the <updateLevel> was decreased in <endUpdate> but before any\n * notification or change dispatching. The <code>edit</code> property contains\n * the <currentEdit>.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after the <updateLevel> was changed from 1 to 0. This event\n * contains no properties.\n * \n * Event: mxEvent.BEFORE_UNDO\n * \n * Fires before the change is dispatched after the update level has reached 0\n * in <endUpdate>. The <code>edit</code> property contains the <curreneEdit>.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the change was dispatched in <endUpdate>. The <code>edit</code>\n * property contains the <currentEdit>.\n * \n * Constructor: mxGraphModel\n * \n * Constructs a new graph model. If no root is specified then a new root\n * <mxCell> with a default layer is created.\n * \n * Parameters:\n * \n * root - <mxCell> that represents the root cell.\n */\nfunction mxGraphModel(root)\n{\n\tthis.currentEdit = this.createUndoableEdit();\n\t\n\tif (root != null)\n\t{\n\t\tthis.setRoot(root);\n\t}\n\telse\n\t{\n\t\tthis.clear();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphModel.prototype = new mxEventSource();\nmxGraphModel.prototype.constructor = mxGraphModel;\n\n/**\n * Variable: root\n * \n * Holds the root cell, which in turn contains the cells that represent the\n * layers of the diagram as child cells. That is, the actual elements of the\n * diagram are supposed to live in the third generation of cells and below.\n */\nmxGraphModel.prototype.root = null;\n\n/**\n * Variable: cells\n * \n * Maps from Ids to cells.\n */\nmxGraphModel.prototype.cells = null;\n\n/**\n * Variable: maintainEdgeParent\n * \n * Specifies if edges should automatically be moved into the nearest common\n * ancestor of their terminals. Default is true.\n */\nmxGraphModel.prototype.maintainEdgeParent = true;\n\n/**\n * Variable: ignoreRelativeEdgeParent\n * \n * Specifies if relative edge parents should be ignored for finding the nearest\n * common ancestors of an edge's terminals. Default is true.\n */\nmxGraphModel.prototype.ignoreRelativeEdgeParent = true;\n\n/**\n * Variable: createIds\n * \n * Specifies if the model should automatically create Ids for new cells.\n * Default is true.\n */\nmxGraphModel.prototype.createIds = true;\n\n/**\n * Variable: prefix\n * \n * Defines the prefix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.prefix = '';\n\n/**\n * Variable: postfix\n * \n * Defines the postfix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.postfix = '';\n\n/**\n * Variable: nextId\n * \n * Specifies the next Id to be created. Initial value is 0.\n */\nmxGraphModel.prototype.nextId = 0;\n\n/**\n * Variable: currentEdit\n * \n * Holds the changes for the current transaction. If the transaction is\n * closed then a new object is created for this variable using\n * <createUndoableEdit>.\n */\nmxGraphModel.prototype.currentEdit = null;\n\n/**\n * Variable: updateLevel\n * \n * Counter for the depth of nested transactions. Each call to <beginUpdate>\n * will increment this number and each call to <endUpdate> will decrement\n * it. When the counter reaches 0, the transaction is closed and the\n * respective events are fired. Initial value is 0.\n */\nmxGraphModel.prototype.updateLevel = 0;\n\n/**\n * Variable: endingUpdate\n * \n * True if the program flow is currently inside endUpdate.\n */\nmxGraphModel.prototype.endingUpdate = false;\n\n/**\n * Function: clear\n *\n * Sets a new root using <createRoot>.\n */\nmxGraphModel.prototype.clear = function()\n{\n\tthis.setRoot(this.createRoot());\n};\n\n/**\n * Function: isCreateIds\n *\n * Returns <createIds>.\n */\nmxGraphModel.prototype.isCreateIds = function()\n{\n\treturn this.createIds;\n};\n\n/**\n * Function: setCreateIds\n *\n * Sets <createIds>.\n */\nmxGraphModel.prototype.setCreateIds = function(value)\n{\n\tthis.createIds = value;\n};\n\n/**\n * Function: createRoot\n *\n * Creates a new root cell with a default layer (child 0).\n */\nmxGraphModel.prototype.createRoot = function()\n{\n\tvar cell = new mxCell();\n\tcell.insert(new mxCell());\n\t\n\treturn cell;\n};\n\n/**\n * Function: getCell\n *\n * Returns the <mxCell> for the specified Id or null if no cell can be\n * found for the given Id.\n *\n * Parameters:\n * \n * id - A string representing the Id of the cell.\n */\nmxGraphModel.prototype.getCell = function(id)\n{\n\treturn (this.cells != null) ? this.cells[id] : null;\n};\n\n/**\n * Function: filterCells\n * \n * Returns the cells from the given array where the given filter function\n * returns true.\n */\nmxGraphModel.prototype.filterCells = function(cells, filter)\n{\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (filter(cells[i]))\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getDescendants\n * \n * Returns all descendants of the given cell and the cell itself in an array.\n * \n * Parameters:\n * \n * parent - <mxCell> whose descendants should be returned.\n */\nmxGraphModel.prototype.getDescendants = function(parent)\n{\n\treturn this.filterDescendants(null, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Visits all cells recursively and applies the specified filter function\n * to each cell. If the function returns true then the cell is added\n * to the resulting array. The parent and result paramters are optional.\n * If parent is not specified then the recursion starts at <root>.\n * \n * Example:\n * The following example extracts all vertices from a given model:\n * (code)\n * var filter = function(cell)\n * {\n * \treturn model.isVertex(cell);\n * }\n * var vertices = model.filterDescendants(filter);\n * (end)\n * \n * Parameters:\n * \n * filter - JavaScript function that takes an <mxCell> as an argument\n * and returns a boolean.\n * parent - Optional <mxCell> that is used as the root of the recursion.\n */\nmxGraphModel.prototype.filterDescendants = function(filter, parent)\n{\n\t// Creates a new array for storing the result\n\tvar result = [];\n\n\t// Recursion starts at the root of the model\n\tparent = parent || this.getRoot();\n\t\n\t// Checks if the filter returns true for the cell\n\t// and adds it to the result array\n\tif (filter == null || filter(parent))\n\t{\n\t\tresult.push(parent);\n\t}\n\t\n\t// Visits the children of the cell\n\tvar childCount = this.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\t\tresult = result.concat(this.filterDescendants(filter, child));\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root of the model or the topmost parent of the given cell.\n *\n * Parameters:\n * \n * cell - Optional <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.getRoot = function(cell)\n{\n\tvar root = cell || this.root;\n\t\n\tif (cell != null)\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\troot = cell;\n\t\t\tcell = this.getParent(cell);\n\t\t}\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: setRoot\n * \n * Sets the <root> of the model using <mxRootChange> and adds the change to\n * the current transaction. This resets all datastructures in the model and\n * is the preferred way of clearing an existing model. Returns the new\n * root.\n * \n * Example:\n * \n * (code)\n * var root = new mxCell();\n * root.insert(new mxCell());\n * model.setRoot(root);\n * (end)\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.setRoot = function(root)\n{\n\tthis.execute(new mxRootChange(this, root));\n\t\n\treturn root;\n};\n\n/**\n * Function: rootChanged\n * \n * Inner callback to change the root of the model and update the internal\n * datastructures, such as <cells> and <nextId>. Returns the previous root.\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.rootChanged = function(root)\n{\n\tvar oldRoot = this.root;\n\tthis.root = root;\n\t\n\t// Resets counters and datastructures\n\tthis.nextId = 0;\n\tthis.cells = null;\n\tthis.cellAdded(root);\n\t\n\treturn oldRoot;\n};\n\n/**\n * Function: isRoot\n * \n * Returns true if the given cell is the root of the model and a non-null\n * value.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible root.\n */\nmxGraphModel.prototype.isRoot = function(cell)\n{\n\treturn cell != null && this.root == cell;\n};\n\n/**\n * Function: isLayer\n * \n * Returns true if <isRoot> returns true for the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible layer.\n */\nmxGraphModel.prototype.isLayer = function(cell)\n{\n\treturn this.isRoot(this.getParent(cell));\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child. Note \n * returns true if child == parent.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.isAncestor = function(parent, child)\n{\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: contains\n * \n * Returns true if the model contains the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n */\nmxGraphModel.prototype.contains = function(cell)\n{\n\treturn this.isAncestor(this.root, cell);\n};\n\n/**\n * Function: getParent\n * \n * Returns the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose parent should be returned.\n */\nmxGraphModel.prototype.getParent = function(cell)\n{\n\treturn (cell != null) ? cell.getParent() : null;\n};\n\n/**\n * Function: add\n * \n * Adds the specified child to the parent at the given index using\n * <mxChildChange> and adds the change to the current transaction. If no\n * index is specified then the child is appended to the parent's array of\n * children. Returns the inserted child.\n * \n * Parameters:\n * \n * parent - <mxCell> that specifies the parent to contain the child.\n * child - <mxCell> that specifies the child to be inserted.\n * index - Optional integer that specifies the index of the child.\n */\nmxGraphModel.prototype.add = function(parent, child, index)\n{\n\tif (child != parent && parent != null && child != null)\n\t{\t\n\t\t// Appends the child if no index was specified\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount(parent);\n\t\t}\n\t\t\n\t\tvar parentChanged = parent != this.getParent(child);\n\t\tthis.execute(new mxChildChange(this, parent, child, index));\n\n\t\t// Maintains the edges parents by moving the edges\n\t\t// into the nearest common ancestor of its terminals\n\t\tif (this.maintainEdgeParent && parentChanged)\n\t\t{\n\t\t\tthis.updateEdgeParents(child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: cellAdded\n * \n * Inner callback to update <cells> when a cell has been added. This\n * implementation resolves collisions by creating new Ids. To change the\n * ID of a cell after it was inserted into the model, use the following\n * code:\n * \n * (code\n * delete model.cells[cell.getId()];\n * cell.setId(newId);\n * model.cells[cell.getId()] = cell;\n * (end)\n *\n * If the change of the ID should be part of the command history, then the\n * cell should be removed from the model and a clone with the new ID should\n * be reinserted into the model instead.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been added.\n */\nmxGraphModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\t// Creates an Id for the cell if not Id exists\n\t\tif (cell.getId() == null && this.createIds)\n\t\t{\n\t\t\tcell.setId(this.createId(cell));\n\t\t}\n\t\t\n\t\tif (cell.getId() != null)\n\t\t{\n\t\t\tvar collision = this.getCell(cell.getId());\n\t\t\t\n\t\t\tif (collision != cell)\n\t\t\t{\t\n\t\t\t\t// Creates new Id for the cell\n\t\t\t\t// as long as there is a collision\n\t\t\t\twhile (collision != null)\n\t\t\t\t{\n\t\t\t\t\tcell.setId(this.createId(cell));\n\t\t\t\t\tcollision = this.getCell(cell.getId());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Lazily creates the cells dictionary\n\t\t\t\tif (this.cells == null)\n\t\t\t\t{\n\t\t\t\t\tthis.cells = new Object();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.cells[cell.getId()] = cell;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Makes sure IDs of deleted cells are not reused\n\t\tif (mxUtils.isNumeric(cell.getId()))\n\t\t{\n\t\t\tthis.nextId = Math.max(this.nextId, cell.getId());\n\t\t}\n\t\t\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tthis.cellAdded(this.getChildAt(cell, i));\n\t\t}\n\t}\n};\n\n/**\n * Function: createId\n * \n * Hook method to create an Id for the specified cell. This implementation\n * concatenates <prefix>, id and <postfix> to create the Id and increments\n * <nextId>. The cell is ignored by this implementation, but can be used in\n * overridden methods to prefix the Ids with eg. the cell type.\n *\n * Parameters:\n *\n * cell - <mxCell> to create the Id for.\n */\nmxGraphModel.prototype.createId = function(cell)\n{\n\tvar id = this.nextId;\n\tthis.nextId++;\n\t\n\treturn this.prefix + id + this.postfix;\n};\n\n/**\n * Function: updateEdgeParents\n * \n * Updates the parent for all edges that are connected to cell or one of\n * its descendants using <updateEdgeParent>.\n */\nmxGraphModel.prototype.updateEdgeParents = function(cell, root)\n{\n\t// Gets the topmost node of the hierarchy\n\troot = root || this.getRoot(cell);\n\t\n\t// Updates edges on children first\n\tvar childCount = this.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(cell, i);\n\t\tthis.updateEdgeParents(child, root);\n\t}\n\t\n\t// Updates the parents of all connected edges\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar edges = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tedges.push(this.getEdgeAt(cell, i));\n\t}\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar edge = edges[i];\n\t\t\n\t\t// Updates edge parent if edge and child have\n\t\t// a common root node (does not need to be the\n\t\t// model root node)\n\t\tif (this.isAncestor(root, edge))\n\t\t{\n\t\t\tthis.updateEdgeParent(edge, root);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateEdgeParent\n *\n * Inner callback to update the parent of the specified <mxCell> to the\n * nearest-common-ancestor of its two terminals.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * root - <mxCell> that represents the current root of the model.\n */\nmxGraphModel.prototype.updateEdgeParent = function(edge, root)\n{\n\tvar source = this.getTerminal(edge, true);\n\tvar target = this.getTerminal(edge, false);\n\tvar cell = null;\n\t\n\t// Uses the first non-relative descendants of the source terminal\n\twhile (source != null && !this.isEdge(source) &&\n\t\tsource.geometry != null && source.geometry.relative)\n\t{\n\t\tsource = this.getParent(source);\n\t}\n\t\n\t// Uses the first non-relative descendants of the target terminal\n\twhile (target != null && this.ignoreRelativeEdgeParent &&\n\t\t!this.isEdge(target) && target.geometry != null && \n\t\ttarget.geometry.relative)\n\t{\n\t\ttarget = this.getParent(target);\n\t}\n\t\n\tif (this.isAncestor(root, source) && this.isAncestor(root, target))\n\t{\n\t\tif (source == target)\n\t\t{\n\t\t\tcell = this.getParent(source);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcell = this.getNearestCommonAncestor(source, target);\n\t\t}\n\n\t\tif (cell != null && (this.getParent(cell) != this.root ||\n\t\t\tthis.isAncestor(cell, edge)) && this.getParent(edge) != cell)\n\t\t{\n\t\t\tvar geo = this.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar origin1 = this.getOrigin(this.getParent(edge));\n\t\t\t\tvar origin2 = this.getOrigin(cell);\n\t\t\t\t\n\t\t\t\tvar dx = origin2.x - origin1.x;\n\t\t\t\tvar dy = origin2.y - origin1.y;\n\t\t\t\t\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.translate(-dx, -dy);\n\t\t\t\tthis.setGeometry(edge, geo);\n\t\t\t}\n\n\t\t\tthis.add(cell, edge, this.getChildCount(cell));\n\t\t}\n\t}\n};\n\n/**\n * Function: getOrigin\n * \n * Returns the absolute, accumulated origin for the children inside the\n * given parent as an <mxPoint>.\n */\nmxGraphModel.prototype.getOrigin = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tresult = this.getOrigin(this.getParent(cell));\n\t\t\n\t\tif (!this.isEdge(cell))\n\t\t{\n\t\t\tvar geo = this.getGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint();\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getNearestCommonAncestor\n * \n * Returns the nearest common ancestor for the specified cells.\n *\n * Parameters:\n * \n * cell1 - <mxCell> that specifies the first cell in the tree.\n * cell2 - <mxCell> that specifies the second cell in the tree.\n */\nmxGraphModel.prototype.getNearestCommonAncestor = function(cell1, cell2)\n{\n\tif (cell1 != null && cell2 != null)\n\t{\t\t\n\t\t// Creates the cell path for the second cell\n\t\tvar path = mxCellPath.create(cell2);\n\n\t\tif (path != null && path.length > 0)\n\t\t{\n\t\t\t// Bubbles through the ancestors of the first\n\t\t\t// cell to find the nearest common ancestor.\n\t\t\tvar cell = cell1;\n\t\t\tvar current = mxCellPath.create(cell);\n\t\t\t\n\t\t\t// Inverts arguments\n\t\t\tif (path.length < current.length)\n\t\t\t{\n\t\t\t\tcell = cell2;\n\t\t\t\tvar tmp = current;\n\t\t\t\tcurrent = path;\n\t\t\t\tpath = tmp;\n\t\t\t}\n\t\t\t\n\t\t\twhile (cell != null)\n\t\t\t{\n\t\t\t\tvar parent = this.getParent(cell);\n\t\t\t\t\n\t\t\t\t// Checks if the cell path is equal to the beginning of the given cell path\n\t\t\t\tif (path.indexOf(current + mxCellPath.PATH_SEPARATOR) == 0 && parent != null)\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrent = mxCellPath.getParentPath(current);\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: remove\n * \n * Removes the specified cell from the model using <mxChildChange> and adds\n * the change to the current transaction. This operation will remove the\n * cell and all of its children from the model. Returns the removed cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be removed.\n */\nmxGraphModel.prototype.remove = function(cell)\n{\n\tif (cell == this.root)\n\t{\n\t\tthis.setRoot(null);\n\t}\n\telse if (this.getParent(cell) != null)\n\t{\n\t\tthis.execute(new mxChildChange(this, null, cell));\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellRemoved\n * \n * Inner callback to update <cells> when a cell has been removed.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been removed.\n */\nmxGraphModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null && this.cells != null)\n\t{\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tthis.cellRemoved(this.getChildAt(cell, i));\n\t\t}\n\t\t\n\t\t// Removes the dictionary entry for the cell\n\t\tif (this.cells != null && cell.getId() != null)\n\t\t{\n\t\t\tdelete this.cells[cell.getId()];\n\t\t}\n\t}\n};\n\n/**\n * Function: parentForCellChanged\n * \n * Inner callback to update the parent of a cell using <mxCell.insert>\n * on the parent and return the previous parent.\n *\n * Parameters:\n * \n * cell - <mxCell> to update the parent for.\n * parent - <mxCell> that specifies the new parent of the cell.\n * index - Optional integer that defines the index of the child\n * in the parent's child array.\n */\nmxGraphModel.prototype.parentForCellChanged = function(cell, parent, index)\n{\n\tvar previous = this.getParent(cell);\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent != previous || previous.getIndex(cell) != index)\n\t\t{\n\t\t\tparent.insert(cell, index);\n\t\t}\n\t}\n\telse if (previous != null)\n\t{\n\t\tvar oldIndex = previous.getIndex(cell);\n\t\tprevious.remove(oldIndex);\n\t}\n\t\n\t// Adds or removes the cell from the model\n\tvar par = this.contains(parent);\n\tvar pre = this.contains(previous);\n\t\n\tif (par && !pre)\n\t{\n\t\tthis.cellAdded(cell);\n\t}\n\telse if (pre && !par)\n\t{\n\t\tthis.cellRemoved(cell);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of children in the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose number of children should be returned.\n */\nmxGraphModel.prototype.getChildCount = function(cell)\n{\n\treturn (cell != null) ? cell.getChildCount() : 0;\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child of the given <mxCell> at the given index.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the parent.\n * index - Integer that specifies the index of the child to be returned.\n */\nmxGraphModel.prototype.getChildAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getChildAt(index) : null;\n};\n\n/**\n * Function: getChildren\n * \n * Returns all children of the given <mxCell> as an array of <mxCells>. The\n * return value should be only be read.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n */\nmxGraphModel.prototype.getChildren = function(cell)\n{\n\treturn (cell != null) ? cell.children : null;\n};\n\t\n/**\n * Function: getChildVertices\n * \n * Returns the child vertices of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child vertices should be returned.\n */\nmxGraphModel.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\t\n/**\n * Function: getChildEdges\n * \n * Returns the child edges of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child edges should be returned.\n */\nmxGraphModel.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the children of the given cell that are vertices and/or edges\n * depending on the arguments.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n * vertices - Boolean indicating if child vertices should be returned.\n * Default is false.\n * edges - Boolean indicating if child edges should be returned.\n * Default is false.\n */\nmxGraphModel.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\t\n\tvar childCount = this.getChildCount(parent);\n\tvar result = [];\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\n\t\tif ((!edges && !vertices) || (edges && this.isEdge(child)) ||\n\t\t\t(vertices && this.isVertex(child)))\n\t\t{\n\t\t\tresult.push(child);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\t\n/**\n * Function: getTerminal\n * \n * Returns the source or target <mxCell> of the given edge depending on the\n * value of the boolean parameter.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * isSource - Boolean indicating which end of the edge should be returned.\n */\nmxGraphModel.prototype.getTerminal = function(edge, isSource)\n{\n\treturn (edge != null) ? edge.getTerminal(isSource) : null;\n};\n\n/**\n * Function: setTerminal\n * \n * Sets the source or target terminal of the given <mxCell> using\n * <mxTerminalChange> and adds the change to the current transaction.\n * This implementation updates the parent of the edge using <updateEdgeParent>\n * if required.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.setTerminal = function(edge, terminal, isSource)\n{\n\tvar terminalChanged = terminal != this.getTerminal(edge, isSource);\n\tthis.execute(new mxTerminalChange(this, edge, terminal, isSource));\n\t\n\tif (this.maintainEdgeParent && terminalChanged)\n\t{\n\t\tthis.updateEdgeParent(edge, this.getRoot());\n\t}\n\t\n\treturn terminal;\n};\n\t\n/**\n * Function: setTerminals\n * \n * Sets the source and target <mxCell> of the given <mxCell> in a single\n * transaction using <setTerminal> for each end of the edge.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * source - <mxCell> that specifies the new source terminal.\n * target - <mxCell> that specifies the new target terminal.\n */\nmxGraphModel.prototype.setTerminals = function(edge, source, target)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tthis.setTerminal(edge, source, true);\n\t\tthis.setTerminal(edge, target, false);\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: terminalForCellChanged\n * \n * Inner helper function to update the terminal of the edge using\n * <mxCell.insertEdge> and return the previous terminal.\n * \n * Parameters:\n * \n * edge - <mxCell> that specifies the edge to be updated.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.terminalForCellChanged = function(edge, terminal, isSource)\n{\n\tvar previous = this.getTerminal(edge, isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.insertEdge(edge, isSource);\n\t}\n\telse if (previous != null)\n\t{\n\t\tprevious.removeEdge(edge, isSource);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getEdgeCount\n * \n * Returns the number of distinct edges connected to the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the vertex.\n */\nmxGraphModel.prototype.getEdgeCount = function(cell)\n{\n\treturn (cell != null) ? cell.getEdgeCount() : 0;\n};\n\n/**\n * Function: getEdgeAt\n * \n * Returns the edge of cell at the given index.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the vertex.\n * index - Integer that specifies the index of the edge\n * to return.\n */\nmxGraphModel.prototype.getEdgeAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getEdgeAt(index) : null;\n};\n\t\n/**\n * Function: getDirectedEdgeCount\n * \n * Returns the number of incoming or outgoing edges, ignoring the given\n * edge.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edge count should be returned.\n * outgoing - Boolean that specifies if the number of outgoing or\n * incoming edges should be returned.\n * ignoredEdge - <mxCell> that represents an edge to be ignored.\n */\nmxGraphModel.prototype.getDirectedEdgeCount = function(cell, outgoing, ignoredEdge)\n{\n\tvar count = 0;\n\tvar edgeCount = this.getEdgeCount(cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\n\t\tif (edge != ignoredEdge && this.getTerminal(edge, outgoing) == cell)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n};\n\n/**\n * Function: getConnections\n * \n * Returns all edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * \n */\nmxGraphModel.prototype.getConnections = function(cell)\n{\n\treturn this.getEdges(cell, true, true, false);\n};\n\n/**\n * Function: getIncomingEdges\n * \n * Returns the incoming edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * \n */\nmxGraphModel.prototype.getIncomingEdges = function(cell)\n{\n\treturn this.getEdges(cell, true, false, false);\n};\n\n/**\n * Function: getOutgoingEdges\n * \n * Returns the outgoing edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * \n */\nmxGraphModel.prototype.getOutgoingEdges = function(cell)\n{\n\treturn this.getEdges(cell, false, true, false);\n};\n\n/**\n * Function: getEdges\n * \n * Returns all distinct edges connected to this cell as a new array of\n * <mxCells>. If at least one of incoming or outgoing is true, then loops\n * are ignored, otherwise if both are false, then all edges connected to\n * the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n * incoming - Optional boolean that specifies if incoming edges should be\n * returned. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should be\n * returned. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be returned.\n * Default is true. \n */\nmxGraphModel.prototype.getEdges = function(cell, incoming, outgoing, includeLoops)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\t\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar result = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\t\tvar source = this.getTerminal(edge, true);\n\t\tvar target = this.getTerminal(edge, false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming && target == cell) ||\n\t\t\t(outgoing && source == cell))))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns all edges between the given source and target pair. If directed\n * is true, then only edges from the source to the target are returned,\n * otherwise, all edges between the two cells are returned.\n * \n * Parameters:\n * \n * source - <mxCell> that defines the source terminal of the edge to be\n * returned.\n * target - <mxCell> that defines the target terminal of the edge to be\n * returned.\n * directed - Optional boolean that specifies if the direction of the\n * edge should be taken into account. Default is false.\n */\nmxGraphModel.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\t\n\tvar tmp1 = this.getEdgeCount(source);\n\tvar tmp2 = this.getEdgeCount(target);\n\t\n\t// Assumes the source has less connected edges\n\tvar terminal = source;\n\tvar edgeCount = tmp1;\n\t\n\t// Uses the smaller array of connected edges\n\t// for searching the edge\n\tif (tmp2 < tmp1)\n\t{\n\t\tedgeCount = tmp2;\n\t\tterminal = target;\n\t}\n\t\n\tvar result = [];\n\t\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(terminal, i);\n\t\tvar src = this.getTerminal(edge, true);\n\t\tvar trg = this.getTerminal(edge, false);\n\t\tvar directedMatch = (src == source) && (trg == target);\n\t\tvar oppositeMatch = (trg == source) && (src == target);\n\n\t\tif (directedMatch || (!directed && oppositeMatch))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all opposite vertices wrt terminal for the given edges, only\n * returning sources and/or targets as specified. The result is returned\n * as an array of <mxCells>.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contain the edges to be examined.\n * terminal - <mxCell> that specifies the known end of the edges.\n * sources - Boolean that specifies if source terminals should be contained\n * in the result. Default is true.\n * targets - Boolean that specifies if target terminals should be contained\n * in the result. Default is true.\n */\nmxGraphModel.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar source = this.getTerminal(edges[i], true);\n\t\t\tvar target = this.getTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of\n\t\t\t// the edge and if the target should be\n\t\t\t// stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tterminals.push(target);\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of\n\t\t\t// the edge and if the source should be\n\t\t\t// stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tterminals.push(source);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getTopmostCells\n * \n * Returns the topmost cells of the hierarchy in an array that contains no\n * descendants for each <mxCell> that it contains. Duplicates should be\n * removed in the cells array to improve performance.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose topmost ancestors should be returned.\n */\nmxGraphModel.prototype.getTopmostCells = function(cells)\n{\n\tvar dict = new mxDictionary();\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tdict.put(cells[i], true);\n\t}\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tvar cell = cells[i];\n\t\tvar topmost = true;\n\t\tvar parent = this.getParent(cell);\n\t\t\n\t\twhile (parent != null)\n\t\t{\n\t\t\tif (dict.get(parent))\n\t\t\t{\n\t\t\t\ttopmost = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tparent = this.getParent(parent);\n\t\t}\n\t\t\n\t\tif (topmost)\n\t\t{\n\t\t\ttmp.push(cell);\n\t\t}\n\t}\n\t\n\treturn tmp;\n};\n\n/**\n * Function: isVertex\n * \n * Returns true if the given cell is a vertex.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible vertex.\n */\nmxGraphModel.prototype.isVertex = function(cell)\n{\n\treturn (cell != null) ? cell.isVertex() : false;\n};\n\n/**\n * Function: isEdge\n * \n * Returns true if the given cell is an edge.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible edge.\n */\nmxGraphModel.prototype.isEdge = function(cell)\n{\n\treturn (cell != null) ? cell.isEdge() : false;\n};\n\n/**\n * Function: isConnectable\n * \n * Returns true if the given <mxCell> is connectable. If <edgesConnectable>\n * is false, then this function returns false for all edges else it returns\n * the return value of <mxCell.isConnectable>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraphModel.prototype.isConnectable = function(cell)\n{\n\treturn (cell != null) ? cell.isConnectable() : false;\n};\n\n/**\n * Function: getValue\n * \n * Returns the user object of the given <mxCell> using <mxCell.getValue>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be returned.\n */\nmxGraphModel.prototype.getValue = function(cell)\n{\n\treturn (cell != null) ? cell.getValue() : null;\n};\n\n/**\n * Function: setValue\n * \n * Sets the user object of then given <mxCell> using <mxValueChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be changed.\n * value - Object that defines the new user object.\n */\nmxGraphModel.prototype.setValue = function(cell, value)\n{\n\tthis.execute(new mxValueChange(this, cell, value));\n\t\n\treturn value;\n};\n\n/**\n * Function: valueForCellChanged\n * \n * Inner callback to update the user object of the given <mxCell>\n * using <mxCell.valueChanged> and return the previous value,\n * that is, the return value of <mxCell.valueChanged>.\n * \n * To change a specific attribute in an XML node, the following code can be\n * used.\n * \n * (code)\n * graph.getModel().valueForCellChanged = function(cell, value)\n * {\n *   var previous = cell.value.getAttribute('label');\n *   cell.value.setAttribute('label', value);\n *   \n *   return previous;\n * };\n * (end) \n */\nmxGraphModel.prototype.valueForCellChanged = function(cell, value)\n{\n\treturn cell.valueChanged(value);\n};\n\n/**\n * Function: getGeometry\n * \n * Returns the <mxGeometry> of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraphModel.prototype.getGeometry = function(cell)\n{\n\treturn (cell != null) ? cell.getGeometry() : null;\n};\n\n/**\n * Function: setGeometry\n * \n * Sets the <mxGeometry> of the given <mxCell>. The actual update\n * of the cell is carried out in <geometryForCellChanged>. The\n * <mxGeometryChange> action is used to encapsulate the change.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be changed.\n * geometry - <mxGeometry> that defines the new geometry.\n */\nmxGraphModel.prototype.setGeometry = function(cell, geometry)\n{\n\tif (geometry != this.getGeometry(cell))\n\t{\n\t\tthis.execute(new mxGeometryChange(this, cell, geometry));\n\t}\n\t\n\treturn geometry;\n};\n\n/**\n * Function: geometryForCellChanged\n * \n * Inner callback to update the <mxGeometry> of the given <mxCell> using\n * <mxCell.setGeometry> and return the previous <mxGeometry>.\n */\nmxGraphModel.prototype.geometryForCellChanged = function(cell, geometry)\n{\n\tvar previous = this.getGeometry(cell);\n\tcell.setGeometry(geometry);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getStyle\n * \n * Returns the style of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be returned.\n */\nmxGraphModel.prototype.getStyle = function(cell)\n{\n\treturn (cell != null) ? cell.getStyle() : null;\n};\n\n/**\n * Function: setStyle\n * \n * Sets the style of the given <mxCell> using <mxStyleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be changed.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.setStyle = function(cell, style)\n{\n\tif (style != this.getStyle(cell))\n\t{\n\t\tthis.execute(new mxStyleChange(this, cell, style));\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: styleForCellChanged\n * \n * Inner callback to update the style of the given <mxCell>\n * using <mxCell.setStyle> and return the previous style.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.styleForCellChanged = function(cell, style)\n{\n\tvar previous = this.getStyle(cell);\n\tcell.setStyle(style);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isCollapsed\n * \n * Returns true if the given <mxCell> is collapsed.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraphModel.prototype.isCollapsed = function(cell)\n{\n\treturn (cell != null) ? cell.isCollapsed() : false;\n};\n\n/**\n * Function: setCollapsed\n * \n * Sets the collapsed state of the given <mxCell> using <mxCollapseChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be changed.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.setCollapsed = function(cell, collapsed)\n{\n\tif (collapsed != this.isCollapsed(cell))\n\t{\n\t\tthis.execute(new mxCollapseChange(this, cell, collapsed));\n\t}\n\t\n\treturn collapsed;\n};\n\t\n/**\n * Function: collapsedStateForCellChanged\n *\n * Inner callback to update the collapsed state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous collapsed state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.collapsedStateForCellChanged = function(cell, collapsed)\n{\n\tvar previous = this.isCollapsed(cell);\n\tcell.setCollapsed(collapsed);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the given <mxCell> is visible.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraphModel.prototype.isVisible = function(cell)\n{\n\treturn (cell != null) ? cell.isVisible() : false;\n};\n\n/**\n * Function: setVisible\n * \n * Sets the visible state of the given <mxCell> using <mxVisibleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose visible state should be changed.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.setVisible = function(cell, visible)\n{\n\tif (visible != this.isVisible(cell))\n\t{\n\t\tthis.execute(new mxVisibleChange(this, cell, visible));\n\t}\n\t\n\treturn visible;\n};\n\t\n/**\n * Function: visibleStateForCellChanged\n *\n * Inner callback to update the visible state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous visible state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.visibleStateForCellChanged = function(cell, visible)\n{\n\tvar previous = this.isVisible(cell);\n\tcell.setVisible(visible);\n\t\n\treturn previous;\n};\n\n/**\n * Function: execute\n * \n * Executes the given edit and fires events if required. The edit object\n * requires an execute function which is invoked. The edit is added to the\n * <currentEdit> between <beginUpdate> and <endUpdate> calls, so that\n * events will be fired if this execute is an individual transaction, that\n * is, if no previous <beginUpdate> calls have been made without calling\n * <endUpdate>. This implementation fires an <execute> event before\n * executing the given change.\n * \n * Parameters:\n * \n * change - Object that described the change.\n */\nmxGraphModel.prototype.execute = function(change)\n{\n\tchange.execute();\n\tthis.beginUpdate();\n\tthis.currentEdit.add(change);\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE, 'change', change));\n\t// New global executed event\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\tthis.endUpdate();\n};\n\n/**\n * Function: beginUpdate\n * \n * Increments the <updateLevel> by one. The event notification\n * is queued until <updateLevel> reaches 0 by use of\n * <endUpdate>.\n *\n * All changes on <mxGraphModel> are transactional,\n * that is, they are executed in a single undoable change\n * on the model (without transaction isolation).\n * Therefore, if you want to combine any\n * number of changes into a single undoable change,\n * you should group any two or more API calls that\n * modify the graph model between <beginUpdate>\n * and <endUpdate> calls as shown here:\n * \n * (code)\n * var model = graph.getModel();\n * var parent = graph.getDefaultParent();\n * var index = model.getChildCount(parent);\n * model.beginUpdate();\n * try\n * {\n *   model.add(parent, v1, index);\n *   model.add(parent, v2, index+1);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n * \n * Of course there is a shortcut for appending a\n * sequence of cells into the default parent:\n * \n * (code)\n * graph.addCells([v1, v2]).\n * (end)\n */\nmxGraphModel.prototype.beginUpdate = function()\n{\n\tthis.updateLevel++;\n\tthis.fireEvent(new mxEventObject(mxEvent.BEGIN_UPDATE));\n\t\n\tif (this.updateLevel == 1)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t}\n};\n\n/**\n * Function: endUpdate\n * \n * Decrements the <updateLevel> by one and fires an <undo>\n * event if the <updateLevel> reaches 0. This function\n * indirectly fires a <change> event by invoking the notify\n * function on the <currentEdit> und then creates a new\n * <currentEdit> using <createUndoableEdit>.\n *\n * The <undo> event is fired only once per edit, whereas\n * the <change> event is fired whenever the notify\n * function is invoked, that is, on undo and redo of\n * the edit.\n */\nmxGraphModel.prototype.endUpdate = function()\n{\n\tthis.updateLevel--;\n\t\n\tif (this.updateLevel == 0)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tif (!this.endingUpdate)\n\t{\n\t\tthis.endingUpdate = this.updateLevel == 0;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_UPDATE, 'edit', this.currentEdit));\n\n\t\ttry\n\t\t{\t\t\n\t\t\tif (this.endingUpdate && !this.currentEdit.isEmpty())\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_UNDO, 'edit', this.currentEdit));\n\t\t\t\tvar tmp = this.currentEdit;\n\t\t\t\tthis.currentEdit = this.createUndoableEdit();\n\t\t\t\ttmp.notify();\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', tmp));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.endingUpdate = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: createUndoableEdit\n * \n * Creates a new <mxUndoableEdit> that implements the\n * notify function to fire a <change> and <notify> event\n * through the <mxUndoableEdit>'s source.\n * \n * Parameters:\n * \n * significant - Optional boolean that specifies if the edit to be created is\n * significant. Default is true.\n */\nmxGraphModel.prototype.createUndoableEdit = function(significant)\n{\n\tvar edit = new mxUndoableEdit(this, (significant != null) ? significant : true);\n\t\n\tedit.notify = function()\n\t{\n\t\t// LATER: Remove changes property (deprecated)\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t};\n\t\n\treturn edit;\n};\n\n/**\n * Function: mergeChildren\n * \n * Merges the children of the given cell into the given target cell inside\n * this model. All cells are cloned unless there is a corresponding cell in\n * the model with the same id, in which case the source cell is ignored and\n * all edges are connected to the corresponding cell in this model. Edges\n * are considered to have no identity and are always cloned unless the\n * cloneAllEdges flag is set to false, in which case edges with the same\n * id in the target model are reconnected to reflect the terminals of the\n * source edges.\n */\nmxGraphModel.prototype.mergeChildren = function(from, to, cloneAllEdges)\n{\n\tcloneAllEdges = (cloneAllEdges != null) ? cloneAllEdges : true;\n\t\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar mapping = new Object();\n\t\tthis.mergeChildrenImpl(from, to, cloneAllEdges, mapping);\n\t\t\n\t\t// Post-processes all edges in the mapping and\n\t\t// reconnects the terminals to the corresponding\n\t\t// cells in the target model\n\t\tfor (var key in mapping)\n\t\t{\n\t\t\tvar cell = mapping[key];\n\t\t\tvar terminal = this.getTerminal(cell, true);\n\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, true);\n\t\t\t}\n\t\t\t\n\t\t\tterminal = this.getTerminal(cell, false);\n\t\t\t\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, false);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: mergeChildren\n * \n * Clones the children of the source cell into the given target cell in\n * this model and adds an entry to the mapping that maps from the source\n * cell to the target cell with the same id or the clone of the source cell\n * that was inserted into this model.\n */\nmxGraphModel.prototype.mergeChildrenImpl = function(from, to, cloneAllEdges, mapping)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar childCount = from.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = from.getChildAt(i);\n\t\t\t\n\t\t\tif (typeof(cell.getId) == 'function')\n\t\t\t{\n\t\t\t\tvar id = cell.getId();\n\t\t\t\tvar target = (id != null && (!this.isEdge(cell) || !cloneAllEdges)) ?\n\t\t\t\t\t\tthis.getCell(id) : null;\n\t\t\t\t\n\t\t\t\t// Clones and adds the child if no cell exists for the id\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar clone = cell.clone();\n\t\t\t\t\tclone.setId(id);\n\t\t\t\t\t\n\t\t\t\t\t// Sets the terminals from the original cell to the clone\n\t\t\t\t\t// because the lookup uses strings not cells in JS\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(true), true);\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(false), false);\n\t\t\t\t\t\n\t\t\t\t\t// Do *NOT* use model.add as this will move the edge away\n\t\t\t\t\t// from the parent in updateEdgeParent if maintainEdgeParent\n\t\t\t\t\t// is enabled in the target model\n\t\t\t\t\ttarget = to.insert(clone);\n\t\t\t\t\tthis.cellAdded(target);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Stores the mapping for later reconnecting edges\n\t\t\t\tmapping[mxCellPath.create(cell)] = target;\n\t\t\t\t\n\t\t\t\t// Recurses\n\t\t\t\tthis.mergeChildrenImpl(cell, target, cloneAllEdges, mapping);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: getParents\n * \n * Returns an array that represents the set (no duplicates) of all parents\n * for the given array of cells.\n * \n * Parameters:\n * \n * cells - Array of cells whose parents should be returned.\n */\nmxGraphModel.prototype.getParents = function(cells)\n{\n\tvar parents = [];\n\t\n\tif (cells != null)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = this.getParent(cells[i]);\n\t\t\t\n\t\t\tif (parent != null && !dict.get(parent))\n\t\t\t{\n\t\t\t\tdict.put(parent, true);\n\t\t\t\tparents.push(parent);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn parents;\n};\n\n//\n// Cell Cloning\n//\n\n/**\n * Function: cloneCell\n * \n * Returns a deep clone of the given <mxCell> (including\n * the children) which is created using <cloneCells>.\n *\n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n * includeChildren - Optional boolean indicating if the cells should be cloned\n * with all descendants. Default is true.\n */\nmxGraphModel.prototype.cloneCell = function(cell, includeChildren)\n{\n\tif (cell != null)\n\t{\n\t\treturn this.cloneCells([cell], includeChildren)[0];\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: cloneCells\n * \n * Returns an array of clones for the given array of <mxCells>.\n * Depending on the value of includeChildren, a deep clone is created for\n * each cell. Connections are restored based if the corresponding\n * cell is contained in the passed in array.\n *\n * Parameters:\n * \n * cells - Array of <mxCell> to be cloned.\n * includeChildren - Optional boolean indicating if the cells should be cloned\n * with all descendants. Default is true.\n * mapping - Optional mapping for existing clones.\n */\nmxGraphModel.prototype.cloneCells = function(cells, includeChildren, mapping)\n{\n\tincludeChildren = (includeChildren != null) ? includeChildren : true;\n\tmapping = (mapping != null) ? mapping : new Object();\n\tvar clones = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (cells[i] != null)\n\t\t{\n\t\t\tclones.push(this.cloneCellImpl(cells[i], mapping, includeChildren));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones.push(null);\n\t\t}\n\t}\n\t\n\tfor (var i = 0; i < clones.length; i++)\n\t{\n\t\tif (clones[i] != null)\n\t\t{\n\t\t\tthis.restoreClone(clones[i], cells[i], mapping);\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\t\t\t\n/**\n * Function: cloneCellImpl\n * \n * Inner helper method for cloning cells recursively.\n */\nmxGraphModel.prototype.cloneCellImpl = function(cell, mapping, includeChildren)\n{\n\tvar ident = mxObjectIdentity.get(cell);\n\tvar clone = mapping[ident];\n\t\n\tif (clone == null)\n\t{\n\t\tclone = this.cellCloned(cell);\n\t\tmapping[ident] = clone;\n\n\t\tif (includeChildren)\n\t\t{\n\t\t\tvar childCount = this.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cloneChild = this.cloneCellImpl(\n\t\t\t\t\tthis.getChildAt(cell, i), mapping, true);\n\t\t\t\tclone.insert(cloneChild);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn clone;\n};\n\n/**\n * Function: cellCloned\n * \n * Hook for cloning the cell. This returns cell.clone() or\n * any possible exceptions.\n */\nmxGraphModel.prototype.cellCloned = function(cell)\n{\n\treturn cell.clone();\n};\n\n/**\n * Function: restoreClone\n * \n * Inner helper method for restoring the connections in\n * a network of cloned cells.\n */\nmxGraphModel.prototype.restoreClone = function(clone, cell, mapping)\n{\n\tvar source = this.getTerminal(cell, true);\n\t\n\tif (source != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(source)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\ttmp.insertEdge(clone, true);\n\t\t}\n\t}\n\t\n\tvar target = this.getTerminal(cell, false);\n\t\n\tif (target != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(target)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\t\n\t\t\ttmp.insertEdge(clone, false);\n\t\t}\n\t}\n\t\n\tvar childCount = this.getChildCount(clone);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.restoreClone(this.getChildAt(clone, i),\n\t\t\tthis.getChildAt(cell, i), mapping);\n\t}\n};\n\n//\n// Atomic changes\n//\n\n/**\n * Class: mxRootChange\n * \n * Action to change the root in a model.\n *\n * Constructor: mxRootChange\n * \n * Constructs a change of the root in the\n * specified model.\n */\nfunction mxRootChange(model, root)\n{\n\tthis.model = model;\n\tthis.root = root;\n\tthis.previous = root;\n};\n\n/**\n * Function: execute\n * \n * Carries out a change of the root using\n * <mxGraphModel.rootChanged>.\n */\nmxRootChange.prototype.execute = function()\n{\n\tthis.root = this.previous;\n\tthis.previous = this.model.rootChanged(this.previous);\n};\n\n/**\n * Class: mxChildChange\n * \n * Action to add or remove a child in a model.\n *\n * Constructor: mxChildChange\n * \n * Constructs a change of a child in the\n * specified model.\n */\nfunction mxChildChange(model, parent, child, index)\n{\n\tthis.model = model;\n\tthis.parent = parent;\n\tthis.previous = parent;\n\tthis.child = child;\n\tthis.index = index;\n\tthis.previousIndex = index;\n};\n\n/**\n * Function: execute\n * \n * Changes the parent of <child> using\n * <mxGraphModel.parentForCellChanged> and\n * removes or restores the cell's\n * connections.\n */\nmxChildChange.prototype.execute = function()\n{\n\tif (this.child != null)\n\t{\n\t\tvar tmp = this.model.getParent(this.child);\n\t\tvar tmp2 = (tmp != null) ? tmp.getIndex(this.child) : 0;\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.connect(this.child, false);\n\t\t}\n\t\t\n\t\ttmp = this.model.parentForCellChanged(\n\t\t\tthis.child, this.previous, this.previousIndex);\n\t\t\t\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.connect(this.child, true);\n\t\t}\n\t\t\n\t\tthis.parent = this.previous;\n\t\tthis.previous = tmp;\n\t\tthis.index = this.previousIndex;\n\t\tthis.previousIndex = tmp2;\n\t}\n};\n\n/**\n * Function: disconnect\n * \n * Disconnects the given cell recursively from its\n * terminals and stores the previous terminal in the\n * cell's terminals.\n */\nmxChildChange.prototype.connect = function(cell, isConnect)\n{\n\tisConnect = (isConnect != null) ? isConnect : true;\n\t\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\t\n\tif (source != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, source, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, true);\n\t\t}\n\t}\n\t\n\tif (target != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, target, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, false);\n\t\t}\n\t}\n\t\n\tcell.setTerminal(source, true);\n\tcell.setTerminal(target, false);\n\t\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i=0; i<childCount; i++)\n\t{\n\t\tthis.connect(this.model.getChildAt(cell, i), isConnect);\n\t}\n};\n\n/**\n * Class: mxTerminalChange\n * \n * Action to change a terminal in a model.\n *\n * Constructor: mxTerminalChange\n * \n * Constructs a change of a terminal in the \n * specified model.\n */\nfunction mxTerminalChange(model, cell, terminal, source)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.terminal = terminal;\n\tthis.previous = terminal;\n\tthis.source = source;\n};\n\n/**\n * Function: execute\n * \n * Changes the terminal of <cell> to <previous> using\n * <mxGraphModel.terminalForCellChanged>.\n */\nmxTerminalChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.terminal = this.previous;\n\t\tthis.previous = this.model.terminalForCellChanged(\n\t\t\tthis.cell, this.previous, this.source);\n\t}\n};\n\n/**\n * Class: mxValueChange\n * \n * Action to change a user object in a model.\n *\n * Constructor: mxValueChange\n * \n * Constructs a change of a user object in the \n * specified model.\n */\nfunction mxValueChange(model, cell, value)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the value of <cell> to <previous> using\n * <mxGraphModel.valueForCellChanged>.\n */\nmxValueChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.value = this.previous;\n\t\tthis.previous = this.model.valueForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxStyleChange\n * \n * Action to change a cell's style in a model.\n *\n * Constructor: mxStyleChange\n * \n * Constructs a change of a style in the\n * specified model.\n */\nfunction mxStyleChange(model, cell, style)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.style = style;\n\tthis.previous = style;\n};\n\n/**\n * Function: execute\n * \n * Changes the style of <cell> to <previous> using\n * <mxGraphModel.styleForCellChanged>.\n */\nmxStyleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.style = this.previous;\n\t\tthis.previous = this.model.styleForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxGeometryChange\n * \n * Action to change a cell's geometry in a model.\n *\n * Constructor: mxGeometryChange\n * \n * Constructs a change of a geometry in the\n * specified model.\n */\nfunction mxGeometryChange(model, cell, geometry)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.geometry = geometry;\n\tthis.previous = geometry;\n};\n\n/**\n * Function: execute\n * \n * Changes the geometry of <cell> ro <previous> using\n * <mxGraphModel.geometryForCellChanged>.\n */\nmxGeometryChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.geometry = this.previous;\n\t\tthis.previous = this.model.geometryForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCollapseChange\n * \n * Action to change a cell's collapsed state in a model.\n *\n * Constructor: mxCollapseChange\n * \n * Constructs a change of a collapsed state in the\n * specified model.\n */\nfunction mxCollapseChange(model, cell, collapsed)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.collapsed = collapsed;\n\tthis.previous = collapsed;\n};\n\n/**\n * Function: execute\n * \n * Changes the collapsed state of <cell> to <previous> using\n * <mxGraphModel.collapsedStateForCellChanged>.\n */\nmxCollapseChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.collapsed = this.previous;\n\t\tthis.previous = this.model.collapsedStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxVisibleChange\n * \n * Action to change a cell's visible state in a model.\n *\n * Constructor: mxVisibleChange\n * \n * Constructs a change of a visible state in the\n * specified model.\n */\nfunction mxVisibleChange(model, cell, visible)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.visible = visible;\n\tthis.previous = visible;\n};\n\n/**\n * Function: execute\n * \n * Changes the visible state of <cell> to <previous> using\n * <mxGraphModel.visibleStateForCellChanged>.\n */\nmxVisibleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.visible = this.previous;\n\t\tthis.previous = this.model.visibleStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCellAttributeChange\n * \n * Action to change the attribute of a cell's user object.\n * There is no method on the graph model that uses this\n * action. To use the action, you can use the code shown\n * in the example below.\n * \n * Example:\n * \n * To change the attributeName in the cell's user object\n * to attributeValue, use the following code:\n * \n * (code)\n * model.beginUpdate();\n * try\n * {\n *   var edit = new mxCellAttributeChange(\n *     cell, attributeName, attributeValue);\n *   model.execute(edit);\n * }\n * finally\n * {\n *   model.endUpdate();\n * } \n * (end)\n *\n * Constructor: mxCellAttributeChange\n * \n * Constructs a change of a attribute of the DOM node\n * stored as the value of the given <mxCell>.\n */\nfunction mxCellAttributeChange(cell, attribute, value)\n{\n\tthis.cell = cell;\n\tthis.attribute = attribute;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the attribute of the cell's user object by\n * using <mxCell.setAttribute>.\n */\nmxCellAttributeChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tvar tmp = this.cell.getAttribute(this.attribute);\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.cell.value.removeAttribute(this.attribute);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.cell.setAttribute(this.attribute, this.previous);\n\t\t}\n\t\t\n\t\tthis.previous = tmp;\n\t}\n};\n\n__mxOutput.mxGraphModel = typeof mxGraphModel !== 'undefined' ? mxGraphModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCell\n *\n * Cells are the elements of the graph model. They represent the state\n * of the groups, vertices and edges in a graph.\n * \n * Custom attributes:\n * \n * For custom attributes we recommend using an XML node as the value of a cell.\n * The following code can be used to create a cell with an XML node as the\n * value:\n * \n * (code)\n * var doc = mxUtils.createXmlDocument();\n * var node = doc.createElement('MyNode')\n * node.setAttribute('label', 'MyLabel');\n * node.setAttribute('attribute1', 'value1');\n * graph.insertVertex(graph.getDefaultParent(), null, node, 40, 40, 80, 30);\n * (end)\n * \n * For the label to work, <mxGraph.convertValueToString> and\n * <mxGraph.cellLabelChanged> should be overridden as follows:\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     return cell.getAttribute('label', '')\n *   }\n * };\n * \n * var cellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     // Clones the value for correct undo/redo\n *     var elt = cell.value.cloneNode(true);\n *     elt.setAttribute('label', newValue);\n *     newValue = elt;\n *   }\n *   \n *   cellLabelChanged.apply(this, arguments);\n * };\n * (end)\n * \n * Callback: onInit\n *\n * Called from within the constructor.\n * \n * Constructor: mxCell\n *\n * Constructs a new cell to be used in a graph model.\n * This method invokes <onInit> upon completion.\n * \n * Parameters:\n * \n * value - Optional object that represents the cell value.\n * geometry - Optional <mxGeometry> that specifies the geometry.\n * style - Optional formatted string that defines the style.\n */\nfunction mxCell(value, geometry, style)\n{\n\tthis.value = value;\n\tthis.setGeometry(geometry);\n\tthis.setStyle(style);\n\t\n\tif (this.onInit != null)\n\t{\n\t\tthis.onInit();\n\t}\n};\n\n/**\n * Variable: id\n *\n * Holds the Id. Default is null.\n */\nmxCell.prototype.id = null;\n\n/**\n * Variable: value\n *\n * Holds the user object. Default is null.\n */\nmxCell.prototype.value = null;\n\n/**\n * Variable: geometry\n *\n * Holds the <mxGeometry>. Default is null.\n */\nmxCell.prototype.geometry = null;\n\n/**\n * Variable: style\n *\n * Holds the style as a string of the form [(stylename|key=value);]. Default is\n * null.\n */\nmxCell.prototype.style = null;\n\n/**\n * Variable: vertex\n *\n * Specifies whether the cell is a vertex. Default is false.\n */\nmxCell.prototype.vertex = false;\n\n/**\n * Variable: edge\n *\n * Specifies whether the cell is an edge. Default is false.\n */\nmxCell.prototype.edge = false;\n\n/**\n * Variable: connectable\n *\n * Specifies whether the cell is connectable. Default is true.\n */\nmxCell.prototype.connectable = true;\n\n/**\n * Variable: visible\n *\n * Specifies whether the cell is visible. Default is true.\n */\nmxCell.prototype.visible = true;\n\n/**\n * Variable: collapsed\n *\n * Specifies whether the cell is collapsed. Default is false.\n */\nmxCell.prototype.collapsed = false;\n\n/**\n * Variable: parent\n *\n * Reference to the parent cell.\n */\nmxCell.prototype.parent = null;\n\n/**\n * Variable: source\n *\n * Reference to the source terminal.\n */\nmxCell.prototype.source = null;\n\n/**\n * Variable: target\n *\n * Reference to the target terminal.\n */\nmxCell.prototype.target = null;\n\n/**\n * Variable: children\n *\n * Holds the child cells.\n */\nmxCell.prototype.children = null;\n\n/**\n * Variable: edges\n *\n * Holds the edges.\n */\nmxCell.prototype.edges = null;\n\n/**\n * Variable: mxTransient\n *\n * List of members that should not be cloned inside <clone>. This field is\n * passed to <mxUtils.clone> and is not made persistent in <mxCellCodec>.\n * This is not a convention for all classes, it is only used in this class\n * to mark transient fields since transient modifiers are not supported by\n * the language.\n */\nmxCell.prototype.mxTransient = ['id', 'value', 'parent', 'source',\n                                'target', 'children', 'edges'];\n\n/**\n * Function: getId\n *\n * Returns the Id of the cell as a string.\n */\nmxCell.prototype.getId = function()\n{\n\treturn this.id;\n};\n\t\t\n/**\n * Function: setId\n *\n * Sets the Id of the cell to the given string.\n */\nmxCell.prototype.setId = function(id)\n{\n\tthis.id = id;\n};\n\n/**\n * Function: getValue\n *\n * Returns the user object of the cell. The user\n * object is stored in <value>.\n */\nmxCell.prototype.getValue = function()\n{\n\treturn this.value;\n};\n\t\t\n/**\n * Function: setValue\n *\n * Sets the user object of the cell. The user object\n * is stored in <value>.\n */\nmxCell.prototype.setValue = function(value)\n{\n\tthis.value = value;\n};\n\n/**\n * Function: valueChanged\n *\n * Changes the user object after an in-place edit\n * and returns the previous value. This implementation\n * replaces the user object with the given value and\n * returns the old user object.\n */\nmxCell.prototype.valueChanged = function(newValue)\n{\n\tvar previous = this.getValue();\n\tthis.setValue(newValue);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getGeometry\n *\n * Returns the <mxGeometry> that describes the <geometry>.\n */\nmxCell.prototype.getGeometry = function()\n{\n\treturn this.geometry;\n};\n\n/**\n * Function: setGeometry\n *\n * Sets the <mxGeometry> to be used as the <geometry>.\n */\nmxCell.prototype.setGeometry = function(geometry)\n{\n\tthis.geometry = geometry;\n};\n\n/**\n * Function: getStyle\n *\n * Returns a string that describes the <style>.\n */\nmxCell.prototype.getStyle = function()\n{\n\treturn this.style;\n};\n\n/**\n * Function: setStyle\n *\n * Sets the string to be used as the <style>.\n */\nmxCell.prototype.setStyle = function(style)\n{\n\tthis.style = style;\n};\n\n/**\n * Function: isVertex\n *\n * Returns true if the cell is a vertex.\n */\nmxCell.prototype.isVertex = function()\n{\n\treturn this.vertex != 0;\n};\n\n/**\n * Function: setVertex\n *\n * Specifies if the cell is a vertex. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * vertex - Boolean that specifies if the cell is a vertex.\n */\nmxCell.prototype.setVertex = function(vertex)\n{\n\tthis.vertex = vertex;\n};\n\n/**\n * Function: isEdge\n *\n * Returns true if the cell is an edge.\n */\nmxCell.prototype.isEdge = function()\n{\n\treturn this.edge != 0;\n};\n\t\n/**\n * Function: setEdge\n * \n * Specifies if the cell is an edge. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * edge - Boolean that specifies if the cell is an edge.\n */\nmxCell.prototype.setEdge = function(edge)\n{\n\tthis.edge = edge;\n};\n\n/**\n * Function: isConnectable\n *\n * Returns true if the cell is connectable.\n */\nmxCell.prototype.isConnectable = function()\n{\n\treturn this.connectable != 0;\n};\n\n/**\n * Function: setConnectable\n *\n * Sets the connectable state.\n * \n * Parameters:\n * \n * connectable - Boolean that specifies the new connectable state.\n */\nmxCell.prototype.setConnectable = function(connectable)\n{\n\tthis.connectable = connectable;\n};\n\n/**\n * Function: isVisible\n *\n * Returns true if the cell is visibile.\n */\nmxCell.prototype.isVisible = function()\n{\n\treturn this.visible != 0;\n};\n\n/**\n * Function: setVisible\n *\n * Specifies if the cell is visible.\n * \n * Parameters:\n * \n * visible - Boolean that specifies the new visible state.\n */\nmxCell.prototype.setVisible = function(visible)\n{\n\tthis.visible = visible;\n};\n\n/**\n * Function: isCollapsed\n *\n * Returns true if the cell is collapsed.\n */\nmxCell.prototype.isCollapsed = function()\n{\n\treturn this.collapsed != 0;\n};\n\n/**\n * Function: setCollapsed\n *\n * Sets the collapsed state.\n * \n * Parameters:\n * \n * collapsed - Boolean that specifies the new collapsed state.\n */\nmxCell.prototype.setCollapsed = function(collapsed)\n{\n\tthis.collapsed = collapsed;\n};\n\n/**\n * Function: getParent\n *\n * Returns the cell's parent.\n */\nmxCell.prototype.getParent = function()\n{\n\treturn this.parent;\n};\n\n/**\n * Function: setParent\n *\n * Sets the parent cell.\n * \n * Parameters:\n * \n * parent - <mxCell> that represents the new parent.\n */\nmxCell.prototype.setParent = function(parent)\n{\n\tthis.parent = parent;\n};\n\n/**\n * Function: getTerminal\n *\n * Returns the source or target terminal.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source terminal should be\n * returned.\n */\nmxCell.prototype.getTerminal = function(source)\n{\n\treturn (source) ? this.source : this.target;\n};\n\n/**\n * Function: setTerminal\n *\n * Sets the source or target terminal and returns the new terminal.\n * \n * Parameters:\n * \n * terminal - <mxCell> that represents the new source or target terminal.\n * isSource - Boolean that specifies if the source or target terminal\n * should be set.\n */\nmxCell.prototype.setTerminal = function(terminal, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.source = terminal;\n\t}\n\telse\n\t{\n\t\tthis.target = terminal;\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of child cells.\n */\nmxCell.prototype.getChildCount = function()\n{\n\treturn (this.children == null) ? 0 : this.children.length;\n};\n\n/**\n * Function: getIndex\n *\n * Returns the index of the specified child in the child array.\n * \n * Parameters:\n * \n * child - Child whose index should be returned.\n */\nmxCell.prototype.getIndex = function(child)\n{\n\treturn mxUtils.indexOf(this.children, child);\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child at the specified index.\n * \n * Parameters:\n * \n * index - Integer that specifies the child to be returned.\n */\nmxCell.prototype.getChildAt = function(index)\n{\n\treturn (this.children == null) ? null : this.children[index];\n};\n\n/**\n * Function: insert\n *\n * Inserts the specified child into the child array at the specified index\n * and updates the parent reference of the child. If not childIndex is\n * specified then the child is appended to the child array. Returns the\n * inserted child.\n * \n * Parameters:\n * \n * child - <mxCell> to be inserted or appended to the child array.\n * index - Optional integer that specifies the index at which the child\n * should be inserted into the child array.\n */\nmxCell.prototype.insert = function(child, index)\n{\n\tif (child != null)\n\t{\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount();\n\t\t\t\n\t\t\tif (child.getParent() == this)\n\t\t\t{\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\n\t\tchild.removeFromParent();\n\t\tchild.setParent(this);\n\t\t\n\t\tif (this.children == null)\n\t\t{\n\t\t\tthis.children = [];\n\t\t\tthis.children.push(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.children.splice(index, 0, child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: remove\n *\n * Removes the child at the specified index from the child array and\n * returns the child that was removed. Will remove the parent reference of\n * the child.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the child to be\n * removed.\n */\nmxCell.prototype.remove = function(index)\n{\n\tvar child = null;\n\t\n\tif (this.children != null && index >= 0)\n\t{\n\t\tchild = this.getChildAt(index);\n\t\t\n\t\tif (child != null)\n\t\t{\n\t\t\tthis.children.splice(index, 1);\n\t\t\tchild.setParent(null);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: removeFromParent\n *\n * Removes the cell from its parent.\n */\nmxCell.prototype.removeFromParent = function()\n{\n\tif (this.parent != null)\n\t{\n\t\tvar index = this.parent.getIndex(this);\n\t\tthis.parent.remove(index);\n\t}\n};\n\n/**\n * Function: getEdgeCount\n *\n * Returns the number of edges in the edge array.\n */\nmxCell.prototype.getEdgeCount = function()\n{\n\treturn (this.edges == null) ? 0 : this.edges.length;\n};\n\n/**\n * Function: getEdgeIndex\n *\n * Returns the index of the specified edge in <edges>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose index in <edges> should be returned.\n */\nmxCell.prototype.getEdgeIndex = function(edge)\n{\n\treturn mxUtils.indexOf(this.edges, edge);\n};\n\n/**\n * Function: getEdgeAt\n *\n * Returns the edge at the specified index in <edges>.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the edge to be returned.\n */\nmxCell.prototype.getEdgeAt = function(index)\n{\n\treturn (this.edges == null) ? null : this.edges[index];\n};\n\n/**\n * Function: insertEdge\n *\n * Inserts the specified edge into the edge array and returns the edge.\n * Will update the respective terminal reference of the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.insertEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tedge.removeFromTerminal(isOutgoing);\n\t\tedge.setTerminal(this, isOutgoing);\n\t\t\n\t\tif (this.edges == null ||\n\t\t\tedge.getTerminal(!isOutgoing) != this ||\n\t\t\tmxUtils.indexOf(this.edges, edge) < 0)\n\t\t{\n\t\t\tif (this.edges == null)\n\t\t\t{\n\t\t\t\tthis.edges = [];\n\t\t\t}\n\t\t\t\n\t\t\tthis.edges.push(edge);\n\t\t}\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeEdge\n *\n * Removes the specified edge from the edge array and returns the edge.\n * Will remove the respective terminal reference from the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be removed from the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.removeEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tif (edge.getTerminal(!isOutgoing) != this &&\n\t\t\tthis.edges != null)\n\t\t{\n\t\t\tvar index = this.getEdgeIndex(edge);\n\t\t\t\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\tthis.edges.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge.setTerminal(null, isOutgoing);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeFromTerminal\n *\n * Removes the edge from its source or target terminal.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the edge should be removed from its\n * source or target terminal.\n */\nmxCell.prototype.removeFromTerminal = function(isSource)\n{\n\tvar terminal = this.getTerminal(isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.removeEdge(this, isSource);\n\t}\n};\n\n/**\n * Function: hasAttribute\n * \n * Returns true if the user object is an XML node that contains the given\n * attribute.\n * \n * Parameters:\n * \n * name - Name of the attribute.\n */\nmxCell.prototype.hasAttribute = function(name)\n{\n\tvar userObject = this.getValue();\n\t\n\treturn (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT && userObject.hasAttribute) ?\n\t\tuserObject.hasAttribute(name) : userObject.getAttribute(name) != null;\n};\n\n/**\n * Function: getAttribute\n *\n * Returns the specified attribute from the user object if it is an XML\n * node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be returned.\n * defaultValue - Optional default value to use if the attribute has no\n * value.\n */\nmxCell.prototype.getAttribute = function(name, defaultValue)\n{\n\tvar userObject = this.getValue();\n\t\n\tvar val = (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT) ?\n\t\tuserObject.getAttribute(name) : null;\n\t\t\n\treturn (val != null) ? val : defaultValue;\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the specified attribute on the user object if it is an XML node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be set.\n * value - New value of the attribute.\n */\nmxCell.prototype.setAttribute = function(name, value)\n{\n\tvar userObject = this.getValue();\n\t\n\tif (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tuserObject.setAttribute(name, value);\n\t}\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of the cell. Uses <cloneValue> to clone\n * the user object. All fields in <mxTransient> are ignored\n * during the cloning.\n */\nmxCell.prototype.clone = function()\n{\n\tvar clone = mxUtils.clone(this, this.mxTransient);\n\tclone.setValue(this.cloneValue());\n\t\n\treturn clone;\n};\n\n/**\n * Function: cloneValue\n *\n * Returns a clone of the cell's user object.\n */\nmxCell.prototype.cloneValue = function()\n{\n\tvar value = this.getValue();\n\t\n\tif (value != null)\n\t{\n\t\tif (typeof(value.clone) == 'function')\n\t\t{\n\t\t\tvalue = value.clone();\n\t\t}\n\t\telse if (!isNaN(value.nodeType))\n\t\t{\n\t\t\tvalue = value.cloneNode(true);\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n__mxOutput.mxCell = typeof mxCell !== 'undefined' ? mxCell : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGeometry\n * \n * Extends <mxRectangle> to represent the geometry of a cell.\n * \n * For vertices, the geometry consists of the x- and y-location, and the width\n * and height. For edges, the geometry consists of the optional terminal- and\n * control points. The terminal points are only required if an edge is\n * unconnected, and are stored in the <sourcePoint> and <targetPoint>\n * variables, respectively.\n * \n * Example:\n * \n * If an edge is unconnected, that is, it has no source or target terminal,\n * then a geometry with terminal points for a new edge can be defined as\n * follows.\n * \n * (code)\n * geometry.setTerminalPoint(new mxPoint(x1, y1), true);\n * geometry.points = [new mxPoint(x2, y2)];\n * geometry.setTerminalPoint(new mxPoint(x3, y3), false);\n * (end)\n * \n * Control points are used regardless of the connected state of an edge and may\n * be ignored or interpreted differently depending on the edge's <mxEdgeStyle>.\n * \n * To disable automatic reset of control points after a cell has been moved or\n * resized, the the <mxGraph.resizeEdgesOnMove> and\n * <mxGraph.resetEdgesOnResize> may be used.\n *\n * Edge Labels:\n * \n * Using the x- and y-coordinates of a cell's geometry, it is possible to\n * position the label on edges on a specific location on the actual edge shape\n * as it appears on the screen. The x-coordinate of an edge's geometry is used\n * to describe the distance from the center of the edge from -1 to 1 with 0\n * being the center of the edge and the default value. The y-coordinate of an\n * edge's geometry is used to describe the absolute, orthogonal distance in\n * pixels from that point. In addition, the <mxGeometry.offset> is used as an\n * absolute offset vector from the resulting point.\n * \n * This coordinate system is applied if <relative> is true, otherwise the\n * offset defines the absolute vector from the edge's center point to the\n * label and the values for <x> and <y> are ignored.\n * \n * The width and height parameter for edge geometries can be used to set the\n * label width and height (eg. for word wrapping).\n * \n * Ports:\n * \n * The term \"port\" refers to a relatively positioned, connectable child cell,\n * which is used to specify the connection between the parent and another cell\n * in the graph. Ports are typically modeled as vertices with relative\n * geometries.\n * \n * Offsets:\n * \n * The <offset> field is interpreted in 3 different ways, depending on the cell\n * and the geometry. For edges, the offset defines the absolute offset for the\n * edge label. For relative geometries, the offset defines the absolute offset\n * for the origin (top, left corner) of the vertex, otherwise the offset\n * defines the absolute offset for the label inside the vertex or group.\n * \n * Constructor: mxGeometry\n *\n * Constructs a new object to describe the size and location of a vertex or\n * the control points of an edge.\n */\nfunction mxGeometry(x, y, width, height)\n{\n\tmxRectangle.call(this, x, y, width, height);\n};\n\n/**\n * Extends mxRectangle.\n */\nmxGeometry.prototype = new mxRectangle();\nmxGeometry.prototype.constructor = mxGeometry;\n\n/**\n * Variable: TRANSLATE_CONTROL_POINTS\n * \n * Global switch to translate the points in translate. Default is true.\n */\nmxGeometry.prototype.TRANSLATE_CONTROL_POINTS = true;\n\n/**\n * Variable: alternateBounds\n *\n * Stores alternate values for x, y, width and height in a rectangle. See\n * <swap> to exchange the values. Default is null.\n */\nmxGeometry.prototype.alternateBounds = null;\n\n/**\n * Variable: sourcePoint\n *\n * Defines the source <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a source vertex. Otherwise it is\n * ignored. Default is  null.\n */\nmxGeometry.prototype.sourcePoint = null;\n\n/**\n * Variable: targetPoint\n *\n * Defines the target <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a target vertex. Otherwise it is\n * ignored. Default is null.\n */\nmxGeometry.prototype.targetPoint = null;\n\n/**\n * Variable: points\n *\n * Array of <mxPoints> which specifies the control points along the edge.\n * These points are the intermediate points on the edge, for the endpoints\n * use <targetPoint> and <sourcePoint> or set the terminals of the edge to\n * a non-null value. Default is null.\n */\nmxGeometry.prototype.points = null;\n\n/**\n * Variable: offset\n *\n * For edges, this holds the offset (in pixels) from the position defined\n * by <x> and <y> on the edge. For relative geometries (for vertices), this\n * defines the absolute offset from the point defined by the relative\n * coordinates. For absolute geometries (for vertices), this defines the\n * offset for the label. Default is null.\n */\nmxGeometry.prototype.offset = null;\n\n/**\n * Variable: relative\n *\n * Specifies if the coordinates in the geometry are to be interpreted as\n * relative coordinates. For edges, this is used to define the location of\n * the edge label relative to the edge as rendered on the display. For\n * vertices, this specifies the relative location inside the bounds of the\n * parent cell.\n * \n * If this is false, then the coordinates are relative to the origin of the\n * parent cell or, for edges, the edge label position is relative to the\n * center of the edge as rendered on screen.\n * \n * Default is false.\n */\nmxGeometry.prototype.relative = false;\n\n/**\n * Function: swap\n * \n * Swaps the x, y, width and height with the values stored in\n * <alternateBounds> and puts the previous values into <alternateBounds> as\n * a rectangle. This operation is carried-out in-place, that is, using the\n * existing geometry instance. If this operation is called during a graph\n * model transactional change, then the geometry should be cloned before\n * calling this method and setting the geometry of the cell using\n * <mxGraphModel.setGeometry>.\n */\nmxGeometry.prototype.swap = function()\n{\n\tif (this.alternateBounds != null)\n\t{\n\t\tvar old = new mxRectangle(\n\t\t\tthis.x, this.y, this.width, this.height);\n\n\t\tthis.x = this.alternateBounds.x;\n\t\tthis.y = this.alternateBounds.y;\n\t\tthis.width = this.alternateBounds.width;\n\t\tthis.height = this.alternateBounds.height;\n\n\t\tthis.alternateBounds = old;\n\t}\n};\n\n/**\n * Function: getTerminalPoint\n * \n * Returns the <mxPoint> representing the source or target point of this\n * edge. This is only used if the edge has no source or target vertex.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the source or target point\n * should be returned.\n */\nmxGeometry.prototype.getTerminalPoint = function(isSource)\n{\n\treturn (isSource) ? this.sourcePoint : this.targetPoint;\n};\n\n/**\n * Function: setTerminalPoint\n * \n * Sets the <sourcePoint> or <targetPoint> to the given <mxPoint> and\n * returns the new point.\n * \n * Parameters:\n * \n * point - Point to be used as the new source or target point.\n * isSource - Boolean that specifies if the source or target point\n * should be set.\n */\nmxGeometry.prototype.setTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.sourcePoint = point;\n\t}\n\telse\n\t{\n\t\tthis.targetPoint = point;\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the geometry by the given angle around the given center. That is,\n * <x> and <y> of the geometry, the <sourcePoint>, <targetPoint> and all\n * <points> are translated by the given amount. <x> and <y> are only\n * translated if <relative> is false.\n * \n * Parameters:\n * \n * angle - Number that specifies the rotation angle in degrees.\n * cx - <mxPoint> that specifies the center of the rotation.\n */\nmxGeometry.prototype.rotate = function(angle, cx)\n{\n\tvar rad = mxUtils.toRadians(angle);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\t\n\t// Rotates the geometry\n\tif (!this.relative)\n\t{\n\t\tvar ct = new mxPoint(this.getCenterX(), this.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\n\t\tthis.x = Math.round(pt.x - this.width / 2);\n\t\tthis.y = Math.round(pt.y - this.height / 2);\n\t}\n\n\t// Rotates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.sourcePoint, cos, sin, cx);\n\t\tthis.sourcePoint.x = Math.round(pt.x);\n\t\tthis.sourcePoint.y = Math.round(pt.y);\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.targetPoint, cos, sin, cx);\n\t\tthis.targetPoint.x = Math.round(pt.x);\n\t\tthis.targetPoint.y = Math.round(pt.y);\t\n\t}\n\t\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(this.points[i], cos, sin, cx);\n\t\t\t\tthis.points[i].x = Math.round(pt.x);\n\t\t\t\tthis.points[i].y = Math.round(pt.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: translate\n * \n * Translates the geometry by the specified amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are translated\n * by the given amount. <x> and <y> are only translated if <relative> is false.\n * If <TRANSLATE_CONTROL_POINTS> is false, then <points> are not modified by\n * this function.\n * \n * Parameters:\n * \n * dx - Number that specifies the x-coordinate of the translation.\n * dy - Number that specifies the y-coordinate of the translation.\n */\nmxGeometry.prototype.translate = function(dx, dy)\n{\n\tdx = parseFloat(dx);\n\tdy = parseFloat(dy);\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) + dx;\n\t\tthis.y = parseFloat(this.y) + dy;\n\t}\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) + dx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) + dy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) + dx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) + dy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.TRANSLATE_CONTROL_POINTS && this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) + dx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) + dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: scale\n * \n * Scales the geometry by the given amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are scaled\n * by the given amount. <x>, <y>, <width> and <height> are only scaled if\n * <relative> is false. If <fixedAspect> is true, then the smaller value\n * is used to scale the width and the height.\n * \n * Parameters:\n * \n * sx - Number that specifies the horizontal scale factor.\n * sy - Number that specifies the vertical scale factor.\n * fixedAspect - Optional boolean to keep the aspect ratio fixed.\n */\nmxGeometry.prototype.scale = function(sx, sy, fixedAspect)\n{\n\tsx = parseFloat(sx);\n\tsy = parseFloat(sy);\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) * sx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) * sy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) * sx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) * sy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) * sx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) * sy;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) * sx;\n\t\tthis.y = parseFloat(this.y) * sy;\n\n\t\tif (fixedAspect)\n\t\t{\n\t\t\tsy = sx = Math.min(sx, sy);\n\t\t}\n\t\t\n\t\tthis.width = parseFloat(this.width) * sx;\n\t\tthis.height = parseFloat(this.height) * sy;\n\t}\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this geometry.\n */\nmxGeometry.prototype.equals = function(obj)\n{\n\treturn mxRectangle.prototype.equals.apply(this, arguments) &&\n\t\tthis.relative == obj.relative &&\n\t\t((this.sourcePoint == null && obj.sourcePoint == null) || (this.sourcePoint != null && this.sourcePoint.equals(obj.sourcePoint))) &&\n\t\t((this.targetPoint == null && obj.targetPoint == null) || (this.targetPoint != null && this.targetPoint.equals(obj.targetPoint))) &&\n\t\t((this.points == null && obj.points == null) || (this.points != null && mxUtils.equalPoints(this.points, obj.points))) &&\n\t\t((this.alternateBounds == null && obj.alternateBounds == null) || (this.alternateBounds != null && this.alternateBounds.equals(obj.alternateBounds))) &&\n\t\t((this.offset == null && obj.offset == null) || (this.offset != null && this.offset.equals(obj.offset)));\n};\n\n__mxOutput.mxGeometry = typeof mxGeometry !== 'undefined' ? mxGeometry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCellPath =\n{\n\n\t/**\n\t * Class: mxCellPath\n\t * \n\t * Implements a mechanism for temporary cell Ids.\n\t * \n\t * Variable: PATH_SEPARATOR\n\t * \n\t * Defines the separator between the path components. Default is \".\".\n\t */\n\tPATH_SEPARATOR: '.',\n\t\n\t/**\n\t * Function: create\n\t * \n\t * Creates the cell path for the given cell. The cell path is a\n\t * concatenation of the indices of all ancestors on the (finite) path to\n\t * the root, eg. \"0.0.0.1\".\n\t * \n\t * Parameters:\n\t * \n\t * cell - Cell whose path should be returned.\n\t */\n\tcreate: function(cell)\n\t{\n\t\tvar result = '';\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tvar parent = cell.getParent();\n\t\t\t\n\t\t\twhile (parent != null)\n\t\t\t{\n\t\t\t\tvar index = parent.getIndex(cell);\n\t\t\t\tresult = index + mxCellPath.PATH_SEPARATOR + result;\n\t\t\t\t\n\t\t\t\tcell = parent;\n\t\t\t\tparent = cell.getParent();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes trailing separator\n\t\tvar n = result.length;\n\t\t\n\t\tif (n > 1)\n\t\t{\n\t\t\tresult = result.substring(0, n - 1);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getParentPath\n\t * \n\t * Returns the path for the parent of the cell represented by the given\n\t * path. Returns null if the given path has no parent.\n\t * \n\t * Parameters:\n\t * \n\t * path - Path whose parent path should be returned.\n\t */\n\tgetParentPath: function(path)\n\t{\n\t\tif (path != null)\n\t\t{\n\t\t\tvar index = path.lastIndexOf(mxCellPath.PATH_SEPARATOR);\n\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\treturn path.substring(0, index);\n\t\t\t}\n\t\t\telse if (path.length > 0)\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: resolve\n\t * \n\t * Returns the cell for the specified cell path using the given root as the\n\t * root of the path.\n\t * \n\t * Parameters:\n\t * \n\t * root - Root cell of the path to be resolved.\n\t * path - String that defines the path.\n\t */\n\tresolve: function(root, path)\n\t{\n\t\tvar parent = root;\n\t\t\n\t\tif (path != null)\n\t\t{\n\t\t\tvar tokens = path.split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\n\t\t\tfor (var i=0; i<tokens.length; i++)\n\t\t\t{\n\t\t\t\tparent = parent.getChildAt(parseInt(tokens[i]));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn parent;\n\t},\n\t\n\t/**\n\t * Function: compare\n\t * \n\t * Compares the given cell paths and returns -1 if p1 is smaller, 0 if\n\t * p1 is equal and 1 if p1 is greater than p2.\n\t */\n\tcompare: function(p1, p2)\n\t{\n\t\tvar min = Math.min(p1.length, p2.length);\n\t\tvar comp = 0;\n\t\t\n\t\tfor (var i = 0; i < min; i++)\n\t\t{\n\t\t\tif (p1[i] != p2[i])\n\t\t\t{\n\t\t\t\tif (p1[i].length == 0 ||\n\t\t\t\t\tp2[i].length == 0)\n\t\t\t\t{\n\t\t\t\t\tcomp = (p1[i] == p2[i]) ? 0 : ((p1[i] > p2[i]) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar t1 = parseInt(p1[i]);\n\t\t\t\t\tvar t2 = parseInt(p2[i]);\n\t\t\t\t\t\n\t\t\t\t\tcomp = (t1 == t2) ? 0 : ((t1 > t2) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Compares path length if both paths are equal to this point\n\t\tif (comp == 0)\n\t\t{\n\t\t\tvar t1 = p1.length;\n\t\t\tvar t2 = p2.length;\n\t\t\t\n\t\t\tif (t1 != t2)\n\t\t\t{\n\t\t\t\tcomp = (t1 > t2) ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn comp;\n\t}\n\n};\n\n__mxOutput.mxCellPath = typeof mxCellPath !== 'undefined' ? mxCellPath : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxPerimeter =\n{\n\t/**\n\t * Class: mxPerimeter\n\t * \n\t * Provides various perimeter functions to be used in a style\n\t * as the value of <mxConstants.STYLE_PERIMETER>. Perimeters for\n\t * rectangle, circle, rhombus and triangle are available.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t * (end)\n\t * \n\t * Or programmatically:\n\t * \n\t * (code)\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\t * (end)\n\t * \n\t * When adding new perimeter functions, it is recommended to use the \n\t * mxPerimeter-namespace as follows:\n\t * \n\t * (code)\n\t * mxPerimeter.CustomPerimeter = function (bounds, vertex, next, orthogonal)\n\t * {\n\t *   var x = 0; // Calculate x-coordinate\n\t *   var y = 0; // Calculate y-coordainte\n\t *   \n\t *   return new mxPoint(x, y);\n\t * }\n\t * (end)\n\t * \n\t * The new perimeter should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('customPerimeter', mxPerimeter.CustomPerimeter);\n\t * (end)\n\t * \n\t * The custom perimeter above can now be used in a specific vertex as follows:\n\t * \n\t * (code)\n\t * model.setStyle(vertex, 'perimeter=customPerimeter');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxPerimeter.CustomPerimeter for the value in\n\t * the cell style above.\n\t * \n\t * Or it can be used for all vertices in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultVertexStyle();\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.CustomPerimeter;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * The parameters are explained in <RectanglePerimeter>.\n\t * \n\t * Function: RectanglePerimeter\n\t * \n\t * Describes a rectangular perimeter for the given bounds.\n\t *\n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the absolute bounds of the\n\t * vertex.\n\t * vertex - <mxCellState> that represents the vertex.\n\t * next - <mxPoint> that represents the nearest neighbour point on the\n\t * given edge.\n\t * orthogonal - Boolean that specifies if the orthogonal projection onto\n\t * the perimeter should be returned. If this is false then the intersection\n\t * of the perimeter and the line between the next and the center point is\n\t * returned.\n\t */\n\tRectanglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\t\tvar alpha = Math.atan2(dy, dx);\n\t\tvar p = new mxPoint(0, 0);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI/2;\n\t\tvar beta = pi2 - alpha;\n\t\tvar t = Math.atan2(bounds.height, bounds.width);\n\t\t\n\t\tif (alpha < -pi + t || alpha > pi - t)\n\t\t{\n\t\t\t// Left edge\n\t\t\tp.x = bounds.x;\n\t\t\tp.y = cy - bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse if (alpha < -t)\n\t\t{\n\t\t\t// Top Edge\n\t\t\tp.y = bounds.y;\n\t\t\tp.x = cx - bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\telse if (alpha < t)\n\t\t{\n\t\t\t// Right Edge\n\t\t\tp.x = bounds.x + bounds.width;\n\t\t\tp.y = cy + bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Bottom Edge\n\t\t\tp.y = bounds.y + bounds.height;\n\t\t\tp.x = cx + bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (next.x >= bounds.x &&\n\t\t\t\tnext.x <= bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = next.x;\n\t\t\t}\n\t\t\telse if (next.y >= bounds.y &&\n\t\t\t\t\t   next.y <= bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = next.y;\n\t\t\t}\n\t\t\tif (next.x < bounds.x)\n\t\t\t{\n\t\t\t\tp.x = bounds.x;\n\t\t\t}\n\t\t\telse if (next.x > bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = bounds.x + bounds.width;\n\t\t\t}\n\t\t\tif (next.y < bounds.y)\n\t\t\t{\n\t\t\t\tp.y = bounds.y;\n\t\t\t}\n\t\t\telse if (next.y > bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = bounds.y + bounds.height;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: EllipsePerimeter\n\t * \n\t * Describes an elliptic perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tEllipsePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar a = bounds.width / 2;\n\t\tvar b = bounds.height / 2;\n\t\tvar cx = x + a;\n\t\tvar cy = y + b;\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\t\n\t\t// Calculates straight line equation through\n\t\t// point and ellipse center y = d * x + h\n\t\tvar dx = parseInt(px - cx);\n\t\tvar dy = parseInt(py - cy);\n\t\t\n\t\tif (dx == 0 && dy != 0)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy + b * dy / Math.abs(dy));\n\t\t}\n\t\telse if (dx == 0 && dy == 0)\n\t\t{\n\t\t\treturn new mxPoint(px, py);\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (py >= y && py <= y + bounds.height)\n\t\t\t{\n\t\t\t\tvar ty = py - cy;\n\t\t\t\tvar tx = Math.sqrt(a*a*(1-(ty*ty)/(b*b))) || 0;\n\t\t\t\t\n\t\t\t\tif (px <= x)\n\t\t\t\t{\n\t\t\t\t\ttx = -tx;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(cx+tx, py);\n\t\t\t}\n\t\t\t\n\t\t\tif (px >= x && px <= x + bounds.width)\n\t\t\t{\n\t\t\t\tvar tx = px - cx;\n\t\t\t\tvar ty = Math.sqrt(b*b*(1-(tx*tx)/(a*a))) || 0;\n\t\t\t\t\n\t\t\t\tif (py <= y)\n\t\t\t\t{\n\t\t\t\t\tty = -ty;\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(px, cy+ty);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Calculates intersection\n\t\tvar d = dy / dx;\n\t\tvar h = cy - d * cx;\n\t\tvar e = a * a * d * d + b * b;\n\t\tvar f = -2 * cx * e;\n\t\tvar g = a * a * d * d * cx * cx +\n\t\t\t\tb * b * cx * cx -\n\t\t\t\ta * a * b * b;\n\t\tvar det = Math.sqrt(f * f - 4 * e * g);\n\t\t\n\t\t// Two solutions (perimeter points)\n\t\tvar xout1 = (-f + det) / (2 * e);\n\t\tvar xout2 = (-f - det) / (2 * e);\n\t\tvar yout1 = d * xout1 + h;\n\t\tvar yout2 = d * xout2 + h;\n\t\tvar dist1 = Math.sqrt(Math.pow((xout1 - px), 2)\n\t\t\t\t\t+ Math.pow((yout1 - py), 2));\n\t\tvar dist2 = Math.sqrt(Math.pow((xout2 - px), 2)\n\t\t\t\t\t+ Math.pow((yout2 - py), 2));\n\t\t\t\t\t\n\t\t// Correct solution\n\t\tvar xout = 0;\n\t\tvar yout = 0;\n\t\t\n\t\tif (dist1 < dist2)\n\t\t{\n\t\t\txout = xout1;\n\t\t\tyout = yout1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\txout = xout2;\n\t\t\tyout = yout2;\n\t\t}\n\t\t\n\t\treturn new mxPoint(xout, yout);\n\t},\n\n\t/**\n\t * Function: RhombusPerimeter\n\t * \n\t * Describes a rhombus (aka diamond) perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tRhombusPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\n\t\t// Special case for intersecting the diamond's corners\n\t\tif (cx == px)\n\t\t{\n\t\t\tif (cy > py)\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y); // top\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y + h); // bottom\n\t\t\t}\n\t\t}\n\t\telse if (cy == py)\n\t\t{\n\t\t\tif (cx > px)\n\t\t\t{\n\t\t\t\treturn new mxPoint(x, cy); // left\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(x + w, cy); // right\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tx = cx;\n\t\tvar ty = cy;\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// In which quadrant will the intersection be?\n\t\t// set the slope and offset of the border line accordingly\n\t\tif (px < cx)\n\t\t{\n\t\t\tif (py < cy)\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x, cy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x, cy);\n\t\t\t}\n\t\t}\n\t\telse if (py < cy)\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x + w, cy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x + w, cy);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: TrianglePerimeter\n\t * \n\t * Describes a triangle perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tTrianglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar direction = (vertex != null) ?\n\t\t\tvertex.style[mxConstants.STYLE_DIRECTION] : null;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_SOUTH;\n\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\t\t\n\t\tvar start = new mxPoint(x, y);\n\t\tvar corner = new mxPoint(x + w, cy);\n\t\tvar end = new mxPoint(x, y + h);\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tstart = end;\n\t\t\tcorner = new mxPoint(cx, y);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tcorner = new mxPoint(cx, y + h);\n\t\t\tend = new mxPoint(x + w, y);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tstart = new mxPoint(x + w, y);\n\t\t\tcorner = new mxPoint(x, cy);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\n\t\tvar alpha = (vertical) ? Math.atan2(dx, dy) : Math.atan2(dy, dx);\n\t\tvar t = (vertical) ? Math.atan2(w, h) : Math.atan2(h, w);\n\t\t\n\t\tvar base = false;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tbase = alpha > -t && alpha < t;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbase = alpha < -Math.PI + t || alpha > Math.PI - t;\t\n\t\t}\n\n\t\tvar result = null;\t\t\t\n\n\t\tif (base)\n\t\t{\n\t\t\tif (orthogonal && ((vertical && next.x >= start.x && next.x <= end.x) ||\n\t\t\t\t(!vertical && next.y >= start.y && next.y <= end.y)))\n\t\t\t{\n\t\t\t\tif (vertical)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(next.x, start.y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(start.x, next.y);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 + h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty + h);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 - h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w, y + h / 2 +\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x, y + h / 2 -\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (orthogonal)\n\t\t\t{\n\t\t\t\tvar pt = new mxPoint(cx, cy);\n\t\t\n\t\t\t\tif (next.y >= y && next.y <= y + h)\n\t\t\t\t{\n\t\t\t\t\tpt.x = (vertical) ? cx : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_WEST) ?\n\t\t\t\t\t\t\tx + w : x);\n\t\t\t\t\tpt.y = next.y;\n\t\t\t\t}\n\t\t\t\telse if (next.x >= x && next.x <= x + w)\n\t\t\t\t{\n\t\t\t\t\tpt.x = next.x;\n\t\t\t\t\tpt.y = (!vertical) ? cy : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_NORTH) ?\n\t\t\t\t\t\t\ty + h : y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Compute angle\n\t\t\t\tdx = next.x - pt.x;\n\t\t\t\tdy = next.y - pt.y;\n\t\t\t\t\n\t\t\t\tcx = pt.x;\n\t\t\t\tcy = pt.y;\n\t\t\t}\n\n\t\t\tif ((vertical && next.x <= x + w / 2) ||\n\t\t\t\t(!vertical && next.y <= y + h / 2))\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tstart.x, start.y, corner.x, corner.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tcorner.x, corner.y, end.x, end.y);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\tresult = new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: HexagonPerimeter\n\t * \n\t * Describes a hexagon perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tHexagonPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\tvar dx = px - cx;\n\t\tvar dy = py - cy;\n\t\tvar alpha = -Math.atan2(dy, dx);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI / 2;\n\n\t\tvar result = new mxPoint(cx, cy);\n\n\t\tvar direction = (vertex != null) ? mxUtils.getValue(\n\t\t\t\tvertex.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_EAST) : mxConstants.DIRECTION_EAST;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH\n\t\t\t\t|| direction == mxConstants.DIRECTION_SOUTH;\n\t\tvar a = new mxPoint();\n\t\tvar b = new mxPoint();\n\n\t\t//Only consider corrects quadrants for the orthogonal case.\n\t\tif ((px < x) && (py < y) || (px < x) && (py > y + h)\n\t\t\t\t|| (px > x + w) && (py < y) || (px > x + w) && (py > y + h))\n\t\t{\n\t\t\torthogonal = false;\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (px == cx)\n\t\t\t\t{\n\t\t\t\t\tif (py <= y)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py >= y + h)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px < x)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (py == y)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t}\n\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (py == cy)\n\t\t\t\t{\n\t\t\t\t\tif (px <= x)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px >= x + w)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py < y)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (px == x)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, cy);\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, cy);\n\t\t\t\t}\n\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tx = cx;\n\t\t\tvar ty = cy;\n\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t\t\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tty = y + h;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tty = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t\t\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\ttx = x + w;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttx = x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 4, w / 2);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == pi2)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi2))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\n\t\t\t\tif ((alpha < beta) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha > pi2) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (((alpha > (pi - beta)) && (alpha <= pi))\n\t\t\t\t\t\t|| ((alpha < (-pi + beta)) && (alpha >= -pi)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > -pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -pi2) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 2, w / 4);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha == pi) || (alpha == -pi))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == 0)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y + h);\n\t\t\t\t}\n\n\t\t\t\tif ((alpha > 0) && (alpha < beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > (pi - beta)) && (alpha < pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < 0) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < (-pi + beta)) && (alpha > -pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n__mxOutput.mxPerimeter = typeof mxPerimeter !== 'undefined' ? mxPerimeter : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2017, draw.io AG\n */\n/**\n * Class: mxPrintPreview\n * \n * Implements printing of a diagram across multiple pages. The following opens\n * a print preview for an existing graph:\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.open();\n * (end)\n * \n * Use <mxUtils.getScaleForPageCount> as follows in order to print the graph\n * across a given number of pages:\n * \n * (code)\n * var pageCount = mxUtils.prompt('Enter page count', '1');\n * \n * if (pageCount != null)\n * {\n *   var scale = mxUtils.getScaleForPageCount(pageCount, graph);\n *   var preview = new mxPrintPreview(graph, scale);\n *   preview.open();\n * }\n * (end)\n * \n * Additional pages:\n * \n * To add additional pages before and after the output, <getCoverPages> and\n * <getAppendices> can be used, respectively.\n * \n * (code)\n * var preview = new mxPrintPreview(graph, 1);\n * \n * preview.getCoverPages = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Cover Page</p>'\n *   }))];\n * };\n * \n * preview.getAppendices = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Appendix</p>'\n *   }))];\n * };\n * \n * preview.open();\n * (end)\n * \n * CSS:\n * \n * The CSS from the original page is not carried over to the print preview.\n * To add CSS to the page, use the css argument in the <open> function or\n * override <writeHead> to add the respective link tags as follows:\n * \n * (code)\n * var writeHead = preview.writeHead;\n * preview.writeHead = function(doc, css)\n * {\n *   writeHead.apply(this, arguments);\n *   doc.writeln('<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">');\n * };\n * (end)\n * \n * Padding:\n * \n * To add a padding to the page in the preview (but not the print output), use\n * the following code:\n * \n * (code)\n * preview.writeHead = function(doc)\n * {\n *   writeHead.apply(this, arguments);\n *   \n *   doc.writeln('<style type=\"text/css\">');\n *   doc.writeln('@media screen {');\n *   doc.writeln('  body > div { padding-top:30px;padding-left:40px;box-sizing:content-box; }');\n *   doc.writeln('}');\n *   doc.writeln('</style>');\n * };\n * (end)\n * \n * Headers:\n * \n * Apart from setting the title argument in the mxPrintPreview constructor you\n * can override <renderPage> as follows to add a header to any page:\n * \n * (code)\n * var oldRenderPage = mxPrintPreview.prototype.renderPage;\n * mxPrintPreview.prototype.renderPage = function(w, h, x, y, content, pageNumber)\n * {\n *   var div = oldRenderPage.apply(this, arguments);\n *   \n *   var header = document.createElement('div');\n *   header.style.position = 'absolute';\n *   header.style.top = '0px';\n *   header.style.width = '100%';\n *   header.style.textAlign = 'right';\n *   mxUtils.write(header, 'Your header here');\n *   div.firstChild.appendChild(header);\n *   \n *   return div;\n * };\n * (end)\n * \n * The pageNumber argument contains the number of the current page, starting at\n * 1. To display a header on the first page only, check pageNumber and add a\n * vertical offset in the constructor call for the height of the header.\n * \n * Page Format:\n * \n * For landscape printing, use <mxConstants.PAGE_FORMAT_A4_LANDSCAPE> as\n * the pageFormat in <mxUtils.getScaleForPageCount> and <mxPrintPreview>.\n * Keep in mind that one can not set the defaults for the print dialog\n * of the operating system from JavaScript so the user must manually choose\n * a page format that matches this setting.\n * \n * You can try passing the following CSS directive to <open> to set the\n * page format in the print dialog to landscape. However, this CSS\n * directive seems to be ignored in most major browsers, including IE.\n * \n * (code)\n * @page {\n *   size: landscape;\n * }\n * (end)\n * \n * Note that the print preview behaves differently in IE when used from the\n * filesystem or via HTTP so printing should always be tested via HTTP.\n * \n * If you are using a DOCTYPE in the source page you can override <getDoctype>\n * and provide the same DOCTYPE for the print preview if required. Here is\n * an example for IE8 standards mode.\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.getDoctype = function()\n * {\n *   return '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=5,IE=8\" ><![endif]-->';\n * };\n * preview.open();\n * (end)\n * \n * Constructor: mxPrintPreview\n *\n * Constructs a new print preview for the given parameters.\n * \n * Parameters:\n * \n * graph - <mxGraph> to be previewed.\n * scale - Optional scale of the output. Default is 1 / <mxGraph.pageScale>.\n * pageFormat - <mxRectangle> that specifies the page format (in pixels).\n * border - Border in pixels along each side of every page. Note that the\n * actual print function in the browser will add another border for\n * printing.\n * This should match the page format of the printer. Default uses the\n * <mxGraph.pageFormat> of the given graph.\n * x0 - Optional left offset of the output. Default is 0.\n * y0 - Optional top offset of the output. Default is 0.\n * borderColor - Optional color of the page border. Default is no border.\n * Note that a border is sometimes useful to highlight the printed page\n * border in the print preview of the browser.\n * title - Optional string that is used for the window title. Default\n * is 'Printer-friendly version'.\n * pageSelector - Optional boolean that specifies if the page selector\n * should appear in the window with the print preview. Default is true.\n */\nfunction mxPrintPreview(graph, scale, pageFormat, border, x0, y0, borderColor, title, pageSelector)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.border = (border != null) ? border : 0;\n\tthis.pageFormat = mxRectangle.fromRectangle((pageFormat != null) ? pageFormat : graph.pageFormat);\n\tthis.title = (title != null) ? title : 'Printer-friendly version';\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.borderColor = borderColor;\n\tthis.pageSelector = (pageSelector != null) ? pageSelector : true;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> that should be previewed.\n */\nmxPrintPreview.prototype.graph = null;\n\n/**\n * Variable: pageFormat\n *\n * Holds the <mxRectangle> that defines the page format.\n */\nmxPrintPreview.prototype.pageFormat = null;\n\n/**\n * Variable: scale\n * \n * Holds the scale of the print preview.\n */\nmxPrintPreview.prototype.scale = null;\n\n/**\n * Variable: border\n * \n * The border inset around each side of every page in the preview. This is set\n * to 0 if autoOrigin is false.\n */\nmxPrintPreview.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * The margin at the top of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginTop = 0;\n\n/**\n * Variable: marginBottom\n * \n * The margin at the bottom of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginBottom = 0;\n\n/**\n * Variable: x0\n * \n * Holds the horizontal offset of the output.\n */\nmxPrintPreview.prototype.x0 = 0;\n\n/**\n * Variable: y0\n *\n * Holds the vertical offset of the output.\n */\nmxPrintPreview.prototype.y0 = 0;\n\n/**\n * Variable: autoOrigin\n * \n * Specifies if the origin should be automatically computed based on the top,\n * left corner of the actual diagram contents. The required offset will be added\n * to <x0> and <y0> in <open>. Default is true.\n */\nmxPrintPreview.prototype.autoOrigin = true;\n\n/**\n * Variable: printOverlays\n * \n * Specifies if overlays should be printed. Default is false.\n */\nmxPrintPreview.prototype.printOverlays = false;\n\n/**\n * Variable: printControls\n * \n * Specifies if controls (such as folding icons) should be printed. Default is\n * false.\n */\nmxPrintPreview.prototype.printControls = false;\n\n/**\n * Variable: printBackgroundImage\n * \n * Specifies if the background image should be printed. Default is false.\n */\nmxPrintPreview.prototype.printBackgroundImage = false;\n\n/**\n * Variable: backgroundColor\n * \n * Holds the color value for the page background color. Default is #ffffff.\n */\nmxPrintPreview.prototype.backgroundColor = '#ffffff';\n\n/**\n * Variable: borderColor\n * \n * Holds the color value for the page border.\n */\nmxPrintPreview.prototype.borderColor = null;\n\n/**\n * Variable: title\n * \n * Holds the title of the preview window.\n */\nmxPrintPreview.prototype.title = null;\n\n/**\n * Variable: pageSelector\n * \n * Boolean that specifies if the page selector should be\n * displayed. Default is true.\n */\nmxPrintPreview.prototype.pageSelector = null;\n\n/**\n * Variable: wnd\n * \n * Reference to the preview window.\n */\nmxPrintPreview.prototype.wnd = null;\n\n/**\n * Variable: targetWindow\n * \n * Assign any window here to redirect the rendering in <open>.\n */\nmxPrintPreview.prototype.targetWindow = null;\n\n/**\n * Variable: pageCount\n * \n * Holds the actual number of pages in the preview.\n */\nmxPrintPreview.prototype.pageCount = 0;\n\n/**\n * Variable: clipping\n * \n * Specifies is clipping should be used to avoid creating too many cell states\n * in large diagrams. The bounding box of the cells in the original diagram is\n * used if this is enabled. Default is true.\n */\nmxPrintPreview.prototype.clipping = true;\n\n/**\n * Function: getWindow\n * \n * Returns <wnd>.\n */\nmxPrintPreview.prototype.getWindow = function()\n{\n\treturn this.wnd;\n};\n\n/**\n * Function: getDocType\n * \n * Returns the string that should go before the HTML tag in the print preview\n * page. This implementation returns an X-UA meta tag for IE5 in quirks mode,\n * IE8 in IE8 standards mode and edge in IE9 standards mode.\n */\nmxPrintPreview.prototype.getDoctype = function()\n{\n\tvar dt = '';\n\t\n\tif (document.documentMode == 5)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=5\">';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\">';\n\t}\n\telse if (document.documentMode > 8)\n\t{\n\t\t// Comment needed to make standards doctype apply in IE\n\t\tdt = '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><![endif]-->';\n\t}\n\t\n\treturn dt;\n};\n\n/**\n * Function: appendGraph\n * \n * Adds the given graph to the existing print preview.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.appendGraph = function(graph, scale, x0, y0, forcePageBreaks, keepOpen)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.x0 = x0;\n\tthis.y0 = y0;\n\tthis.open(null, null, forcePageBreaks, keepOpen);\n};\n\n/**\n * Function: open\n * \n * Shows the print preview window. The window is created here if it does\n * not exist.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.open = function(css, targetWindow, forcePageBreaks, keepOpen)\n{\n\t// Closing the window while the page is being rendered may cause an\n\t// exception in IE. This and any other exceptions are simply ignored.\n\tvar previousInitializeOverlay = this.graph.cellRenderer.initializeOverlay;\n\tvar div = null;\n\t\n\ttry\n\t{\n\t\t// Temporarily overrides the method to redirect rendering of overlays\n\t\t// to the draw pane so that they are visible in the printout\n\t\tif (this.printOverlays)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initializeOverlay = function(state, overlay)\n\t\t\t{\n\t\t\t\toverlay.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (this.printControls)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initControl = function(state, control, handleEvents, clickHandler)\n\t\t\t{\n\t\t\t\tcontrol.dialect = state.view.graph.dialect;\n\t\t\t\tcontrol.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tthis.wnd = (targetWindow != null) ? targetWindow : this.wnd;\n\t\tvar isNewWindow = false;\n\t\t\n\t\tif (this.wnd == null)\n\t\t{\n\t\t\tisNewWindow = true;\n\t\t\tthis.wnd = window.open();\n\t\t}\n\t\t\n\t\tvar doc = this.wnd.document;\n\t\t\n\t\tif (isNewWindow)\n\t\t{\n\t\t\tvar dt = this.getDoctype();\n\t\t\t\n\t\t\tif (dt != null && dt.length > 0)\n\t\t\t{\n\t\t\t\tdoc.writeln(dt);\n\t\t\t}\n\t\t\t\n\t\t\tif (mxClient.IS_VML)\n\t\t\t{\n\t\t\t\tdoc.writeln('<html xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (document.compatMode === 'CSS1Compat')\n\t\t\t\t{\n\t\t\t\t\tdoc.writeln('<!DOCTYPE html>');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdoc.writeln('<html>');\n\t\t\t}\n\t\t\t\n\t\t\tdoc.writeln('<head>');\n\t\t\tthis.writeHead(doc, css);\n\t\t\tdoc.writeln('</head>');\n\t\t\tdoc.writeln('<body class=\"mxPage\">');\n\t\t}\n\n\t\t// Computes the horizontal and vertical page count\n\t\tvar bounds = this.graph.getGraphBounds().clone();\n\t\tvar currentScale = this.graph.getView().getScale();\n\t\tvar sc = currentScale / this.scale;\n\t\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\t\t// Uses the absolute origin with no offset for all printing\n\t\tif (!this.autoOrigin)\n\t\t{\n\t\t\tthis.x0 -= tr.x * this.scale;\n\t\t\tthis.y0 -= tr.y * this.scale;\n\t\t\tbounds.width += bounds.x;\n\t\t\tbounds.height += bounds.y;\n\t\t\tbounds.x = 0;\n\t\t\tbounds.y = 0;\n\t\t\tthis.border = 0;\n\t\t}\n\t\t\n\t\t// Store the available page area\n\t\tvar availableWidth = this.pageFormat.width - (this.border * 2);\n\t\tvar availableHeight = this.pageFormat.height - (this.border * 2);\n\t\n\t\t// Adds margins to page format\n\t\tthis.pageFormat.height += this.marginTop + this.marginBottom;\n\n\t\t// Compute the unscaled, untranslated bounds to find\n\t\t// the number of vertical and horizontal pages\n\t\tbounds.width /= sc;\n\t\tbounds.height /= sc;\n\n\t\tvar hpages = Math.max(1, Math.ceil((bounds.width + this.x0) / availableWidth));\n\t\tvar vpages = Math.max(1, Math.ceil((bounds.height + this.y0) / availableHeight));\n\t\tthis.pageCount = hpages * vpages;\n\t\t\n\t\tvar writePageSelector = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.pageSelector && (vpages > 1 || hpages > 1))\n\t\t\t{\n\t\t\t\tvar table = this.createPageSelector(vpages, hpages);\n\t\t\t\tdoc.body.appendChild(table);\n\t\t\t\t\n\t\t\t\t// Implements position: fixed in IE quirks mode\n\t\t\t\tif (mxClient.IS_IE && doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7)\n\t\t\t\t{\n\t\t\t\t\ttable.style.position = 'absolute';\n\t\t\t\t\t\n\t\t\t\t\tvar update = function()\n\t\t\t\t\t{\n\t\t\t\t\t\ttable.style.top = ((doc.body.scrollTop || doc.documentElement.scrollTop) + 10) + 'px';\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'scroll', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'resize', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar addPage = mxUtils.bind(this, function(div, addBreak)\n\t\t{\n\t\t\t// Border of the DIV (aka page) inside the document\n\t\t\tif (this.borderColor != null)\n\t\t\t{\n\t\t\t\tdiv.style.borderColor = this.borderColor;\n\t\t\t\tdiv.style.borderStyle = 'solid';\n\t\t\t\tdiv.style.borderWidth = '1px';\n\t\t\t}\n\t\t\t\n\t\t\t// Needs to be assigned directly because IE doesn't support\n\t\t\t// child selectors, eg. body > div { background: white; }\n\t\t\tdiv.style.background = this.backgroundColor;\n\t\t\t\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tdiv.style.pageBreakAfter = 'always';\n\t\t\t}\n\n\t\t\t// NOTE: We are dealing with cross-window DOM here, which\n\t\t\t// is a problem in IE, so we copy the HTML markup instead.\n\t\t\t// The underlying problem is that the graph display markup\n\t\t\t// creation (in mxShape, mxGraphView) is hardwired to using\n\t\t\t// document.createElement and hence we must use this document\n\t\t\t// to create the complete page and then copy it over to the\n\t\t\t// new window.document. This can be fixed later by using the\n\t\t\t// ownerDocument of the container in mxShape and mxGraphView.\n\t\t\tif (isNewWindow && (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE))\n\t\t\t{\n\t\t\t\t// For some obscure reason, removing the DIV from the\n\t\t\t\t// parent before fetching its outerHTML has missing\n\t\t\t\t// fillcolor properties and fill children, so the div\n\t\t\t\t// must be removed afterwards to keep the fillcolors.\n\t\t\t\tdoc.writeln(div.outerHTML);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse if (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE)\n\t\t\t{\n\t\t\t\tvar clone = doc.createElement('div');\n\t\t\t\tclone.innerHTML = div.outerHTML;\n\t\t\t\tclone = clone.getElementsByTagName('div')[0];\n\t\t\t\tdoc.body.appendChild(clone);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tthis.addPageBreak(doc);\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar cov = this.getCoverPages(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\tif (cov != null)\n\t\t{\n\t\t\tfor (var i = 0; i < cov.length; i++)\n\t\t\t{\n\t\t\t\taddPage(cov[i], true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar apx = this.getAppendices(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\t// Appends each page to the page output for printing, making\n\t\t// sure there will be a page break after each page (ie. div)\n\t\tfor (var i = 0; i < vpages; i++)\n\t\t{\n\t\t\tvar dy = i * availableHeight / this.scale - this.y0 / this.scale +\n\t\t\t\t\t(bounds.y - tr.y * currentScale) / currentScale;\n\t\t\t\n\t\t\tfor (var j = 0; j < hpages; j++)\n\t\t\t{\n\t\t\t\tif (this.wnd == null)\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = j * availableWidth / this.scale - this.x0 / this.scale +\n\t\t\t\t\t\t(bounds.x - tr.x * currentScale) / currentScale;\n\t\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\t\tvar clip = new mxRectangle(dx, dy, availableWidth, availableHeight);\n\t\t\t\tdiv = this.renderPage(this.pageFormat.width, this.pageFormat.height, 0, 0, mxUtils.bind(this, function(div)\n\t\t\t\t{\n\t\t\t\t\tthis.addGraphFragment(-dx, -dy, this.scale, pageNum, div, clip);\n\t\t\t\t\t\n\t\t\t\t\tif (this.printBackgroundImage)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.insertBackgroundImage(div, -dx, -dy);\n\t\t\t\t\t}\n\t\t\t\t}), pageNum);\n\n\t\t\t\t// Gives the page a unique ID for later accessing the page\n\t\t\t\tdiv.setAttribute('id', 'mxPage-'+pageNum);\n\n\t\t\t\taddPage(div, apx != null || i < vpages - 1 || j < hpages - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (apx != null)\n\t\t{\n\t\t\tfor (var i = 0; i < apx.length; i++)\n\t\t\t{\n\t\t\t\taddPage(apx[i], i < apx.length - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (isNewWindow && !keepOpen)\n\t\t{\n\t\t\tthis.closeDocument();\n\t\t\twritePageSelector();\n\t\t}\n\t\t\n\t\tthis.wnd.focus();\n\t}\n\tcatch (e)\n\t{\n\t\t// Removes the DIV from the document in case of an error\n\t\tif (div != null && div.parentNode != null)\n\t\t{\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.cellRenderer.initializeOverlay = previousInitializeOverlay;\n\t}\n\n\treturn this.wnd;\n};\n\n/**\n * Function: addPageBreak\n * \n * Adds a page break to the given document.\n */\nmxPrintPreview.prototype.addPageBreak = function(doc)\n{\n\tvar hr = doc.createElement('hr');\n\thr.className = 'mxPageBreak';\n\tdoc.body.appendChild(hr);\n};\n\n/**\n * Function: closeDocument\n * \n * Writes the closing tags for body and page after calling <writePostfix>.\n */\nmxPrintPreview.prototype.closeDocument = function()\n{\n\ttry\n\t{\n\t\tif (this.wnd != null && this.wnd.document != null)\n\t\t{\n\t\t\tvar doc = this.wnd.document;\n\t\t\t\n\t\t\tthis.writePostfix(doc);\n\t\t\tdoc.writeln('</body>');\n\t\t\tdoc.writeln('</html>');\n\t\t\tdoc.close();\n\t\t\t\n\t\t\t// Removes all event handlers in the print output\n\t\t\tmxEvent.release(doc.body);\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore any errors resulting from wnd no longer being available\n\t}\n};\n\n/**\n * Function: writeHead\n * \n * Writes the HEAD section into the given document, without the opening\n * and closing HEAD tags.\n */\nmxPrintPreview.prototype.writeHead = function(doc, css)\n{\n\tif (this.title != null)\n\t{\n\t\tdoc.writeln('<title>' + this.title + '</title>');\n\t}\n\t\n\t// Adds required namespaces\n\tif (mxClient.IS_VML)\n\t{\n\t\tdoc.writeln('<style type=\"text/css\">v\\\\:*{behavior:url(#default#VML)}o\\\\:*{behavior:url(#default#VML)}</style>');\n\t}\n\n\t// Adds all required stylesheets\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css', doc);\n\n\t// Removes horizontal rules and page selector from print output\n\tdoc.writeln('<style type=\"text/css\">');\n\tdoc.writeln('@media print {');\n\tdoc.writeln('  * { -webkit-print-color-adjust: exact; }');\n\tdoc.writeln('  table.mxPageSelector { display: none; }');\n\tdoc.writeln('  hr.mxPageBreak { display: none; }');\n\tdoc.writeln('}');\n\tdoc.writeln('@media screen {');\n\t\n\t// NOTE: position: fixed is not supported in IE, so the page selector\n\t// position (absolute) needs to be updated in IE (see below)\n\tdoc.writeln('  table.mxPageSelector { position: fixed; right: 10px; top: 10px;' +\n\t\t\t'font-family: Arial; font-size:10pt; border: solid 1px darkgray;' +\n\t\t\t'background: white; border-collapse:collapse; }');\n\tdoc.writeln('  table.mxPageSelector td { border: solid 1px gray; padding:4px; }');\n\tdoc.writeln('  body.mxPage { background: gray; }');\n\tdoc.writeln('}');\n\t\n\tif (css != null)\n\t{\n\t\tdoc.writeln(css);\n\t}\n\t\n\tdoc.writeln('</style>');\n};\n\n/**\n * Function: writePostfix\n * \n * Called before closing the body of the page. This implementation is empty.\n */\nmxPrintPreview.prototype.writePostfix = function(doc)\n{\n\t// empty\n};\n\n/**\n * Function: createPageSelector\n * \n * Creates the page selector table.\n */\nmxPrintPreview.prototype.createPageSelector = function(vpages, hpages)\n{\n\tvar doc = this.wnd.document;\n\tvar table = doc.createElement('table');\n\ttable.className = 'mxPageSelector';\n\ttable.setAttribute('border', '0');\n\n\tvar tbody = doc.createElement('tbody');\n\t\n\tfor (var i = 0; i < vpages; i++)\n\t{\n\t\tvar row = doc.createElement('tr');\n\t\t\n\t\tfor (var j = 0; j < hpages; j++)\n\t\t{\n\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\tvar cell = doc.createElement('td');\n\t\t\tvar a = doc.createElement('a');\n\t\t\ta.setAttribute('href', '#mxPage-' + pageNum);\n\n\t\t\t// Workaround for FF where the anchor is appended to the URL of the original document\n\t\t\tif (mxClient.IS_NS && !mxClient.IS_SF && !mxClient.IS_GC)\n\t\t\t{\n\t\t\t\tvar js = 'var page = document.getElementById(\\'mxPage-' + pageNum + '\\');page.scrollIntoView(true);event.preventDefault();';\n\t\t\t\ta.setAttribute('onclick', js);\n\t\t\t}\n\t\t\t\n\t\t\tmxUtils.write(a, pageNum, doc);\n\t\t\tcell.appendChild(a);\n\t\t\trow.appendChild(cell);\n\t\t}\n\t\t\n\t\ttbody.appendChild(row);\n\t}\n\t\n\ttable.appendChild(tbody);\n\t\n\treturn table;\n};\n\n/**\n * Function: renderPage\n * \n * Creates a DIV that prints a single page of the given\n * graph using the given scale and returns the DIV that\n * represents the page.\n * \n * Parameters:\n * \n * w - Width of the page in pixels.\n * h - Height of the page in pixels.\n * dx - Optional horizontal page offset in pixels (used internally).\n * dy - Optional vertical page offset in pixels (used internally).\n * content - Callback that adds the HTML content to the inner div of a page.\n * Takes the inner div as the argument.\n * pageNumber - Integer representing the page number.\n */\nmxPrintPreview.prototype.renderPage = function(w, h, dx, dy, content, pageNumber)\n{\n\tvar doc = this.wnd.document;\n\tvar div = document.createElement('div');\n\tvar arg = null;\n\n\ttry\n\t{\n\t\t// Workaround for ignored clipping in IE 9 standards\n\t\t// when printing with page breaks and HTML labels.\n\t\tif (dx != 0 || dy != 0)\n\t\t{\n\t\t\tdiv.style.position = 'relative';\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.position = 'relative';\n\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\t\t\t\n\t\t\tvar viewport = document.createElement('div');\n\t\t\tviewport.style.position = 'relative';\n\t\t\tviewport.style.marginLeft = dx + 'px';\n\t\t\tviewport.style.marginTop = dy + 'px';\n\n\t\t\t// FIXME: IE8 standards output problems\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t\tviewport.style.position = 'absolute';\n\t\t\t}\n\t\t\n\t\t\tif (doc.documentMode == 10)\n\t\t\t{\n\t\t\t\tviewport.style.width = '100%';\n\t\t\t\tviewport.style.height = '100%';\n\t\t\t}\n\t\t\t\n\t\t\tinnerDiv.appendChild(viewport);\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = viewport;\n\t\t}\n\t\t// FIXME: IE10/11 too many pages\n\t\telse\n\t\t{\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.overflow = 'hidden';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\t// IE8 uses above branch currently\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tdiv.style.position = 'relative';\n\t\t\t}\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\n\t\t\tif (mxClient.IS_IE && (doc.documentMode == null || doc.documentMode == 5 ||\n\t\t\t\tdoc.documentMode == 8 || doc.documentMode == 7))\n\t\t\t{\n\t\t\t\tinnerDiv.style.marginTop = this.border + 'px';\n\t\t\t\tinnerDiv.style.marginLeft = this.border + 'px';\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\t}\n\t\n\t\t\tif (this.graph.dialect == mxConstants.DIALECT_VML)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t}\n\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = innerDiv;\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\tdiv.parentNode.removeChild(div);\n\t\tdiv = null;\n\t\t\n\t\tthrow e;\n\t}\n\n\tcontent(arg);\n\t \n\treturn div;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root cell for painting the graph.\n */\nmxPrintPreview.prototype.getRoot = function()\n{\n\tvar root = this.graph.view.currentRoot;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.graph.getModel().getRoot();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: useCssTransforms\n * \n * Returns true if CSS transforms should be used for scaling content.\n * This returns true if foreignObject is supported and we're not in Safari\n * as it has clipping bugs for transformed CSS content with foreignObjects.\n */\nmxPrintPreview.prototype.useCssTransforms = function()\n{\n\treturn !mxClient.NO_FO && !mxClient.IS_SF;\n};\n\n/**\n * Function: addGraphFragment\n * \n * Adds a graph fragment to the given div.\n * \n * Parameters:\n * \n * dx - Horizontal translation for the diagram.\n * dy - Vertical translation for the diagram.\n * scale - Scale for the diagram.\n * pageNumber - Number of the page to be rendered.\n * div - Div that contains the output.\n * clip - Contains the clipping rectangle as an <mxRectangle>.\n */\nmxPrintPreview.prototype.addGraphFragment = function(dx, dy, scale, pageNumber, div, clip)\n{\n\tvar view = this.graph.getView();\n\tvar previousContainer = this.graph.container;\n\tthis.graph.container = div;\n\t\n\tvar canvas = view.getCanvas();\n\tvar backgroundPane = view.getBackgroundPane();\n\tvar drawPane = view.getDrawPane();\n\tvar overlayPane = view.getOverlayPane();\n\tvar realScale = scale;\n\n\tif (this.graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tview.createSvg();\n\t\t\n\t\t// Uses CSS transform for scaling\n\t\tif (this.useCssTransforms())\n\t\t{\n\t\t\tvar g = view.getDrawPane().parentNode;\n\t\t\tvar prev = g.getAttribute('transform');\n\t\t\tg.setAttribute('transformOrigin', '0 0');\n\t\t\tg.setAttribute('transform', 'scale(' + scale + ',' + scale + ')' +\n\t\t\t\t'translate(' + dx + ',' + dy + ')');\n\t\t\t\n\t\t\tscale = 1;\n\t\t\tdx = 0;\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse if (this.graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tview.createVml();\n\t}\n\telse\n\t{\n\t\tview.createHtml();\n\t}\n\t\n\t// Disables events on the view\n\tvar eventsEnabled = view.isEventsEnabled();\n\tview.setEventsEnabled(false);\n\t\n\t// Disables the graph to avoid cursors\n\tvar graphEnabled = this.graph.isEnabled();\n\tthis.graph.setEnabled(false);\n\n\t// Resets the translation\n\tvar translate = view.getTranslate();\n\tview.translate = new mxPoint(dx, dy);\n\t\n\t// Redraws only states that intersect the clip\n\tvar redraw = this.graph.cellRenderer.redraw;\n\tvar states = view.states;\n\tvar s = view.scale;\n\n\t// Gets the transformed clip for intersection check below\n\tif (this.clipping)\n\t{\n\t\tvar tempClip = new mxRectangle((clip.x + translate.x) * s, (clip.y + translate.y) * s,\n\t\t\t\tclip.width * s / realScale, clip.height * s / realScale);\n\n\t\t// Checks clipping rectangle for speedup\n\t\t// Must create terminal states for edge clipping even if terminal outside of clip\n\t\tthis.graph.cellRenderer.redraw = function(state, force, rendering)\n\t\t{\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\t// Gets original state from graph to find bounding box\n\t\t\t\tvar orig = states.get(state.cell);\n\t\t\t\t\n\t\t\t\tif (orig != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = view.getBoundingBox(orig, false);\n\t\t\t\t\t\n\t\t\t\t\t// Stops rendering if outside clip for speedup but ignores\n\t\t\t\t\t// edge labels where width and height is set to 0\n\t\t\t\t\tif (bbox != null && bbox.width > 0 && bbox.height > 0 &&\n\t\t\t\t\t\t!mxUtils.intersects(tempClip, bbox))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tredraw.apply(this, arguments);\n\t\t};\n\t}\n\t\n\tvar temp = null;\n\t\n\ttry\n\t{\n\t\t// Creates the temporary cell states in the view and\n\t\t// draws them onto the temporary DOM nodes in the view\n\t\tvar cells = [this.getRoot()];\n\t\ttemp = new mxTemporaryCellStates(view, scale, cells, null, mxUtils.bind(this, function(state)\n\t\t{\n\t\t\treturn this.getLinkForCellState(state);\n\t\t}));\n\t}\n\tfinally\n\t{\n\t\t// Removes overlay pane with selection handles\n\t\t// controls and icons from the print output\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tview.overlayPane.innerHTML = '';\n\t\t\tview.canvas.style.overflow = 'hidden';\n\t\t\tview.canvas.style.position = 'relative';\n\t\t\tview.canvas.style.top = this.marginTop + 'px';\n\t\t\tview.canvas.style.width = clip.width + 'px';\n\t\t\tview.canvas.style.height = clip.height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Removes everything but the SVG node\n\t\t\tvar tmp = div.firstChild;\n\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\tvar next = tmp.nextSibling;\n\t\t\t\tvar name = tmp.nodeName.toLowerCase();\n\n\t\t\t\t// Note: Width and height are required in FF 11\n\t\t\t\tif (name == 'svg')\n\t\t\t\t{\n\t\t\t\t\ttmp.style.overflow = 'hidden';\n\t\t\t\t\ttmp.style.position = 'relative';\n\t\t\t\t\ttmp.style.top = this.marginTop + 'px';\n\t\t\t\t\ttmp.setAttribute('width', clip.width);\n\t\t\t\t\ttmp.setAttribute('height', clip.height);\n\t\t\t\t\ttmp.style.width = '';\n\t\t\t\t\ttmp.style.height = '';\n\t\t\t\t}\n\t\t\t\t// Tries to fetch all text labels and only text labels\n\t\t\t\telse if (tmp.style.cursor != 'default' && name != 'div')\n\t\t\t\t{\n\t\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp = next;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Puts background image behind SVG output\n\t\tif (this.printBackgroundImage)\n\t\t{\n\t\t\tvar svgs = div.getElementsByTagName('svg');\n\t\t\t\n\t\t\tif (svgs.length > 0)\n\t\t\t{\n\t\t\t\tsvgs[0].style.position = 'absolute';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Completely removes the overlay pane to remove more handles\n\t\tview.overlayPane.parentNode.removeChild(view.overlayPane);\n\n\t\t// Restores the state of the view\n\t\tthis.graph.setEnabled(graphEnabled);\n\t\tthis.graph.container = previousContainer;\n\t\tthis.graph.cellRenderer.redraw = redraw;\n\t\tview.canvas = canvas;\n\t\tview.backgroundPane = backgroundPane;\n\t\tview.drawPane = drawPane;\n\t\tview.overlayPane = overlayPane;\n\t\tview.translate = translate;\n\t\ttemp.destroy();\n\t\tview.setEventsEnabled(eventsEnabled);\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state. This returns null.\n */\nmxPrintPreview.prototype.getLinkForCellState = function(state)\n{\n\treturn this.graph.getLinkForCell(state.cell);\n};\n\n/**\n * Function: insertBackgroundImage\n * \n * Inserts the background image into the given div.\n */\nmxPrintPreview.prototype.insertBackgroundImage = function(div, dx, dy)\n{\n\tvar bg = this.graph.backgroundImage;\n\t\n\tif (bg != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.style.position = 'absolute';\n\t\timg.style.marginLeft = Math.round(dx * this.scale) + 'px';\n\t\timg.style.marginTop = Math.round(dy * this.scale) + 'px';\n\t\timg.setAttribute('width', Math.round(this.scale * bg.width));\n\t\timg.setAttribute('height', Math.round(this.scale * bg.height));\n\t\timg.src = bg.src;\n\t\t\n\t\tdiv.insertBefore(img, div.firstChild);\n\t}\n};\n\n/**\n * Function: getCoverPages\n * \n * Returns the pages to be added before the print output. This returns null.\n */\nmxPrintPreview.prototype.getCoverPages = function()\n{\n\treturn null;\n};\n\n/**\n * Function: getAppendices\n * \n * Returns the pages to be added after the print output. This returns null.\n */\nmxPrintPreview.prototype.getAppendices = function()\n{\n\treturn null;\n};\n\n/**\n * Function: print\n * \n * Opens the print preview and shows the print dialog.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n */\nmxPrintPreview.prototype.print = function(css)\n{\n\tvar wnd = this.open(css);\n\t\n\tif (wnd != null)\n\t{\n\t\twnd.print();\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the print preview window.\n */\nmxPrintPreview.prototype.close = function()\n{\n\tif (this.wnd != null)\n\t{\n\t\tthis.wnd.close();\n\t\tthis.wnd = null;\n\t}\n};\n\n__mxOutput.mxPrintPreview = typeof mxPrintPreview !== 'undefined' ? mxPrintPreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheet\n *\n * Defines the appearance of the cells in a graph. See <putCellStyle> for an\n * example of creating a new cell style. It is recommended to use objects, not\n * arrays for holding cell styles. Existing styles can be cloned using\n * <mxUtils.clone> and turned into a string for debugging using\n * <mxUtils.toString>.\n *\n * Default Styles:\n *\n * The stylesheet contains two built-in styles, which are used if no style is\n * defined for a cell:\n *\n *   defaultVertex - Default style for vertices\n *   defaultEdge - Default style for edges\n *\n * Example:\n *\n * (code)\n * var vertexStyle = stylesheet.getDefaultVertexStyle();\n * vertexStyle[mxConstants.STYLE_ROUNDED] = true;\n * var edgeStyle = stylesheet.getDefaultEdgeStyle();\n * edgeStyle[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\n * (end)\n *\n * Modifies the built-in default styles.\n *\n * To avoid the default style for a cell, add a leading semicolon\n * to the style definition, eg.\n *\n * (code)\n * ;shadow=1\n * (end)\n *\n * Removing keys:\n *\n * For removing a key in a cell style of the form [stylename;|key=value;] the\n * special value none can be used, eg. highlight;fillColor=none\n *\n * See also the helper methods in mxUtils to modify strings of this format,\n * namely <mxUtils.setStyle>, <mxUtils.indexOfStylename>,\n * <mxUtils.addStylename>, <mxUtils.removeStylename>,\n * <mxUtils.removeAllStylenames> and <mxUtils.setStyleFlag>.\n *\n * Constructor: mxStylesheet\n *\n * Constructs a new stylesheet and assigns default styles.\n */\nfunction mxStylesheet()\n{\n\tthis.styles = new Object();\n\n\tthis.putDefaultVertexStyle(this.createDefaultVertexStyle());\n\tthis.putDefaultEdgeStyle(this.createDefaultEdgeStyle());\n};\n\n/**\n * Function: styles\n *\n * Maps from names to cell styles. Each cell style is a map of key,\n * value pairs.\n */\nmxStylesheet.prototype.styles;\n\n/**\n * Function: createDefaultVertexStyle\n *\n * Creates and returns the default vertex style.\n */\nmxStylesheet.prototype.createDefaultVertexStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n\tstyle[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_FILLCOLOR] = '#C3D9FF';\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#774400';\n\n\treturn style;\n};\n\n/**\n * Function: createDefaultEdgeStyle\n *\n * Creates and returns the default edge style.\n */\nmxStylesheet.prototype.createDefaultEdgeStyle = function()\n{\n\tvar style = new Object();\n\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_CONNECTOR;\n\tstyle[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#446299';\n\n\treturn style;\n};\n\n/**\n * Function: putDefaultVertexStyle\n *\n * Sets the default style for vertices using defaultVertex as the\n * stylename.\n *\n * Parameters:\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putDefaultVertexStyle = function(style)\n{\n\tthis.putCellStyle('defaultVertex', style);\n};\n\n/**\n * Function: putDefaultEdgeStyle\n *\n * Sets the default style for edges using defaultEdge as the stylename.\n */\nmxStylesheet.prototype.putDefaultEdgeStyle = function(style)\n{\n\tthis.putCellStyle('defaultEdge', style);\n};\n\n/**\n * Function: getDefaultVertexStyle\n *\n * Returns the default style for vertices.\n */\nmxStylesheet.prototype.getDefaultVertexStyle = function()\n{\n\treturn this.styles['defaultVertex'];\n};\n\n/**\n * Function: getDefaultEdgeStyle\n *\n * Sets the default style for edges.\n */\nmxStylesheet.prototype.getDefaultEdgeStyle = function()\n{\n\treturn this.styles['defaultEdge'];\n};\n\n/**\n * Function: putCellStyle\n *\n * Stores the given map of key, value pairs under the given name in\n * <styles>.\n *\n * Example:\n *\n * The following example adds a new style called 'rounded' into an\n * existing stylesheet:\n *\n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n * style[mxConstants.STYLE_ROUNDED] = true;\n * graph.getStylesheet().putCellStyle('rounded', style);\n * (end)\n *\n * In the above example, the new style is an object. The possible keys of\n * the object are all the constants in <mxConstants> that start with STYLE\n * and the values are either JavaScript objects, such as\n * <mxPerimeter.RightAngleRectanglePerimeter> (which is in fact a function)\n * or expressions, such as true. Note that not all keys will be\n * interpreted by all shapes (eg. the line shape ignores the fill color).\n * The final call to this method associates the style with a name in the\n * stylesheet. The style is used in a cell with the following code:\n *\n * (code)\n * model.setStyle(cell, 'rounded');\n * (end)\n *\n * Parameters:\n *\n * name - Name for the style to be stored.\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putCellStyle = function(name, style)\n{\n\tthis.styles[name] = style;\n};\n\n/**\n * Function: getCellStyle\n *\n * Returns the cell style for the specified stylename or the given\n * defaultStyle if no style can be found for the given stylename.\n *\n * Parameters:\n *\n * name - String of the form [(stylename|key=value);] that represents the\n * style.\n * defaultStyle - Default style to be returned if no style can be found.\n */\nmxStylesheet.prototype.getCellStyle = function(name, defaultStyle)\n{\n\tvar style = defaultStyle;\n\n\tif (name != null && name.length > 0)\n\t{\n\t\tvar pairs = name.split(';');\n\n\t\tif (style != null &&\n\t\t\tname.charAt(0) != ';')\n\t\t{\n\t\t\tstyle = mxUtils.clone(style);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle = new Object();\n\t\t}\n\n\t\t// Parses each key, value pair into the existing style\n\t \tfor (var i = 0; i < pairs.length; i++)\n\t \t{\n\t \t\tvar tmp = pairs[i];\n\t \t\tvar pos = tmp.indexOf('=');\n\n\t \t\tif (pos >= 0)\n\t \t\t{\n\t\t \t\tvar key = tmp.substring(0, pos);\n\t\t \t\tvar value = tmp.substring(pos + 1);\n\n\t\t \t\tif (value == mxConstants.NONE)\n\t\t \t\t{\n\t\t \t\t\tdelete style[key];\n\t\t \t\t}\n\t\t \t\telse if (mxUtils.isNumeric(value))\n\t\t \t\t{\n\t\t \t\t\tstyle[key] = parseFloat(value);\n\t\t \t\t}\n\t\t \t\telse\n\t\t \t\t{\n\t\t\t \t\tstyle[key] = value;\n\t\t \t\t}\n\t\t\t}\n\t \t\telse\n\t \t\t{\n\t \t\t\t// Merges the entries from a named style\n\t\t\t\tvar tmpStyle = this.styles[tmp];\n\n\t\t\t\tif (tmpStyle != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var key in tmpStyle)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle[key] = tmpStyle[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t \t\t}\n\t\t}\n\t}\n\n\treturn style;\n};\n\n__mxOutput.mxStylesheet = typeof mxStylesheet !== 'undefined' ? mxStylesheet : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellState\n * \n * Represents the current state of a cell in a given <mxGraphView>.\n * \n * For edges, the edge label position is stored in <absoluteOffset>.\n * \n * The size for oversize labels can be retrieved using the boundingBox property\n * of the <text> field as shown below.\n * \n * (code)\n * var bbox = (state.text != null) ? state.text.boundingBox : null;\n * (end)\n * \n * Constructor: mxCellState\n * \n * Constructs a new object that represents the current state of the given\n * cell in the specified view.\n * \n * Parameters:\n * \n * view - <mxGraphView> that contains the state.\n * cell - <mxCell> that this state represents.\n * style - Array of key, value pairs that constitute the style.\n */\nfunction mxCellState(view, cell, style)\n{\n\tthis.view = view;\n\tthis.cell = cell;\n\tthis.style = (style != null) ? style : {};\n\t\n\tthis.origin = new mxPoint();\n\tthis.absoluteOffset = new mxPoint();\n};\n\n/**\n * Extends mxRectangle.\n */\nmxCellState.prototype = new mxRectangle();\nmxCellState.prototype.constructor = mxCellState;\n\n/**\n * Variable: view\n * \n * Reference to the enclosing <mxGraphView>.\n */\nmxCellState.prototype.view = null;\n\n/**\n * Variable: cell\n *\n * Reference to the <mxCell> that is represented by this state.\n */\nmxCellState.prototype.cell = null;\n\n/**\n * Variable: style\n * \n * Contains an array of key, value pairs that represent the style of the\n * cell.\n */\nmxCellState.prototype.style = null;\n\n/**\n * Variable: invalidStyle\n * \n * Specifies if the style is invalid. Default is false.\n */\nmxCellState.prototype.invalidStyle = false;\n\n/**\n * Variable: invalid\n * \n * Specifies if the state is invalid. Default is true.\n */\nmxCellState.prototype.invalid = true;\n\n/**\n * Variable: origin\n *\n * <mxPoint> that holds the origin for all child cells. Default is a new\n * empty <mxPoint>.\n */\nmxCellState.prototype.origin = null;\n\n/**\n * Variable: absolutePoints\n * \n * Holds an array of <mxPoints> that represent the absolute points of an\n * edge.\n */\nmxCellState.prototype.absolutePoints = null;\n\n/**\n * Variable: absoluteOffset\n *\n * <mxPoint> that holds the absolute offset. For edges, this is the\n * absolute coordinates of the label position. For vertices, this is the\n * offset of the label relative to the top, left corner of the vertex. \n */\nmxCellState.prototype.absoluteOffset = null;\n\n/**\n * Variable: visibleSourceState\n * \n * Caches the visible source terminal state.\n */\nmxCellState.prototype.visibleSourceState = null;\n\n/**\n * Variable: visibleTargetState\n * \n * Caches the visible target terminal state.\n */\nmxCellState.prototype.visibleTargetState = null;\n\n/**\n * Variable: terminalDistance\n * \n * Caches the distance between the end points for an edge.\n */\nmxCellState.prototype.terminalDistance = 0;\n\n/**\n * Variable: length\n *\n * Caches the length of an edge.\n */\nmxCellState.prototype.length = 0;\n\n/**\n * Variable: segments\n * \n * Array of numbers that represent the cached length of each segment of the\n * edge.\n */\nmxCellState.prototype.segments = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the cell graphically.\n */\nmxCellState.prototype.shape = null;\n\n/**\n * Variable: text\n * \n * Holds the <mxText> that represents the label of the cell. Thi smay be\n * null if the cell has no label.\n */\nmxCellState.prototype.text = null;\n\n/**\n * Variable: unscaledWidth\n * \n * Holds the unscaled width of the state.\n */\nmxCellState.prototype.unscaledWidth = null;\n\n/**\n * Variable: unscaledHeight\n * \n * Holds the unscaled height of the state.\n */\nmxCellState.prototype.unscaledHeight = null;\n\n/**\n * Function: getPerimeterBounds\n * \n * Returns the <mxRectangle> that should be used as the perimeter of the\n * cell.\n * \n * Parameters:\n * \n * border - Optional border to be added around the perimeter bounds.\n * bounds - Optional <mxRectangle> to be used as the initial bounds.\n */\nmxCellState.prototype.getPerimeterBounds = function(border, bounds)\n{\n\tborder = border || 0;\n\tbounds = (bounds != null) ? bounds : new mxRectangle(this.x, this.y, this.width, this.height);\n\t\n\tif (this.shape != null && this.shape.stencil != null && this.shape.stencil.aspect == 'fixed')\n\t{\n\t\tvar aspect = this.shape.stencil.computeAspect(this.style, bounds.x, bounds.y, bounds.width, bounds.height);\n\t\t\n\t\tbounds.x = aspect.x;\n\t\tbounds.y = aspect.y;\n\t\tbounds.width = this.shape.stencil.w0 * aspect.width;\n\t\tbounds.height = this.shape.stencil.h0 * aspect.height;\n\t}\n\t\n\tif (border != 0)\n\t{\n\t\tbounds.grow(border);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: setAbsoluteTerminalPoint\n * \n * Sets the first or last point in <absolutePoints> depending on isSource.\n * \n * Parameters:\n * \n * point - <mxPoint> that represents the terminal point.\n * isSource - Boolean that specifies if the first or last point should\n * be assigned.\n */\nmxCellState.prototype.setAbsoluteTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t}\n\t\t\n\t\tif (this.absolutePoints.length == 0)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[0] = point;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t\tthis.absolutePoints.push(null);\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse if (this.absolutePoints.length == 1)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[this.absolutePoints.length - 1] = point;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the given cursor on the shape and text shape.\n */\nmxCellState.prototype.setCursor = function(cursor)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.setCursor(cursor);\n\t}\n\t\n\tif (this.text != null)\n\t{\n\t\tthis.text.setCursor(cursor);\n\t}\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Returns the visible source or target terminal cell.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target cell should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminal = function(source)\n{\n\tvar tmp = this.getVisibleTerminalState(source);\n\t\n\treturn (tmp != null) ? tmp.cell : null;\n};\n\n/**\n * Function: getVisibleTerminalState\n * \n * Returns the visible source or target terminal state.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target state should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminalState = function(source)\n{\n\treturn (source) ? this.visibleSourceState : this.visibleTargetState;\n};\n\n/**\n * Function: setVisibleTerminalState\n * \n * Sets the visible source or target terminal state.\n * \n * Parameters:\n * \n * terminalState - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the source or target state should be set.\n */\nmxCellState.prototype.setVisibleTerminalState = function(terminalState, source)\n{\n\tif (source)\n\t{\n\t\tthis.visibleSourceState = terminalState;\n\t}\n\telse\n\t{\n\t\tthis.visibleTargetState = terminalState;\n\t}\n};\n\n/**\n * Function: getCellBounds\n * \n * Returns the unscaled, untranslated bounds.\n */\nmxCellState.prototype.getCellBounds = function()\n{\n\treturn this.cellBounds;\n};\n\n/**\n * Function: getPaintBounds\n * \n * Returns the unscaled, untranslated paint bounds. This is the same as\n * <getCellBounds> but with a 90 degree rotation if the shape's\n * isPaintBoundsInverted returns true.\n */\nmxCellState.prototype.getPaintBounds = function()\n{\n\treturn this.paintBounds;\n};\n\n/**\n * Function: updateCachedBounds\n * \n * Updates the cellBounds and paintBounds.\n */\nmxCellState.prototype.updateCachedBounds = function()\n{\n\tvar tr = this.view.translate;\n\tvar s = this.view.scale;\n\tthis.cellBounds = new mxRectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n\tthis.paintBounds = mxRectangle.fromRectangle(this.cellBounds);\n\t\n\tif (this.shape != null && this.shape.isPaintBoundsInverted())\n\t{\n\t\tthis.paintBounds.rotate90();\n\t}\n};\n\n/**\n * Destructor: setState\n * \n * Copies all fields from the given state to this state.\n */\nmxCellState.prototype.setState = function(state)\n{\n\tthis.view = state.view;\n\tthis.cell = state.cell;\n\tthis.style = state.style;\n\tthis.absolutePoints = state.absolutePoints;\n\tthis.origin = state.origin;\n\tthis.absoluteOffset = state.absoluteOffset;\n\tthis.boundingBox = state.boundingBox;\n\tthis.terminalDistance = state.terminalDistance;\n\tthis.segments = state.segments;\n\tthis.length = state.length;\n\tthis.x = state.x;\n\tthis.y = state.y;\n\tthis.width = state.width;\n\tthis.height = state.height;\n\tthis.unscaledWidth = state.unscaledWidth;\n\tthis.unscaledHeight = state.unscaledHeight;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxCellState.prototype.clone = function()\n{\n \tvar clone = new mxCellState(this.view, this.cell, this.style);\n\n\t// Clones the absolute points\n\tif (this.absolutePoints != null)\n\t{\n\t\tclone.absolutePoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.absolutePoints.length; i++)\n\t\t{\n\t\t\tclone.absolutePoints[i] = this.absolutePoints[i].clone();\n\t\t}\n\t}\n\n\tif (this.origin != null)\n\t{\n\t\tclone.origin = this.origin.clone();\n\t}\n\n\tif (this.absoluteOffset != null)\n\t{\n\t\tclone.absoluteOffset = this.absoluteOffset.clone();\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tclone.boundingBox = this.boundingBox.clone();\n\t}\n\n\tclone.terminalDistance = this.terminalDistance;\n\tclone.segments = this.segments;\n\tclone.length = this.length;\n\tclone.x = this.x;\n\tclone.y = this.y;\n\tclone.width = this.width;\n\tclone.height = this.height;\n\tclone.unscaledWidth = this.unscaledWidth;\n\tclone.unscaledHeight = this.unscaledHeight;\n\t\n\treturn clone;\n};\n\n/**\n * Destructor: destroy\n * \n * Destroys the state and all associated resources.\n */\nmxCellState.prototype.destroy = function()\n{\n\tthis.view.graph.cellRenderer.destroy(this);\n};\n\n__mxOutput.mxCellState = typeof mxCellState !== 'undefined' ? mxCellState : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphSelectionModel\n *\n * Implements the selection model for a graph. Here is a listener that handles\n * all removed selection cells.\n * \n * (code)\n * graph.getSelectionModel().addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var cells = evt.getProperty('added');\n *   \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     // Handle cells[i]...\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the selection was changed in <changeSelection>. The\n * <code>edit</code> property contains the <mxUndoableEdit> which contains the\n * <mxSelectionChange>.\n * \n * Event: mxEvent.CHANGE\n * \n * Fires after the selection changes by executing an <mxSelectionChange>. The\n * <code>added</code> and <code>removed</code> properties contain arrays of\n * cells that have been added to or removed from the selection, respectively.\n * The names are inverted due to historic reasons. This cannot be changed.\n * \n * Constructor: mxGraphSelectionModel\n *\n * Constructs a new graph selection model for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphSelectionModel(graph)\n{\n\tthis.graph = graph;\n\tthis.cells = [];\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphSelectionModel.prototype = new mxEventSource();\nmxGraphSelectionModel.prototype.constructor = mxGraphSelectionModel;\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphSelectionModel.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Variable: updatingSelectionResource\n *\n * Specifies the resource key for the status message while the selection is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingSelection'.\n */\nmxGraphSelectionModel.prototype.updatingSelectionResource = (mxClient.language != 'none') ? 'updatingSelection' : '';\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphSelectionModel.prototype.graph = null;\n\n/**\n * Variable: singleSelection\n *\n * Specifies if only one selected item at a time is allowed.\n * Default is false.\n */\nmxGraphSelectionModel.prototype.singleSelection = false;\n\n/**\n * Function: isSingleSelection\n *\n * Returns <singleSelection> as a boolean.\n */\nmxGraphSelectionModel.prototype.isSingleSelection = function()\n{\n\treturn this.singleSelection;\n};\n\n/**\n * Function: setSingleSelection\n *\n * Sets the <singleSelection> flag.\n * \n * Parameters:\n * \n * singleSelection - Boolean that specifies the new value for\n * <singleSelection>.\n */\nmxGraphSelectionModel.prototype.setSingleSelection = function(singleSelection)\n{\n\tthis.singleSelection = singleSelection;\n};\n\n/**\n * Function: isSelected\n *\n * Returns true if the given <mxCell> is selected.\n */\nmxGraphSelectionModel.prototype.isSelected = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn mxUtils.indexOf(this.cells, cell) >= 0;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isEmpty\n *\n * Returns true if no cells are currently selected.\n */\nmxGraphSelectionModel.prototype.isEmpty = function()\n{\n\treturn this.cells.length == 0;\n};\n\n/**\n * Function: clear\n *\n * Clears the selection and fires a <change> event if the selection was not\n * empty.\n */\nmxGraphSelectionModel.prototype.clear = function()\n{\n\tthis.changeSelection(null, this.cells);\n};\n\n/**\n * Function: setCell\n *\n * Selects the specified <mxCell> using <setCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraphSelectionModel.prototype.setCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.setCells([cell]);\n\t}\n};\n\n/**\n * Function: setCells\n *\n * Selects the given array of <mxCells> and fires a <change> event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraphSelectionModel.prototype.setCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\t\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, this.cells);\n\t}\n};\n\n/**\n * Function: getFirstSelectableCell\n *\n * Returns the first selectable cell in the given array of cells.\n */\nmxGraphSelectionModel.prototype.getFirstSelectableCell = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\treturn cells[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: addCell\n * \n * Adds the given <mxCell> to the selection and fires a <select> event.\n * \n * Parameters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.addCells([cell]);\n\t}\n};\n\n/**\n * Function: addCells\n * \n * Adds the given array of <mxCells> to the selection and fires a <select>\n * event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar remove = null;\n\t\t\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tremove = this.cells;\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (!this.isSelected(cells[i]) &&\n\t\t\t\tthis.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, remove);\n\t}\n};\n\n/**\n * Function: removeCell\n *\n * Removes the specified <mxCell> from the selection and fires a <select>\n * event for the remaining cells.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.removeCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.removeCells([cell]);\n\t}\n};\n\n/**\n * Function: removeCells\n */\nmxGraphSelectionModel.prototype.removeCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSelected(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.changeSelection(null, tmp);\t\n\t}\n};\n\n/**\n * Function: changeSelection\n *\n * Adds/removes the specified arrays of <mxCell> to/from the selection.\n * \n * Parameters:\n * \n * added - Array of <mxCell> to add to the selection.\n * remove - Array of <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.changeSelection = function(added, removed)\n{\n\tif ((added != null &&\n\t\tadded.length > 0 &&\n\t\tadded[0] != null) ||\n\t\t(removed != null &&\n\t\tremoved.length > 0 &&\n\t\tremoved[0] != null))\n\t{\n\t\tvar change = new mxSelectionChange(this, added, removed);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, false);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t}\n};\n\n/**\n * Function: cellAdded\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n * \n * Paramters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null &&\n\t\t!this.isSelected(cell))\n\t{\n\t\tthis.cells.push(cell);\n\t}\n};\n\n/**\n * Function: cellRemoved\n *\n * Inner callback to remove the specified <mxCell> from the selection. No\n * event is fired in this implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar index = mxUtils.indexOf(this.cells, cell);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tthis.cells.splice(index, 1);\n\t\t}\n\t}\n};\n\n/**\n * Class: mxSelectionChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxSelectionChange(selectionModel, added, removed)\n{\n\tthis.selectionModel = selectionModel;\n\tthis.added = (added != null) ? added.slice() : null;\n\tthis.removed = (removed != null) ? removed.slice() : null;\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxSelectionChange.prototype.execute = function()\n{\n\tvar t0 = mxLog.enter('mxSelectionChange.execute');\n\twindow.status = mxResources.get(\n\t\tthis.selectionModel.updatingSelectionResource) ||\n\t\tthis.selectionModel.updatingSelectionResource;\n\n\tif (this.removed != null)\n\t{\n\t\tfor (var i = 0; i < this.removed.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellRemoved(this.removed[i]);\n\t\t}\n\t}\n\n\tif (this.added != null)\n\t{\n\t\tfor (var i = 0; i < this.added.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellAdded(this.added[i]);\n\t\t}\n\t}\n\t\n\tvar tmp = this.added;\n\tthis.added = this.removed;\n\tthis.removed = tmp;\n\n\twindow.status = mxResources.get(this.selectionModel.doneResource) ||\n\t\tthis.selectionModel.doneResource;\n\tmxLog.leave('mxSelectionChange.execute', t0);\n\t\n\tthis.selectionModel.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'added', this.added, 'removed', this.removed));\n};\n\n__mxOutput.mxGraphSelectionModel = typeof mxGraphSelectionModel !== 'undefined' ? mxGraphSelectionModel : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellEditor\n *\n * In-place editor for the graph. To control this editor, use\n * <mxGraph.invokesStopCellEditing>, <mxGraph.enterStopsCellEditing> and\n * <mxGraph.escapeEnabled>. If <mxGraph.enterStopsCellEditing> is true then\n * ctrl-enter or shift-enter can be used to create a linefeed. The F2 and\n * escape keys can always be used to stop editing.\n * \n * To customize the location of the textbox in the graph, override\n * <getEditorBounds> as follows:\n * \n * (code)\n * graph.cellEditor.getEditorBounds = function(state)\n * {\n *   var result = mxCellEditor.prototype.getEditorBounds.apply(this, arguments);\n *   \n *   if (this.graph.getModel().isEdge(state.cell))\n *   {\n *     result.x = state.getCenterX() - result.width / 2;\n *     result.y = state.getCenterY() - result.height / 2;\n *   }\n *   \n *   return result;\n * };\n * (end)\n * \n * Note that this hook is only called if <autoSize> is false. If <autoSize> is true,\n * then <mxShape.getLabelBounds> is used to compute the current bounds of the textbox.\n * \n * The textarea uses the mxCellEditor CSS class. You can modify this class in\n * your custom CSS. Note: You should modify the CSS after loading the client\n * in the page.\n *\n * Example:\n * \n * To only allow numeric input in the in-place editor, use the following code.\n *\n * (code)\n * var text = graph.cellEditor.textarea;\n * \n * mxEvent.addListener(text, 'keydown', function (evt)\n * {\n *   if (!(evt.keyCode >= 48 && evt.keyCode <= 57) &&\n *       !(evt.keyCode >= 96 && evt.keyCode <= 105))\n *   {\n *     mxEvent.consume(evt);\n *   }\n * }); \n * (end)\n * \n * Placeholder:\n * \n * To implement a placeholder for cells without a label, use the\n * <emptyLabelText> variable.\n * \n * Resize in Chrome:\n * \n * Resize of the textarea is disabled by default. If you want to enable\n * this feature extend <init> and set this.textarea.style.resize = ''.\n * \n * To start editing on a key press event, the container of the graph\n * should have focus or a focusable parent should be used to add the\n * key press handler as follows.\n * \n * (code)\n * mxEvent.addListener(graph.container, 'keypress', mxUtils.bind(this, function(evt)\n * {\n *   if (!graph.isEditing() && !graph.isSelectionEmpty() && evt.which !== 0 &&\n *       !mxEvent.isAltDown(evt) && !mxEvent.isControlDown(evt) && !mxEvent.isMetaDown(evt))\n *   {\n *     graph.startEditing();\n *     \n *     if (mxClient.IS_FF)\n *     {\n *       graph.cellEditor.textarea.value = String.fromCharCode(evt.which);\n *     }\n *   }\n * }));\n * (end)\n * \n * To allow focus for a DIV, and hence to receive key press events, some browsers\n * require it to have a valid tabindex attribute. In this case the following\n * code may be used to keep the container focused.\n * \n * (code)\n * var graphFireMouseEvent = graph.fireMouseEvent;\n * graph.fireMouseEvent = function(evtName, me, sender)\n * {\n *   if (evtName == mxEvent.MOUSE_DOWN)\n *   {\n *     this.container.focus();\n *   }\n *   \n *   graphFireMouseEvent.apply(this, arguments);\n * };\n * (end)\n *\n * Constructor: mxCellEditor\n *\n * Constructs a new in-place editor for the specified graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellEditor(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Stops editing after zoom changes\n\tthis.zoomHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (this.graph.isEditing())\n\t\t{\n\t\t\tthis.resize();\n\t\t}\n\t});\n\t\n\tthis.graph.view.addListener(mxEvent.SCALE, this.zoomHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.zoomHandler);\n\t\n\t// Adds handling of deleted cells while editing\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.editingCell != null && this.graph.getView().getState(this.editingCell) == null)\n\t\t{\n\t\t\tthis.stopEditing(true);\n\t\t}\n\t});\n\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellEditor.prototype.graph = null;\n\n/**\n * Variable: textarea\n *\n * Holds the DIV that is used for text editing. Note that this may be null before the first\n * edit. Instantiated in <init>.\n */\nmxCellEditor.prototype.textarea = null;\n\n/**\n * Variable: editingCell\n * \n * Reference to the <mxCell> that is currently being edited.\n */\nmxCellEditor.prototype.editingCell = null;\n\n/**\n * Variable: trigger\n * \n * Reference to the event that was used to start editing.\n */\nmxCellEditor.prototype.trigger = null;\n\n/**\n * Variable: modified\n * \n * Specifies if the label has been modified.\n */\nmxCellEditor.prototype.modified = false;\n\n/**\n * Variable: autoSize\n * \n * Specifies if the textarea should be resized while the text is being edited.\n * Default is true.\n */\nmxCellEditor.prototype.autoSize = true;\n\n/**\n * Variable: selectText\n * \n * Specifies if the text should be selected when editing starts. Default is\n * true.\n */\nmxCellEditor.prototype.selectText = true;\n\n/**\n * Variable: emptyLabelText\n * \n * Text to be displayed for empty labels. Default is '' or '<br>' in Firefox as\n * a workaround for the missing cursor bug for empty content editable. This can\n * be set to eg. \"[Type Here]\" to easier visualize editing of empty labels. The\n * value is only displayed before the first keystroke and is never used as the\n * actual editing value.\n */\nmxCellEditor.prototype.emptyLabelText = (mxClient.IS_FF) ? '<br>' : '';\n\n/**\n * Variable: escapeCancelsEditing\n * \n * If true, pressing the escape key will stop editing and not accept the new\n * value. Change this to false to accept the new value on escape, and cancel\n * editing on Shift+Escape instead. Default is true.\n */\nmxCellEditor.prototype.escapeCancelsEditing = true;\n\n/**\n * Variable: textNode\n * \n * Reference to the label DOM node that has been hidden.\n */\nmxCellEditor.prototype.textNode = '';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the textarea. Default is 5.\n */\nmxCellEditor.prototype.zIndex = 5;\n\n/**\n * Variable: minResize\n * \n * Defines the minimum width and height to be used in <resize>. Default is 0x20px.\n */\nmxCellEditor.prototype.minResize = new mxRectangle(0, 20);\n\n/**\n * Variable: wordWrapPadding\n * \n * Correction factor for word wrapping width. Default is 2 in quirks, 0 in IE\n * 11 and 1 in all other browsers and modes.\n */\nmxCellEditor.prototype.wordWrapPadding = (mxClient.IS_QUIRKS) ? 2 : (!mxClient.IS_IE11) ? 1 : 0;\n\n/**\n * Variable: blurEnabled\n *\n * If <focusLost> should be called if <textarea> loses the focus. Default is false.\n */\nmxCellEditor.prototype.blurEnabled = false;\n\n/**\n * Variable: initialValue\n * \n * Holds the initial editing value to check if the current value was modified.\n */\nmxCellEditor.prototype.initialValue = null;\n\n/**\n * Variable: align\n * \n * Holds the current temporary horizontal alignment for the cell style. If this\n * is modified then the current text alignment is changed and the cell style is\n * updated when the value is applied.\n */\nmxCellEditor.prototype.align = null;\n\n/**\n * Function: init\n *\n * Creates the <textarea> and installs the event listeners. The key handler\n * updates the <modified> state.\n */\nmxCellEditor.prototype.init = function ()\n{\n\tthis.textarea = document.createElement('div');\n\tthis.textarea.className = 'mxCellEditor mxPlainTextEditor';\n\tthis.textarea.contentEditable = true;\n\t\n\t// Workaround for selection outside of DIV if height is 0\n\tif (mxClient.IS_GC)\n\t{\n\t\tthis.textarea.style.minHeight = '1em';\n\t}\n\n\tthis.textarea.style.position = ((this.isLegacyEditor())) ? 'absolute' : 'relative';\n\tthis.installListeners(this.textarea);\n};\n\n/**\n * Function: applyValue\n * \n * Called in <stopEditing> if cancel is false to invoke <mxGraph.labelChanged>.\n */\nmxCellEditor.prototype.applyValue = function(state, value)\n{\n\tthis.graph.labelChanged(state.cell, value, this.trigger);\n};\n\n/**\n * Function: setAlign\n * \n * Sets the temporary horizontal alignment for the current editing session.\n */\nmxCellEditor.prototype.setAlign = function (align)\n{\n\tif (this.textarea != null)\n\t{\n\t\tthis.textarea.style.textAlign = align;\n\t}\n\t\n\tthis.align = align;\n\tthis.resize();\n};\n\n/**\n * Function: getInitialValue\n * \n * Gets the initial editing value for the given cell.\n */\nmxCellEditor.prototype.getInitialValue = function(state, trigger)\n{\n\tvar result = mxUtils.htmlEntities(this.graph.getEditingValue(state.cell, trigger), false);\n\t\n    // Workaround for trailing line breaks being ignored in the editor\n\tif (!mxClient.IS_QUIRKS && document.documentMode != 8 && document.documentMode != 9 &&\n\t\tdocument.documentMode != 10)\n\t{\n\t\tresult = mxUtils.replaceTrailingNewlines(result, '<div><br></div>');\n\t}\n    \n    return result.replace(/\\n/g, '<br>');\n};\n\n/**\n * Function: getCurrentValue\n * \n * Returns the current editing value.\n */\nmxCellEditor.prototype.getCurrentValue = function(state)\n{\n\treturn mxUtils.extractTextWithWhitespace(this.textarea.childNodes);\n};\n\n/**\n * Function: isCancelEditingKeyEvent\n * \n * Returns true if <escapeCancelsEditing> is true and shift, control and meta\n * are not pressed.\n */\nmxCellEditor.prototype.isCancelEditingKeyEvent = function(evt)\n{\n\treturn this.escapeCancelsEditing || mxEvent.isShiftDown(evt) || mxEvent.isControlDown(evt) || mxEvent.isMetaDown(evt);\n};\n\n/**\n * Function: installListeners\n * \n * Installs listeners for focus, change and standard key event handling.\n */\nmxCellEditor.prototype.installListeners = function(elt)\n{\n\t// Applies value if text is dragged\n\t// LATER: Gesture mouse events ignored for starting move\n\tmxEvent.addListener(elt, 'dragstart', mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.stopEditing(false);\n\t\tmxEvent.consume(evt);\n\t}));\n\n\t// Applies value if focus is lost\n\tmxEvent.addListener(elt, 'blur', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.blurEnabled)\n\t\t{\n\t\t\tthis.focusLost(evt);\n\t\t}\n\t}));\n\n\t// Updates modified state and handles placeholder text\n\tmxEvent.addListener(elt, 'keydown', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt))\n\t\t{\n\t\t\tif (this.isStopEditingEvent(evt))\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(false);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t\telse if (evt.keyCode == 27 /* Escape */)\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(this.isCancelEditingKeyEvent(evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}));\n\n\t// Keypress only fires if printable key was pressed and handles removing the empty placeholder\n\tvar keypressHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Clears the initial empty label on the first keystroke\n\t\t\t// and workaround for FF which fires keypress for delete and backspace\n\t\t\tif (this.clearOnChange && elt.innerHTML == this.getEmptyLabelText() &&\n\t\t\t\t(!mxClient.IS_FF || (evt.keyCode != 8 /* Backspace */ && evt.keyCode != 46 /* Delete */)))\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t\telt.innerHTML = '';\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, 'keypress', keypressHandler);\n\tmxEvent.addListener(elt, 'paste', keypressHandler);\n\t\n\t// Handler for updating the empty label text value after a change\n\tvar keyupHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Uses an optional text value for sempty labels which is cleared\n\t\t\t// when the first keystroke appears. This makes it easier to see\n\t\t\t// that a label is being edited even if the label is empty.\n\t\t\t// In Safari and FF, an empty text is represented by <BR> which isn't enough to force a valid size\n\t\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t\t{\n\t\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\t\tthis.clearOnChange = this.textarea.innerHTML.length > 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keyup', keyupHandler);\n\tmxEvent.addListener(elt, 'cut', keyupHandler);\n\tmxEvent.addListener(elt, 'paste', keyupHandler);\n\n\t// Adds automatic resizing of the textbox while typing using input, keyup and/or DOM change events\n\tvar evtName = (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keydown';\n\t\n\tvar resizeHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null && this.autoSize && !mxEvent.isConsumed(evt))\n\t\t{\n\t\t\t// Asynchronous is needed for keydown and shows better results for input events overall\n\t\t\t// (ie non-blocking and cases where the offsetWidth/-Height was wrong at this time)\n\t\t\tif (this.resizeThread != null)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.resizeThread);\n\t\t\t}\n\t\t\t\n\t\t\tthis.resizeThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resizeThread = null;\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(elt, evtName, resizeHandler);\n\tmxEvent.addListener(window, 'resize', resizeHandler);\n\n\tif (document.documentMode >= 9)\n\t{\n\t\tmxEvent.addListener(elt, 'DOMNodeRemoved', resizeHandler);\n\t\tmxEvent.addListener(elt, 'DOMNodeInserted', resizeHandler);\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(elt, 'cut', resizeHandler);\n\t\tmxEvent.addListener(elt, 'paste', resizeHandler);\n\t}\n};\n\n/**\n * Function: isStopEditingEvent\n * \n * Returns true if the given keydown event should stop cell editing. This\n * returns true if F2 is pressed of if <mxGraph.enterStopsCellEditing> is true\n * and enter is pressed without control or shift.\n */\nmxCellEditor.prototype.isStopEditingEvent = function(evt)\n{\n\treturn evt.keyCode == 113 /* F2 */ || (this.graph.isEnterStopsCellEditing() &&\n\t\tevt.keyCode == 13 /* Enter */ && !mxEvent.isControlDown(evt) &&\n\t\t!mxEvent.isShiftDown(evt));\n};\n\n/**\n * Function: isEventSource\n * \n * Returns true if this editor is the source for the given native event.\n */\nmxCellEditor.prototype.isEventSource = function(evt)\n{\n\treturn mxEvent.getSource(evt) == this.textarea;\n};\n\n/**\n * Function: resize\n * \n * Returns <modified>.\n */\nmxCellEditor.prototype.resize = function()\n{\n\tvar state = this.graph.getView().getState(this.editingCell);\n\t\n\tif (state == null)\n\t{\n\t\tthis.stopEditing(true);\n\t}\n\telse if (this.textarea != null)\n\t{\n\t\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n \t\tvar scale = this.graph.getView().scale;\n \t\tvar m = null;\n\t\t\n\t\tif (!this.autoSize || (state.style[mxConstants.STYLE_OVERFLOW] == 'fill'))\n\t\t{\n\t\t\t// Specifies the bounds of the editor box\n\t\t\tthis.bounds = this.getEditorBounds(state);\n\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + 'px';\n\t\t\tthis.textarea.style.height = Math.round(this.bounds.height / scale) + 'px';\n\t\t\t\n\t\t\t// FIXME: Offset when scaled\n\t\t\tif (document.documentMode == 8 || mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.round(this.bounds.x) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.round(this.bounds.y) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x + 1)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y + 1)) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\t// Installs native word wrapping and avoids word wrap for empty label placeholder\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + this.wordWrapPadding + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t \t{\n\t \t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\tm = (state.text != null && this.align == null) ? state.text.margin : null;\n\t\t\t\n\t\t\tif (m == null)\n\t\t\t{\n\t\t\t\tm = mxUtils.getAlignmentAsPoint(this.align || mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER),\n\t\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE));\n\t\t\t}\n\t\t\t\n\t \t\tif (isEdge)\n\t\t\t{\n\t\t\t\tthis.bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y, 0, 0);\n\t\t\t\t\n\t\t\t\tif (lw != null)\n\t\t\t \t{\n\t\t\t\t\tvar tmp = (parseFloat(lw) + 2) * scale;\n\t\t\t\t\tthis.bounds.width = tmp;\n\t\t\t\t\tthis.bounds.x += m.x * tmp;\n\t\t\t \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar bds = mxRectangle.fromRectangle(state);\n\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\tbds = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(bds) : bds;\n\t\t\t \t\n\t\t\t \tif (lw != null)\n\t\t\t \t{\n\t\t\t \t\tbds.width = parseFloat(lw) * scale;\n\t\t\t \t}\n\t\t\t \t\n\t\t\t \tif (!state.view.graph.cellRenderer.legacySpacing || state.style[mxConstants.STYLE_OVERFLOW] != 'width')\n\t\t\t \t{\n\t\t\t\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 2) * scale;\n\t\t\t\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\t\t\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\t\t\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\t\t\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\t\t\t\t\n\t\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\t\tbds = new mxRectangle(bds.x + spacingLeft, bds.y + spacingTop,\n\t\t\t\t\t\tbds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (spacingLeft + spacingRight) : 0),\n\t\t\t\t\t\tbds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (spacingTop + spacingBottom) : 0));\n\t\t\t \t}\n\n\t\t\t\tthis.bounds = new mxRectangle(bds.x + state.absoluteOffset.x, bds.y + state.absoluteOffset.y, bds.width, bds.height);\n\t\t\t}\n\n\t\t\t// Needed for word wrap inside text blocks with oversize lines to match the final result where\n\t \t\t// the width of the longest line is used as the reference for text alignment in the cell\n\t \t\t// TODO: Fix word wrapping preview for edge labels in helloworld.html\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t \t\t// Forces automatic reflow if text is removed from an oversize label and normal word wrap\n\t\t\t\tvar tmp = Math.round(this.bounds.width / ((document.documentMode == 8) ? scale : scale)) + this.wordWrapPadding;\n\n\t\t\t\tif (this.textarea.style.position != 'relative')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = tmp + 'px';\n\t\t\t\t\t\n\t\t\t\t\tif (this.textarea.scrollWidth > tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.textarea.style.width = this.textarea.scrollWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.maxWidth = tmp + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// KNOWN: Trailing cursor in IE9 quirks mode is not visible\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\tthis.textarea.style.width = '';\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\t// Workaround for wrong measuring in IE8 standards\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tthis.textarea.style.zoom = '1';\n\t\t\t\tthis.textarea.style.height = 'auto';\n\t\t\t}\n\t\t\t\n\t\t\tvar ow = this.textarea.scrollWidth;\n\t\t\tvar oh = this.textarea.scrollHeight;\n\t\t\t\n\t\t\t// TODO: Update CSS width and height if smaller than minResize or remove minResize\n\t\t\t//if (this.minResize != null)\n\t\t\t//{\n\t\t\t//\tow = Math.max(ow, this.minResize.width);\n\t\t\t//\toh = Math.max(oh, this.minResize.height);\n\t\t\t//}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\t// LATER: Scaled wrapping and position is wrong in IE8\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil((this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2) / scale)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil((this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1) / scale)) + 'px';\n\t\t\t\t// Workaround for wrong event handling width and height\n\t\t\t\tthis.textarea.style.width = Math.round(ow * scale) + 'px';\n\t\t\t\tthis.textarea.style.height = Math.round(oh * scale) + 'px';\n\t\t\t}\n\t\t\telse if (mxClient.IS_QUIRKS)\n\t\t\t{\t\t\t\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil(this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil(this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1)) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x - m.x * (this.bounds.width - 2)) + 1) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y - m.y * (this.bounds.height - 4) + ((m.y == -1) ? 3 : 0)) + 1) + 'px';\n\t\t\t}\n\t \t}\n\n\t\tif (mxClient.IS_VML)\n\t\t{\n\t\t\tthis.textarea.style.zoom = scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transformOrigin', '0px 0px');\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transform',\n\t\t\t\t'scale(' + scale + ',' + scale + ')' + ((m == null) ? '' :\n\t\t\t\t' translate(' + (m.x * 100) + '%,' + (m.y * 100) + '%)'));\n\t\t}\n\t}\n};\n\n/**\n * Function: focusLost\n *\n * Called if the textarea has lost focus.\n */\nmxCellEditor.prototype.focusLost = function()\n{\n\tthis.stopEditing(!this.graph.isInvokesStopCellEditing());\n};\n\n/**\n * Function: getBackgroundColor\n * \n * Returns the background color for the in-place editor. This implementation\n * always returns null.\n */\nmxCellEditor.prototype.getBackgroundColor = function(state)\n{\n\treturn null;\n};\n\n/**\n * Function: isLegacyEditor\n * \n * Returns true if max-width is not supported or if the SVG root element in\n * in the graph does not have CSS position absolute. In these cases the text\n * editor must use CSS position absolute to avoid an offset but it will have\n * a less accurate line wrapping width during the text editing preview. This\n * implementation returns true for IE8- and quirks mode or if the CSS position\n * of the SVG element is not absolute.\n */\nmxCellEditor.prototype.isLegacyEditor = function()\n{\n\tif (mxClient.IS_VML)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tvar absoluteRoot = false;\n\t\t\n\t\tif (mxClient.IS_SVG)\n\t\t{\n\t\t\tvar root = this.graph.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\tvar css = mxUtils.getCurrentStyle(root);\n\t\t\t\t\n\t\t\t\tif (css != null)\n\t\t\t\t{\t\t\t\t\n\t\t\t\t\tabsoluteRoot = css.position == 'absolute';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn !absoluteRoot;\n\t}\n};\n\n/**\n * Function: startEditing\n *\n * Starts the editor for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to start editing.\n * trigger - Optional mouse event that triggered the editor.\n */\nmxCellEditor.prototype.startEditing = function(cell, trigger)\n{\n\tthis.stopEditing(true);\n\tthis.align = null;\n\t\n\t// Creates new textarea instance\n\tif (this.textarea == null)\n\t{\n\t\tthis.init();\n\t}\n\t\n\tif (this.graph.tooltipHandler != null)\n\t{\n\t\tthis.graph.tooltipHandler.hideTooltip();\n\t}\n\t\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\t// Configures the style of the in-place editor\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar size = mxUtils.getValue(state.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n\t\tvar family = mxUtils.getValue(state.style, mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY);\n\t\tvar color = mxUtils.getValue(state.style, mxConstants.STYLE_FONTCOLOR, 'black');\n\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_LEFT);\n\t\tvar bold = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_BOLD) == mxConstants.FONT_BOLD;\n\t\tvar italic = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC;\n\t\tvar txtDecor = [];\n\t\t\n\t\tif ((mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\ttxtDecor.push('underline');\n\t\t}\n\t\t\n\t\tif ((mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_STRIKETHROUGH) == mxConstants.FONT_STRIKETHROUGH)\n\t\t{\n\t\t\ttxtDecor.push('line-through');\n\t\t}\n\t\t\n\t\tthis.textarea.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? Math.round(size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\tthis.textarea.style.backgroundColor = this.getBackgroundColor(state);\n\t\tthis.textarea.style.textDecoration = txtDecor.join(' ');\n\t\tthis.textarea.style.fontWeight = (bold) ? 'bold' : 'normal';\n\t\tthis.textarea.style.fontStyle = (italic) ? 'italic' : '';\n\t\tthis.textarea.style.fontSize = Math.round(size) + 'px';\n\t\tthis.textarea.style.zIndex = this.zIndex;\n\t\tthis.textarea.style.fontFamily = family;\n\t\tthis.textarea.style.textAlign = align;\n\t\tthis.textarea.style.outline = 'none';\n\t\tthis.textarea.style.color = color;\n\t\t\n\t\tvar dir = this.textDirection = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO)\n\t\t{\n\t\t\tif (state != null && state.text != null && state.text.dialect != mxConstants.DIALECT_STRICTHTML &&\n\t\t\t\t!mxUtils.isNode(state.text.value))\n\t\t\t{\n\t\t\t\tdir = state.text.getAutoDirection();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tthis.textarea.setAttribute('dir', dir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.textarea.removeAttribute('dir');\n\t\t}\n\n\t\t// Sets the initial editing value\n\t\tthis.textarea.innerHTML = this.getInitialValue(state, trigger) || '';\n\t\tthis.initialValue = this.textarea.innerHTML;\n\n\t\t// Uses an optional text value for empty labels which is cleared\n\t\t// when the first keystroke appears. This makes it easier to see\n\t\t// that a label is being edited even if the label is empty.\n\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t{\n\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\tthis.clearOnChange = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.clearOnChange = this.textarea.innerHTML == this.getEmptyLabelText();\n\t\t}\n\n\t\tthis.graph.container.appendChild(this.textarea);\n\t\t\n\t\t// Update this after firing all potential events that could update the cleanOnChange flag\n\t\tthis.editingCell = cell;\n\t\tthis.trigger = trigger;\n\t\tthis.textNode = null;\n\n\t\tif (state.text != null && this.isHideLabel(state))\n\t\t{\n\t\t\tthis.textNode = state.text.node;\n\t\t\tthis.textNode.style.visibility = 'hidden';\n\t\t}\n\n\t\t// Workaround for initial offsetHeight not ready for heading in markup\n\t\tif (this.autoSize && (this.graph.model.isEdge(state.cell) || state.style[mxConstants.STYLE_OVERFLOW] != 'fill'))\n\t\t{\n\t\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t\t\n\t\tthis.resize();\n\t\t\n\t\t// Workaround for NS_ERROR_FAILURE in FF\n\t\ttry\n\t\t{\n\t\t\t// Prefers blinking cursor over no selected text if empty\n\t\t\tthis.textarea.focus();\n\t\t\t\n\t\t\tif (this.isSelectText() && this.textarea.innerHTML.length > 0 &&\n\t\t\t\t(this.textarea.innerHTML != this.getEmptyLabelText() || !this.clearOnChange))\n\t\t\t{\n\t\t\t\tdocument.execCommand('selectAll', false, null);\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t}\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.isSelectText = function()\n{\n\treturn this.selectText;\n};\n\n/**\n * Function: clearSelection\n * \n * Clears the selection.\n */\nmxCellEditor.prototype.clearSelection = function()\n{\n\tvar selection = null;\n\t\n\tif (window.getSelection)\n\t{\n\t\tselection = window.getSelection();\n\t}\n\telse if (document.selection)\n\t{\n\t\tselection = document.selection;\n\t}\n\t\n\tif (selection != null)\n\t{\n\t\tif (selection.empty)\n\t\t{\n\t\t\tselection.empty();\n\t\t}\n\t\telse if (selection.removeAllRanges)\n\t\t{\n\t\t\tselection.removeAllRanges();\n\t\t}\n\t}\n};\n\n/**\n * Function: stopEditing\n *\n * Stops the editor and applies the value if cancel is false.\n */\nmxCellEditor.prototype.stopEditing = function(cancel)\n{\n\tcancel = cancel || false;\n\t\n\tif (this.editingCell != null)\n\t{\n\t\tif (this.textNode != null)\n\t\t{\n\t\t\tthis.textNode.style.visibility = 'visible';\n\t\t\tthis.textNode = null;\n\t\t}\n\n\t\tvar state = (!cancel) ? this.graph.view.getState(this.editingCell) : null;\n\n\t\tvar initial = this.initialValue;\n\t\tthis.initialValue = null;\n\t\tthis.editingCell = null;\n\t\tthis.trigger = null;\n\t\tthis.bounds = null;\n\t\tthis.textarea.blur();\n\t\tthis.clearSelection();\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tif (this.clearOnChange && this.textarea.innerHTML == this.getEmptyLabelText())\n\t\t{\n\t\t\tthis.textarea.innerHTML = '';\n\t\t\tthis.clearOnChange = false;\n\t\t}\n\n\t\tif (state != null && (this.textarea.innerHTML != initial || this.align != null))\n\t\t{\n\t\t\tthis.prepareTextarea();\n\t\t\tvar value = this.getCurrentValue(state);\n\t\t\t\n\t\t\tthis.graph.getModel().beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (value != null)\n\t\t\t\t{\n\t\t\t\t\tthis.applyValue(state, value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.align != null)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ALIGN, this.align, [state.cell]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.graph.getModel().endUpdate();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Forces new instance on next edit for undo history reset\n\t\tmxEvent.release(this.textarea);\n\t\tthis.textarea = null;\n\t\tthis.align = null;\n\t}\n};\n\n/**\n * Function: prepareTextarea\n * \n * Prepares the textarea for getting its value in <stopEditing>.\n * This implementation removes the extra trailing linefeed in Firefox.\n */\nmxCellEditor.prototype.prepareTextarea = function()\n{\n\tif (this.textarea.lastChild != null &&\n\t\tthis.textarea.lastChild.nodeName == 'BR')\n\t{\n\t\tthis.textarea.removeChild(this.textarea.lastChild);\n\t}\n};\n\n/**\n * Function: isHideLabel\n * \n * Returns true if the label should be hidden while the cell is being\n * edited.\n */\nmxCellEditor.prototype.isHideLabel = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns the minimum width and height for editing the given state.\n */\nmxCellEditor.prototype.getMinimumSize = function(state)\n{\n\tvar scale = this.graph.getView().scale;\n\t\n\treturn new mxRectangle(0, 0, (state.text == null) ? 30 : state.text.size * scale + 20,\n\t\t\t(this.textarea.style.textAlign == 'left') ? 120 : 40);\n};\n\n/**\n * Function: getEditorBounds\n * \n * Returns the <mxRectangle> that defines the bounds of the editor.\n */\nmxCellEditor.prototype.getEditorBounds = function(state)\n{\n\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n\tvar scale = this.graph.getView().scale;\n\tvar minSize = this.getMinimumSize(state);\n\tvar minWidth = minSize.width;\n \tvar minHeight = minSize.height;\n \tvar result = null;\n \t\n \tif (!isEdge && state.view.graph.cellRenderer.legacySpacing && state.style[mxConstants.STYLE_OVERFLOW] == 'fill')\n \t{\n \t\tresult = state.shape.getLabelBounds(mxRectangle.fromRectangle(state));\n \t}\n \telse\n \t{\n\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 0) * scale;\n\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\n\t \tresult = new mxRectangle(state.x, state.y,\n\t \t\t Math.max(minWidth, state.width - spacingLeft - spacingRight),\n\t \t\t Math.max(minHeight, state.height - spacingTop - spacingBottom));\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tresult = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(result) : result;\n\t\n\t\tif (isEdge)\n\t\t{\n\t\t\tresult.x = state.absoluteOffset.x;\n\t\t\tresult.y = state.absoluteOffset.y;\n\t\n\t\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\t// Workaround for label containing just spaces in which case\n\t\t\t\t// the bounding box location contains negative numbers \n\t\t\t\tif (state.text.boundingBox.x > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.x = state.text.boundingBox.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.y = state.text.boundingBox.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tresult.x = Math.min(result.x, state.text.boundingBox.x);\n\t\t\tresult.y = Math.min(result.y, state.text.boundingBox.y);\n\t\t}\n\t\n\t\tresult.x += spacingLeft;\n\t\tresult.y += spacingTop;\n\t\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (!isEdge)\n\t\t\t{\n\t\t\t\tresult.width = Math.max(result.width, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(result.height, state.text.boundingBox.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.width = Math.max(minWidth, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(minHeight, state.text.boundingBox.height);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Applies the horizontal and vertical label positions\n\t\tif (this.graph.getModel().isVertex(state.cell))\n\t\t{\n\t\t\tvar horizontal = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\n\t\t\tif (horizontal == mxConstants.ALIGN_LEFT)\n\t\t\t{\n\t\t\t\tresult.x -= state.width;\n\t\t\t}\n\t\t\telse if (horizontal == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tresult.x += state.width;\n\t\t\t}\n\t\n\t\t\tvar vertical = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\t\t\tif (vertical == mxConstants.ALIGN_TOP)\n\t\t\t{\n\t\t\t\tresult.y -= state.height;\n\t\t\t}\n\t\t\telse if (vertical == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tresult.y += state.height;\n\t\t\t}\n\t\t}\n \t}\n \t\n \treturn new mxRectangle(Math.round(result.x), Math.round(result.y), Math.round(result.width), Math.round(result.height));\n};\n\n/**\n * Function: getEmptyLabelText\n *\n * Returns the initial label value to be used of the label of the given\n * cell is empty. This label is displayed and cleared on the first keystroke.\n * This implementation returns <emptyLabelText>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a text for an empty editing box should be\n * returned.\n */\nmxCellEditor.prototype.getEmptyLabelText = function (cell)\n{\n\treturn this.emptyLabelText;\n};\n\n/**\n * Function: getEditingCell\n *\n * Returns the cell that is currently being edited or null if no cell is\n * being edited.\n */\nmxCellEditor.prototype.getEditingCell = function ()\n{\n\treturn this.editingCell;\n};\n\n/**\n * Function: destroy\n *\n * Destroys the editor and removes all associated resources.\n */\nmxCellEditor.prototype.destroy = function ()\n{\n\tif (this.textarea != null)\n\t{\n\t\tmxEvent.release(this.textarea);\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tthis.textarea = null;\n\n\t}\n\t\t\t\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\n\tif (this.zoomHandler)\n\t{\n\t\tthis.graph.view.removeListener(this.zoomHandler);\n\t\tthis.zoomHandler = null;\n\t}\n};\n\n__mxOutput.mxCellEditor = typeof mxCellEditor !== 'undefined' ? mxCellEditor : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxCellRenderer\n * \n * Renders cells into a document object model. The <defaultShapes> is a global\n * map of shapename, constructor pairs that is used in all instances. You can\n * get a list of all available shape names using the following code.\n * \n * In general the cell renderer is in charge of creating, redrawing and\n * destroying the shape and label associated with a cell state, as well as\n * some other graphical objects, namely controls and overlays. The shape\n * hieararchy in the display (ie. the hierarchy in which the DOM nodes\n * appear in the document) does not reflect the cell hierarchy. The shapes\n * are a (flat) sequence of shapes and labels inside the draw pane of the\n * graph view, with some exceptions, namely the HTML labels being placed\n * directly inside the graph container for certain browsers.\n * \n * (code)\n * mxLog.show();\n * for (var i in mxCellRenderer.defaultShapes)\n * {\n *   mxLog.debug(i);\n * }\n * (end)\n *\n * Constructor: mxCellRenderer\n * \n * Constructs a new cell renderer with the following built-in shapes:\n * arrow, rectangle, ellipse, rhombus, image, line, label, cylinder,\n * swimlane, connector, actor and cloud.\n */\nfunction mxCellRenderer() { };\n\n/**\n * Variable: defaultShapes\n * \n * Static array that contains the globally registered shapes which are\n * known to all instances of this class. For adding new shapes you should\n * use the static <mxCellRenderer.registerShape> function.\n */\nmxCellRenderer.defaultShapes = new Object();\n\n/**\n * Variable: defaultEdgeShape\n * \n * Defines the default shape for edges. Default is <mxConnector>.\n */\nmxCellRenderer.prototype.defaultEdgeShape = mxConnector;\n\n/**\n * Variable: defaultVertexShape\n * \n * Defines the default shape for vertices. Default is <mxRectangleShape>.\n */\nmxCellRenderer.prototype.defaultVertexShape = mxRectangleShape;\n\n/**\n * Variable: defaultTextShape\n * \n * Defines the default shape for labels. Default is <mxText>.\n */\nmxCellRenderer.prototype.defaultTextShape = mxText;\n\n/**\n * Variable: legacyControlPosition\n * \n * Specifies if the folding icon should ignore the horizontal\n * orientation of a swimlane. Default is true.\n */\nmxCellRenderer.prototype.legacyControlPosition = true;\n\n/**\n * Variable: legacySpacing\n * \n * Specifies if spacing and label position should be ignored if overflow is\n * fill or width. Default is true for backwards compatiblity.\n */\nmxCellRenderer.prototype.legacySpacing = true;\n\n/**\n * Variable: antiAlias\n * \n * Anti-aliasing option for new shapes. Default is true.\n */\nmxCellRenderer.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxCellRenderer.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: forceControlClickHandler\n * \n * Specifies if the enabled state of the graph should be ignored in the control\n * click handler (to allow folding in disabled graphs). Default is false.\n */\nmxCellRenderer.prototype.forceControlClickHandler = false;\n\n/**\n * Function: registerShape\n * \n * Registers the given constructor under the specified key in this instance\n * of the renderer.\n * \n * Example:\n * \n * (code)\n * mxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\n * (end)\n * \n * Parameters:\n * \n * key - String representing the shape name.\n * shape - Constructor of the <mxShape> subclass.\n */\nmxCellRenderer.registerShape = function(key, shape)\n{\n\tmxCellRenderer.defaultShapes[key] = shape;\n};\n\n// Adds default shapes into the default shapes array\nmxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ELLIPSE, mxEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_RHOMBUS, mxRhombus);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CYLINDER, mxCylinder);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CONNECTOR, mxConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ACTOR, mxActor);\nmxCellRenderer.registerShape(mxConstants.SHAPE_TRIANGLE, mxTriangle);\nmxCellRenderer.registerShape(mxConstants.SHAPE_HEXAGON, mxHexagon);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CLOUD, mxCloud);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LINE, mxLine);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW, mxArrow);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW_CONNECTOR, mxArrowConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_DOUBLE_ELLIPSE, mxDoubleEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_SWIMLANE, mxSwimlane);\nmxCellRenderer.registerShape(mxConstants.SHAPE_IMAGE, mxImageShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LABEL, mxLabel);\n\n/**\n * Function: initializeShape\n * \n * Initializes the shape in the given state by calling its init method with\n * the correct container after configuring it using <configureShape>.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be initialized.\n */\nmxCellRenderer.prototype.initializeShape = function(state)\n{\n\tstate.shape.dialect = state.view.graph.dialect;\n\tthis.configureShape(state);\n\tstate.shape.init(state.view.getDrawPane());\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be created.\n */\nmxCellRenderer.prototype.createShape = function(state)\n{\n\tvar shape = null;\n\t\n\tif (state.style != null)\n\t{\n\t\t// Checks if there is a stencil for the name and creates\n\t\t// a shape instance for the stencil if one exists\n\t\tvar stencil = mxStencilRegistry.getStencil(state.style[mxConstants.STYLE_SHAPE]);\n\t\t\n\t\tif (stencil != null)\n\t\t{\n\t\t\tshape = new mxShape(stencil);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar ctor = this.getShapeConstructor(state);\n\t\t\tshape = new ctor();\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: createIndicatorShape\n * \n * Creates the indicator shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the indicator shape should be created.\n */\nmxCellRenderer.prototype.createIndicatorShape = function(state)\n{\n\tstate.shape.indicatorShape = this.getShape(state.view.graph.getIndicatorShape(state));\n};\n\n/**\n * Function: getShape\n * \n * Returns the shape for the given name from <defaultShapes>.\n */\nmxCellRenderer.prototype.getShape = function(name)\n{\n\treturn (name != null) ? mxCellRenderer.defaultShapes[name] : null;\n};\n\n/**\n * Function: getShapeConstructor\n * \n * Returns the constructor to be used for creating the shape.\n */\nmxCellRenderer.prototype.getShapeConstructor = function(state)\n{\n\tvar ctor = this.getShape(state.style[mxConstants.STYLE_SHAPE]);\n\t\n\tif (ctor == null)\n\t{\n\t\tctor = (state.view.graph.getModel().isEdge(state.cell)) ?\n\t\t\tthis.defaultEdgeShape : this.defaultVertexShape;\n\t}\n\t\n\treturn ctor;\n};\n\n/**\n * Function: configureShape\n * \n * Configures the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be configured.\n */\nmxCellRenderer.prototype.configureShape = function(state)\n{\n\tstate.shape.apply(state);\n\tstate.shape.image = state.view.graph.getImage(state);\n\tstate.shape.indicatorColor = state.view.graph.getIndicatorColor(state);\n\tstate.shape.indicatorStrokeColor = state.style[mxConstants.STYLE_INDICATOR_STROKECOLOR];\n\tstate.shape.indicatorGradientColor = state.view.graph.getIndicatorGradientColor(state);\n\tstate.shape.indicatorDirection = state.style[mxConstants.STYLE_INDICATOR_DIRECTION];\n\tstate.shape.indicatorImage = state.view.graph.getIndicatorImage(state);\n\n\tthis.postConfigureShape(state);\n};\n\n/**\n * Function: postConfigureShape\n * \n * Replaces any reserved words used for attributes, eg. inherit,\n * indicated or swimlane for colors in the shape for the given state.\n * This implementation resolves these keywords on the fill, stroke\n * and gradient color keys.\n */\nmxCellRenderer.prototype.postConfigureShape = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tthis.resolveColor(state, 'indicatorGradientColor', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'indicatorColor', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'gradient', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'stroke', mxConstants.STYLE_STROKECOLOR);\n\t\tthis.resolveColor(state, 'fill', mxConstants.STYLE_FILLCOLOR);\n\t}\n};\n\n/**\n * Function: checkPlaceholderStyles\n * \n * Checks if the style of the given <mxCellState> contains 'inherit',\n * 'indicated' or 'swimlane' for colors that support those keywords.\n */\nmxCellRenderer.prototype.checkPlaceholderStyles = function(state)\n{\n\t// LATER: Check if the color has actually changed\n\tif (state.style != null)\n\t{\n\t\tvar values = ['inherit', 'swimlane', 'indicated'];\n\t\tvar styles = [mxConstants.STYLE_FILLCOLOR, mxConstants.STYLE_STROKECOLOR,\n\t\t\tmxConstants.STYLE_GRADIENTCOLOR, mxConstants.STYLE_FONTCOLOR];\n\t\t\n\t\tfor (var i = 0; i < styles.length; i++)\n\t\t{\n\t\t\tif (mxUtils.indexOf(values, state.style[styles[i]]) >= 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: resolveColor\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.resolveColor = function(state, field, key)\n{\n\tvar shape = (key == mxConstants.STYLE_FONTCOLOR) ?\n\t\tstate.text : state.shape;\n\t\n\tif (shape != null)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar value = shape[field];\n\t\tvar referenced = null;\n\t\t\n\t\tif (value == 'inherit')\n\t\t{\n\t\t\treferenced = graph.model.getParent(state.cell);\n\t\t}\n\t\telse if (value == 'swimlane')\n\t\t{\n\t\t\tshape[field] = (key == mxConstants.STYLE_STROKECOLOR ||\n\t\t\t\tkey == mxConstants.STYLE_FONTCOLOR) ?\n\t\t\t\t'#000000' : '#ffffff';\n\t\t\t\n\t\t\tif (graph.model.getTerminal(state.cell, false) != null)\n\t\t\t{\n\t\t\t\treferenced = graph.model.getTerminal(state.cell, false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treferenced = state.cell;\n\t\t\t}\n\t\t\t\n\t\t\treferenced = graph.getSwimlane(referenced);\n\t\t\tkey = graph.swimlaneIndicatorColorAttribute;\n\t\t}\n\t\telse if (value == 'indicated' && state.shape != null)\n\t\t{\n\t\t\tshape[field] = state.shape.indicatorColor;\n\t\t}\n\t\telse if (key != mxConstants.STYLE_FILLCOLOR &&\n\t\t\tvalue == mxConstants.STYLE_FILLCOLOR &&\n\t\t\tstate.shape != null)\n\t\t{\n\t\t\tshape[field] = state.style[mxConstants.STYLE_FILLCOLOR];\n\t\t}\n\t\telse if (key != mxConstants.STYLE_STROKECOLOR &&\n\t\t\tvalue == mxConstants.STYLE_STROKECOLOR &&\n\t\t\tstate.shape != null)\n\t\t{\n\t\t\tshape[field] = state.style[mxConstants.STYLE_STROKECOLOR];\n\t\t}\n\t\n\t\tif (referenced != null)\n\t\t{\n\t\t\tvar rstate = graph.getView().getState(referenced);\n\t\t\tshape[field] = null;\n\t\t\t\n\t\t\tif (rstate != null)\n\t\t\t{\n\t\t\t\tvar rshape = (key == mxConstants.STYLE_FONTCOLOR) ? rstate.text : rstate.shape;\n\t\t\t\t\n\t\t\t\tif (rshape != null && field != 'indicatorColor')\n\t\t\t\t{\n\t\t\t\t\tshape[field] = rshape[field];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tshape[field] = rstate.style[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelValue\n * \n * Returns the value to be used for the label.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.getLabelValue = function(state)\n{\n\treturn state.view.graph.getLabel(state.cell);\n};\n\n/**\n * Function: createLabel\n * \n * Creates the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.createLabel = function(state, value)\n{\n\tvar graph = state.view.graph;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\t\n\tif (state.style[mxConstants.STYLE_FONTSIZE] > 0 || state.style[mxConstants.STYLE_FONTSIZE] == null)\n\t{\n\t\t// Avoids using DOM node for empty labels\n\t\tvar isForceHtml = (graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\n\t\tstate.text = new this.defaultTextShape(value, new mxRectangle(),\n\t\t\t\t(state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER),\n\t\t\t\tgraph.getVerticalAlign(state),\n\t\t\t\tstate.style[mxConstants.STYLE_FONTCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTFAMILY],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSIZE],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSTYLE],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_TOP],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_RIGHT],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_BOTTOM],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_LEFT],\n\t\t\t\tstate.style[mxConstants.STYLE_HORIZONTAL],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BORDERCOLOR],\n\t\t\t\tgraph.isWrapping(state.cell) && graph.isHtmlLabel(state.cell),\n\t\t\t\tgraph.isLabelClipped(state.cell),\n\t\t\t\tstate.style[mxConstants.STYLE_OVERFLOW],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_PADDING],\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION));\n\t\tstate.text.opacity = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tstate.text.dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\t\tstate.text.style = state.style;\n\t\tstate.text.state = state;\n\t\tthis.initializeLabel(state, state.text);\n\t\t\n\t\t// Workaround for touch devices routing all events for a mouse gesture\n\t\t// (down, move, up) via the initial DOM node. IE additionally redirects\n\t\t// the event via the initial DOM node but the event source is the node\n\t\t// under the mouse, so we need to check if this is the case and force\n\t\t// getCellAt for the subsequent mouseMoves and the final mouseUp.\n\t\tvar forceGetCell = false;\n\t\t\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar result = state;\n\n\t\t\tif (mxClient.IS_TOUCH || forceGetCell)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t};\n\t\t\n\t\t// TODO: Add handling for special touch device gestures\n\t\tmxEvent.addGestureListeners(state.text.node,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\t\tforceGetCell = graph.dialect != mxConstants.DIALECT_SVG &&\n\t\t\t\t\t\tmxEvent.getSource(evt).nodeName == 'IMG';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t\tforceGetCell = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// Uses double click timeout in mxGraph for quirks mode\n\t\tif (graph.nativeDblClickEnabled)\n\t\t{\n\t\t\tmxEvent.addListener(state.text.node, 'dblclick',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Function: initializeLabel\n * \n * Initiailzes the label with a suitable container.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be initialized.\n */\nmxCellRenderer.prototype.initializeLabel = function(state, shape)\n{\n\tif (mxClient.IS_SVG && mxClient.NO_FO && shape.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.init(state.view.graph.container);\n\t}\n\telse\n\t{\n\t\tshape.init(state.view.getDrawPane());\n\t}\n};\n\n/**\n * Function: createCellOverlays\n * \n * Creates the actual shape for showing the overlay for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n */\nmxCellRenderer.prototype.createCellOverlays = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar overlays = graph.getCellOverlays(state.cell);\n\tvar dict = null;\n\t\n\tif (overlays != null)\n\t{\n\t\tdict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tvar shape = (state.overlays != null) ? state.overlays.remove(overlays[i]) : null;\n\t\t\t\n\t\t\tif (shape == null)\n\t\t\t{\n\t\t\t\tvar tmp = new mxImageShape(new mxRectangle(), overlays[i].image.src);\n\t\t\t\ttmp.dialect = state.view.graph.dialect;\n\t\t\t\ttmp.preserveImageAspect = false;\n\t\t\t\ttmp.overlay = overlays[i];\n\t\t\t\tthis.initializeOverlay(state, tmp);\n\t\t\t\tthis.installCellOverlayListeners(state, overlays[i], tmp);\n\t\n\t\t\t\tif (overlays[i].cursor != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.node.style.cursor = overlays[i].cursor;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdict.put(overlays[i], tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdict.put(overlays[i], shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Removes unused\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tshape.destroy();\n\t\t});\n\t}\n\t\n\tstate.overlays = dict;\n};\n\n/**\n * Function: initializeOverlay\n * \n * Initializes the given overlay.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n * overlay - <mxImageShape> that represents the overlay.\n */\nmxCellRenderer.prototype.initializeOverlay = function(state, overlay)\n{\n\toverlay.init(state.view.getOverlayPane());\n};\n\n/**\n * Function: installOverlayListeners\n * \n * Installs the listeners for the given <mxCellState>, <mxCellOverlay> and\n * <mxShape> that represents the overlay.\n */\nmxCellRenderer.prototype.installCellOverlayListeners = function(state, overlay, shape)\n{\n\tvar graph  = state.view.graph;\n\t\n\tmxEvent.addListener(shape.node, 'click', function (evt)\n\t{\n\t\tif (graph.isEditing())\n\t\t{\n\t\t\tgraph.stopEditing(!graph.isInvokesStopCellEditing());\n\t\t}\n\t\t\n\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t'event', evt, 'cell', state.cell));\n\t});\n\t\n\tmxEvent.addGestureListeners(shape.node,\n\t\tfunction (evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE,\n\t\t\t\tnew mxMouseEvent(evt, state));\n\t\t});\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tmxEvent.addListener(shape.node, 'touchend', function (evt)\n\t\t{\n\t\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t\t'event', evt, 'cell', state.cell));\n\t\t});\n\t}\n};\n\n/**\n * Function: createControl\n * \n * Creates the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be created.\n */\nmxCellRenderer.prototype.createControl = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar image = graph.getFoldingImage(state);\n\t\n\tif (graph.foldingEnabled && image != null)\n\t{\n\t\tif (state.control == null)\n\t\t{\n\t\t\tvar b = new mxRectangle(0, 0, image.width, image.height);\n\t\t\tstate.control = new mxImageShape(b, image.src);\n\t\t\tstate.control.preserveImageAspect = false;\n\t\t\tstate.control.dialect = graph.dialect;\n\n\t\t\tthis.initControl(state, state.control, true, this.createControlClickHandler(state));\n\t\t}\n\t}\n\telse if (state.control != null)\n\t{\n\t\tstate.control.destroy();\n\t\tstate.control = null;\n\t}\n};\n\n/**\n * Function: createControlClickHandler\n * \n * Hook for creating the click handler for the folding icon.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control click handler should be returned.\n */\nmxCellRenderer.prototype.createControlClickHandler = function(state)\n{\n\tvar graph = state.view.graph;\n\t\n\treturn mxUtils.bind(this, function (evt)\n\t{\n\t\tif (this.forceControlClickHandler || graph.isEnabled())\n\t\t{\n\t\t\tvar collapse = !graph.isCellCollapsed(state.cell);\n\t\t\tgraph.foldCells(collapse, false, [state.cell], null, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n};\n\n/**\n * Function: initControl\n * \n * Initializes the given control and returns the corresponding DOM node.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be initialized.\n * control - <mxShape> to be initialized.\n * handleEvents - Boolean indicating if mousedown and mousemove should fire events via the graph.\n * clickHandler - Optional function to implement clicks on the control.\n */\nmxCellRenderer.prototype.initControl = function(state, control, handleEvents, clickHandler)\n{\n\tvar graph = state.view.graph;\n\t\n\t// In the special case where the label is in HTML and the display is SVG the image\n\t// should go into the graph container directly in order to be clickable. Otherwise\n\t// it is obscured by the HTML label that overlaps the cell.\n\tvar isForceHtml = graph.isHtmlLabel(state.cell) && mxClient.NO_FO &&\n\t\tgraph.dialect == mxConstants.DIALECT_SVG;\n\n\tif (isForceHtml)\n\t{\n\t\tcontrol.dialect = mxConstants.DIALECT_PREFERHTML;\n\t\tcontrol.init(graph.container);\n\t\tcontrol.node.style.zIndex = 1;\n\t}\n\telse\n\t{\n\t\tcontrol.init(state.view.getOverlayPane());\n\t}\n\n\tvar node = control.innerNode || control.node;\n\t\n\t// Workaround for missing click event on iOS is to check tolerance below\n\tif (clickHandler != null && !mxClient.IS_IOS)\n\t{\n\t\tif (graph.isEnabled())\n\t\t{\n\t\t\tnode.style.cursor = 'pointer';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(node, 'click', clickHandler);\n\t}\n\t\n\tif (handleEvents)\n\t{\n\t\tvar first = null;\n\n\t\tmxEvent.addGestureListeners(node,\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tfirst = new mxPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, state));\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\n\t\t// Uses capture phase for event interception to stop bubble phase\n\t\tif (clickHandler != null && mxClient.IS_IOS)\n\t\t{\n\t\t\tnode.addEventListener('touchend', function(evt)\n\t\t\t{\n\t\t\t\tif (first != null)\n\t\t\t\t{\n\t\t\t\t\tvar tol = graph.tolerance;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(first.x - mxEvent.getClientX(evt)) < tol &&\n\t\t\t\t\t\tMath.abs(first.y - mxEvent.getClientY(evt)) < tol)\n\t\t\t\t\t{\n\t\t\t\t\t\tclickHandler.call(clickHandler, evt);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, true);\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: isShapeEvent\n * \n * Returns true if the event is for the shape of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shape fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isShapeEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: isLabelEvent\n * \n * Returns true if the event is for the label of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isLabelEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: installListeners\n * \n * Installs the event listeners for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the event listeners should be isntalled.\n */\nmxCellRenderer.prototype.installListeners = function(state)\n{\n\tvar graph = state.view.graph;\n\n\t// Workaround for touch devices routing all events for a mouse\n\t// gesture (down, move, up) via the initial DOM node. Same for\n\t// HTML images in all IE versions (VML images are working).\n\tvar getState = function(evt)\n\t{\n\t\tvar result = state;\n\t\t\n\t\tif ((graph.dialect != mxConstants.DIALECT_SVG && mxEvent.getSource(evt).nodeName == 'IMG') || mxClient.IS_TOUCH)\n\t\t{\n\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\n\t\t\t// Dispatches the drop event to the graph which\n\t\t\t// consumes and executes the source function\n\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\tmxEvent.addGestureListeners(state.shape.node,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t})\n\t);\n\t\n\t// Uses double click timeout in mxGraph for quirks mode\n\tif (graph.nativeDblClickEnabled)\n\t{\n\t\tmxEvent.addListener(state.shape.node, 'dblclick',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n};\n\n/**\n * Function: redrawLabel\n * \n * Redraws the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawLabel = function(state, forced)\n{\n\tvar graph = state.view.graph;\n\tvar value = this.getLabelValue(state);\n\tvar wrapping = graph.isWrapping(state.cell);\n\tvar clipping = graph.isLabelClipped(state.cell);\n\tvar isForceHtml = (state.view.graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\tvar dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\tvar overflow = state.style[mxConstants.STYLE_OVERFLOW] || 'visible';\n\n\tif (state.text != null && (state.text.wrap != wrapping || state.text.clipped != clipping ||\n\t\tstate.text.overflow != overflow || state.text.dialect != dialect))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\t\n\tif (state.text == null && value != null && (mxUtils.isNode(value) || value.length > 0))\n\t{\n\t\tthis.createLabel(state, value);\n\t}\n\telse if (state.text != null && (value == null || value.length == 0))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\n\tif (state.text != null)\n\t{\n\t\t// Forced is true if the style has changed, so to get the updated\n\t\t// result in getLabelBounds we apply the new style to the shape\n\t\tif (forced)\n\t\t{\n\t\t\t// Checks if a full repaint is needed\n\t\t\tif (state.text.lastValue != null && this.isTextShapeInvalid(state, state.text))\n\t\t\t{\n\t\t\t\t// Forces a full repaint\n\t\t\t\tstate.text.lastValue = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.resetStyles();\n\t\t\tstate.text.apply(state);\n\t\t\t\n\t\t\t// Special case where value is obtained via hook in graph\n\t\t\tstate.text.valign = graph.getVerticalAlign(state);\n\t\t}\n\t\t\n\t\tvar bounds = this.getLabelBounds(state);\n\t\tvar nextScale = this.getTextScale(state);\n\t\tthis.resolveColor(state, 'color', mxConstants.STYLE_FONTCOLOR);\n\t\t\n\t\tif (forced || state.text.value != value || state.text.isWrapping != wrapping ||\n\t\t\tstate.text.overflow != overflow || state.text.isClipping != clipping ||\n\t\t\tstate.text.scale != nextScale || state.text.dialect != dialect ||\n\t\t\tstate.text.bounds == null || !state.text.bounds.equals(bounds))\n\t\t{\n\t\t\tstate.text.dialect = dialect;\n\t\t\tstate.text.value = value;\n\t\t\tstate.text.bounds = bounds;\n\t\t\tstate.text.scale = nextScale;\n\t\t\tstate.text.wrap = wrapping;\n\t\t\tstate.text.clipped = clipping;\n\t\t\tstate.text.overflow = overflow;\n\t\t\t\n\t\t\t// Preserves visible state\n\t\t\tvar vis = state.text.node.style.visibility;\n\t\t\tthis.redrawLabelShape(state.text);\n\t\t\tstate.text.node.style.visibility = vis;\n\t\t}\n\t}\n};\n\n/**\n * Function: isTextShapeInvalid\n * \n * Returns true if the style for the text shape has changed.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be checked.\n * shape - <mxText> shape to be checked.\n */\nmxCellRenderer.prototype.isTextShapeInvalid = function(state, shape)\n{\n\tfunction check(property, stylename, defaultValue)\n\t{\n\t\tvar result = false;\n\t\t\n\t\t// Workaround for spacing added to directional spacing\n\t\tif (stylename == 'spacingTop' || stylename == 'spacingRight' ||\n\t\t\tstylename == 'spacingBottom' || stylename == 'spacingLeft')\n\t\t{\n\t\t\tresult = parseFloat(shape[property]) - parseFloat(shape.spacing) !=\n\t\t\t\t(state.style[stylename] || defaultValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = shape[property] != (state.style[stylename] || defaultValue);\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\treturn check('fontStyle', mxConstants.STYLE_FONTSTYLE, mxConstants.DEFAULT_FONTSTYLE) ||\n\t\tcheck('family', mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY) ||\n\t\tcheck('size', mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE) ||\n\t\tcheck('color', mxConstants.STYLE_FONTCOLOR, 'black') ||\n\t\tcheck('align', mxConstants.STYLE_ALIGN, '') ||\n\t\tcheck('valign', mxConstants.STYLE_VERTICAL_ALIGN, '') ||\n\t\tcheck('spacing', mxConstants.STYLE_SPACING, 2) ||\n\t\tcheck('spacingTop', mxConstants.STYLE_SPACING_TOP, 0) ||\n\t\tcheck('spacingRight', mxConstants.STYLE_SPACING_RIGHT, 0) ||\n\t\tcheck('spacingBottom', mxConstants.STYLE_SPACING_BOTTOM, 0) ||\n\t\tcheck('spacingLeft', mxConstants.STYLE_SPACING_LEFT, 0) ||\n\t\tcheck('horizontal', mxConstants.STYLE_HORIZONTAL, true) ||\n\t\tcheck('background', mxConstants.STYLE_LABEL_BACKGROUNDCOLOR) ||\n\t\tcheck('border', mxConstants.STYLE_LABEL_BORDERCOLOR) ||\n\t\tcheck('opacity', mxConstants.STYLE_TEXT_OPACITY, 100) ||\n\t\tcheck('textDirection', mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n};\n\n/**\n * Function: redrawLabelShape\n * \n * Called to invoked redraw on the given text shape.\n * \n * Parameters:\n * \n * shape - <mxText> shape to be redrawn.\n */\nmxCellRenderer.prototype.redrawLabelShape = function(shape)\n{\n\tshape.redraw();\n};\n\n/**\n * Function: getTextScale\n * \n * Returns the scaling used for the label of the given state\n * \n * Parameters:\n * \n * state - <mxCellState> whose label scale should be returned.\n */\nmxCellRenderer.prototype.getTextScale = function(state)\n{\n\treturn state.view.scale;\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds to be used to draw the label of the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be returned.\n */\nmxCellRenderer.prototype.getLabelBounds = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar scale = state.view.scale;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\tvar bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y);\n\n\tif (isEdge)\n\t{\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * scale;\n\t\tbounds.y += spacing.y * scale;\n\t\t\n\t\tvar geo = graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tbounds.width = Math.max(0, geo.width * scale);\n\t\t\tbounds.height = Math.max(0, geo.height * scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Inverts label position\n\t\tif (state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = bounds.x;\n\t\t\tbounds.x = bounds.y;\n\t\t\tbounds.y = tmp;\n\t\t}\n\t\t\n\t\tbounds.x += state.x;\n\t\tbounds.y += state.y;\n\t\t\n\t\t// Minimum of 1 fixes alignment bug in HTML labels\n\t\tbounds.width = Math.max(1, state.width);\n\t\tbounds.height = Math.max(1, state.height);\n\t}\n\n\tif (state.text.isPaintBoundsInverted())\n\t{\n\t\t// Rotates around center of state\n\t\tvar t = (state.width - state.height) / 2;\n\t\tbounds.x += t;\n\t\tbounds.y -= t;\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\n\t// Shape can modify its label bounds\n\tif (state.shape != null)\n\t{\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tif (hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tbounds = state.shape.getLabelBounds(bounds);\n\t\t}\n\t}\n\t\n\t// Label width style overrides actual label width\n\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\n\tif (lw != null)\n\t{\n\t\tbounds.width = parseFloat(lw) * scale;\n\t}\n\t\n\tif (!isEdge)\n\t{\n\t\tthis.rotateLabelBounds(state, bounds);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: rotateLabelBounds\n * \n * Adds the shape rotation to the given label bounds and\n * applies the alignment and offsets.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be rotated.\n * bounds - <mxRectangle> the rectangle to be rotated.\n */\nmxCellRenderer.prototype.rotateLabelBounds = function(state, bounds)\n{\n\tbounds.y -= state.text.margin.y * bounds.height;\n\tbounds.x -= state.text.margin.x * bounds.width;\n\t\n\tif (!this.legacySpacing || (state.style[mxConstants.STYLE_OVERFLOW] != 'fill' && state.style[mxConstants.STYLE_OVERFLOW] != 'width'))\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * s;\n\t\tbounds.y += spacing.y * s;\n\t\t\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tbounds.width = Math.max(0, bounds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (state.text.spacingLeft * s + state.text.spacingRight * s) : 0));\n\t\tbounds.height = Math.max(0, bounds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (state.text.spacingTop * s + state.text.spacingBottom * s) : 0));\n\t}\n\n\tvar theta = state.text.getTextRotation();\n\n\t// Only needed if rotated around another center\n\tif (theta != 0 && state != null && state.view.graph.model.isVertex(state.cell))\n\t{\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\t\n\t\tif (bounds.x != cx || bounds.y != cy)\n\t\t{\n\t\t\tvar rad = theta * (Math.PI / 180);\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(bounds.x, bounds.y),\n\t\t\t\t\tMath.cos(rad), Math.sin(rad), new mxPoint(cx, cy));\n\t\t\t\n\t\t\tbounds.x = pt.x;\n\t\t\tbounds.y = pt.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawCellOverlays\n * \n * Redraws the overlays for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose overlays should be redrawn.\n */\nmxCellRenderer.prototype.redrawCellOverlays = function(state, forced)\n{\n\tthis.createCellOverlays(state);\n\n\tif (state.overlays != null)\n\t{\n\t\tvar rot = mxUtils.mod(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0), 90);\n        var rad = mxUtils.toRadians(rot);\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n\t\t\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tvar bounds = shape.overlay.getBounds(state);\n\t\t\n\t\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t\t{\n\t\t\t\tif (state.shape != null && rot != 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = bounds.getCenterX();\n\t\t\t\t\tvar cy = bounds.getCenterY();\n\n\t\t\t\t\tvar point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t        bounds.x = Math.round(cx - bounds.width / 2);\n\t\t\t        bounds.y = Math.round(cy - bounds.height / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (forced || shape.bounds == null || shape.scale != state.view.scale ||\n\t\t\t\t!shape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tshape.bounds = bounds;\n\t\t\t\tshape.scale = state.view.scale;\n\t\t\t\tshape.redraw();\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Function: redrawControl\n * \n * Redraws the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control should be redrawn.\n */\nmxCellRenderer.prototype.redrawControl = function(state, forced)\n{\n\tvar image = state.view.graph.getFoldingImage(state);\n\t\n\tif (state.control != null && image != null)\n\t{\n\t\tvar bounds = this.getControlBounds(state, image.width, image.height);\n\t\tvar r = (this.legacyControlPosition) ?\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0) :\n\t\t\t\tstate.shape.getTextRotation();\n\t\tvar s = state.view.scale;\n\t\t\n\t\tif (forced || state.control.scale != s || !state.control.bounds.equals(bounds) ||\n\t\t\tstate.control.rotation != r)\n\t\t{\n\t\t\tstate.control.rotation = r;\n\t\t\tstate.control.bounds = bounds;\n\t\t\tstate.control.scale = s;\n\t\t\t\n\t\t\tstate.control.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getControlBounds\n * \n * Returns the bounds to be used to draw the control (folding icon) of the\n * given state.\n */\nmxCellRenderer.prototype.getControlBounds = function(state, w, h)\n{\n\tif (state.control != null)\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\n\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t{\n\t\t\tcx = state.x + w * s;\n\t\t\tcy = state.y + h * s;\n\t\t\t\n\t\t\tif (state.shape != null)\n\t\t\t{\n\t\t\t\t// TODO: Factor out common code\n\t\t\t\tvar rot = state.shape.getShapeRotation();\n\t\t\t\t\n\t\t\t\tif (this.legacyControlPosition)\n\t\t\t\t{\n\t\t\t\t\trot = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (state.shape.isPaintBoundsInverted())\n\t\t\t\t\t{\n\t\t\t\t\t\tvar t = (state.width - state.height) / 2;\n\t\t\t\t\t\tcx += t;\n\t\t\t\t\t\tcy -= t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (rot != 0)\n\t\t\t\t{\n\t\t\t        var rad = mxUtils.toRadians(rot);\n\t\t\t        var cos = Math.cos(rad);\n\t\t\t        var sin = Math.sin(rad);\n\t\t\t        \n\t\t\t        var point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (state.view.graph.getModel().isEdge(state.cell)) ? \n\t\t\tnew mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s))\n\t\t\t: new mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: insertStateAfter\n * \n * Inserts the given array of <mxShapes> after the given nodes in the DOM.\n * \n * Parameters:\n * \n * shapes - Array of <mxShapes> to be inserted.\n * node - Node in <drawPane> after which the shapes should be inserted.\n * htmlNode - Node in the graph container after which the shapes should be inserted that\n * will not go into the <drawPane> (eg. HTML labels without foreignObjects).\n */\nmxCellRenderer.prototype.insertStateAfter = function(state, node, htmlNode)\n{\n\tvar shapes = this.getShapesForState(state);\n\t\n\tfor (var i = 0; i < shapes.length; i++)\n\t{\n\t\tif (shapes[i] != null && shapes[i].node != null)\n\t\t{\n\t\t\tvar html = shapes[i].node.parentNode != state.view.getDrawPane() &&\n\t\t\t\tshapes[i].node.parentNode != state.view.getOverlayPane();\n\t\t\tvar temp = (html) ? htmlNode : node;\n\t\t\t\n\t\t\tif (temp != null && temp.nextSibling != shapes[i].node)\n\t\t\t{\n\t\t\t\tif (temp.nextSibling == null)\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.appendChild(shapes[i].node);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.insertBefore(shapes[i].node, temp.nextSibling);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (temp == null)\n\t\t\t{\n\t\t\t\t// Special case: First HTML node should be first sibling after canvas\n\t\t\t\tif (shapes[i].node.parentNode == state.view.graph.container)\n\t\t\t\t{\n\t\t\t\t\tvar canvas = state.view.canvas;\n\t\t\t\t\t\n\t\t\t\t\twhile (canvas != null && canvas.parentNode != state.view.graph.container)\n\t\t\t\t\t{\n\t\t\t\t\t\tcanvas = canvas.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (canvas != null && canvas.nextSibling != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (canvas.nextSibling != shapes[i].node)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, canvas.nextSibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshapes[i].node.parentNode.appendChild(shapes[i].node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (shapes[i].node.parentNode != null &&\n\t\t\t\t\tshapes[i].node.parentNode.firstChild != null &&\n\t\t\t\t\tshapes[i].node.parentNode.firstChild != shapes[i].node)\n\t\t\t\t{\n\t\t\t\t\t// Inserts the node as the first child of the parent to implement the order\n\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, shapes[i].node.parentNode.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (html)\n\t\t\t{\n\t\t\t\thtmlNode = shapes[i].node;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode = shapes[i].node;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [node, htmlNode];\n};\n\n/**\n * Function: getShapesForState\n * \n * Returns the <mxShapes> for the given cell state in the order in which they should\n * appear in the DOM.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shapes should be returned.\n */\nmxCellRenderer.prototype.getShapesForState = function(state)\n{\n\treturn [state.shape, state.text, state.control];\n};\n\n/**\n * Function: redraw\n * \n * Updates the bounds or points and scale of the shapes for the given cell\n * state. This is called in mxGraphView.validatePoints as the last step of\n * updating all cells.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be updated.\n * force - Optional boolean that specifies if the cell should be reconfiured\n * and redrawn without any additional checks.\n * rendering - Optional boolean that specifies if the cell should actually\n * be drawn into the DOM. If this is false then redraw and/or reconfigure\n * will not be called on the shape.\n */\nmxCellRenderer.prototype.redraw = function(state, force, rendering)\n{\n\tvar shapeChanged = this.redrawShape(state, force, rendering);\n\n\tif (state.shape != null && (rendering == null || rendering))\n\t{\n\t\tthis.redrawLabel(state, shapeChanged);\n\t\tthis.redrawCellOverlays(state, shapeChanged);\n\t\tthis.redrawControl(state, shapeChanged);\n\t}\n};\n\n/**\n * Function: redrawShape\n * \n * Redraws the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawShape = function(state, force, rendering)\n{\n\tvar model = state.view.graph.model;\n\tvar shapeChanged = false;\n\n\t// Forces creation of new shape if shape style has changed\n\tif (state.shape != null && state.shape.style != null && state.style != null &&\n\t\tstate.shape.style[mxConstants.STYLE_SHAPE] != state.style[mxConstants.STYLE_SHAPE])\n\t{\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n\t\n\tif (state.shape == null && state.view.graph.container != null &&\n\t\tstate.cell != state.view.currentRoot &&\n\t\t(model.isVertex(state.cell) || model.isEdge(state.cell)))\n\t{\n\t\tstate.shape = this.createShape(state);\n\t\t\n\t\tif (state.shape != null)\n\t\t{\n\t\t\tstate.shape.minSvgStrokeWidth = this.minSvgStrokeWidth;\n\t\t\tstate.shape.antiAlias = this.antiAlias;\n\t\n\t\t\tthis.createIndicatorShape(state);\n\t\t\tthis.initializeShape(state);\n\t\t\tthis.createCellOverlays(state);\n\t\t\tthis.installListeners(state);\n\t\t\t\n\t\t\t// Forces a refresh of the handler if one exists\n\t\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\t}\n\t}\n\telse if (!force && state.shape != null && (!mxUtils.equalEntries(state.shape.style,\n\t\tstate.style) || this.checkPlaceholderStyles(state)))\n\t{\n\t\tstate.shape.resetStyles();\n\t\tthis.configureShape(state);\n\t\t// LATER: Ignore update for realtime to fix reset of current gesture\n\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\tforce = true;\n\t}\n\t\n\t// Updates indicator shape\n\tif (state.shape != null && state.shape.indicatorShape !=\n\t\tthis.getShape(state.view.graph.getIndicatorShape(state)))\n\t{\n\t\tif (state.shape.indicator != null)\n\t\t{\n\t\t\tstate.shape.indicator.destroy();\n\t\t\tstate.shape.indicator = null;\n\t\t}\n\t\t\n\t\tthis.createIndicatorShape(state);\n\t\t\n\t\tif (state.shape.indicatorShape != null)\n\t\t{\n\t\t\tstate.shape.indicator = new state.shape.indicatorShape();\n\t\t\tstate.shape.indicator.dialect = state.shape.dialect;\n\t\t\tstate.shape.indicator.init(state.node);\n\t\t\tforce = true;\n\t\t}\n\t}\n\n\tif (state.shape != null)\n\t{\n\t\t// Handles changes of the collapse icon\n\t\tthis.createControl(state);\n\t\t\n\t\t// Redraws the cell if required, ignores changes to bounds if points are\n\t\t// defined as the bounds are updated for the given points inside the shape\n\t\tif (force || this.isShapeInvalid(state, state.shape))\n\t\t{\n\t\t\tif (state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tstate.shape.points = state.absolutePoints.slice();\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.points = null;\n\t\t\t\tstate.shape.bounds = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\t}\n\n\t\t\tstate.shape.scale = state.view.scale;\n\t\t\t\n\t\t\tif (rendering == null || rendering)\n\t\t\t{\n\t\t\t\tthis.doRedrawShape(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.updateBoundingBox();\n\t\t\t}\n\t\t\t\n\t\t\tshapeChanged = true;\n\t\t}\n\t}\n\n\treturn shapeChanged;\n};\n\n/**\n * Function: doRedrawShape\n * \n * Invokes redraw on the shape of the given state.\n */\nmxCellRenderer.prototype.doRedrawShape = function(state)\n{\n\tstate.shape.redraw();\n};\n\n/**\n * Function: isShapeInvalid\n * \n * Returns true if the given shape must be repainted.\n */\nmxCellRenderer.prototype.isShapeInvalid = function(state, shape)\n{\n\treturn shape.bounds == null || shape.scale != state.view.scale ||\n\t\t(state.absolutePoints == null && !shape.bounds.equals(state)) ||\n\t\t(state.absolutePoints != null && !mxUtils.equalPoints(shape.points, state.absolutePoints))\n};\n\n/**\n * Function: destroy\n * \n * Destroys the shapes associated with the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be destroyed.\n */\nmxCellRenderer.prototype.destroy = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tif (state.text != null)\n\t\t{\t\t\n\t\t\tstate.text.destroy();\n\t\t\tstate.text = null;\n\t\t}\n\t\t\n\t\tif (state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\tshape.destroy();\n\t\t\t});\n\t\t\t\n\t\t\tstate.overlays = null;\n\t\t}\n\n\t\tif (state.control != null)\n\t\t{\n\t\t\tstate.control.destroy();\n\t\t\tstate.control = null;\n\t\t}\n\t\t\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n};\n\n__mxOutput.mxCellRenderer = typeof mxCellRenderer !== 'undefined' ? mxCellRenderer : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEdgeStyle =\n{\n\t/**\n\t * Class: mxEdgeStyle\n\t * \n\t * Provides various edge styles to be used as the values for\n\t * <mxConstants.STYLE_EDGE> in a cell style.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * var style = stylesheet.getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;\n\t * (end)\n\t * \n\t * Sets the default edge style to <ElbowConnector>.\n\t * \n\t * Custom edge style:\n\t * \n\t * To write a custom edge style, a function must be added to the mxEdgeStyle\n\t * object as follows:\n\t * \n\t * (code)\n\t * mxEdgeStyle.MyStyle = function(state, source, target, points, result)\n\t * {\n\t *   if (source != null && target != null)\n\t *   {\n\t *     var pt = new mxPoint(target.getCenterX(), source.getCenterY());\n\t * \n\t *     if (mxUtils.contains(source, pt.x, pt.y))\n\t *     {\n\t *       pt.y = source.y + source.height;\n\t *     }\n\t * \n\t *     result.push(pt);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * In the above example, a right angle is created using a point on the\n\t * horizontal center of the target vertex and the vertical center of the source\n\t * vertex. The code checks if that point intersects the source vertex and makes\n\t * the edge straight if it does. The point is then added into the result array,\n\t * which acts as the return value of the function.\n\t *\n\t * The new edge style should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('myEdgeStyle', mxEdgeStyle.MyStyle);\n\t * (end)\n\t * \n\t * The custom edge style above can now be used in a specific edge as follows:\n\t * \n\t * (code)\n\t * model.setStyle(edge, 'edgeStyle=myEdgeStyle');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxEdgeStyle.MyStyle for the value in the\n\t * cell style above.\n\t * \n\t * Or it can be used for all edges in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.MyStyle;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * Function: EntityRelation\n\t * \n\t * Implements an entity relation style for edges (as used in database\n\t * schema diagrams). At the time the function is called, the result\n\t * array contains a placeholder (null) for the first absolute point,\n\t * that is, the point where the edge and source terminal are connected.\n\t * The implementation of the style then adds all intermediate waypoints\n\t * except for the last point, that is, the connection point between the\n\t * edge and the target terminal. The first ant the last point in the\n\t * result array are then replaced with mxPoints that take into account\n\t * the terminal's perimeter and next point on the edge.\n\t *\n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t */\n\t EntityRelation: function(state, source, target, points, result)\n\t {\n\t\tvar view = state.view;\n\t \tvar graph = view.graph;\n\t \tvar segment = mxUtils.getValue(state.style,\n\t \t\t\tmxConstants.STYLE_SEGMENT,\n\t \t\t\tmxConstants.ENTITY_SEGMENT) * view.scale;\n\t \t\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t \tvar isSourceLeft = false;\n\t \t\n\t \tif (source != null)\n\t \t{\n \t\t\tvar sourceGeometry = graph.getCellGeometry(source.cell);\n\t\n\t\t \tif (sourceGeometry.relative)\n\t\t \t{\n\t\t \t\tisSourceLeft = sourceGeometry.x <= 0.5;\n\t\t \t}\n\t\t \telse if (target != null)\n\t\t \t{\n\t\t \t\tisSourceLeft = ((pe != null) ? pe.x : target.x + target.width) < ((p0 != null) ? p0.x : source.x);\n\t\t \t}\n\t \t}\n\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\telse if (source != null)\n\t\t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(source, state, true, mxConstants.DIRECTION_MASK_NONE);\n\t\t\t\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisSourceLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\t \t\n\t \tvar isTargetLeft = true;\n\t \t\n\t \tif (target != null)\n\t \t{\n\t\t \tvar targetGeometry = graph.getCellGeometry(target.cell);\n\t\n\t\t \tif (targetGeometry.relative)\n\t\t \t{\n\t\t \t\tisTargetLeft = targetGeometry.x <= 0.5;\n\t\t \t}\n\t\t \telse if (source != null)\n\t\t \t{\n\t\t \t\tisTargetLeft = ((p0 != null) ? p0.x : source.x + source.width) < ((pe != null) ? pe.x : target.x);\n\t\t \t}\n\t \t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\telse if (target != null)\n\t \t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(target, state, false, mxConstants.DIRECTION_MASK_NONE);\n\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisTargetLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t \t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar x0 = (isSourceLeft) ? source.x : source.x + source.width;\n\t\t\tvar y0 = view.getRoutingCenterY(source);\n\t\t\t\n\t\t\tvar xe = (isTargetLeft) ? target.x : target.x + target.width;\n\t\t\tvar ye = view.getRoutingCenterY(target);\n\t\n\t\t\tvar seg = segment;\n\t\n\t\t\tvar dx = (isSourceLeft) ? -seg : seg;\n\t\t\tvar dep = new mxPoint(x0 + dx, y0);\n\t\t\t\t\t\n\t\t\tdx = (isTargetLeft) ? -seg : seg;\n\t\t\tvar arr = new mxPoint(xe + dx, ye);\n\t\t\t\n\t\t\t// Adds intermediate points if both go out on same side\n\t\t\tif (isSourceLeft == isTargetLeft)\n\t\t\t{\n\t\t\t\tvar x = (isSourceLeft) ?\n\t\t\t\t\tMath.min(x0, xe)-segment :\n\t\t\t\t\tMath.max(x0, xe)+segment;\n\t\n\t\t\t\tresult.push(new mxPoint(x, y0));\n\t\t\t\tresult.push(new mxPoint(x, ye));\n\t\t\t}\n\t\t\telse if ((dep.x < arr.x) == isSourceLeft)\n\t\t\t{\n\t\t\t\tvar midY = y0 + (ye - y0) / 2;\n\t\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(new mxPoint(dep.x, midY));\n\t\t\t\tresult.push(new mxPoint(arr.x, midY));\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t}\n\t },\n\n\t /**\n\t * Function: Loop\n\t * \n\t * Implements a self-reference, aka. loop.\n\t */\n\tLoop: function(state, source, target, points, result)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tif (points != null && points.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = points[i];\n\t\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\tresult.push(new mxPoint(pt.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tvar view = state.view;\n\t\t\tvar graph = view.graph;\n\t\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tif (mxUtils.contains(source, pt.x, pt.y))\n\t\t\t\t{\n\t\t\t\t\tpt = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = 0;\n\t\t\tvar dx = 0;\n\t\t\tvar y = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t \tvar seg = mxUtils.getValue(state.style, mxConstants.STYLE_SEGMENT,\n\t\t \t\tgraph.gridSize) * view.scale;\n\t\t\tvar dir = mxUtils.getValue(state.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_WEST);\n\t\t\t\n\t\t\tif (dir == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdir == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = seg;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ty = view.getRoutingCenterY(source);\n\t\t\t\tdy = seg;\n\t\t\t}\n\t\t\t\n\t\t\tif (pt == null ||\n\t\t\t\tpt.x < source.x ||\n\t\t\t\tpt.x > source.x + source.width)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tx = pt.x;\n\t\t\t\t\tdy = Math.max(Math.abs(y - pt.y), dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y - 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y + source.height + 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_EAST)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x - 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x + source.width + 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (pt != null)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = Math.max(Math.abs(x - pt.x), dy);\n\t\t\t\ty = pt.y;\n\t\t\t\tdy = 0;\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(x - dx, y - dy));\n\t\t\tresult.push(new mxPoint(x + dx, y + dy));\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: ElbowConnector\n\t * \n\t * Uses either <SideToSide> or <TopToBottom> depending on the horizontal\n\t * flag in the cell style. <SideToSide> is used if horizontal is true or\n\t * unspecified. See <EntityRelation> for a description of the\n\t * parameters.\n\t */\n\tElbowConnector: function(state, source, target, points, result)\n\t{\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\tvar vertical = false;\n\t\tvar horizontal = false;\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar left = Math.min(source.x, target.x);\n\t\t\t\tvar right = Math.max(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\n\t\t\t\tvar top = Math.min(source.y, target.y);\n\t\t\t\tvar bottom = Math.max(source.y + source.height,\n\t\t\t\t\ttarget.y + target.height);\n\n\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tvertical = pt.y < top || pt.y > bottom;\n\t\t\t\thorizontal = pt.x < left || pt.x > right;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar left = Math.max(source.x, target.x);\n\t\t\t\tvar right = Math.min(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\t\t\t\t\n\t\t\t\tvertical = left == right;\n\t\t\t\t\n\t\t\t\tif (!vertical)\n\t\t\t\t{\n\t\t\t\t\tvar top = Math.max(source.y, target.y);\n\t\t\t\t\tvar bottom = Math.min(source.y + source.height,\n\t\t\t\t\t\ttarget.y + target.height);\n\t\t\t\t\t\t\n\t\t\t\t\thorizontal = top == bottom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!horizontal && (vertical ||\n\t\t\tstate.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL))\n\t\t{\n\t\t\tmxEdgeStyle.TopToBottom(state, source, target, points, result);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxEdgeStyle.SideToSide(state, source, target, points, result);\n\t\t}\n\t},\n\n\t/**\n\t * Function: SideToSide\n\t * \n\t * Implements a vertical elbow edge. See <EntityRelation> for a description\n\t * of the parameters.\n\t */\n\tSideToSide: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\n\t\t\tvar x = (pt != null) ? pt.x : Math.round(r + (l - r) / 2);\n\t\n\t\t\tvar y1 = view.getRoutingCenterY(source);\n\t\t\tvar y2 = view.getRoutingCenterY(target);\n\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tif (pt.y >= source.y && pt.y <= source.y + source.height)\n\t\t\t\t{\n\t\t\t\t\ty1 = pt.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (pt.y >= target.y && pt.y <= target.y + target.height)\n\t\t\t\t{\n\t\t\t\t\ty2 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y1) &&\n\t\t\t\t!mxUtils.contains(source, x, y1))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x,  y1));\n\t\t\t}\n\t\n\t\t\tif (!mxUtils.contains(target, x, y2) &&\n\t\t\t\t!mxUtils.contains(source, x, y2))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y2));\n\t\t\t}\n\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, x, pt.y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, x, pt.y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(x, pt.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\n\t\t\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(x, t + (b - t) / 2));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: TopToBottom\n\t * \n\t * Implements a horizontal elbow edge. See <EntityRelation> for a\n\t * description of the parameters.\n\t */\n\tTopToBottom: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\n\t\t\tvar x = view.getRoutingCenterX(source);\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= source.x &&\n\t\t\t\tpt.x <= source.x + source.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\t\n\t\t\tvar y = (pt != null) ? pt.y : Math.round(b + (t - b) / 2);\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= target.x &&\n\t\t\t\tpt.x <= target.x + target.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(target);\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null && result.length == 1)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, pt.x, y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, pt.x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(pt.x, y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(l + (r - l) / 2, y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: SegmentConnector\n\t * \n\t * Implements an orthogonal edge style. Use <mxEdgeSegmentHandler>\n\t * as an interactive handler for this style.\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * sourceScaled - <mxCellState> that represents the source terminal.\n\t * targetScaled - <mxCellState> that represents the target terminal.\n\t * controlHints - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t *\n\t */\n\tSegmentConnector: function(state, sourceScaled, targetScaled, controlHints, result)\n\t{\n\t\t// Creates array of all way- and terminalpoints\n\t\tvar pts = mxEdgeStyle.scalePointArray(state.absolutePoints, state.view.scale);\n\t\tvar source = mxEdgeStyle.scaleCellState(sourceScaled, state.view.scale);\n\t\tvar target = mxEdgeStyle.scaleCellState(targetScaled, state.view.scale);\n\t\tvar tol = 1;\n\t\t\n\t\t// Whether the first segment outgoing from the source end is horizontal\n\t\tvar lastPushed = (result.length > 0) ? result[0] : null;\n\t\tvar horizontal = true;\n\t\tvar hint = null;\n\t\t\n\t\t// Adds waypoints only if outside of tolerance\n\t\tfunction pushPoint(pt)\n\t\t{\n\t\t\tpt.x = Math.round(pt.x * state.view.scale * 10) / 10;\n\t\t\tpt.y = Math.round(pt.y * state.view.scale * 10) / 10;\n\n\t\t\tif (lastPushed == null || Math.abs(lastPushed.x - pt.x) >= tol || Math.abs(lastPushed.y - pt.y) >= Math.max(1, state.view.scale))\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t\tlastPushed = pt;\n\t\t\t}\n\t\t\t\n\t\t\treturn lastPushed;\n\t\t};\n\n\t\t// Adds the first point\n\t\tvar pt = pts[0];\n\t\t\n\t\tif (pt == null && source != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));\n\t\t}\n\t\telse if (pt != null)\n\t\t{\n\t\t\tpt = pt.clone();\n\t\t}\n\t\t\n\t\tvar lastInx = pts.length - 1;\n\n\t\t// Adds the waypoints\n\t\tif (controlHints != null && controlHints.length > 0)\n\t\t{\n\t\t\t// Converts all hints and removes nulls\n\t\t\tvar hints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < controlHints.length; i++)\n\t\t\t{\n\t\t\t\tvar tmp = state.view.transformControlPoint(state, controlHints[i], true);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\thints.push(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (hints.length == 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Aligns source and target hint to fixed points\n\t\t\tif (pt != null && hints[0] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[0].x - pt.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].x = pt.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[0].y - pt.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].y = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pe = pts[lastInx];\n\t\t\t\n\t\t\tif (pe != null && hints[hints.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[hints.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[hints.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\thint = hints[0];\n\n\t\t\tvar currentTerm = source;\n\t\t\tvar currentPt = pts[0];\n\t\t\tvar hozChan = false;\n\t\t\tvar vertChan = false;\n\t\t\tvar currentHint = hint;\n\t\t\t\n\t\t\tif (currentPt != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Check for alignment with fixed points and with channels\n\t\t\t// at source and target segments only\n\t\t\tfor (var i = 0; i < 2; i++)\n\t\t\t{\n\t\t\t\tvar fixedVertAlign = currentPt != null && currentPt.x == currentHint.x;\n\t\t\t\tvar fixedHozAlign = currentPt != null && currentPt.y == currentHint.y;\n\t\t\t\t\n\t\t\t\tvar inHozChan = currentTerm != null && (currentHint.y >= currentTerm.y &&\n\t\t\t\t\t\tcurrentHint.y <= currentTerm.y + currentTerm.height);\n\t\t\t\tvar inVertChan = currentTerm != null && (currentHint.x >= currentTerm.x &&\n\t\t\t\t\t\tcurrentHint.x <= currentTerm.x + currentTerm.width);\n\n\t\t\t\thozChan = fixedHozAlign || (currentPt == null && inHozChan);\n\t\t\t\tvertChan = fixedVertAlign || (currentPt == null && inVertChan);\n\t\t\t\t\n\t\t\t\t// If the current hint falls in both the hor and vert channels in the case\n\t\t\t\t// of a floating port, or if the hint is exactly co-incident with a \n\t\t\t\t// fixed point, ignore the source and try to work out the orientation\n\t\t\t\t// from the target end\n\t\t\t\tif (i==0 && ((hozChan && vertChan) || (fixedVertAlign && fixedHozAlign)))\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (currentPt != null && (!fixedHozAlign && !fixedVertAlign) && (inHozChan || inVertChan)) \n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = inHozChan ? false : true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tif (vertChan || hozChan)\n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = hozChan;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (i == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Work back from target end\n\t\t\t\t\t\t\thorizontal = hints.length % 2 == 0 ? hozChan : vertChan;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentTerm = target;\n\t\t\t\tcurrentPt = pts[lastInx];\n\t\t\t\t\n\t\t\t\tif (currentPt != null)\n\t\t\t\t{\n\t\t\t\t\tcurrentTerm = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentHint = hints[hints.length - 1];\n\t\t\t\t\n\t\t\t\tif (fixedVertAlign && fixedHozAlign)\n\t\t\t\t{\n\t\t\t\t\thints = hints.slice(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (horizontal && ((pts[0] != null && pts[0].y != hint.y) ||\n\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t(hint.y < source.y || hint.y > source.y + source.height))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t}\n\t\t\telse if (!horizontal && ((pts[0] != null && pts[0].x != hint.x) ||\n\t\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t\t(hint.x < source.x || hint.x > source.x + source.width))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal)\n\t\t\t{\n\t\t\t\tpt.y = hint.y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpt.x = hint.x;\n\t\t\t}\n\t\t\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\thorizontal = !horizontal;\n\t\t\t\thint = hints[i];\n\t\t\t\t\n//\t\t\t\tmxLog.show();\n//\t\t\t\tmxLog.debug('hint', i, hint.x, hint.y);\n\t\t\t\t\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tpt.y = hint.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpt.x = hint.x;\n\t\t\t\t}\n\t\t\n\t\t\t\tpushPoint(pt.clone());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\thint = pt;\n\t\t\t// FIXME: First click in connect preview toggles orientation\n\t\t\thorizontal = true;\n\t\t}\n\n\t\t// Adds the last point\n\t\tpt = pts[lastInx];\n\n\t\tif (pt == null && target != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));\n\t\t}\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tif (hint != null)\n\t\t\t{\n\t\t\t\tif (horizontal && ((pts[lastInx] != null && pts[lastInx].y != hint.y) ||\n\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t(hint.y < target.y || hint.y > target.y + target.height))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t\t}\n\t\t\t\telse if (!horizontal && ((pts[lastInx] != null && pts[lastInx].x != hint.x) ||\n\t\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t\t(hint.x < target.x || hint.x > target.x + target.width))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the source terminal for floating ports\n\t\tif (pts[0] == null && source != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[1] != null &&\n\t\t\t\tmxUtils.contains(source, result[1].x, result[1].y))\n\t\t\t{\n\t\t\t\tresult.splice(1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the target terminal\n\t\tif (pts[lastInx] == null && target != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[result.length - 1] != null &&\n\t\t\t\tmxUtils.contains(target, result[result.length - 1].x, result[result.length - 1].y))\n\t\t\t{\n\t\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes last point if inside tolerance with end point\n\t\tif (pe != null && result[result.length - 1] != null &&\n\t\t\tMath.abs(pe.x - result[result.length - 1].x) <= tol &&\n\t\t\tMath.abs(pe.y - result[result.length - 1].y) <= tol)\n\t\t{\n\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t\n\t\t\t// Lines up second last point in result with end point\n\t\t\tif (result[result.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(result[result.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(result[result.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\torthBuffer: 10,\n\t\n\torthPointsFallback: true,\n\n\tdirVectors: [ [ -1, 0 ],\n\t\t\t[ 0, -1 ], [ 1, 0 ], [ 0, 1 ], [ -1, 0 ], [ 0, -1 ], [ 1, 0 ] ],\n\n\twayPoints1: [ [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0], [ 0, 0],  [ 0, 0],\n\t              [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0] ],\n\n\troutePatterns: [\n\t\t[ [ 513, 2308, 2081, 2562 ], [ 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 513, 1090, 514, 2564, 2184, 2562 ],\n\t\t\t[ 513, 2308, 2561, 1090, 514, 2568, 2308 ] ],\n\t[ [ 514, 1057, 513, 2308, 2081, 2562 ], [ 514, 2184, 2114, 2561 ],\n\t\t\t[ 514, 2184, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 514, 1057, 513, 2568, 2308, 2561 ] ],\n\t[ [ 1090, 514, 1057, 513, 2308, 2081, 2562 ], [ 2114, 2561 ],\n\t\t\t[ 1090, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 1090, 514, 1057, 513, 2308, 2561, 2568 ] ],\n\t[ [ 2081, 2562 ], [ 1057, 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 1057, 513, 1090, 514, 2184, 2562, 2564 ],\n\t\t\t[ 1057, 2561, 1090, 514, 2568, 2308 ] ] ],\n\t\n\tinlineRoutePatterns: [\n\t\t\t[ null, [ 2114, 2568 ], null, null ],\n\t\t\t[ null, [ 514, 2081, 2114, 2568 ] , null, null ],\n\t\t\t[ null, [ 2114, 2561 ], null, null ],\n\t\t\t[ [ 2081, 2562 ], [ 1057, 2114, 2568 ],\n\t\t\t\t\t[ 2184, 2562 ],\n\t\t\t\t\tnull ] ],\n\tvertexSeperations: [],\n\n\tlimits: [\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ],\n\n\tLEFT_MASK: 32,\n\n\tTOP_MASK: 64,\n\n\tRIGHT_MASK: 128,\n\n\tBOTTOM_MASK: 256,\n\n\tLEFT: 1,\n\n\tTOP: 2,\n\n\tRIGHT: 4,\n\n\tBOTTOM: 8,\n\n\t// TODO remove magic numbers\n\tSIDE_MASK: 480,\n\t//mxEdgeStyle.LEFT_MASK | mxEdgeStyle.TOP_MASK | mxEdgeStyle.RIGHT_MASK\n\t//| mxEdgeStyle.BOTTOM_MASK,\n\n\tCENTER_MASK: 512,\n\n\tSOURCE_MASK: 1024,\n\n\tTARGET_MASK: 2048,\n\n\tVERTEX_MASK: 3072,\n\t// mxEdgeStyle.SOURCE_MASK | mxEdgeStyle.TARGET_MASK,\n\t\n\tgetJettySize: function(state, isSource)\n\t{\n\t\tvar value = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_SOURCE_JETTY_SIZE :\n\t\t\tmxConstants.STYLE_TARGET_JETTY_SIZE, mxUtils.getValue(state.style,\n\t\t\t\t\tmxConstants.STYLE_JETTY_SIZE, mxEdgeStyle.orthBuffer));\n\t\t\n\t\tif (value == 'auto')\n\t\t{\n\t\t\t// Computes the automatic jetty size\n\t\t\tvar type = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW, mxConstants.NONE);\n\t\t\t\n\t\t\tif (type != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tvar size = mxUtils.getNumber(state.style, (isSource) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\t\tvalue = Math.max(2, Math.ceil((size + mxEdgeStyle.orthBuffer) / mxEdgeStyle.orthBuffer)) * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = 2 * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: scalePointArray\n\t * \n\t * Scales an array of <mxPoint>\n\t * \n\t * Parameters:\n\t * \n\t * points - array of <mxPoint> to scale\n\t * scale - the scaling to divide by\n\t * \n\t */\n\tscalePointArray: function(points, scale)\n\t{\n\t\tvar result = [];\n\n\t\tif (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = new mxPoint(Math.round(points[i].x / scale * 10) / 10,\n\t\t\t\t\t\t\t\t\t\tMath.round(points[i].y / scale * 10) / 10);\n\t\t\t\t\tresult[i] = pt;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult[i] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = null;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: scaleCellState\n\t * \n\t * Scales an <mxCellState>\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> to scale\n\t * scale - the scaling to divide by\n\t * \n\t */\n\tscaleCellState: function(state, scale)\n\t{\n\t\tvar result = null;\n\n\t\tif (state != null)\n\t\t{\n\t\t\tresult = state.clone();\n\t\t\tresult.setRect(Math.round(state.x / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.y / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.width / scale * 10) / 10,\n\t\t\t\t\t\t\tMath.round(state.height / scale * 10) / 10);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = null;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: OrthConnector\n\t * \n\t * Implements a local orthogonal router between the given\n\t * cells.\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * sourceScaled - <mxCellState> that represents the source terminal.\n\t * targetScaled - <mxCellState> that represents the target terminal.\n\t * controlHints - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t * \n\t */\n\tOrthConnector: function(state, sourceScaled, targetScaled, controlHints, result)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar sourceEdge = source == null ? false : graph.getModel().isEdge(source.cell);\n\t\tvar targetEdge = target == null ? false : graph.getModel().isEdge(target.cell);\n\n\t\tvar pts = mxEdgeStyle.scalePointArray(state.absolutePoints, state.view.scale);\n\t\tvar source = mxEdgeStyle.scaleCellState(sourceScaled, state.view.scale);\n\t\tvar target = mxEdgeStyle.scaleCellState(targetScaled, state.view.scale);\n\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tvar sourceX = source != null ? source.x : p0.x;\n\t\tvar sourceY = source != null ? source.y : p0.y;\n\t\tvar sourceWidth = source != null ? source.width : 0;\n\t\tvar sourceHeight = source != null ? source.height : 0;\n\t\t\n\t\tvar targetX = target != null ? target.x : pe.x;\n\t\tvar targetY = target != null ? target.y : pe.y;\n\t\tvar targetWidth = target != null ? target.width : 0;\n\t\tvar targetHeight = target != null ? target.height : 0;\n\n\t\tvar sourceBuffer = mxEdgeStyle.getJettySize(state, true);\n\t\tvar targetBuffer = mxEdgeStyle.getJettySize(state, false);\n\t\t\n\t\t//console.log('sourceBuffer', sourceBuffer);\n\t\t//console.log('targetBuffer', targetBuffer);\n\t\t// Workaround for loop routing within buffer zone\n\t\tif (source != null && target == source)\n\t\t{\n\t\t\ttargetBuffer = Math.max(sourceBuffer, targetBuffer);\n\t\t\tsourceBuffer = targetBuffer;\n\t\t}\n\t\t\n\t\tvar totalBuffer = targetBuffer + sourceBuffer;\n\t\t// console.log('totalBuffer', totalBuffer);\n\t\tvar tooShort = false;\n\t\t\n\t\t// Checks minimum distance for fixed points and falls back to segment connector\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\n\t\t\ttooShort = dx * dx + dy * dy < totalBuffer * totalBuffer;\n\t\t}\n\n\t\tif (tooShort || (mxEdgeStyle.orthPointsFallback && (controlHints != null &&\n\t\t\t\tcontrolHints.length > 0)) || sourceEdge || targetEdge)\n\t\t{\n\t\t\tmxEdgeStyle.SegmentConnector(state, sourceScaled, targetScaled, controlHints, result);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine the side(s) of the source and target vertices\n\t\t// that the edge may connect to\n\t\t// portConstraint [source, target]\n\t\tvar portConstraint = [mxConstants.DIRECTION_MASK_ALL, mxConstants.DIRECTION_MASK_ALL];\n\t\tvar rotation = 0;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tportConstraint[0] = mxUtils.getPortConstraints(source, state, true, \n\t\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(source.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\t//console.log('source rotation', rotation);\n\t\t\t\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(sourceX, sourceY, sourceWidth, sourceHeight), rotation);\n\t\t\t\tsourceX = newRect.x; \n\t\t\t\tsourceY = newRect.y;\n\t\t\t\tsourceWidth = newRect.width;\n\t\t\t\tsourceHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\tif (target != null)\n\t\t{\n\t\t\tportConstraint[1] = mxUtils.getPortConstraints(target, state, false,\n\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(target.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\t//console.log('target rotation', rotation);\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(targetX, targetY, targetWidth, targetHeight), rotation);\n\t\t\t\ttargetX = newRect.x;\n\t\t\t\ttargetY = newRect.y;\n\t\t\t\ttargetWidth = newRect.width;\n\t\t\t\ttargetHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\t//console.log('source' , sourceX, sourceY, sourceWidth, sourceHeight);\n\t\t//console.log('targetX' , targetX, targetY, targetWidth, targetHeight);\n\n\t\tvar dir = [0, 0];\n\n\t\t// Work out which faces of the vertices present against each other\n\t\t// in a way that would allow a 3-segment connection if port constraints\n\t\t// permitted.\n\t\t// geo -> [source, target] [x, y, width, height]\n\t\tvar geo = [ [sourceX, sourceY, sourceWidth, sourceHeight] ,\n\t\t            [targetX, targetY, targetWidth, targetHeight] ];\n\t\tvar buffer = [sourceBuffer, targetBuffer];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tmxEdgeStyle.limits[i][1] = geo[i][0] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][2] = geo[i][1] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][4] = geo[i][0] + geo[i][2] + buffer[i];\n\t\t\tmxEdgeStyle.limits[i][8] = geo[i][1] + geo[i][3] + buffer[i];\n\t\t}\n\t\t\n\t\t// Work out which quad the target is in\n\t\tvar sourceCenX = geo[0][0] + geo[0][2] / 2.0;\n\t\tvar sourceCenY = geo[0][1] + geo[0][3] / 2.0;\n\t\tvar targetCenX = geo[1][0] + geo[1][2] / 2.0;\n\t\tvar targetCenY = geo[1][1] + geo[1][3] / 2.0;\n\t\t\n\t\tvar dx = sourceCenX - targetCenX;\n\t\tvar dy = sourceCenY - targetCenY;\n\n\t\tvar quad = 0;\n\n\t\t// 0 | 1\n\t\t// -----\n\t\t// 3 | 2\n\t\t\n\t\tif (dx < 0)\n\t\t{\n\t\t\tif (dy < 0)\n\t\t\t{\n\t\t\t\tquad = 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (dy <= 0)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\t// Special case on x = 0 and negative y\n\t\t\t\tif (dx == 0)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//console.log('quad', quad);\n\n\t\t// Check for connection constraints\n\t\tvar currentTerm = null;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tcurrentTerm = p0;\n\t\t}\n\n\t\tvar constraint = [ [0.5, 0.5] , [0.5, 0.5] ];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (currentTerm != null)\n\t\t\t{\n\t\t\t\tconstraint[i][0] = (currentTerm.x - geo[i][0]) / geo[i][2];\n\t\t\t\t\n\t\t\t\tif (Math.abs(currentTerm.x - geo[i][0]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.x - geo[i][0] - geo[i][2]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t}\n\n\t\t\t\tconstraint[i][1] = (currentTerm.y - geo[i][1]) / geo[i][3];\n\n\t\t\t\tif (Math.abs(currentTerm.y - geo[i][1]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.y - geo[i][1] - geo[i][3]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentTerm = null;\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = pe;\n\t\t\t}\n\t\t}\n\n\t\tvar sourceTopDist = geo[0][1] - (geo[1][1] + geo[1][3]);\n\t\tvar sourceLeftDist = geo[0][0] - (geo[1][0] + geo[1][2]);\n\t\tvar sourceBottomDist = geo[1][1] - (geo[0][1] + geo[0][3]);\n\t\tvar sourceRightDist = geo[1][0] - (geo[0][0] + geo[0][2]);\n\n\t\tmxEdgeStyle.vertexSeperations[1] = Math.max(sourceLeftDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[2] = Math.max(sourceTopDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[4] = Math.max(sourceBottomDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[3] = Math.max(sourceRightDist - totalBuffer, 0);\n\t\t\t\t\n\t\t//==============================================================\n\t\t// Start of source and target direction determination\n\n\t\t// Work through the preferred orientations by relative positioning\n\t\t// of the vertices and list them in preferred and available order\n\t\t\n\t\tvar dirPref = [];\n\t\tvar horPref = [];\n\t\tvar vertPref = [];\n\n\t\thorPref[0] = (sourceLeftDist >= sourceRightDist) ? mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t: mxConstants.DIRECTION_MASK_EAST;\n\t\tvertPref[0] = (sourceTopDist >= sourceBottomDist) ? mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t: mxConstants.DIRECTION_MASK_SOUTH;\n\n\t\thorPref[1] = mxUtils.reversePortConstraints(horPref[0]);\n\t\tvertPref[1] = mxUtils.reversePortConstraints(vertPref[0]);\n\t\t\n\t\tvar preferredHorizDist = sourceLeftDist >= sourceRightDist ? sourceLeftDist\n\t\t\t\t: sourceRightDist;\n\t\tvar preferredVertDist = sourceTopDist >= sourceBottomDist ? sourceTopDist\n\t\t\t\t: sourceBottomDist;\n\n\t\tvar prefOrdering = [ [0, 0] , [0, 0] ];\n\t\tvar preferredOrderSet = false;\n\n\t\t// If the preferred port isn't available, switch it\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((horPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\thorPref[i] = mxUtils.reversePortConstraints(horPref[i]);\n\t\t\t}\n\n\t\t\tif ((vertPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tvertPref[i] = mxUtils\n\t\t\t\t\t\t.reversePortConstraints(vertPref[i]);\n\t\t\t}\n\n\t\t\tprefOrdering[i][0] = vertPref[i];\n\t\t\tprefOrdering[i][1] = horPref[i];\n\t\t}\n\n\t\tif (preferredVertDist > 0\n\t\t\t\t&& preferredHorizDist > 0)\n\t\t{\n\t\t\t// Possibility of two segment edge connection\n\t\t\tif (((horPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((vertPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t\telse if (((vertPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((horPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (preferredVertDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\tpreferredOrderSet = true;\n\n\t\t}\n\t\t\n\t\tif (preferredHorizDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\tpreferredOrderSet = true;\n\t\t}\n\n\t\t// The source and target prefs are now an ordered list of\n\t\t// the preferred port selections\n\t\t// If the list contains gaps, compact it\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((prefOrdering[i][0] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tprefOrdering[i][0] = prefOrdering[i][1];\n\t\t\t}\n\n\t\t\tdirPref[i] = prefOrdering[i][0] & portConstraint[i];\n\t\t\tdirPref[i] |= (prefOrdering[i][1] & portConstraint[i]) << 8;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][i] & portConstraint[i]) << 16;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][1 - i] & portConstraint[i]) << 24;\n\n\t\t\tif ((dirPref[i] & 0xF) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = dirPref[i] << 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF00) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xF) | dirPref[i] >> 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF0000) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xFFFF)\n\t\t\t\t\t\t| ((dirPref[i] & 0xF000000) >> 8);\n\t\t\t}\n\n\t\t\tdir[i] = dirPref[i] & 0xF;\n\n\t\t\tif (portConstraint[i] == mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_EAST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_SOUTH)\n\t\t\t{\n\t\t\t\tdir[i] = portConstraint[i];\n\t\t\t}\n\t\t}\n\n\t\t//==============================================================\n\t\t// End of source and target direction determination\n\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\t\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar routePattern = mxEdgeStyle.routePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\n\t\t//console.log('routePattern', routePattern);\n\n\t\tmxEdgeStyle.wayPoints1[0][0] = geo[0][0];\n\t\tmxEdgeStyle.wayPoints1[0][1] = geo[0][1];\n\n\t\tswitch (dir[0])\n\t\t{\n\t\t\tcase mxConstants.DIRECTION_MASK_WEST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] -= sourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_SOUTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += geo[0][3] + sourceBuffer;\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_EAST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += geo[0][2] + sourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_NORTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] -= sourceBuffer;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar currentIndex = 0;\n\n\t\t// Orientation, 0 horizontal, 1 vertical\n\t\tvar lastOrientation = (dir[0] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t: 1;\n\t\tvar initialOrientation = lastOrientation;\n\t\tvar currentOrientation = 0;\n\n\t\tfor (var i = 0; i < routePattern.length; i++)\n\t\t{\n\t\t\tvar nextDirection = routePattern[i] & 0xF;\n\n\t\t\t// Rotate the index of this direction by the quad\n\t\t\t// to get the real direction\n\t\t\tvar directionIndex = nextDirection == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t\t: nextDirection;\n\n\t\t\tdirectionIndex += quad;\n\n\t\t\tif (directionIndex > 4)\n\t\t\t{\n\t\t\t\tdirectionIndex -= 4;\n\t\t\t}\n\n\t\t\tvar direction = mxEdgeStyle.dirVectors[directionIndex - 1];\n\n\t\t\tcurrentOrientation = (directionIndex % 2 > 0) ? 0 : 1;\n\t\t\t// Only update the current index if the point moved\n\t\t\t// in the direction of the current segment move,\n\t\t\t// otherwise the same point is moved until there is \n\t\t\t// a segment direction change\n\t\t\tif (currentOrientation != lastOrientation)\n\t\t\t{\n\t\t\t\tcurrentIndex++;\n\t\t\t\t// Copy the previous way point into the new one\n\t\t\t\t// We can't base the new position on index - 1\n\t\t\t\t// because sometime elbows turn out not to exist,\n\t\t\t\t// then we'd have to rewind.\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] = mxEdgeStyle.wayPoints1[currentIndex - 1][0];\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] = mxEdgeStyle.wayPoints1[currentIndex - 1][1];\n\t\t\t}\n\n\t\t\tvar tar = (routePattern[i] & mxEdgeStyle.TARGET_MASK) > 0;\n\t\t\tvar sou = (routePattern[i] & mxEdgeStyle.SOURCE_MASK) > 0;\n\t\t\tvar side = (routePattern[i] & mxEdgeStyle.SIDE_MASK) >> 5;\n\t\t\tside = side << quad;\n\n\t\t\tif (side > 0xF)\n\t\t\t{\n\t\t\t\tside = side >> 4;\n\t\t\t}\n\n\t\t\tvar center = (routePattern[i] & mxEdgeStyle.CENTER_MASK) > 0;\n\n\t\t\tif ((sou || tar) && side < 9)\n\t\t\t{\n\t\t\t\tvar limit = 0;\n\t\t\t\tvar souTar = sou ? 0 : 1;\n\n\t\t\t\tif (center && currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][0] + constraint[souTar][0] * geo[souTar][2];\n\t\t\t\t}\n\t\t\t\telse if (center)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][1] + constraint[souTar][1] * geo[souTar][3];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlimit = mxEdgeStyle.limits[souTar][side];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tvar lastX = mxEdgeStyle.wayPoints1[currentIndex][0];\n\t\t\t\t\tvar deltaX = (limit - lastX) * direction[0];\n\n\t\t\t\t\tif (deltaX > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t\t\t* deltaX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar lastY = mxEdgeStyle.wayPoints1[currentIndex][1];\n\t\t\t\t\tvar deltaY = (limit - lastY) * direction[1];\n\n\t\t\t\t\tif (deltaY > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t\t\t* deltaY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (center)\n\t\t\t{\n\t\t\t\t// Which center we're travelling to depend on the current direction\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t}\n\n\t\t\tif (currentIndex > 0\n\t\t\t\t\t&& mxEdgeStyle.wayPoints1[currentIndex][currentOrientation] == mxEdgeStyle.wayPoints1[currentIndex - 1][currentOrientation])\n\t\t\t{\n\t\t\t\tcurrentIndex--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlastOrientation = currentOrientation;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i <= currentIndex; i++)\n\t\t{\n\t\t\tif (i == currentIndex)\n\t\t\t{\n\t\t\t\t// Last point can cause last segment to be in\n\t\t\t\t// same direction as jetty/approach. If so,\n\t\t\t\t// check the number of points is consistent\n\t\t\t\t// with the relative orientation of source and target\n\t\t\t\t// jx. Same orientation requires an even\n\t\t\t\t// number of turns (points), different requires\n\t\t\t\t// odd.\n\t\t\t\tvar targetOrientation = (dir[1] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t\t\t: 1;\n\t\t\t\tvar sameOrient = targetOrientation == initialOrientation ? 0 : 1;\n\n\t\t\t\t// (currentIndex + 1) % 2 is 0 for even number of points,\n\t\t\t\t// 1 for odd\n\t\t\t\tif (sameOrient != (currentIndex + 1) % 2)\n\t\t\t\t{\n\t\t\t\t\t// The last point isn't required\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(Math.round(mxEdgeStyle.wayPoints1[i][0] * state.view.scale * 10) / 10,\n\t\t\t\t\t\t\t\t\tMath.round(mxEdgeStyle.wayPoints1[i][1] * state.view.scale * 10) / 10));\n\t\t}\n\t\t\n\t\t//console.log(result);\n\n\t\t// Removes duplicates\n\t\tvar index = 1;\n\t\t\n\t\twhile (index < result.length)\n\t\t{\n\t\t\tif (result[index - 1] == null || result[index] == null ||\n\t\t\t\tresult[index - 1].x != result[index].x ||\n\t\t\t\tresult[index - 1].y != result[index].y)\n\t\t\t{\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.splice(index, 1);\n\t\t\t}\n\t\t}\n\t},\n\t\n\tgetRoutePattern: function(dir, quad, dx, dy)\n\t{\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar result = routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tif (dx == 0 || dy == 0)\n\t\t{\n\t\t\tif (inlineRoutePatterns[sourceIndex - 1][targetIndex - 1] != null)\n\t\t\t{\n\t\t\t\tresult = inlineRoutePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n__mxOutput.mxEdgeStyle = typeof mxEdgeStyle !== 'undefined' ? mxEdgeStyle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxStyleRegistry =\n{\n\t/**\n\t * Class: mxStyleRegistry\n\t *\n\t * Singleton class that acts as a global converter from string to object values\n\t * in a style. This is currently only used to perimeters and edge styles.\n\t * \n\t * Variable: values\n\t *\n\t * Maps from strings to objects.\n\t */\n\tvalues: [],\n\n\t/**\n\t * Function: putValue\n\t *\n\t * Puts the given object into the registry under the given name.\n\t */\n\tputValue: function(name, obj)\n\t{\n\t\tmxStyleRegistry.values[name] = obj;\n\t},\n\n\t/**\n\t * Function: getValue\n\t *\n\t * Returns the value associated with the given name.\n\t */\n\tgetValue: function(name)\n\t{\n\t\treturn mxStyleRegistry.values[name];\n\t},\n\t\n\t/**\n\t * Function: getName\n\t * \n\t * Returns the name for the given value.\n\t */\n\tgetName: function(value)\n\t{\n\t\tfor (var key in mxStyleRegistry.values)\n\t\t{\n\t\t\tif (mxStyleRegistry.values[key] == value)\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n};\n\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ELBOW, mxEdgeStyle.ElbowConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ENTITY_RELATION, mxEdgeStyle.EntityRelation);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_LOOP, mxEdgeStyle.Loop);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SIDETOSIDE, mxEdgeStyle.SideToSide);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_TOPTOBOTTOM, mxEdgeStyle.TopToBottom);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ORTHOGONAL, mxEdgeStyle.OrthConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SEGMENT, mxEdgeStyle.SegmentConnector);\n\nmxStyleRegistry.putValue(mxConstants.PERIMETER_ELLIPSE, mxPerimeter.EllipsePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RECTANGLE, mxPerimeter.RectanglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RHOMBUS, mxPerimeter.RhombusPerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_TRIANGLE, mxPerimeter.TrianglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_HEXAGON, mxPerimeter.HexagonPerimeter);\n\n__mxOutput.mxStyleRegistry = typeof mxStyleRegistry !== 'undefined' ? mxStyleRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphView\n *\n * Extends <mxEventSource> to implement a view for a graph. This class is in\n * charge of computing the absolute coordinates for the relative child\n * geometries, the points for perimeters and edge styles and keeping them\n * cached in <mxCellStates> for faster retrieval. The states are updated\n * whenever the model or the view state (translate, scale) changes. The scale\n * and translate are honoured in the bounds.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the root was changed in <setCurrentRoot>. The <code>edit</code>\n * property contains the <mxUndoableEdit> which contains the\n * <mxCurrentRootChange>.\n * \n * Event: mxEvent.SCALE_AND_TRANSLATE\n * \n * Fires after the scale and translate have been changed in <scaleAndTranslate>.\n * The <code>scale</code>, <code>previousScale</code>, <code>translate</code>\n * and <code>previousTranslate</code> properties contain the new and previous\n * scale and translate, respectively.\n * \n * Event: mxEvent.SCALE\n * \n * Fires after the scale was changed in <setScale>. The <code>scale</code> and\n * <code>previousScale</code> properties contain the new and previous scale.\n * \n * Event: mxEvent.TRANSLATE\n * \n * Fires after the translate was changed in <setTranslate>. The\n * <code>translate</code> and <code>previousTranslate</code> properties contain\n * the new and previous value for translate.\n * \n * Event: mxEvent.DOWN and mxEvent.UP\n * \n * Fire if the current root is changed by executing an <mxCurrentRootChange>.\n * The event name depends on the location of the root in the cell hierarchy\n * with respect to the current root. The <code>root</code> and\n * <code>previous</code> properties contain the new and previous root,\n * respectively.\n * \n * Constructor: mxGraphView\n *\n * Constructs a new view for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphView(graph)\n{\n\tthis.graph = graph;\n\tthis.translate = new mxPoint();\n\tthis.graphBounds = new mxRectangle();\n\tthis.states = new mxDictionary();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphView.prototype = new mxEventSource();\nmxGraphView.prototype.constructor = mxGraphView;\n\n/**\n *\n */\nmxGraphView.prototype.EMPTY_POINT = new mxPoint();\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphView.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Function: updatingDocumentResource\n *\n * Specifies the resource key for the status message while the document is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingDocument'.\n */\nmxGraphView.prototype.updatingDocumentResource = (mxClient.language != 'none') ? 'updatingDocument' : '';\n\n/**\n * Variable: allowEval\n * \n * Specifies if string values in cell styles should be evaluated using\n * <mxUtils.eval>. This will only be used if the string values can't be mapped\n * to objects using <mxStyleRegistry>. Default is false. NOTE: Enabling this\n * switch carries a possible security risk.\n */\nmxGraphView.prototype.allowEval = false;\n\n/**\n * Variable: captureDocumentGesture\n * \n * Specifies if a gesture should be captured when it goes outside of the\n * graph container. Default is true.\n */\nmxGraphView.prototype.captureDocumentGesture = true;\n\n/**\n * Variable: optimizeVmlReflows\n * \n * Specifies if the <canvas> should be hidden while rendering in IE8 standards\n * mode and quirks mode. This will significantly improve rendering performance.\n * Default is true.\n */\nmxGraphView.prototype.optimizeVmlReflows = true;\n\n/**\n * Variable: rendering\n * \n * Specifies if shapes should be created, updated and destroyed using the\n * methods of <mxCellRenderer> in <graph>. Default is true.\n */\nmxGraphView.prototype.rendering = true;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphView.prototype.graph = null;\n\n/**\n * Variable: currentRoot\n *\n * <mxCell> that acts as the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.currentRoot = null;\n\n/**\n * Variable: graphBounds\n *\n * <mxRectangle> that caches the scales, translated bounds of the current view.\n */\nmxGraphView.prototype.graphBounds = null;\n\n/**\n * Variable: scale\n * \n * Specifies the scale. Default is 1 (100%).\n */\nmxGraphView.prototype.scale = 1;\n\t\n/**\n * Variable: translate\n *\n * <mxPoint> that specifies the current translation. Default is a new\n * empty <mxPoint>.\n */\nmxGraphView.prototype.translate = null;\n\n/**\n * Variable: states\n * \n * <mxDictionary> that maps from cell IDs to <mxCellStates>.\n */\nmxGraphView.prototype.states = null;\n\n/**\n * Variable: updateStyle\n * \n * Specifies if the style should be updated in each validation step. If this\n * is false then the style is only updated if the state is created or if the\n * style of the cell was changed. Default is false.\n */\nmxGraphView.prototype.updateStyle = false;\n\n/**\n * Variable: lastNode\n * \n * During validation, this contains the last DOM node that was processed.\n */\nmxGraphView.prototype.lastNode = null;\n\n/**\n * Variable: lastHtmlNode\n * \n * During validation, this contains the last HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastHtmlNode = null;\n\n/**\n * Variable: lastForegroundNode\n * \n * During validation, this contains the last edge's DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundNode = null;\n\n/**\n * Variable: lastForegroundHtmlNode\n * \n * During validation, this contains the last edge HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundHtmlNode = null;\n\n/**\n * Function: getGraphBounds\n *\n * Returns <graphBounds>.\n */\nmxGraphView.prototype.getGraphBounds = function()\n{\n\treturn this.graphBounds;\n};\n\n/**\n * Function: setGraphBounds\n *\n * Sets <graphBounds>.\n */\nmxGraphView.prototype.setGraphBounds = function(value)\n{\n\tthis.graphBounds = value;\n};\n\n/**\n * Function: getBounds\n * \n * Returns the union of all <mxCellStates> for the given array of <mxCells>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be returned.\n */\nmxGraphView.prototype.getBounds = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(state);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: setCurrentRoot\n *\n * Sets and returns the current root and fires an <undo> event before\n * calling <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * root - <mxCell> that specifies the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.setCurrentRoot = function(root)\n{\n\tif (this.currentRoot != root)\n\t{\n\t\tvar change = new mxCurrentRootChange(this, root);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, true);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t\tthis.graph.sizeDidChange();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: scaleAndTranslate\n *\n * Sets the scale and translation and fires a <scale> and <translate> event\n * before calling <revalidate> followed by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * scale - Decimal value that specifies the new scale (1 is 100%).\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.scaleAndTranslate = function(scale, dx, dy)\n{\n\tvar previousScale = this.scale;\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.scale != scale || this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.scale = scale;\n\t\t\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE_AND_TRANSLATE,\n\t\t'scale', scale, 'previousScale', previousScale,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: getScale\n * \n * Returns the <scale>.\n */\nmxGraphView.prototype.getScale = function()\n{\n\treturn this.scale;\n};\n\n/**\n * Function: setScale\n *\n * Sets the scale and fires a <scale> event before calling <revalidate> followed\n * by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * value - Decimal value that specifies the new scale (1 is 100%).\n */\nmxGraphView.prototype.setScale = function(value)\n{\n\tvar previousScale = this.scale;\n\t\n\tif (this.scale != value)\n\t{\n\t\tthis.scale = value;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE,\n\t\t'scale', value, 'previousScale', previousScale));\n};\n\n/**\n * Function: getTranslate\n * \n * Returns the <translate>.\n */\nmxGraphView.prototype.getTranslate = function()\n{\n\treturn this.translate;\n};\n\n/**\n * Function: setTranslate\n *\n * Sets the translation and fires a <translate> event before calling\n * <revalidate> followed by <mxGraph.sizeDidChange>. The translation is the\n * negative of the origin.\n *\n * Parameters:\n *\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.setTranslate = function(dx, dy)\n{\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.TRANSLATE,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: viewStateChanged\n * \n * Invoked after <scale> and/or <translate> has changed.\n */\nmxGraphView.prototype.viewStateChanged = function()\n{\n\tthis.revalidate();\n\tthis.graph.sizeDidChange();\n};\n\n/**\n * Function: refresh\n *\n * Clears the view if <currentRoot> is not null and revalidates.\n */\nmxGraphView.prototype.refresh = function()\n{\n\tif (this.currentRoot != null)\n\t{\n\t\tthis.clear();\n\t}\n\t\n\tthis.revalidate();\n};\n\n/**\n * Function: revalidate\n *\n * Revalidates the complete view with all cell states.\n */\nmxGraphView.prototype.revalidate = function()\n{\n\tthis.invalidate();\n\tthis.validate();\n};\n\n/**\n * Function: clear\n *\n * Removes the state of the given cell and all descendants if the given\n * cell is not the current root.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the state should be removed. Default\n * is the root of the model.\n * force - Boolean indicating if the current root should be ignored for\n * recursion.\n */\nmxGraphView.prototype.clear = function(cell, force, recurse)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\tforce = (force != null) ? force : false;\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tthis.removeState(cell);\n\t\n\tif (recurse && (force || cell != this.currentRoot))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.clear(model.getChildAt(cell, i), force);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.invalidate(cell);\n\t}\n};\n\n/**\n * Function: invalidate\n * \n * Invalidates the state of the given cell, all its descendants and\n * connected edges.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be invalidated. Default is the root of the\n * model.\n */\nmxGraphView.prototype.invalidate = function(cell, recurse, includeEdges)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\trecurse = (recurse != null) ? recurse : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar state = this.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tstate.invalid = true;\n\t}\n\t\n\t// Avoids infinite loops for invalid graphs\n\tif (!cell.invalidating)\n\t{\n\t\tcell.invalidating = true;\n\t\t\n\t\t// Recursively invalidates all descendants\n\t\tif (recurse)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\tthis.invalidate(child, recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Propagates invalidation to all connected edges\n\t\tif (includeEdges)\n\t\t{\n\t\t\tvar edgeCount = model.getEdgeCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t{\n\t\t\t\tthis.invalidate(model.getEdgeAt(cell, i), recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdelete cell.invalidating;\n\t}\n};\n\n/**\n * Function: validate\n * \n * Calls <validateCell> and <validateCellState> and updates the <graphBounds>\n * using <getBoundingBox>. Finally the background is validated using\n * <validateBackground>.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the root of the validation.\n * Default is <currentRoot> or the root of the model.\n */\nmxGraphView.prototype.validate = function(cell)\n{\n\tvar t0 = mxLog.enter('mxGraphView.validate');\n\twindow.status = mxResources.get(this.updatingDocumentResource) ||\n\t\tthis.updatingDocumentResource;\n\t\n\tthis.resetValidationState();\n\t\n\t// Improves IE rendering speed by minimizing reflows\n\tvar prevDisplay = null;\n\t\n\tif (this.optimizeVmlReflows && this.canvas != null && this.textDiv == null &&\n\t\t((document.documentMode == 8 && !mxClient.IS_EM) || mxClient.IS_QUIRKS))\n\t{\n\t\t// Placeholder keeps scrollbar positions when canvas is hidden\n\t\tthis.placeholder = document.createElement('div');\n\t\tthis.placeholder.style.position = 'absolute';\n\t\tthis.placeholder.style.width = this.canvas.clientWidth + 'px';\n\t\tthis.placeholder.style.height = this.canvas.clientHeight + 'px';\n\t\tthis.canvas.parentNode.appendChild(this.placeholder);\n\n\t\tprevDisplay = this.drawPane.style.display;\n\t\tthis.canvas.style.display = 'none';\n\t\t\n\t\t// Creates temporary DIV used for text measuring in mxText.updateBoundingBox\n\t\tthis.textDiv = document.createElement('div');\n\t\tthis.textDiv.style.position = 'absolute';\n\t\tthis.textDiv.style.whiteSpace = 'nowrap';\n\t\tthis.textDiv.style.visibility = 'hidden';\n\t\tthis.textDiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tthis.textDiv.style.zoom = '1';\n\t\t\n\t\tdocument.body.appendChild(this.textDiv);\n\t}\n\t\n\tvar graphBounds = this.getBoundingBox(this.validateCellState(\n\t\tthis.validateCell(cell || ((this.currentRoot != null) ?\n\t\t\tthis.currentRoot : this.graph.getModel().getRoot()))));\n\tthis.setGraphBounds((graphBounds != null) ? graphBounds : this.getEmptyBounds());\n\tthis.validateBackground();\n\t\n\tif (prevDisplay != null)\n\t{\n\t\tthis.canvas.style.display = prevDisplay;\n\t\tthis.textDiv.parentNode.removeChild(this.textDiv);\n\t\t\n\t\tif (this.placeholder != null)\n\t\t{\n\t\t\tthis.placeholder.parentNode.removeChild(this.placeholder);\n\t\t}\n\t\t\t\t\n\t\t// Textdiv cannot be reused\n\t\tthis.textDiv = null;\n\t}\n\t\n\tthis.resetValidationState();\n\t\n\twindow.status = mxResources.get(this.doneResource) ||\n\t\tthis.doneResource;\n\tmxLog.leave('mxGraphView.validate', t0);\n};\n\n/**\n * Function: getEmptyBounds\n * \n * Returns the bounds for an empty graph. This returns a rectangle at\n * <translate> with the size of 0 x 0.\n */\nmxGraphView.prototype.getEmptyBounds = function()\n{\n\treturn new mxRectangle(this.translate.x * this.scale, this.translate.y * this.scale);\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box of the shape and the label for the given\n * <mxCellState> and its children if recurse is true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounding box should be returned.\n * recurse - Optional boolean indicating if the children should be included.\n * Default is true.\n */\nmxGraphView.prototype.getBoundingBox = function(state, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar bbox = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (state.shape != null && state.shape.boundingBox != null)\n\t\t{\n\t\t\tbbox = state.shape.boundingBox.clone();\n\t\t}\n\t\t\n\t\t// Adds label bounding box to graph bounds\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (bbox != null)\n\t\t\t{\n\t\t\t\tbbox.add(state.text.boundingBox);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox = state.text.boundingBox.clone();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (recurse)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(state.cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar bounds = this.getBoundingBox(this.getState(model.getChildAt(state.cell, i)));\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (bbox == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = bounds;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox.add(bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bbox;\n};\n\n/**\n * Function: createBackgroundPageShape\n *\n * Creates and returns the shape used as the background page.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that represents the bounds of the shape.\n */\nmxGraphView.prototype.createBackgroundPageShape = function(bounds)\n{\n\treturn new mxRectangleShape(bounds, 'white', 'black');\n};\n\n/**\n * Function: validateBackground\n *\n * Calls <validateBackgroundImage> and <validateBackgroundPage>.\n */\nmxGraphView.prototype.validateBackground = function()\n{\n\tthis.validateBackgroundImage();\n\tthis.validateBackgroundPage();\n};\n\n/**\n * Function: validateBackgroundImage\n * \n * Validates the background image.\n */\nmxGraphView.prototype.validateBackgroundImage = function()\n{\n\tvar bg = this.graph.getBackgroundImage();\n\t\n\tif (bg != null)\n\t{\n\t\tif (this.backgroundImage == null || this.backgroundImage.image != bg.src)\n\t\t{\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tthis.backgroundImage.destroy();\n\t\t\t}\n\t\t\t\n\t\t\tvar bounds = new mxRectangle(0, 0, 1, 1);\n\t\t\t\n\t\t\tthis.backgroundImage = new mxImageShape(bounds, bg.src);\n\t\t\tthis.backgroundImage.dialect = this.graph.dialect;\n\t\t\tthis.backgroundImage.init(this.backgroundPane);\n\t\t\tthis.backgroundImage.redraw();\n\n\t\t\t// Workaround for ignored event on background in IE8 standards mode\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tmxEvent.addGestureListeners(this.backgroundImage.node,\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.redrawBackgroundImage(this.backgroundImage, bg);\n\t}\n\telse if (this.backgroundImage != null)\n\t{\n\t\tthis.backgroundImage.destroy();\n\t\tthis.backgroundImage = null;\n\t}\n};\n\n/**\n * Function: validateBackgroundPage\n * \n * Validates the background page.\n */\nmxGraphView.prototype.validateBackgroundPage = function()\n{\n\tif (this.graph.pageVisible)\n\t{\n\t\tvar bounds = this.getBackgroundPageBounds();\n\t\t\n\t\tif (this.backgroundPageShape == null)\n\t\t{\n\t\t\tthis.backgroundPageShape = this.createBackgroundPageShape(bounds);\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.isShadow = true;\n\t\t\tthis.backgroundPageShape.dialect = this.graph.dialect;\n\t\t\tthis.backgroundPageShape.init(this.backgroundPane);\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t\t\n\t\t\t// Adds listener for double click handling on background\n\t\t\tif (this.graph.nativeDblClickEnabled)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(this.backgroundPageShape.node, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.dblClick(evt);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t\t// container and finishing the handling of a single gesture\n\t\t\tmxEvent.addGestureListeners(this.backgroundPageShape.node,\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\t\t\tif (this.graph.tooltipHandler != null && this.graph.tooltipHandler.isHideOnHover())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.tooltipHandler.hide();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.graph.isMouseDown && !mxEvent.isConsumed(evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.bounds = bounds;\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t}\n\t}\n\telse if (this.backgroundPageShape != null)\n\t{\n\t\tthis.backgroundPageShape.destroy();\n\t\tthis.backgroundPageShape = null;\n\t}\n};\n\n/**\n * Function: getBackgroundPageBounds\n * \n * Returns the bounds for the background page.\n */\nmxGraphView.prototype.getBackgroundPageBounds = function()\n{\n\tvar fmt = this.graph.pageFormat;\n\tvar ps = this.scale * this.graph.pageScale;\n\tvar bounds = new mxRectangle(this.scale * this.translate.x, this.scale * this.translate.y,\n\t\t\tfmt.width * ps, fmt.height * ps);\n\t\n\treturn bounds;\n};\n\n/**\n * Function: redrawBackgroundImage\n *\n * Updates the bounds and redraws the background image.\n * \n * Example:\n * \n * If the background image should not be scaled, this can be replaced with\n * the following.\n * \n * (code)\n * mxGraphView.prototype.redrawBackground = function(backgroundImage, bg)\n * {\n *   backgroundImage.bounds.x = this.translate.x;\n *   backgroundImage.bounds.y = this.translate.y;\n *   backgroundImage.bounds.width = bg.width;\n *   backgroundImage.bounds.height = bg.height;\n *\n *   backgroundImage.redraw();\n * };\n * (end)\n * \n * Parameters:\n * \n * backgroundImage - <mxImageShape> that represents the background image.\n * bg - <mxImage> that specifies the image and its dimensions.\n */\nmxGraphView.prototype.redrawBackgroundImage = function(backgroundImage, bg)\n{\n\tbackgroundImage.scale = this.scale;\n\tbackgroundImage.bounds.x = this.scale * this.translate.x;\n\tbackgroundImage.bounds.y = this.scale * this.translate.y;\n\tbackgroundImage.bounds.width = this.scale * bg.width;\n\tbackgroundImage.bounds.height = this.scale * bg.height;\n\n\tbackgroundImage.redraw();\n};\n\n/**\n * Function: validateCell\n * \n * Recursively creates the cell state for the given cell if visible is true and\n * the given cell is visible. If the cell is not visible but the state exists\n * then it is removed using <removeState>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be created.\n * visible - Optional boolean indicating if the cell should be visible. Default\n * is true.\n */\nmxGraphView.prototype.validateCell = function(cell, visible)\n{\n\tvisible = (visible != null) ? visible : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvisible = visible && this.graph.isCellVisible(cell);\n\t\tvar state = this.getState(cell, visible);\n\t\t\n\t\tif (state != null && !visible)\n\t\t{\n\t\t\tthis.removeState(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tthis.validateCell(model.getChildAt(cell, i), visible &&\n\t\t\t\t\t(!this.isCellCollapsed(cell) || cell == this.currentRoot));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: validateCellState\n * \n * Validates and repaints the <mxCellState> for the given <mxCell>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be validated.\n * recurse - Optional boolean indicating if the children of the cell should be\n * validated. Default is true.\n */\nmxGraphView.prototype.validateCellState = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\t\n\t\t\tif (state.invalid)\n\t\t\t{\n\t\t\t\tstate.invalid = false;\n\t\t\t\t\n\t\t\t\tif (state.style == null || state.invalidStyle)\n\t\t\t\t{\n\t\t\t\t\tstate.style = this.graph.getCellStyle(state.cell);\n\t\t\t\t\tstate.invalidStyle = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (cell != this.currentRoot)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getParent(cell), false);\n\t\t\t\t}\n\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, true), false), true);\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, false), false), false);\n\t\t\t\t\n\t\t\t\tthis.updateCellState(state);\n\t\t\t\t\n\t\t\t\t// Repaint happens immediately after the cell is validated\n\t\t\t\tif (cell != this.currentRoot && !state.invalid)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.cellRenderer.redraw(state, false, this.isRendering());\n\n\t\t\t\t\t// Handles changes to invertex paintbounds after update of rendering shape\n\t\t\t\t\tstate.updateCachedBounds();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (recurse && !state.invalid)\n\t\t\t{\n\t\t\t\t// Updates order in DOM if recursively traversing\n\t\t\t\tif (state.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.stateValidated(state);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: updateCellState\n * \n * Updates the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to be updated.\n */\nmxGraphView.prototype.updateCellState = function(state)\n{\n\tstate.absoluteOffset.x = 0;\n\tstate.absoluteOffset.y = 0;\n\tstate.origin.x = 0;\n\tstate.origin.y = 0;\n\tstate.length = 0;\n\t\n\tif (state.cell != this.currentRoot)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar pState = this.getState(model.getParent(state.cell)); \n\t\t\n\t\tif (pState != null && pState.cell != this.currentRoot)\n\t\t{\n\t\t\tstate.origin.x += pState.origin.x;\n\t\t\tstate.origin.y += pState.origin.y;\n\t\t}\n\t\t\n\t\tvar offset = this.graph.getChildOffsetForCell(state.cell);\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tstate.origin.x += offset.x;\n\t\t\tstate.origin.y += offset.y;\n\t\t}\n\t\t\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\t\t\t\t\n\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (!model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\toffset = (geo.offset != null) ? geo.offset : this.EMPTY_POINT;\n\t\n\t\t\t\tif (geo.relative && pState != null)\n\t\t\t\t{\n\t\t\t\t\tif (model.isEdge(pState.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar origin = this.getPoint(pState, geo);\n\n\t\t\t\t\t\tif (origin != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.origin.x += (origin.x / this.scale) - pState.origin.x - this.translate.x;\n\t\t\t\t\t\t\tstate.origin.y += (origin.y / this.scale) - pState.origin.y - this.translate.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.origin.x += geo.x * pState.unscaledWidth + offset.x;\n\t\t\t\t\t\tstate.origin.y += geo.y * pState.unscaledHeight + offset.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstate.absoluteOffset.x = this.scale * offset.x;\n\t\t\t\t\tstate.absoluteOffset.y = this.scale * offset.y;\n\t\t\t\t\tstate.origin.x += geo.x;\n\t\t\t\t\tstate.origin.y += geo.y;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tstate.x = this.scale * (this.translate.x + state.origin.x);\n\t\t\tstate.y = this.scale * (this.translate.y + state.origin.y);\n\t\t\tstate.width = this.scale * geo.width;\n\t\t\tstate.unscaledWidth = geo.width;\n\t\t\tstate.height = this.scale * geo.height;\n\t\t\tstate.unscaledHeight = geo.height;\n\t\t\t\n\t\t\tif (model.isVertex(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateVertexState(state, geo);\n\t\t\t}\n\t\t\t\n\t\t\tif (model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(state, geo);\n\t\t\t}\n\t\t}\n\t}\n\n\tstate.updateCachedBounds();\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the children of the given cell should not be visible in the\n * view. This implementation uses <mxGraph.isCellVisible> but it can be\n * overidden to use a separate condition.\n */\nmxGraphView.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.graph.isCellCollapsed(cell);\n};\n\n/**\n * Function: updateVertexState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateVertexState = function(state, geo)\n{\n\tvar model = this.graph.getModel();\n\tvar pState = this.getState(model.getParent(state.cell));\n\t\n\tif (geo.relative && pState != null && !model.isEdge(pState.cell))\n\t{\n\t\tvar alpha = mxUtils.toRadians(pState.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\tstate.x = pt.x - state.width / 2;\n\t\t\tstate.y = pt.y - state.height / 2;\n\t\t}\n\t}\n\t\n\tthis.updateVertexLabelOffset(state);\n};\n\n/**\n * Function: updateEdgeState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateEdgeState = function(state, geo)\n{\n\tvar source = state.getVisibleTerminalState(true);\n\tvar target = state.getVisibleTerminalState(false);\n\t\n\t// This will remove edges with no terminals and no terminal points\n\t// as such edges are invalid and produce NPEs in the edge styles.\n\t// Also removes connected edges that have no visible terminals.\n\tif ((this.graph.model.getTerminal(state.cell, true) != null && source == null) ||\n\t\t(source == null && geo.getTerminalPoint(true) == null) ||\n\t\t(this.graph.model.getTerminal(state.cell, false) != null && target == null) ||\n\t\t(target == null && geo.getTerminalPoint(false) == null))\n\t{\n\t\tthis.clear(state.cell, true);\n\t}\n\telse\n\t{\n\t\tthis.updateFixedTerminalPoints(state, source, target);\n\t\tthis.updatePoints(state, geo.points, source, target);\n\t\tthis.updateFloatingTerminalPoints(state, source, target);\n\t\t\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (state.cell != this.currentRoot && (pts == null || pts.length < 2 ||\n\t\t\tpts[0] == null || pts[pts.length - 1] == null))\n\t\t{\n\t\t\t// This will remove edges with invalid points from the list of states in the view.\n\t\t\t// Happens if the one of the terminals and the corresponding terminal point is null.\n\t\t\tthis.clear(state.cell, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateEdgeBounds(state);\n\t\t\tthis.updateEdgeLabelOffset(state);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateVertexLabelOffset\n * \n * Updates the absoluteOffset of the given vertex cell state. This takes\n * into account the label position styles.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateVertexLabelOffset = function(state)\n{\n\tvar h = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\n\tif (h == mxConstants.ALIGN_LEFT)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\tlw *= this.scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlw = state.width;\n\t\t}\n\t\t\n\t\tstate.absoluteOffset.x -= lw;\n\t}\n\telse if (h == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstate.absoluteOffset.x += state.width;\n\t}\n\telse if (h == mxConstants.ALIGN_CENTER)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\t// Aligns text block with given width inside the vertex width\n\t\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER);\n\t\t\tvar dx = 0;\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx = 0.5;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx = 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (dx != 0)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset.x -= (lw * this.scale - state.width) * dx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar v = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\tif (v == mxConstants.ALIGN_TOP)\n\t{\n\t\tstate.absoluteOffset.y -= state.height;\n\t}\n\telse if (v == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tstate.absoluteOffset.y += state.height;\n\t}\n};\n\n/**\n * Function: resetValidationState\n *\n * Resets the current validation state.\n */\nmxGraphView.prototype.resetValidationState = function()\n{\n\tthis.lastNode = null;\n\tthis.lastHtmlNode = null;\n\tthis.lastForegroundNode = null;\n\tthis.lastForegroundHtmlNode = null;\n};\n\n/**\n * Function: stateValidated\n * \n * Invoked when a state has been processed in <validatePoints>. This is used\n * to update the order of the DOM nodes of the shape.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n */\nmxGraphView.prototype.stateValidated = function(state)\n{\n\tvar fg = (this.graph.getModel().isEdge(state.cell) && this.graph.keepEdgesInForeground) ||\n\t\t(this.graph.getModel().isVertex(state.cell) && this.graph.keepEdgesInBackground);\n\tvar htmlNode = (fg) ? this.lastForegroundHtmlNode || this.lastHtmlNode : this.lastHtmlNode;\n\tvar node = (fg) ? this.lastForegroundNode || this.lastNode : this.lastNode;\n\tvar result = this.graph.cellRenderer.insertStateAfter(state, node, htmlNode);\n\n\tif (fg)\n\t{\n\t\tthis.lastForegroundHtmlNode = result[1];\n\t\tthis.lastForegroundNode = result[0];\n\t}\n\telse\n\t{\n\t\tthis.lastHtmlNode = result[1];\n\t\tthis.lastNode = result[0];\n\t}\n};\n\n/**\n * Function: updateFixedTerminalPoints\n *\n * Sets the initial absolute terminal points in the given state before the edge\n * style is computed.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose initial terminal points should be updated.\n * source - <mxCellState> which represents the source terminal.\n * target - <mxCellState> which represents the target terminal.\n */\nmxGraphView.prototype.updateFixedTerminalPoints = function(edge, source, target)\n{\n\tthis.updateFixedTerminalPoint(edge, source, true,\n\t\tthis.graph.getConnectionConstraint(edge, source, true));\n\tthis.updateFixedTerminalPoint(edge, target, false,\n\t\tthis.graph.getConnectionConstraint(edge, target, false));\n};\n\n/**\n * Function: updateFixedTerminalPoint\n *\n * Sets the fixed source or target terminal point on the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.updateFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFixedTerminalPoint(edge, terminal, source, constraint), source);\n};\n\n/**\n * Function: getFixedTerminalPoint\n *\n * Returns the fixed source or target terminal point for the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.getFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tvar pt = null;\n\t\n\tif (constraint != null)\n\t{\n\t\tpt = this.graph.getConnectionPoint(terminal, constraint, false); // FIXME Rounding introduced bugs when calculating label positions -> , this.graph.isOrthogonal(edge));\n\t}\n\t\n\tif (pt == null && terminal == null)\n\t{\n\t\tvar s = this.scale;\n\t\tvar tr = this.translate;\n\t\tvar orig = edge.origin;\n\t\tvar geo = this.graph.getCellGeometry(edge.cell);\n\t\tpt = geo.getTerminalPoint(source);\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = new mxPoint(s * (tr.x + pt.x + orig.x),\n\t\t\t\t\t\t\t s * (tr.y + pt.y + orig.y));\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: updateBoundsFromStencil\n * \n * Updates the bounds of the given cell state to reflect the bounds of the stencil\n * if it has a fixed aspect and returns the previous bounds as an <mxRectangle> if\n * the bounds have been modified or null otherwise.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateBoundsFromStencil = function(state)\n{\n\tvar previous = null;\n\t\n\tif (state != null && state.shape != null && state.shape.stencil != null && state.shape.stencil.aspect == 'fixed')\n\t{\n\t\tprevious = mxRectangle.fromRectangle(state);\n\t\tvar asp = state.shape.stencil.computeAspect(state.style, state.x, state.y, state.width, state.height);\n\t\tstate.setRect(asp.x, asp.y, state.shape.stencil.w0 * asp.width, state.shape.stencil.h0 * asp.height);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: updatePoints\n *\n * Updates the absolute points in the given state using the specified array\n * of <mxPoints> as the relative points.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose absolute points should be updated.\n * points - Array of <mxPoints> that constitute the relative points.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updatePoints = function(edge, points, source, target)\n{\n\tif (edge != null)\n\t{\n\t\tvar pts = [];\n\t\tpts.push(edge.absolutePoints[0]);\n\t\tvar edgeStyle = this.getEdgeStyle(edge, points, source, target);\n\t\t\n\t\tif (edgeStyle != null)\n\t\t{\n\t\t\tvar src = this.getTerminalPort(edge, source, true);\n\t\t\tvar trg = this.getTerminalPort(edge, target, false);\n\t\t\t\n\t\t\t// Uses the stencil bounds for routing and restores after routing\n\t\t\tvar srcBounds = this.updateBoundsFromStencil(src);\n\t\t\tvar trgBounds = this.updateBoundsFromStencil(trg);\n\n\t\t\tedgeStyle(edge, src, trg, points, pts);\n\t\t\t\n\t\t\t// Restores previous bounds\n\t\t\tif (srcBounds != null)\n\t\t\t{\n\t\t\t\tsrc.setRect(srcBounds.x, srcBounds.y, srcBounds.width, srcBounds.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (trgBounds != null)\n\t\t\t{\n\t\t\t\ttrg.setRect(trgBounds.x, trgBounds.y, trgBounds.width, trgBounds.height);\n\t\t\t}\n\t\t}\n\t\telse if (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = mxUtils.clone(points[i]);\n\t\t\t\t\tpts.push(this.transformControlPoint(edge, pt));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tmp = edge.absolutePoints;\n\t\tpts.push(tmp[tmp.length-1]);\n\n\t\tedge.absolutePoints = pts;\n\t}\n};\n\n/**\n * Function: transformControlPoint\n *\n * Transforms the given control point to an absolute point.\n */\nmxGraphView.prototype.transformControlPoint = function(state, pt, ignoreScale)\n{\n\tif (state != null && pt != null)\n\t{\n\t\tvar orig = state.origin;\n\t\tvar scale = ignoreScale ? 1 : this.scale\n\t\t\n\t    return new mxPoint(scale * (pt.x + this.translate.x + orig.x),\n\t    \t\tscale * (pt.y + this.translate.y + orig.y));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isLoopStyleEnabled\n * \n * Returns true if the given edge should be routed with <mxGraph.defaultLoopStyle>\n * or the <mxConstants.STYLE_LOOP> defined for the given edge. This implementation\n * returns true if the given edge is a loop and does not have connections constraints\n * associated.\n */\nmxGraphView.prototype.isLoopStyleEnabled = function(edge, points, source, target)\n{\n\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\n\tif ((points == null || points.length < 2) &&\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_ORTHOGONAL_LOOP, false) ||\n\t\t((sc == null || sc.point == null) && (tc == null || tc.point == null))))\n\t{\n\t\treturn source != null && source == target;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns the edge style function to be used to render the given edge state.\n */\nmxGraphView.prototype.getEdgeStyle = function(edge, points, source, target)\n{\n\tvar edgeStyle = this.isLoopStyleEnabled(edge, points, source, target) ?\n\t\tmxUtils.getValue(edge.style, mxConstants.STYLE_LOOP, this.graph.defaultLoopStyle) :\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_NOEDGESTYLE, false) ?\n\t\tedge.style[mxConstants.STYLE_EDGE] : null);\n\n\t// Converts string values to objects\n\tif (typeof(edgeStyle) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(edgeStyle);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(edgeStyle);\n\t\t}\n\t\t\n\t\tedgeStyle = tmp;\n\t}\n\t\n\tif (typeof(edgeStyle) == \"function\")\n\t{\n\t\treturn edgeStyle;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: updateFloatingTerminalPoints\n *\n * Updates the terminal points in the given state after the edge style was\n * computed for the edge.\n * \n * Parameters:\n * \n * state - <mxCellState> whose terminal points should be updated.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updateFloatingTerminalPoints = function(state, source, target)\n{\n\tvar pts = state.absolutePoints;\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\n\tif (pe == null && target != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, target, source, false);\n\t}\n\t\n\tif (p0 == null && source != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, source, target, true);\n\t}\n};\n\n/**\n * Function: updateFloatingTerminalPoint\n *\n * Updates the absolute terminal point in the given state for the given\n * start and end state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.updateFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFloatingTerminalPoint(edge, start, end, source), source);\n};\n\n/**\n * Function: getFloatingTerminalPoint\n * \n * Returns the floating terminal point for the given edge, start and end\n * state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.getFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tstart = this.getTerminalPort(edge, start, source);\n\tvar next = this.getNextPoint(edge, end, source);\n\t\n\tvar orth = this.graph.isOrthogonal(edge);\n\tvar alpha = mxUtils.toRadians(Number(start.style[mxConstants.STYLE_ROTATION] || '0'));\n\tvar center = new mxPoint(start.getCenterX(), start.getCenterY());\n\t\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(-alpha);\n\t\tvar sin = Math.sin(-alpha);\n\t\tnext = mxUtils.getRotatedPoint(next, cos, sin, center);\n\t}\n\t\n\tvar border = parseFloat(edge.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\tborder += parseFloat(edge.style[(source) ?\n\t\tmxConstants.STYLE_SOURCE_PERIMETER_SPACING :\n\t\tmxConstants.STYLE_TARGET_PERIMETER_SPACING] || 0);\n\tvar pt = this.getPerimeterPoint(start, next, alpha == 0 && orth, border);\n\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, center);\n\t}\n\n\treturn pt;\n};\n\n/**\n * Function: getTerminalPort\n * \n * Returns an <mxCellState> that represents the source or target terminal or\n * port for the given edge.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the given terminal is the source terminal.\n */\nmxGraphView.prototype.getTerminalPort = function(state, terminal, source)\n{\n\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\tmxConstants.STYLE_TARGET_PORT;\n\tvar id = mxUtils.getValue(state.style, key);\n\t\n\tif (id != null)\n\t{\n\t\tvar tmp = this.getState(this.graph.getModel().getCell(id));\n\t\t\n\t\t// Only uses ports where a cell state exists\n\t\tif (tmp != null)\n\t\t{\n\t\t\tterminal = tmp;\n\t\t}\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getPerimeterPoint\n *\n * Returns an <mxPoint> that defines the location of the intersection point between\n * the perimeter and the line between the center of the shape and the given point.\n * \n * Parameters:\n * \n * terminal - <mxCellState> for the source or target terminal.\n * next - <mxPoint> that lies outside of the given terminal.\n * orthogonal - Boolean that specifies if the orthogonal projection onto\n * the perimeter should be returned. If this is false then the intersection\n * of the perimeter and the line between the next and the center point is\n * returned.\n * border - Optional border between the perimeter and the shape.\n */\nmxGraphView.prototype.getPerimeterPoint = function(terminal, next, orthogonal, border)\n{\n\tvar point = null;\n\t\n\tif (terminal != null)\n\t{\n\t\tvar perimeter = this.getPerimeterFunction(terminal);\n\t\t\n\t\tif (perimeter != null && next != null)\n\t\t{\n\t\t\tvar bounds = this.getPerimeterBounds(terminal, border);\n\n\t\t\tif (bounds.width > 0 || bounds.height > 0)\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(next.x, next.y);\n\t\t\t\tvar flipH = false;\n\t\t\t\tvar flipV = false;\t\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isVertex(terminal.cell))\n\t\t\t\t{\n\t\t\t\t\tflipH = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tflipV = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\t\tif (terminal.shape != null && terminal.shape.stencil != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tflipH = (mxUtils.getValue(terminal.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\t\tflipV = (mxUtils.getValue(terminal.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpoint = perimeter(bounds, terminal, point, orthogonal);\n\n\t\t\t\tif (point != null)\n\t\t\t\t{\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (point == null)\n\t\t{\n\t\t\tpoint = this.getPoint(terminal);\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getRoutingCenterX\n * \n * Returns the x-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterX = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_X]) || 0 : 0;\n\n\treturn state.getCenterX() + f * state.width;\n};\n\n/**\n * Function: getRoutingCenterY\n * \n * Returns the y-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterY = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_Y]) || 0 : 0;\n\n\treturn state.getCenterY() + f * state.height;\n};\n\n/**\n * Function: getPerimeterBounds\n *\n * Returns the perimeter bounds for the given terminal, edge pair as an\n * <mxRectangle>.\n * \n * If you have a model where each terminal has a relative child that should\n * act as the graphical endpoint for a connection from/to the terminal, then\n * this method can be replaced as follows:\n * \n * (code)\n * var oldGetPerimeterBounds = mxGraphView.prototype.getPerimeterBounds;\n * mxGraphView.prototype.getPerimeterBounds = function(terminal, edge, isSource)\n * {\n *   var model = this.graph.getModel();\n *   var childCount = model.getChildCount(terminal.cell);\n * \n *   if (childCount > 0)\n *   {\n *     var child = model.getChildAt(terminal.cell, 0);\n *     var geo = model.getGeometry(child);\n *\n *     if (geo != null &&\n *         geo.relative)\n *     {\n *       var state = this.getState(child);\n *       \n *       if (state != null)\n *       {\n *         terminal = state;\n *       }\n *     }\n *   }\n *   \n *   return oldGetPerimeterBounds.apply(this, arguments);\n * };\n * (end)\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * border - Number that adds a border between the shape and the perimeter.\n */\nmxGraphView.prototype.getPerimeterBounds = function(terminal, border)\n{\n\tborder = (border != null) ? border : 0;\n\n\tif (terminal != null)\n\t{\n\t\tborder += parseFloat(terminal.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\t}\n\n\treturn terminal.getPerimeterBounds(border * this.scale);\n};\n\n/**\n * Function: getPerimeterFunction\n *\n * Returns the perimeter function for the given state.\n */\nmxGraphView.prototype.getPerimeterFunction = function(state)\n{\n\tvar perimeter = state.style[mxConstants.STYLE_PERIMETER];\n\n\t// Converts string values to objects\n\tif (typeof(perimeter) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(perimeter);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(perimeter);\n\t\t}\n\n\t\tperimeter = tmp;\n\t}\n\t\n\tif (typeof(perimeter) == \"function\")\n\t{\n\t\treturn perimeter;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getNextPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * opposite - <mxCellState> that represents the opposite terminal.\n * source - Boolean indicating if the next point for the source or target\n * should be returned.\n */\nmxGraphView.prototype.getNextPoint = function(edge, opposite, source)\n{\n\tvar pts = edge.absolutePoints;\n\tvar point = null;\n\t\n\tif (pts != null && pts.length >= 2)\n\t{\n\t\tvar count = pts.length;\n\t\tpoint = pts[(source) ? Math.min(1, count - 1) : Math.max(0, count - 2)];\n\t}\n\t\n\tif (point == null && opposite != null)\n\t{\n\t\tpoint = new mxPoint(opposite.getCenterX(), opposite.getCenterY());\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Returns the nearest ancestor terminal that is visible. The edge appears\n * to be connected to this terminal on the display. The result of this method\n * is cached in <mxCellState.getVisibleTerminalState>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose visible terminal should be returned.\n * source - Boolean that specifies if the source or target terminal\n * should be returned.\n */\nmxGraphView.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar model = this.graph.getModel();\n\tvar result = model.getTerminal(edge, source);\n\tvar best = result;\n\t\n\twhile (result != null && result != this.currentRoot)\n\t{\n\t\tif (!this.graph.isCellVisible(best) || this.isCellCollapsed(result))\n\t\t{\n\t\t\tbest = result;\n\t\t}\n\t\t\n\t\tresult = model.getParent(result);\n\t}\n\n\t// Checks if the result is valid for the current view state\n\tif (best != null && (!model.contains(best) ||\n\t\tmodel.getParent(best) == model.getRoot() ||\n\t\tbest == this.currentRoot))\n\t{\n\t\tbest = null;\n\t}\n\t\n\treturn best;\n};\n\n/**\n * Function: updateEdgeBounds\n *\n * Updates the given state using the bounding box of t\n * he absolute points.\n * Also updates <mxCellState.terminalDistance>, <mxCellState.length> and\n * <mxCellState.segments>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateEdgeBounds = function(state)\n{\n\tvar points = state.absolutePoints;\n\tvar p0 = points[0];\n\tvar pe = points[points.length - 1];\n\t\n\tif (p0.x != pe.x || p0.y != pe.y)\n\t{\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\tstate.terminalDistance = Math.sqrt(dx * dx + dy * dy);\n\t}\n\telse\n\t{\n\t\tstate.terminalDistance = 0;\n\t}\n\t\n\tvar length = 0;\n\tvar segments = [];\n\tvar pt = p0;\n\t\n\tif (pt != null)\n\t{\n\t\tvar minX = pt.x;\n\t\tvar minY = pt.y;\n\t\tvar maxX = minX;\n\t\tvar maxY = minY;\n\t\t\n\t\tfor (var i = 1; i < points.length; i++)\n\t\t{\n\t\t\tvar tmp = points[i];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar dx = pt.x - tmp.x;\n\t\t\t\tvar dy = pt.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar segment = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tsegments.push(segment);\n\t\t\t\tlength += segment;\n\t\t\t\t\n\t\t\t\tpt = tmp;\n\t\t\t\t\n\t\t\t\tminX = Math.min(pt.x, minX);\n\t\t\t\tminY = Math.min(pt.y, minY);\n\t\t\t\tmaxX = Math.max(pt.x, maxX);\n\t\t\t\tmaxY = Math.max(pt.y, maxY);\n\t\t\t}\n\t\t}\n\t\t\n\t\tstate.length = length;\n\t\tstate.segments = segments;\n\t\t\n\t\tvar markerSize = 1; // TODO: include marker size\n\t\t\n\t\tstate.x = minX;\n\t\tstate.y = minY;\n\t\tstate.width = Math.max(markerSize, maxX - minX);\n\t\tstate.height = Math.max(markerSize, maxY - minY);\n\t}\n};\n\n/**\n * Function: getPoint\n *\n * Returns the absolute point on the edge for the given relative\n * <mxGeometry> as an <mxPoint>. The edge is represented by the given\n * <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * geometry - <mxGeometry> that represents the relative location.\n */\nmxGraphView.prototype.getPoint = function(state, geometry)\n{\n\tvar x = state.getCenterX();\n\tvar y = state.getCenterY();\n\t\n\tif (state.segments != null && (geometry == null || geometry.relative))\n\t{\n\t\tvar gx = (geometry != null) ? geometry.x / 2 : 0;\n\t\tvar pointCount = state.absolutePoints.length;\n\t\tvar dist = Math.round((gx + 0.5) * state.length);\n\t\tvar segment = state.segments[0];\n\t\tvar length = 0;\t\t\t\t\n\t\tvar index = 1;\n\n\t\twhile (dist >= Math.round(length + segment) && index < pointCount - 1)\n\t\t{\n\t\t\tlength += segment;\n\t\t\tsegment = state.segments[index++];\n\t\t}\n\n\t\tvar factor = (segment == 0) ? 0 : (dist - length) / segment;\n\t\tvar p0 = state.absolutePoints[index-1];\n\t\tvar pe = state.absolutePoints[index];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar gy = 0;\n\t\t\tvar offsetX = 0;\n\t\t\tvar offsetY = 0;\n\n\t\t\tif (geometry != null)\n\t\t\t{\n\t\t\t\tgy = geometry.y;\n\t\t\t\tvar offset = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (offset != null)\n\t\t\t\t{\n\t\t\t\t\toffsetX = offset.x;\n\t\t\t\t\toffsetY = offset.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\tvar nx = (segment == 0) ? 0 : dy / segment;\n\t\t\tvar ny = (segment == 0) ? 0 : dx / segment;\n\t\t\t\n\t\t\tx = p0.x + dx * factor + (nx * gy + offsetX) * this.scale;\n\t\t\ty = p0.y + dy * factor - (ny * gy - offsetY) * this.scale;\n\t\t}\n\t}\n\telse if (geometry != null)\n\t{\n\t\tvar offset = geometry.offset;\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tx += offset.x;\n\t\t\ty += offset.y;\n\t\t}\n\t}\n\t\n\treturn new mxPoint(x, y);\t\t\n};\n\n/**\n * Function: getRelativePoint\n *\n * Gets the relative point that describes the given, absolute label\n * position for the given edge state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * x - Specifies the x-coordinate of the absolute label location.\n * y - Specifies the y-coordinate of the absolute label location.\n */\nmxGraphView.prototype.getRelativePoint = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar pointCount = edgeState.absolutePoints.length;\n\t\t\n\t\tif (geometry.relative && pointCount > 1)\n\t\t{\n\t\t\tvar totalLength = edgeState.length;\n\t\t\tvar segments = edgeState.segments;\n\n\t\t\t// Works which line segment the point of the label is closest to\n\t\t\tvar p0 = edgeState.absolutePoints[0];\n\t\t\tvar pe = edgeState.absolutePoints[1];\n\t\t\tvar minDist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tvar index = 0;\n\t\t\tvar tmp = 0;\n\t\t\tvar length = 0;\n\t\t\t\n\t\t\tfor (var i = 2; i < pointCount; i++)\n\t\t\t{\n\t\t\t\ttmp += segments[i - 2];\n\t\t\t\tpe = edgeState.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\t\tif (dist <= minDist)\n\t\t\t\t{\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t\tlength = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp0 = pe;\n\t\t\t}\n\t\t\t\n\t\t\tvar seg = segments[index];\n\t\t\tp0 = edgeState.absolutePoints[index];\n\t\t\tpe = edgeState.absolutePoints[index + 1];\n\t\t\t\n\t\t\tvar x2 = p0.x;\n\t\t\tvar y2 = p0.y;\n\t\t\t\n\t\t\tvar x1 = pe.x;\n\t\t\tvar y1 = pe.y;\n\t\t\t\n\t\t\tvar px = x;\n\t\t\tvar py = y;\n\t\t\t\n\t\t\tvar xSegment = x2 - x1;\n\t\t\tvar ySegment = y2 - y1;\n\t\t\t\n\t\t\tpx -= x1;\n\t\t\tpy -= y1;\n\t\t\tvar projlenSq = 0;\n\t\t\t\n\t\t\tpx = xSegment - px;\n\t\t\tpy = ySegment - py;\n\t\t\tvar dotprod = px * xSegment + py * ySegment;\n\n\t\t\tif (dotprod <= 0.0)\n\t\t\t{\n\t\t\t\tprojlenSq = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprojlenSq = dotprod * dotprod\n\t\t\t\t\t\t/ (xSegment * xSegment + ySegment * ySegment);\n\t\t\t}\n\n\t\t\tvar projlen = Math.sqrt(projlenSq);\n\n\t\t\tif (projlen > seg)\n\t\t\t{\n\t\t\t\tprojlen = seg;\n\t\t\t}\n\n\t\t\tvar yDistance = Math.sqrt(mxUtils.ptSegDistSq(p0.x, p0.y, pe\n\t\t\t\t\t.x, pe.y, x, y));\n\t\t\tvar direction = mxUtils.relativeCcw(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tif (direction == -1)\n\t\t\t{\n\t\t\t\tyDistance = -yDistance;\n\t\t\t}\n\n\t\t\t// Constructs the relative point for the label\n\t\t\treturn new mxPoint(((totalLength / 2 - length - projlen) / totalLength) * -2,\n\t\t\t\t\t\tyDistance / this.scale);\n\t\t}\n\t}\n\t\n\treturn new mxPoint();\n};\n\n/**\n * Function: updateEdgeLabelOffset\n *\n * Updates <mxCellState.absoluteOffset> for the given state. The absolute\n * offset is normally used for the position of the edge label. Is is\n * calculated from the geometry as an absolute offset from the center\n * between the two endpoints if the geometry is absolute, or as the\n * relative distance between the center along the line and the absolute\n * orthogonal distance if the geometry is relative.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateEdgeLabelOffset = function(state)\n{\n\tvar points = state.absolutePoints;\n\t\n\tstate.absoluteOffset.x = state.getCenterX();\n\tstate.absoluteOffset.y = state.getCenterY();\n\n\tif (points != null && points.length > 0 && state.segments != null)\n\t{\n\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\tvar offset = this.getPoint(state, geometry);\n\t\t\t\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset = offset;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar dx = pe.x - p0.x;\n\t\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\tvar x0 = 0;\n\t\t\t\tvar y0 = 0;\n\n\t\t\t\tvar off = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tx0 = off.x;\n\t\t\t\t\ty0 = off.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar x = p0.x + dx / 2 + x0 * this.scale;\n\t\t\t\tvar y = p0.y + dy / 2 + y0 * this.scale;\n\t\t\t\t\n\t\t\t\tstate.absoluteOffset.x = x;\n\t\t\t\tstate.absoluteOffset.y = y;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getState\n *\n * Returns the <mxCellState> for the given cell. If create is true, then\n * the state is created if it does not yet exist.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be returned.\n * create - Optional boolean indicating if a new state should be created\n * if it does not yet exist. Default is false.\n */\nmxGraphView.prototype.getState = function(cell, create)\n{\n\tcreate = create || false;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.get(cell);\n\t\t\n\t\tif (create && (state == null || this.updateStyle) && this.graph.isCellVisible(cell))\n\t\t{\n\t\t\tif (state == null)\n\t\t\t{\n\t\t\t\tstate = this.createState(cell);\n\t\t\t\tthis.states.put(cell, state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.style = this.graph.getCellStyle(cell);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: isRendering\n *\n * Returns <rendering>.\n */\nmxGraphView.prototype.isRendering = function()\n{\n\treturn this.rendering;\n};\n\n/**\n * Function: setRendering\n *\n * Sets <rendering>.\n */\nmxGraphView.prototype.setRendering = function(value)\n{\n\tthis.rendering = value;\n};\n\n/**\n * Function: isAllowEval\n *\n * Returns <allowEval>.\n */\nmxGraphView.prototype.isAllowEval = function()\n{\n\treturn this.allowEval;\n};\n\n/**\n * Function: setAllowEval\n *\n * Sets <allowEval>.\n */\nmxGraphView.prototype.setAllowEval = function(value)\n{\n\tthis.allowEval = value;\n};\n\n/**\n * Function: getStates\n *\n * Returns <states>.\n */\nmxGraphView.prototype.getStates = function()\n{\n\treturn this.states;\n};\n\n/**\n * Function: setStates\n *\n * Sets <states>.\n */\nmxGraphView.prototype.setStates = function(value)\n{\n\tthis.states = value;\n};\n\n/**\n * Function: getCellStates\n *\n * Returns the <mxCellStates> for the given array of <mxCells>. The array\n * contains all states that are not null, that is, the returned array may\n * have less elements than the given array. If no argument is given, then\n * this returns <states>.\n */\nmxGraphView.prototype.getCellStates = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\treturn this.states;\n\t}\n\telse\n\t{\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tresult.push(state);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: removeState\n *\n * Removes and returns the <mxCellState> for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be removed.\n */\nmxGraphView.prototype.removeState = function(cell)\n{\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.remove(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.graph.cellRenderer.destroy(state);\n\t\t\tstate.invalid = true;\n\t\t\tstate.destroy();\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: createState\n *\n * Creates and returns an <mxCellState> for the given cell and initializes\n * it using <mxCellRenderer.initialize>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a new <mxCellState> should be created.\n */\nmxGraphView.prototype.createState = function(cell)\n{\n\treturn new mxCellState(this, cell, this.graph.getCellStyle(cell));\n};\n\n/**\n * Function: getCanvas\n *\n * Returns the DOM node that contains the background-, draw- and\n * overlay- and decoratorpanes.\n */\nmxGraphView.prototype.getCanvas = function()\n{\n\treturn this.canvas;\n};\n\n/**\n * Function: getBackgroundPane\n *\n * Returns the DOM node that represents the background layer.\n */\nmxGraphView.prototype.getBackgroundPane = function()\n{\n\treturn this.backgroundPane;\n};\n\n/**\n * Function: getDrawPane\n *\n * Returns the DOM node that represents the main drawing layer.\n */\nmxGraphView.prototype.getDrawPane = function()\n{\n\treturn this.drawPane;\n};\n\n/**\n * Function: getOverlayPane\n *\n * Returns the DOM node that represents the layer above the drawing layer.\n */\nmxGraphView.prototype.getOverlayPane = function()\n{\n\treturn this.overlayPane;\n};\n\n/**\n * Function: getDecoratorPane\n *\n * Returns the DOM node that represents the topmost drawing layer.\n */\nmxGraphView.prototype.getDecoratorPane = function()\n{\n\treturn this.decoratorPane;\n};\n\n/**\n * Function: isContainerEvent\n * \n * Returns true if the event origin is one of the drawing panes or\n * containers of the view.\n */\nmxGraphView.prototype.isContainerEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\n\treturn (source == this.graph.container ||\n\t\tsource.parentNode == this.backgroundPane ||\n\t\t(source.parentNode != null &&\n\t\tsource.parentNode.parentNode == this.backgroundPane) ||\n\t\tsource == this.canvas.parentNode ||\n\t\tsource == this.canvas ||\n\t\tsource == this.backgroundPane ||\n\t\tsource == this.drawPane ||\n\t\tsource == this.overlayPane ||\n\t\tsource == this.decoratorPane);\n};\n\n/**\n * Function: isScrollEvent\n * \n * Returns true if the event origin is one of the scrollbars of the\n * container in IE. Such events are ignored.\n */\n mxGraphView.prototype.isScrollEvent = function(evt)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar pt = new mxPoint(evt.clientX - offset.x, evt.clientY - offset.y);\n\n\tvar outWidth = this.graph.container.offsetWidth;\n\tvar inWidth = this.graph.container.clientWidth;\n\n\tif (outWidth > inWidth && pt.x > inWidth + 2 && pt.x <= outWidth)\n\t{\n\t\treturn true;\n\t}\n\n\tvar outHeight = this.graph.container.offsetHeight;\n\tvar inHeight = this.graph.container.clientHeight;\n\t\n\tif (outHeight > inHeight && pt.y > inHeight + 2 && pt.y <= outHeight)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: init\n *\n * Initializes the graph event dispatch loop for the specified container\n * and invokes <create> to create the required DOM nodes for the display.\n */\nmxGraphView.prototype.init = function()\n{\n\tthis.installListeners();\n\t\n\t// Creates the DOM nodes for the respective display dialect\n\tvar graph = this.graph;\n\t\n\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tthis.createSvg();\n\t}\n\telse if (graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tthis.createVml();\n\t}\n\telse\n\t{\n\t\tthis.createHtml();\n\t}\n};\n\n/**\n * Function: installListeners\n *\n * Installs the required listeners in the container.\n */\nmxGraphView.prototype.installListeners = function()\n{\n\tvar graph = this.graph;\n\tvar container = graph.container;\n\t\n\tif (container != null)\n\t{\n\t\t// Support for touch device gestures (eg. pinch to zoom)\n\t\t// Double-tap handling is implemented in mxGraph.fireMouseEvent\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(container, 'gesturestart', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t\t\n\t\t\tmxEvent.addListener(container, 'gesturechange', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\n\t\t\tmxEvent.addListener(container, 'gestureend', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Fires event only for one pointer per gesture\n\t\tvar pointerId = null;\n\t\t\n\t\t// Adds basic listeners for graph event dispatching\n\t\tmxEvent.addGestureListeners(container, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Condition to avoid scrollbar events starting a rubberband selection\n\t\t\tif (this.isContainerEvent(evt) && ((!mxClient.IS_IE && !mxClient.IS_IE11 && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_OP && !mxClient.IS_SF) || !this.isScrollEvent(evt)))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\tpointerId = evt.pointerId;\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt) && (pointerId == null || evt.pointerId == pointerId))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t\t\n\t\t\tpointerId = null;\n\t\t}));\n\t\t\n\t\t// Adds listener for double click handling on background, this does always\n\t\t// use native event handler, we assume that the DOM of the background\n\t\t// does not change during the double click\n\t\tmxEvent.addListener(container, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.dblClick(evt);\n\t\t\t}\n\t\t}));\n\n\t\t// Workaround for touch events which started on some DOM node\n\t\t// on top of the container, in which case the cells under the\n\t\t// mouse for the move and up events are not detected.\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar state = null;\n\t\t\t\n\t\t\t// Workaround for touch events which started on some DOM node\n\t\t\t// on top of the container, in which case the cells under the\n\t\t\t// mouse for the move and up events are not detected.\n\t\t\tif (mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(container, x, y);\n\t\t\t\tstate = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn state;\n\t\t};\n\t\t\n\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t// container and finishing the handling of a single gesture\n\t\t// Implemented via graph event dispatch loop to avoid duplicate events\n\t\t// in Firefox and Chrome\n\t\tgraph.addMouseListener(\n\t\t{\n\t\t\tmouseDown: function(sender, me)\n\t\t\t{\n\t\t\t\tgraph.popupMenuHandler.hideMenu();\n\t\t\t},\n\t\t\tmouseMove: function() { },\n\t\t\tmouseUp: function() { }\n\t\t});\n\t\t\n\t\tthis.moveHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\tif (graph.tooltipHandler != null && graph.tooltipHandler.isHideOnHover())\n\t\t\t{\n\t\t\t\tgraph.tooltipHandler.hide();\n\t\t\t}\n\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden' && !mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.endHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden')\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t}\n};\n\n/**\n * Function: createHtml\n *\n * Creates the DOM nodes for the HTML display.\n */\nmxGraphView.prototype.createHtml = function()\n{\n\tvar container = this.graph.container;\n\t\n\tif (container != null)\n\t{\n\t\tthis.canvas = this.createHtmlPane('100%', '100%');\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\n\t\t// Uses minimal size for inner DIVs on Canvas. This is required\n\t\t// for correct event processing in IE. If we have an overlapping\n\t\t// DIV then the events on the cells are only fired for labels.\n\t\tthis.backgroundPane = this.createHtmlPane('1px', '1px');\n\t\tthis.drawPane = this.createHtmlPane('1px', '1px');\n\t\tthis.overlayPane = this.createHtmlPane('1px', '1px');\n\t\tthis.decoratorPane = this.createHtmlPane('1px', '1px');\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\n\t\tcontainer.appendChild(this.canvas);\n\t\tthis.updateContainerStyle(container);\n\t\t\n\t\t// Implements minWidth/minHeight in quirks mode\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tvar onResize = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar bounds = this.getGraphBounds();\n\t\t\t\tvar width = bounds.x + bounds.width + this.graph.border;\n\t\t\t\tvar height = bounds.y + bounds.height + this.graph.border;\n\t\t\t\t\n\t\t\t\tthis.updateHtmlCanvasSize(width, height);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addListener(window, 'resize', onResize);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHtmlCanvasSize\n * \n * Updates the size of the HTML canvas.\n */\nmxGraphView.prototype.updateHtmlCanvasSize = function(width, height)\n{\n\tif (this.graph.container != null)\n\t{\n\t\tvar ow = this.graph.container.offsetWidth;\n\t\tvar oh = this.graph.container.offsetHeight;\n\n\t\tif (ow < width)\n\t\t{\n\t\t\tthis.canvas.style.width = width + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.width = '100%';\n\t\t}\n\n\t\tif (oh < height)\n\t\t{\n\t\t\tthis.canvas.style.height = height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.height = '100%';\n\t\t}\n\t}\n};\n\n/**\n * Function: createHtmlPane\n * \n * Creates and returns a drawing pane in HTML (DIV).\n */\nmxGraphView.prototype.createHtmlPane = function(width, height)\n{\n\tvar pane = document.createElement('DIV');\n\t\n\tif (width != null && height != null)\n\t{\n\t\tpane.style.position = 'absolute';\n\t\tpane.style.left = '0px';\n\t\tpane.style.top = '0px';\n\n\t\tpane.style.width = width;\n\t\tpane.style.height = height;\n\t}\n\telse\n\t{\n\t\tpane.style.position = 'relative';\n\t}\n\t\n\treturn pane;\n};\n\n/**\n * Function: createVml\n *\n * Creates the DOM nodes for the VML display.\n */\nmxGraphView.prototype.createVml = function()\n{\n\tvar container = this.graph.container;\n\n\tif (container != null)\n\t{\n\t\tvar width = container.offsetWidth;\n\t\tvar height = container.offsetHeight;\n\t\tthis.canvas = this.createVmlPane(width, height);\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\t\n\t\tthis.backgroundPane = this.createVmlPane(width, height);\n\t\tthis.drawPane = this.createVmlPane(width, height);\n\t\tthis.overlayPane = this.createVmlPane(width, height);\n\t\tthis.decoratorPane = this.createVmlPane(width, height);\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\t\t\n\t\tcontainer.appendChild(this.canvas);\n\t}\n};\n\n/**\n * Function: createVmlPane\n * \n * Creates a drawing pane in VML (group).\n */\nmxGraphView.prototype.createVmlPane = function(width, height)\n{\n\tvar pane = document.createElement(mxClient.VML_PREFIX + ':group');\n\t\n\t// At this point the width and height are potentially\n\t// uninitialized. That's OK.\n\tpane.style.position = 'absolute';\n\tpane.style.left = '0px';\n\tpane.style.top = '0px';\n\n\tpane.style.width = width + 'px';\n\tpane.style.height = height + 'px';\n\n\tpane.setAttribute('coordsize', width + ',' + height);\n\tpane.setAttribute('coordorigin', '0,0');\n\t\n\treturn pane;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the DOM nodes for the SVG display.\n */\nmxGraphView.prototype.createSvg = function()\n{\n\tvar container = this.graph.container;\n\tthis.canvas = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\n\t// For background image\n\tthis.backgroundPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.backgroundPane);\n\n\t// Adds two layers (background is early feature)\n\tthis.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.drawPane);\n\n\tthis.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.overlayPane);\n\t\n\tthis.decoratorPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.decoratorPane);\n\t\n\tvar root = document.createElementNS(mxConstants.NS_SVG, 'svg');\n\troot.style.left = '0px';\n\troot.style.top = '0px';\n\troot.style.width = '100%';\n\troot.style.height = '100%';\n\t\n\t// NOTE: In standards mode, the SVG must have block layout\n\t// in order for the container DIV to not show scrollbars.\n\troot.style.display = 'block';\n\troot.appendChild(this.canvas);\n\t\n\t// Workaround for scrollbars in IE11 and below\n\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t{\n\t\troot.style.overflow = 'hidden';\n\t}\n\n\tif (container != null)\n\t{\n\t\tcontainer.appendChild(root);\n\t\tthis.updateContainerStyle(container);\n\t}\n};\n\n/**\n * Function: updateContainerStyle\n * \n * Updates the style of the container after installing the SVG DOM elements.\n */\nmxGraphView.prototype.updateContainerStyle = function(container)\n{\n\t// Workaround for offset of container\n\tvar style = mxUtils.getCurrentStyle(container);\n\t\n\tif (style != null && style.position == 'static')\n\t{\n\t\tcontainer.style.position = 'relative';\n\t}\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tcontainer.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the view and all its resources.\n */\nmxGraphView.prototype.destroy = function()\n{\n\tvar root = (this.canvas != null) ? this.canvas.ownerSVGElement : null;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.canvas;\n\t}\n\t\n\tif (root != null && root.parentNode != null)\n\t{\n\t\tthis.clear(this.currentRoot, true);\n\t\tmxEvent.removeGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t\tmxEvent.release(this.graph.container);\n\t\troot.parentNode.removeChild(root);\n\t\t\n\t\tthis.moveHandler = null;\n\t\tthis.endHandler = null;\n\t\tthis.canvas = null;\n\t\tthis.backgroundPane = null;\n\t\tthis.drawPane = null;\n\t\tthis.overlayPane = null;\n\t\tthis.decoratorPane = null;\n\t}\n};\n\n/**\n * Class: mxCurrentRootChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxCurrentRootChange(view, root)\n{\n\tthis.view = view;\n\tthis.root = root;\n\tthis.previous = root;\n\tthis.isUp = root == null;\n\t\n\tif (!this.isUp)\n\t{\n\t\tvar tmp = this.view.currentRoot;\n\t\tvar model = this.view.graph.getModel();\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp == root)\n\t\t\t{\n\t\t\t\tthis.isUp = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = model.getParent(tmp);\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxCurrentRootChange.prototype.execute = function()\n{\n\tvar tmp = this.view.currentRoot;\n\tthis.view.currentRoot = this.previous;\n\tthis.previous = tmp;\n\n\tvar translate = this.view.graph.getTranslateForRoot(this.view.currentRoot);\n\t\n\tif (translate != null)\n\t{\n\t\tthis.view.translate = new mxPoint(-translate.x, -translate.y);\n\t}\n\n\tif (this.isUp)\n\t{\n\t\tthis.view.clear(this.view.currentRoot, true);\n\t\tthis.view.validate();\n\t}\n\telse\n\t{\n\t\tthis.view.refresh();\n\t}\n\t\n\tvar name = (this.isUp) ? mxEvent.UP : mxEvent.DOWN;\n\tthis.view.fireEvent(new mxEventObject(name,\n\t\t'root', this.view.currentRoot, 'previous', this.previous));\n\tthis.isUp = !this.isUp;\n};\n\n__mxOutput.mxGraphView = typeof mxGraphView !== 'undefined' ? mxGraphView : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraph\n *\n * Extends <mxEventSource> to implement a graph component for\n * the browser. This is the main class of the package. To activate\n * panning and connections use <setPanning> and <setConnectable>.\n * For rubberband selection you must create a new instance of\n * <mxRubberband>. The following listeners are added to\n * <mouseListeners> by default:\n * \n * - <tooltipHandler>: <mxTooltipHandler> that displays tooltips\n * - <panningHandler>: <mxPanningHandler> for panning and popup menus\n * - <connectionHandler>: <mxConnectionHandler> for creating connections\n * - <graphHandler>: <mxGraphHandler> for moving and cloning cells\n * \n * These listeners will be called in the above order if they are enabled.\n *\n * Background Images:\n * \n * To display a background image, set the image, image width and\n * image height using <setBackgroundImage>. If one of the\n * above values has changed then the <view>'s <mxGraphView.validate>\n * should be invoked.\n * \n * Cell Images:\n * \n * To use images in cells, a shape must be specified in the default\n * vertex style (or any named style). Possible shapes are\n * <mxConstants.SHAPE_IMAGE> and <mxConstants.SHAPE_LABEL>.\n * The code to change the shape used in the default vertex style,\n * the following code is used:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;\n * (end)\n * \n * For the default vertex style, the image to be displayed can be\n * specified in a cell's style using the <mxConstants.STYLE_IMAGE>\n * key and the image URL as a value, for example:\n * \n * (code)\n * image=http://www.example.com/image.gif\n * (end)\n * \n * For a named style, the the stylename must be the first element\n * of the cell style:\n * \n * (code)\n * stylename;image=http://www.example.com/image.gif\n * (end)\n * \n * A cell style can have any number of key=value pairs added, divided\n * by a semicolon as follows:\n * \n * (code)\n * [stylename;|key=value;]\n * (end)\n *\n * Labels:\n * \n * The cell labels are defined by <getLabel> which uses <convertValueToString>\n * if <labelsVisible> is true. If a label must be rendered as HTML markup, then\n * <isHtmlLabel> should return true for the respective cell. If all labels\n * contain HTML markup, <htmlLabels> can be set to true. NOTE: Enabling HTML\n * labels carries a possible security risk (see the section on security in\n * the manual).\n * \n * If wrapping is needed for a label, then <isHtmlLabel> and <isWrapping> must\n * return true for the cell whose label should be wrapped. See <isWrapping> for\n * an example.\n * \n * If clipping is needed to keep the rendering of a HTML label inside the\n * bounds of its vertex, then <isClipping> should return true for the\n * respective cell.\n * \n * By default, edge labels are movable and vertex labels are fixed. This can be\n * changed by setting <edgeLabelsMovable> and <vertexLabelsMovable>, or by\n * overriding <isLabelMovable>.\n *\n * In-place Editing:\n * \n * In-place editing is started with a doubleclick or by typing F2.\n * Programmatically, <edit> is used to check if the cell is editable\n * (<isCellEditable>) and call <startEditingAtCell>, which invokes\n * <mxCellEditor.startEditing>. The editor uses the value returned\n * by <getEditingValue> as the editing value.\n * \n * After in-place editing, <labelChanged> is called, which invokes\n * <mxGraphModel.setValue>, which in turn calls\n * <mxGraphModel.valueForCellChanged> via <mxValueChange>.\n * \n * The event that triggers in-place editing is passed through to the\n * <cellEditor>, which may take special actions depending on the type of the\n * event or mouse location, and is also passed to <getEditingValue>. The event\n * is then passed back to the event processing functions which can perform\n * specific actions based on the trigger event.\n * \n * Tooltips:\n * \n * Tooltips are implemented by <getTooltip>, which calls <getTooltipForCell>\n * if a cell is under the mousepointer. The default implementation checks if\n * the cell has a getTooltip function and calls it if it exists. Hence, in order\n * to provide custom tooltips, the cell must provide a getTooltip function, or \n * one of the two above functions must be overridden.\n * \n * Typically, for custom cell tooltips, the latter function is overridden as\n * follows:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * When using a config file, the function is overridden in the mxGraph section\n * using the following entry:\n * \n * (code)\n * <add as=\"getTooltipForCell\"><![CDATA[\n *   function(cell)\n *   {\n *     var label = this.convertValueToString(cell);\n *     return 'Tooltip for '+label;\n *   }\n * ]]></add>\n * (end)\n * \n * \"this\" refers to the graph in the implementation, so for example to check if \n * a cell is an edge, you use this.getModel().isEdge(cell)\n *\n * For replacing the default implementation of <getTooltipForCell> (rather than \n * replacing the function on a specific instance), the following code should be \n * used after loading the JavaScript files, but before creating a new mxGraph \n * instance using <mxGraph>:\n * \n * (code)\n * mxGraph.prototype.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * Shapes & Styles:\n * \n * The implementation of new shapes is demonstrated in the examples. We'll assume\n * that we have implemented a custom shape with the name BoxShape which we want\n * to use for drawing vertices. To use this shape, it must first be registered in\n * the cell renderer as follows:\n * \n * (code)\n * mxCellRenderer.registerShape('box', BoxShape);\n * (end)\n * \n * The code registers the BoxShape constructor under the name box in the cell\n * renderer of the graph. The shape can now be referenced using the shape-key in\n * a style definition. (The cell renderer contains a set of additional shapes,\n * namely one for each constant with a SHAPE-prefix in <mxConstants>.)\n *\n * Styles are a collection of key, value pairs and a stylesheet is a collection\n * of named styles. The names are referenced by the cellstyle, which is stored\n * in <mxCell.style> with the following format: [stylename;|key=value;]. The\n * string is resolved to a collection of key, value pairs, where the keys are\n * overridden with the values in the string.\n *\n * When introducing a new shape, the name under which the shape is registered\n * must be used in the stylesheet. There are three ways of doing this:\n * \n *   - By changing the default style, so that all vertices will use the new\n * \t\tshape\n *   - By defining a new style, so that only vertices with the respective\n * \t\tcellstyle will use the new shape\n *   - By using shape=box in the cellstyle's optional list of key, value pairs\n * \t\tto be overridden\n *\n * In the first case, the code to fetch and modify the default style for\n * vertices is as follows:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * (end)\n * \n * The code takes the default vertex style, which is used for all vertices that\n * do not have a specific cellstyle, and modifies the value for the shape-key\n * in-place to use the new BoxShape for drawing vertices. This is done by\n * assigning the box value in the second line, which refers to the name of the\n * BoxShape in the cell renderer.\n * \n * In the second case, a collection of key, value pairs is created and then\n * added to the stylesheet under a new name. In order to distinguish the\n * shapename and the stylename we'll use boxstyle for the stylename:\n * \n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * style[mxConstants.STYLE_STROKECOLOR] = '#000000';\n * style[mxConstants.STYLE_FONTCOLOR] = '#000000';\n * graph.getStylesheet().putCellStyle('boxstyle', style);\n * (end)\n * \n * The code adds a new style with the name boxstyle to the stylesheet. To use\n * this style with a cell, it must be referenced from the cellstyle as follows:\n * \n * (code)\n * var vertex = graph.insertVertex(parent, null, 'Hello, World!', 20, 20, 80, 20,\n * \t\t\t\t'boxstyle');\n * (end)\n * \n * To summarize, each new shape must be registered in the <mxCellRenderer> with\n * a unique name. That name is then used as the value of the shape-key in a\n * default or custom style. If there are multiple custom shapes, then there\n * should be a separate style for each shape.\n * \n * Inheriting Styles:\n * \n * For fill-, stroke-, gradient-, font- and indicatorColors special keywords\n * can be used. The inherit keyword for one of these colors will inherit the\n * color for the same key from the parent cell. The swimlane keyword does the\n * same, but inherits from the nearest swimlane in the ancestor hierarchy.\n * Finally, the indicated keyword will use the color of the indicator as the\n * color for the given key.\n * \n * Scrollbars:\n * \n * The <containers> overflow CSS property defines if scrollbars are used to\n * display the graph. For values of 'auto' or 'scroll', the scrollbars will\n * be shown. Note that the <resizeContainer> flag is normally not used\n * together with scrollbars, as it will resize the container to match the\n * size of the graph after each change.\n * \n * Multiplicities and Validation:\n * \n * To control the possible connections in mxGraph, <getEdgeValidationError> is\n * used. The default implementation of the function uses <multiplicities>,\n * which is an array of <mxMultiplicity>. Using this class allows to establish\n * simple multiplicities, which are enforced by the graph.\n * \n * The <mxMultiplicity> uses <mxCell.is> to determine for which terminals it\n * applies. The default implementation of <mxCell.is> works with DOM nodes (XML\n * nodes) and checks if the given type parameter matches the nodeName of the\n * node (case insensitive). Optionally, an attributename and value can be\n * specified which are also checked.\n * \n * <getEdgeValidationError> is called whenever the connectivity of an edge\n * changes. It returns an empty string or an error message if the edge is\n * invalid or null if the edge is valid. If the returned string is not empty\n * then it is displayed as an error message.\n * \n * <mxMultiplicity> allows to specify the multiplicity between a terminal and\n * its possible neighbors. For example, if any rectangle may only be connected\n * to, say, a maximum of two circles you can add the following rule to\n * <multiplicities>:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only shape targets allowed'));\n * (end)\n * \n * This will display the first error message whenever a rectangle is connected\n * to more than two circles and the second error message if a rectangle is\n * connected to anything but a circle.\n * \n * For certain multiplicities, such as a minimum of 1 connection, which cannot\n * be enforced at cell creation time (unless the cell is created together with\n * the connection), mxGraph offers <validate> which checks all multiplicities\n * for all cells and displays the respective error messages in an overlay icon\n * on the cells.\n * \n * If a cell is collapsed and contains validation errors, a respective warning\n * icon is attached to the collapsed cell.\n * \n * Auto-Layout:\n * \n * For automatic layout, the <getLayout> hook is provided in <mxLayoutManager>.\n * It can be overridden to return a layout algorithm for the children of a\n * given cell.\n * \n * Unconnected edges:\n * \n * The default values for all switches are designed to meet the requirements of\n * general diagram drawing applications. A very typical set of settings to\n * avoid edges that are not connected is the following:\n * \n * (code)\n * graph.setAllowDanglingEdges(false);\n * graph.setDisconnectOnMove(false);\n * (end)\n * \n * Setting the <cloneInvalidEdges> switch to true is optional. This switch\n * controls if edges are inserted after a copy, paste or clone-drag if they are\n * invalid. For example, edges are invalid if copied or control-dragged without \n * having selected the corresponding terminals and allowDanglingEdges is\n * false, in which case the edges will not be cloned if the switch is false.\n * \n * Output:\n * \n * To produce an XML representation for a diagram, the following code can be\n * used.\n * \n * (code)\n * var enc = new mxCodec(mxUtils.createXmlDocument());\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will produce an XML node than can be handled using the DOM API or\n * turned into a string representation using the following code:\n * \n * (code)\n * var xml = mxUtils.getXml(node);\n * (end)\n * \n * To obtain a formatted string, mxUtils.getPrettyXml can be used instead.\n * \n * This string can now be stored in a local persistent storage (for example\n * using Google Gears) or it can be passed to a backend using mxUtils.post as\n * follows. The url variable is the URL of the Java servlet, PHP page or HTTP\n * handler, depending on the server.\n * \n * (code)\n * var xmlString = encodeURIComponent(mxUtils.getXml(node));\n * mxUtils.post(url, 'xml='+xmlString, function(req)\n * {\n *   // Process server response using req of type mxXmlRequest\n * });\n * (end)\n * \n * Input:\n * \n * To load an XML representation of a diagram into an existing graph object\n * mxUtils.load can be used as follows. The url variable is the URL of the Java\n * servlet, PHP page or HTTP handler that produces the XML string.\n * \n * (code)\n * var xmlDoc = mxUtils.load(url).getXml();\n * var node = xmlDoc.documentElement;\n * var dec = new mxCodec(node.ownerDocument);\n * dec.decode(node, graph.getModel());\n * (end)\n * \n * For creating a page that loads the client and a diagram using a single\n * request please refer to the deployment examples in the backends.\n * \n * Functional dependencies:\n * \n * (see images/callgraph.png)\n * \n * Resources:\n *\n * resources/graph - Language resources for mxGraph\n *\n * Group: Events\n * \n * Event: mxEvent.ROOT\n * \n * Fires if the root in the model has changed. This event has no properties.\n * \n * Event: mxEvent.ALIGN_CELLS\n * \n * Fires between begin- and endUpdate in <alignCells>. The <code>cells</code>\n * and <code>align</code> properties contain the respective arguments that were\n * passed to <alignCells>.\n *\n * Event: mxEvent.FLIP_EDGE\n *\n * Fires between begin- and endUpdate in <flipEdge>. The <code>edge</code>\n * property contains the edge passed to <flipEdge>.\n * \n * Event: mxEvent.ORDER_CELLS\n * \n * Fires between begin- and endUpdate in <orderCells>. The <code>cells</code>\n * and <code>back</code> properties contain the respective arguments that were\n * passed to <orderCells>.\n *\n * Event: mxEvent.CELLS_ORDERED\n *\n * Fires between begin- and endUpdate in <cellsOrdered>. The <code>cells</code>\n * and <code>back</code> arguments contain the respective arguments that were\n * passed to <cellsOrdered>.\n * \n * Event: mxEvent.GROUP_CELLS\n * \n * Fires between begin- and endUpdate in <groupCells>. The <code>group</code>,\n * <code>cells</code> and <code>border</code> arguments contain the respective\n * arguments that were passed to <groupCells>.\n * \n * Event: mxEvent.UNGROUP_CELLS\n * \n * Fires between begin- and endUpdate in <ungroupCells>. The <code>cells</code>\n * property contains the array of cells that was passed to <ungroupCells>.\n * \n * Event: mxEvent.REMOVE_CELLS_FROM_PARENT\n * \n * Fires between begin- and endUpdate in <removeCellsFromParent>. The\n * <code>cells</code> property contains the array of cells that was passed to\n * <removeCellsFromParent>.\n * \n * Event: mxEvent.ADD_CELLS\n * \n * Fires between begin- and endUpdate in <addCells>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code> and\n * <code>target</code> properties contain the respective arguments that were\n * passed to <addCells>.\n * \n * Event: mxEvent.CELLS_ADDED\n * \n * Fires between begin- and endUpdate in <cellsAdded>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code>,\n * <code>target</code> and <code>absolute</code> properties contain the\n * respective arguments that were passed to <cellsAdded>.\n * \n * Event: mxEvent.REMOVE_CELLS\n * \n * Fires between begin- and endUpdate in <removeCells>. The <code>cells</code>\n * and <code>includeEdges</code> arguments contain the respective arguments\n * that were passed to <removeCells>.\n * \n * Event: mxEvent.CELLS_REMOVED\n * \n * Fires between begin- and endUpdate in <cellsRemoved>. The <code>cells</code>\n * argument contains the array of cells that was removed.\n * \n * Event: mxEvent.SPLIT_EDGE\n * \n * Fires between begin- and endUpdate in <splitEdge>. The <code>edge</code>\n * property contains the edge to be splitted, the <code>cells</code>,\n * <code>newEdge</code>, <code>dx</code> and <code>dy</code> properties contain\n * the respective arguments that were passed to <splitEdge>.\n * \n * Event: mxEvent.TOGGLE_CELLS\n * \n * Fires between begin- and endUpdate in <toggleCells>. The <code>show</code>,\n * <code>cells</code> and <code>includeEdges</code> properties contain the\n * respective arguments that were passed to <toggleCells>.\n * \n * Event: mxEvent.FOLD_CELLS\n * \n * Fires between begin- and endUpdate in <foldCells>. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to <foldCells>.\n * \n * Event: mxEvent.CELLS_FOLDED\n * \n * Fires between begin- and endUpdate in cellsFolded. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to\n * <cellsFolded>.\n * \n * Event: mxEvent.UPDATE_CELL_SIZE\n * \n * Fires between begin- and endUpdate in <updateCellSize>. The\n * <code>cell</code> and <code>ignoreChildren</code> properties contain the\n * respective arguments that were passed to <updateCellSize>.\n * \n * Event: mxEvent.RESIZE_CELLS\n * \n * Fires between begin- and endUpdate in <resizeCells>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <resizeCells>.\n * \n * Event: mxEvent.CELLS_RESIZED\n * \n * Fires between begin- and endUpdate in <cellsResized>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <cellsResized>.\n * \n * Event: mxEvent.MOVE_CELLS\n * \n * Fires between begin- and endUpdate in <moveCells>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code>, <code>clone</code>, <code>target</code>\n * and <code>event</code> properties contain the respective arguments that\n * were passed to <moveCells>.\n * \n * Event: mxEvent.CELLS_MOVED\n * \n * Fires between begin- and endUpdate in <cellsMoved>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code> and <code>disconnect</code> properties\n * contain the respective arguments that were passed to <cellsMoved>.\n * \n * Event: mxEvent.CONNECT_CELL\n * \n * Fires between begin- and endUpdate in <connectCell>. The <code>edge</code>,\n * <code>terminal</code> and <code>source</code> properties contain the\n * respective arguments that were passed to <connectCell>.\n * \n * Event: mxEvent.CELL_CONNECTED\n * \n * Fires between begin- and endUpdate in <cellConnected>. The\n * <code>edge</code>, <code>terminal</code> and <code>source</code> properties\n * contain the respective arguments that were passed to <cellConnected>.\n * \n * Event: mxEvent.REFRESH\n * \n * Fires after <refresh> was executed. This event has no properties.\n *\n * Event: mxEvent.CLICK\n * \n * Fires in <click> after a click event. The <code>event</code> property\n * contains the original mouse event and <code>cell</code> property contains\n * the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.DOUBLE_CLICK\n *\n * Fires in <dblClick> after a double click. The <code>event</code> property\n * contains the original mouse event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.GESTURE\n *\n * Fires in <fireGestureEvent> after a touch gesture. The <code>event</code>\n * property contains the original gesture end event and the <code>cell</code>\n * property contains the optional cell associated with the gesture.\n *\n * Event: mxEvent.TAP_AND_HOLD\n *\n * Fires in <tapAndHold> if a tap and hold event was detected. The <code>event</code>\n * property contains the initial touch event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n *\n * Event: mxEvent.FIRE_MOUSE_EVENT\n *\n * Fires in <fireMouseEvent> before the mouse listeners are invoked. The\n * <code>eventName</code> property contains the event name and the\n * <code>event</code> property contains the <mxMouseEvent>.\n *\n * Event: mxEvent.SIZE\n *\n * Fires after <sizeDidChange> was executed. The <code>bounds</code> property\n * contains the new graph bounds.\n *\n * Event: mxEvent.START_EDITING\n *\n * Fires before the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STARTED\n *\n * Fires after the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STOPPED\n *\n * Fires after the in-place editor stops in <stopEditing>.\n *\n * Event: mxEvent.LABEL_CHANGED\n *\n * Fires between begin- and endUpdate in <cellLabelChanged>. The\n * <code>cell</code> property contains the cell, the <code>value</code>\n * property contains the new value for the cell, the <code>old</code> property\n * contains the old value and the optional <code>event</code> property contains\n * the mouse event that started the edit.\n * \n * Event: mxEvent.ADD_OVERLAY\n *\n * Fires after an overlay is added in <addCellOverlay>. The <code>cell</code>\n * property contains the cell and the <code>overlay</code> property contains\n * the <mxCellOverlay> that was added.\n *\n * Event: mxEvent.REMOVE_OVERLAY\n *\n * Fires after an overlay is removed in <removeCellOverlay> and\n * <removeCellOverlays>. The <code>cell</code> property contains the cell and\n * the <code>overlay</code> property contains the <mxCellOverlay> that was\n * removed.\n * \n * Constructor: mxGraph\n * \n * Constructs a new mxGraph in the specified container. Model is an optional\n * mxGraphModel. If no model is provided, a new mxGraphModel instance is \n * used as the model. The container must have a valid owner document prior \n * to calling this function in Internet Explorer. RenderHint is a string to\n * affect the display performance and rendering in IE, but not in SVG-based \n * browsers. The parameter is mapped to <dialect>, which may \n * be one of <mxConstants.DIALECT_SVG> for SVG-based browsers, \n * <mxConstants.DIALECT_STRICTHTML> for fastest display mode,\n * <mxConstants.DIALECT_PREFERHTML> for faster display mode,\n * <mxConstants.DIALECT_MIXEDHTML> for fast and <mxConstants.DIALECT_VML> \n * for exact display mode (slowest). The dialects are defined in mxConstants.\n * The default values are DIALECT_SVG for SVG-based browsers and\n * DIALECT_MIXED for IE.\n *\n * The possible values for the renderingHint parameter are explained below:\n * \n * fast - The parameter is based on the fact that the display performance is \n * highly improved in IE if the VML is not contained within a VML group \n * element. The lack of a group element only slightly affects the display while \n * panning, but improves the performance by almost a factor of 2, while keeping \n * the display sufficiently accurate. This also allows to render certain shapes as HTML \n * if the display accuracy is not affected, which is implemented by \n * <mxShape.isMixedModeHtml>. This is the default setting and is mapped to\n * DIALECT_MIXEDHTML.\n * faster - Same as fast, but more expensive shapes are avoided. This is \n * controlled by <mxShape.preferModeHtml>. The default implementation will \n * avoid gradients and rounded rectangles, but more significant shapes, such \n * as rhombus, ellipse, actor and cylinder will be rendered accurately. This \n * setting is mapped to DIALECT_PREFERHTML.\n * fastest - Almost anything will be rendered in Html. This allows for \n * rectangles, labels and images. This setting is mapped to\n * DIALECT_STRICTHTML.\n * exact - If accurate panning is required and if the diagram is small (up\n * to 100 cells), then this value should be used. In this mode, a group is \n * created that contains the VML. This allows for accurate panning and is \n * mapped to DIALECT_VML.\n *\n * Example:\n * \n * To create a graph inside a DOM node with an id of graph:\n * (code)\n * var container = document.getElementById('graph');\n * var graph = new mxGraph(container);\n * (end)\n * \n * Parameters:\n * \n * container - Optional DOM node that acts as a container for the graph.\n * If this is null then the container can be initialized later using\n * <init>.\n * model - Optional <mxGraphModel> that constitutes the graph data.\n * renderHint - Optional string that specifies the display accuracy and\n * performance. Default is mxConstants.DIALECT_MIXEDHTML (for IE).\n * stylesheet - Optional <mxStylesheet> to be used in the graph.\n */\nfunction mxGraph(container, model, renderHint, stylesheet)\n{\n\t// Initializes the variable in case the prototype has been\n\t// modified to hold some listeners (which is possible because\n\t// the createHandlers call is executed regardless of the\n\t// arguments passed into the ctor).\n\tthis.mouseListeners = null;\n\t\n\t// Converts the renderHint into a dialect\n\tthis.renderHint = renderHint;\n\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_SVG;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_EXACT && mxClient.IS_VML)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_VML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTEST)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_STRICTHTML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTER)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_PREFERHTML;\n\t}\n\telse // default for VML\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_MIXEDHTML;\n\t}\n\t\n\t// Initializes the main members that do not require a container\n\tthis.model = (model != null) ? model : new mxGraphModel();\n\tthis.multiplicities = [];\n\tthis.imageBundles = [];\n\tthis.cellRenderer = this.createCellRenderer();\n\tthis.setSelectionModel(this.createSelectionModel());\n\tthis.setStylesheet((stylesheet != null) ? stylesheet : this.createStylesheet());\n\tthis.view = this.createGraphView();\n\t\n\t// Adds a graph model listener to update the view\n\tthis.graphModelChangeListener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t});\n\t\n\tthis.model.addListener(mxEvent.CHANGE, this.graphModelChangeListener);\n\n\t// Installs basic event handlers with disabled default settings.\n\tthis.createHandlers();\n\t\n\t// Initializes the display if a container was specified\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n\t\n\tthis.view.revalidate();\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/graph');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/graph');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxGraph.prototype = new mxEventSource();\nmxGraph.prototype.constructor = mxGraph;\n\n/**\n * Group: Variables\n */\n\n/**\n * Variable: mouseListeners\n * \n * Holds the mouse event listeners. See <fireMouseEvent>.\n */\nmxGraph.prototype.mouseListeners = null;\n\n/**\n * Variable: isMouseDown\n * \n * Holds the state of the mouse button.\n */\nmxGraph.prototype.isMouseDown = false;\n\n/**\n * Variable: model\n * \n * Holds the <mxGraphModel> that contains the cells to be displayed.\n */\nmxGraph.prototype.model = null;\n\n/**\n * Variable: view\n * \n * Holds the <mxGraphView> that caches the <mxCellStates> for the cells.\n */\nmxGraph.prototype.view = null;\n\n/**\n * Variable: stylesheet\n * \n * Holds the <mxStylesheet> that defines the appearance of the cells.\n * \n * \n * Example:\n * \n * Use the following code to read a stylesheet into an existing graph.\n * \n * (code)\n * var req = mxUtils.load('stylesheet.xml');\n * var root = req.getDocumentElement();\n * var dec = new mxCodec(root.ownerDocument);\n * dec.decode(root, graph.stylesheet);\n * (end)\n */\nmxGraph.prototype.stylesheet = null;\n\t\n/**\n * Variable: selectionModel\n * \n * Holds the <mxGraphSelectionModel> that models the current selection.\n */\nmxGraph.prototype.selectionModel = null;\n\n/**\n * Variable: cellEditor\n * \n * Holds the <mxCellEditor> that is used as the in-place editing.\n */\nmxGraph.prototype.cellEditor = null;\n\n/**\n * Variable: cellRenderer\n * \n * Holds the <mxCellRenderer> for rendering the cells in the graph.\n */\nmxGraph.prototype.cellRenderer = null;\n\n/**\n * Variable: multiplicities\n * \n * An array of <mxMultiplicities> describing the allowed\n * connections in a graph.\n */\nmxGraph.prototype.multiplicities = null;\n\n/**\n * Variable: renderHint\n * \n * RenderHint as it was passed to the constructor.\n */\nmxGraph.prototype.renderHint = null;\n\n/**\n * Variable: dialect\n * \n * Dialect to be used for drawing the graph. Possible values are all\n * constants in <mxConstants> with a DIALECT-prefix.\n */\nmxGraph.prototype.dialect = null;\n\n/**\n * Variable: gridSize\n * \n * Specifies the grid size. Default is 10.\n */\nmxGraph.prototype.gridSize = 10;\n\t\n/**\n * Variable: gridEnabled\n * \n * Specifies if the grid is enabled. This is used in <snap>. Default is\n * true.\n */\nmxGraph.prototype.gridEnabled = true;\n\n/**\n * Variable: portsEnabled\n * \n * Specifies if ports are enabled. This is used in <cellConnected> to update\n * the respective style. Default is true.\n */\nmxGraph.prototype.portsEnabled = true;\n\n/**\n * Variable: nativeDoubleClickEnabled\n * \n * Specifies if native double click events should be detected. Default is true.\n */\nmxGraph.prototype.nativeDblClickEnabled = true;\n\n/**\n * Variable: doubleTapEnabled\n * \n * Specifies if double taps on touch-based devices should be handled as a\n * double click. Default is true.\n */\nmxGraph.prototype.doubleTapEnabled = true;\n\n/**\n * Variable: doubleTapTimeout\n * \n * Specifies the timeout for double taps and non-native double clicks. Default\n * is 500 ms.\n */\nmxGraph.prototype.doubleTapTimeout = 500;\n\n/**\n * Variable: doubleTapTolerance\n * \n * Specifies the tolerance for double taps and double clicks in quirks mode.\n * Default is 25 pixels.\n */\nmxGraph.prototype.doubleTapTolerance = 25;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the x-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the y-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchTime\n * \n * Holds the time of the last touch event for double click detection.\n */\nmxGraph.prototype.lastTouchTime = 0;\n\n/**\n * Variable: tapAndHoldEnabled\n * \n * Specifies if tap and hold should be used for starting connections on touch-based\n * devices. Default is true.\n */\nmxGraph.prototype.tapAndHoldEnabled = true;\n\n/**\n * Variable: tapAndHoldDelay\n * \n * Specifies the time for a tap and hold. Default is 500 ms.\n */\nmxGraph.prototype.tapAndHoldDelay = 500;\n\n/**\n * Variable: tapAndHoldInProgress\n * \n * True if the timer for tap and hold events is running.\n */\nmxGraph.prototype.tapAndHoldInProgress = false;\n\n/**\n * Variable: tapAndHoldValid\n * \n * True as long as the timer is running and the touch events\n * stay within the given <tapAndHoldTolerance>.\n */\nmxGraph.prototype.tapAndHoldValid = false;\n\n/**\n * Variable: initialTouchX\n * \n * Holds the x-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchX = 0;\n\n/**\n * Variable: initialTouchY\n * \n * Holds the y-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchY = 0;\n\n/**\n * Variable: tolerance\n * \n * Tolerance for a move to be handled as a single click.\n * Default is 4 pixels.\n */\nmxGraph.prototype.tolerance = 4;\n\n/**\n * Variable: defaultOverlap\n * \n * Value returned by <getOverlap> if <isAllowOverlapParent> returns\n * true for the given cell. <getOverlap> is used in <constrainChild> if\n * <isConstrainChild> returns true. The value specifies the\n * portion of the child which is allowed to overlap the parent.\n */\nmxGraph.prototype.defaultOverlap = 0.5;\n\n/**\n * Variable: defaultParent\n * \n * Specifies the default parent to be used to insert new cells.\n * This is used in <getDefaultParent>. Default is null.\n */\nmxGraph.prototype.defaultParent = null;\n\n/**\n * Variable: alternateEdgeStyle\n * \n * Specifies the alternate edge style to be used if the main control point\n * on an edge is being doubleclicked. Default is null.\n */\nmxGraph.prototype.alternateEdgeStyle = null;\n\n/**\n * Variable: backgroundImage\n *\n * Specifies the <mxImage> to be returned by <getBackgroundImage>. Default\n * is null.\n * \n * Example:\n *\n * (code)\n * var img = new mxImage('http://www.example.com/maps/examplemap.jpg', 1024, 768);\n * graph.setBackgroundImage(img);\n * graph.view.validate();\n * (end)\n */\nmxGraph.prototype.backgroundImage = null;\n\n/**\n * Variable: pageVisible\n *\n * Specifies if the background page should be visible. Default is false.\n * Not yet implemented.\n */\nmxGraph.prototype.pageVisible = false;\n\n/**\n * Variable: pageBreaksVisible\n * \n * Specifies if a dashed line should be drawn between multiple pages. Default\n * is false. If you change this value while a graph is being displayed then you\n * should call <sizeDidChange> to force an update of the display.\n */\nmxGraph.prototype.pageBreaksVisible = false;\n\n/**\n * Variable: pageBreakColor\n * \n * Specifies the color for page breaks. Default is 'gray'.\n */\nmxGraph.prototype.pageBreakColor = 'gray';\n\n/**\n * Variable: pageBreakDashed\n * \n * Specifies the page breaks should be dashed. Default is true.\n */\nmxGraph.prototype.pageBreakDashed = true;\n\n/**\n * Variable: minPageBreakDist\n * \n * Specifies the minimum distance for page breaks to be visible. Default is\n * 20 (in pixels).\n */\nmxGraph.prototype.minPageBreakDist = 20;\n\n/**\n * Variable: preferPageSize\n * \n * Specifies if the graph size should be rounded to the next page number in\n * <sizeDidChange>. This is only used if the graph container has scrollbars.\n * Default is false.\n */\nmxGraph.prototype.preferPageSize = false;\n\n/**\n * Variable: pageFormat\n *\n * Specifies the page format for the background page. Default is\n * <mxConstants.PAGE_FORMAT_A4_PORTRAIT>. This is used as the default in\n * <mxPrintPreview> and for painting the background page if <pageVisible> is\n * true and the pagebreaks if <pageBreaksVisible> is true.\n */\nmxGraph.prototype.pageFormat = mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\n/**\n * Variable: pageScale\n *\n * Specifies the scale of the background page. Default is 1.5.\n * Not yet implemented.\n */\nmxGraph.prototype.pageScale = 1.5;\n\n/**\n * Variable: enabled\n * \n * Specifies the return value for <isEnabled>. Default is true.\n */\nmxGraph.prototype.enabled = true;\n\n/**\n * Variable: escapeEnabled\n * \n * Specifies if <mxKeyHandler> should invoke <escape> when the escape key\n * is pressed. Default is true.\n */\nmxGraph.prototype.escapeEnabled = true;\n\n/**\n * Variable: invokesStopCellEditing\n * \n * If true, when editing is to be stopped by way of selection changing,\n * data in diagram changing or other means stopCellEditing is invoked, and\n * changes are saved. This is implemented in a focus handler in\n * <mxCellEditor>. Default is true.\n */\nmxGraph.prototype.invokesStopCellEditing = true;\n\n/**\n * Variable: enterStopsCellEditing\n * \n * If true, pressing the enter key without pressing control or shift will stop\n * editing and accept the new value. This is used in <mxCellEditor> to stop\n * cell editing. Note: You can always use F2 and escape to stop editing.\n * Default is false.\n */\nmxGraph.prototype.enterStopsCellEditing = false;\n\n/**\n * Variable: useScrollbarsForPanning\n * \n * Specifies if scrollbars should be used for panning in <panGraph> if\n * any scrollbars are available. If scrollbars are enabled in CSS, but no\n * scrollbars appear because the graph is smaller than the container size,\n * then no panning occurs if this is true. Default is true.\n */\nmxGraph.prototype.useScrollbarsForPanning = true;\n\n/**\n * Variable: exportEnabled\n * \n * Specifies the return value for <canExportCell>. Default is true.\n */\nmxGraph.prototype.exportEnabled = true;\n\n/**\n * Variable: importEnabled\n * \n * Specifies the return value for <canImportCell>. Default is true.\n */\nmxGraph.prototype.importEnabled = true;\n\n/**\n * Variable: cellsLocked\n * \n * Specifies the return value for <isCellLocked>. Default is false.\n */\nmxGraph.prototype.cellsLocked = false;\n\n/**\n * Variable: cellsCloneable\n * \n * Specifies the return value for <isCellCloneable>. Default is true.\n */\nmxGraph.prototype.cellsCloneable = true;\n\n/**\n * Variable: foldingEnabled\n * \n * Specifies if folding (collapse and expand via an image icon in the graph\n * should be enabled). Default is true.\n */\nmxGraph.prototype.foldingEnabled = true;\n\n/**\n * Variable: cellsEditable\n * \n * Specifies the return value for <isCellEditable>. Default is true.\n */\nmxGraph.prototype.cellsEditable = true;\n\t\t\n/**\n * Variable: cellsDeletable\n * \n * Specifies the return value for <isCellDeletable>. Default is true.\n */\nmxGraph.prototype.cellsDeletable = true;\n\n/**\n * Variable: cellsMovable\n * \n * Specifies the return value for <isCellMovable>. Default is true.\n */\nmxGraph.prototype.cellsMovable = true;\n\t\n/**\n * Variable: edgeLabelsMovable\n * \n * Specifies the return value for edges in <isLabelMovable>. Default is true.\n */\nmxGraph.prototype.edgeLabelsMovable = true;\n\t\n/**\n * Variable: vertexLabelsMovable\n * \n * Specifies the return value for vertices in <isLabelMovable>. Default is false.\n */\nmxGraph.prototype.vertexLabelsMovable = false;\n\n/**\n * Variable: dropEnabled\n * \n * Specifies the return value for <isDropEnabled>. Default is false.\n */\nmxGraph.prototype.dropEnabled = false;\n\n/**\n * Variable: splitEnabled\n * \n * Specifies if dropping onto edges should be enabled. This is ignored if\n * <dropEnabled> is false. If enabled, it will call <splitEdge> to carry\n * out the drop operation. Default is true.\n */\nmxGraph.prototype.splitEnabled = true;\n\n/**\n * Variable: cellsResizable\n * \n * Specifies the return value for <isCellResizable>. Default is true.\n */\nmxGraph.prototype.cellsResizable = true;\n\n/**\n * Variable: cellsBendable\n * \n * Specifies the return value for <isCellsBendable>. Default is true.\n */\nmxGraph.prototype.cellsBendable = true;\n\n/**\n * Variable: cellsSelectable\n * \n * Specifies the return value for <isCellSelectable>. Default is true.\n */\nmxGraph.prototype.cellsSelectable = true;\n\n/**\n * Variable: cellsDisconnectable\n * \n * Specifies the return value for <isCellDisconntable>. Default is true.\n */\nmxGraph.prototype.cellsDisconnectable = true;\n\n/**\n * Variable: autoSizeCells\n * \n * Specifies if the graph should automatically update the cell size after an\n * edit. This is used in <isAutoSizeCell>. Default is false.\n */\nmxGraph.prototype.autoSizeCells = false;\n\n/**\n * Variable: autoSizeCellsOnAdd\n * \n * Specifies if autoSize style should be applied when cells are added. Default is false.\n */\nmxGraph.prototype.autoSizeCellsOnAdd = false;\n\n/**\n * Variable: autoScroll\n * \n * Specifies if the graph should automatically scroll if the mouse goes near\n * the container edge while dragging. This is only taken into account if the\n * container has scrollbars. Default is true.\n * \n * If you need this to work without scrollbars then set <ignoreScrollbars> to\n * true. Please consult the <ignoreScrollbars> for details. In general, with\n * no scrollbars, the use of <allowAutoPanning> is recommended.\n */\nmxGraph.prototype.autoScroll = true;\n\n/**\n * Variable: ignoreScrollbars\n * \n * Specifies if the graph should automatically scroll regardless of the\n * scrollbars. This will scroll the container using positive values for\n * scroll positions (ie usually only rightwards and downwards). To avoid\n * possible conflicts with panning, set <translateToScrollPosition> to true.\n */\nmxGraph.prototype.ignoreScrollbars = false;\n\n/**\n * Variable: translateToScrollPosition\n * \n * Specifies if the graph should automatically convert the current scroll\n * position to a translate in the graph view when a mouseUp event is received.\n * This can be used to avoid conflicts when using <autoScroll> and\n * <ignoreScrollbars> with no scrollbars in the container.\n */\nmxGraph.prototype.translateToScrollPosition = false;\n\n/**\n * Variable: timerAutoScroll\n * \n * Specifies if autoscrolling should be carried out via mxPanningManager even\n * if the container has scrollbars. This disables <scrollPointToVisible> and\n * uses <mxPanningManager> instead. If this is true then <autoExtend> is\n * disabled. It should only be used with a scroll buffer or when scollbars\n * are visible and scrollable in all directions. Default is false.\n */\nmxGraph.prototype.timerAutoScroll = false;\n\n/**\n * Variable: allowAutoPanning\n * \n * Specifies if panning via <panGraph> should be allowed to implement autoscroll\n * if no scrollbars are available in <scrollPointToVisible>. To enable panning\n * inside the container, near the edge, set <mxPanningManager.border> to a\n * positive value. Default is false.\n */\nmxGraph.prototype.allowAutoPanning = false;\n\n/**\n * Variable: autoExtend\n * \n * Specifies if the size of the graph should be automatically extended if the\n * mouse goes near the container edge while dragging. This is only taken into\n * account if the container has scrollbars. Default is true. See <autoScroll>.\n */\nmxGraph.prototype.autoExtend = true;\n\n/**\n * Variable: maximumGraphBounds\n * \n * <mxRectangle> that specifies the area in which all cells in the diagram\n * should be placed. Uses in <getMaximumGraphBounds>. Use a width or height of\n * 0 if you only want to give a upper, left corner.\n */\nmxGraph.prototype.maximumGraphBounds = null;\n\n/**\n * Variable: minimumGraphSize\n * \n * <mxRectangle> that specifies the minimum size of the graph. This is ignored\n * if the graph container has no scrollbars. Default is null.\n */\nmxGraph.prototype.minimumGraphSize = null;\n\n/**\n * Variable: minimumContainerSize\n * \n * <mxRectangle> that specifies the minimum size of the <container> if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.minimumContainerSize = null;\n\t\t\n/**\n * Variable: maximumContainerSize\n * \n * <mxRectangle> that specifies the maximum size of the container if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.maximumContainerSize = null;\n\n/**\n * Variable: resizeContainer\n * \n * Specifies if the container should be resized to the graph size when\n * the graph size has changed. Default is false.\n */\nmxGraph.prototype.resizeContainer = false;\n\n/**\n * Variable: border\n * \n * Border to be added to the bottom and right side when the container is\n * being resized after the graph has been changed. Default is 0.\n */\nmxGraph.prototype.border = 0;\n\t\t\n/**\n * Variable: keepEdgesInForeground\n * \n * Specifies if edges should appear in the foreground regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInForeground = false;\n\n/**\n * Variable: keepEdgesInBackground\n * \n * Specifies if edges should appear in the background regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInBackground = false;\n\n/**\n * Variable: allowNegativeCoordinates\n * \n * Specifies if negative coordinates for vertices are allowed. Default is true.\n */\nmxGraph.prototype.allowNegativeCoordinates = true;\n\n/**\n * Variable: constrainChildren\n * \n * Specifies if a child should be constrained inside the parent bounds after a\n * move or resize of the child. Default is true.\n */\nmxGraph.prototype.constrainChildren = true;\n\n/**\n * Variable: constrainRelativeChildren\n * \n * Specifies if child cells with relative geometries should be constrained\n * inside the parent bounds, if <constrainChildren> is true, and/or the\n * <maximumGraphBounds>. Default is false.\n */\nmxGraph.prototype.constrainRelativeChildren = false;\n\n/**\n * Variable: extendParents\n * \n * Specifies if a parent should contain the child bounds after a resize of\n * the child. Default is true. This has precedence over <constrainChildren>.\n */\nmxGraph.prototype.extendParents = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is true.\n */\nmxGraph.prototype.extendParentsOnAdd = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is false for backwards compatiblity.\n */\nmxGraph.prototype.extendParentsOnMove = false;\n\n/**\n * Variable: recursiveResize\n * \n * Specifies the return value for <isRecursiveResize>. Default is\n * false for backwards compatiblity.\n */\nmxGraph.prototype.recursiveResize = false;\n\n/**\n * Variable: collapseToPreferredSize\n * \n * Specifies if the cell size should be changed to the preferred size when\n * a cell is first collapsed. Default is true.\n */\nmxGraph.prototype.collapseToPreferredSize = true;\n\n/**\n * Variable: zoomFactor\n * \n * Specifies the factor used for <zoomIn> and <zoomOut>. Default is 1.2\n * (120%).\n */\nmxGraph.prototype.zoomFactor = 1.2;\n\n/**\n * Variable: keepSelectionVisibleOnZoom\n * \n * Specifies if the viewport should automatically contain the selection cells\n * after a zoom operation. Default is false.\n */\nmxGraph.prototype.keepSelectionVisibleOnZoom = false;\n\n/**\n * Variable: centerZoom\n * \n * Specifies if the zoom operations should go into the center of the actual\n * diagram rather than going from top, left. Default is true.\n */\nmxGraph.prototype.centerZoom = true;\n\n/**\n * Variable: resetViewOnRootChange\n * \n * Specifies if the scale and translate should be reset if the root changes in\n * the model. Default is true.\n */\nmxGraph.prototype.resetViewOnRootChange = true;\n\n/**\n * Variable: resetEdgesOnResize\n * \n * Specifies if edge control points should be reset after the resize of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnResize = false;\n\n/**\n * Variable: resetEdgesOnMove\n * \n * Specifies if edge control points should be reset after the move of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnMove = false;\n\n/**\n * Variable: resetEdgesOnConnect\n * \n * Specifies if edge control points should be reset after the the edge has been\n * reconnected. Default is true.\n */\nmxGraph.prototype.resetEdgesOnConnect = true;\n\n/**\n * Variable: allowLoops\n * \n * Specifies if loops (aka self-references) are allowed. Default is false.\n */\nmxGraph.prototype.allowLoops = false;\n\t\n/**\n * Variable: defaultLoopStyle\n * \n * <mxEdgeStyle> to be used for loops. This is a fallback for loops if the\n * <mxConstants.STYLE_LOOP> is undefined. Default is <mxEdgeStyle.Loop>.\n */\nmxGraph.prototype.defaultLoopStyle = mxEdgeStyle.Loop;\n\n/**\n * Variable: multigraph\n * \n * Specifies if multiple edges in the same direction between the same pair of\n * vertices are allowed. Default is true.\n */\nmxGraph.prototype.multigraph = true;\n\n/**\n * Variable: connectableEdges\n * \n * Specifies if edges are connectable. Default is false. This overrides the\n * connectable field in edges.\n */\nmxGraph.prototype.connectableEdges = false;\n\n/**\n * Variable: allowDanglingEdges\n * \n * Specifies if edges with disconnected terminals are allowed in the graph.\n * Default is true.\n */\nmxGraph.prototype.allowDanglingEdges = true;\n\n/**\n * Variable: cloneInvalidEdges\n * \n * Specifies if edges that are cloned should be validated and only inserted\n * if they are valid. Default is true.\n */\nmxGraph.prototype.cloneInvalidEdges = false;\n\n/**\n * Variable: disconnectOnMove\n * \n * Specifies if edges should be disconnected from their terminals when they\n * are moved. Default is true.\n */\nmxGraph.prototype.disconnectOnMove = true;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible. This is used in <getLabel>. Default\n * is true.\n */\nmxGraph.prototype.labelsVisible = true;\n\t\n/**\n * Variable: htmlLabels\n * \n * Specifies the return value for <isHtmlLabel>. Default is false.\n */\nmxGraph.prototype.htmlLabels = false;\n\n/**\n * Variable: swimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selectable via the content if the\n * mouse is released. Default is true.\n */\nmxGraph.prototype.swimlaneSelectionEnabled = true;\n\n/**\n * Variable: swimlaneNesting\n * \n * Specifies if nesting of swimlanes is allowed. Default is true.\n */\nmxGraph.prototype.swimlaneNesting = true;\n\t\n/**\n * Variable: swimlaneIndicatorColorAttribute\n * \n * The attribute used to find the color for the indicator if the indicator\n * color is set to 'swimlane'. Default is <mxConstants.STYLE_FILLCOLOR>.\n */\nmxGraph.prototype.swimlaneIndicatorColorAttribute = mxConstants.STYLE_FILLCOLOR;\n\n/**\n * Variable: imageBundles\n * \n * Holds the list of image bundles.\n */\nmxGraph.prototype.imageBundles = null;\n\n/**\n * Variable: minFitScale\n * \n * Specifies the minimum scale to be applied in <fit>. Default is 0.1. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.minFitScale = 0.1;\n\n/**\n * Variable: maxFitScale\n * \n * Specifies the maximum scale to be applied in <fit>. Default is 8. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.maxFitScale = 8;\n\n/**\n * Variable: panDx\n * \n * Current horizontal panning value. Default is 0.\n */\nmxGraph.prototype.panDx = 0;\n\n/**\n * Variable: panDy\n * \n * Current vertical panning value. Default is 0.\n */\nmxGraph.prototype.panDy = 0;\n\n/**\n * Variable: collapsedImage\n * \n * Specifies the <mxImage> to indicate a collapsed state.\n * Default value is mxClient.imageBasePath + '/collapsed.gif'\n */\nmxGraph.prototype.collapsedImage = new mxImage(mxClient.imageBasePath + '/collapsed.gif', 9, 9);\n\n/**\n * Variable: expandedImage\n * \n * Specifies the <mxImage> to indicate a expanded state.\n * Default value is mxClient.imageBasePath + '/expanded.gif'\n */\nmxGraph.prototype.expandedImage = new mxImage(mxClient.imageBasePath + '/expanded.gif', 9, 9);\n\n/**\n * Variable: warningImage\n * \n * Specifies the <mxImage> for the image to be used to display a warning\n * overlay. See <setCellWarning>. Default value is mxClient.imageBasePath +\n * '/warning'.  The extension for the image depends on the platform. It is\n * '.png' on the Mac and '.gif' on all other platforms.\n */\nmxGraph.prototype.warningImage = new mxImage(mxClient.imageBasePath + '/warning'+\n\t((mxClient.IS_MAC) ? '.png' : '.gif'), 16, 16);\n\n/**\n * Variable: alreadyConnectedResource\n * \n * Specifies the resource key for the error message to be displayed in\n * non-multigraphs when two vertices are already connected. If the resource\n * for this key does not exist then the value is used as the error message.\n * Default is 'alreadyConnected'.\n */\nmxGraph.prototype.alreadyConnectedResource = (mxClient.language != 'none') ? 'alreadyConnected' : '';\n\n/**\n * Variable: containsValidationErrorsResource\n * \n * Specifies the resource key for the warning message to be displayed when\n * a collapsed cell contains validation errors. If the resource for this\n * key does not exist then the value is used as the warning message.\n * Default is 'containsValidationErrors'.\n */\nmxGraph.prototype.containsValidationErrorsResource = (mxClient.language != 'none') ? 'containsValidationErrors' : '';\n\n/**\n * Variable: collapseExpandResource\n * \n * Specifies the resource key for the tooltip on the collapse/expand icon.\n * If the resource for this key does not exist then the value is used as\n * the tooltip. Default is 'collapse-expand'.\n */\nmxGraph.prototype.collapseExpandResource = (mxClient.language != 'none') ? 'collapse-expand' : '';\n\n/**\n * Function: init\n * \n * Initializes the <container> and creates the respective datastructures.\n * \n * Parameters:\n * \n * container - DOM node that will contain the graph display.\n */\nmxGraph.prototype.init = function(container)\n{\n\tthis.container = container;\n\t\n\t// Initializes the in-place editor\n\tthis.cellEditor = this.createCellEditor();\t\n\n\t// Initializes the container using the view\n\tthis.view.init();\n\t\n\t// Updates the size of the container for the current graph\n\tthis.sizeDidChange();\n\t\n\t// Hides tooltips and resets tooltip timer if mouse leaves container\n\tmxEvent.addListener(container, 'mouseleave', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.tooltipHandler != null && this.tooltipHandler.div != null &&\n\t\t\tthis.tooltipHandler.div != evt.relatedTarget)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t}));\n\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t\t\n\t\t// Disable shift-click for text\n\t\tmxEvent.addListener(container, 'selectstart',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\treturn this.isEditing() || (!this.isMouseDown && !mxEvent.isShiftDown(evt));\n\t\t\t})\n\t\t);\n\t}\n\t\n\t// Workaround for missing last shape and connect preview in IE8 standards\n\t// mode if no initial graph displayed or no label for shape defined\n\tif (document.documentMode == 8)\n\t{\n\t\tcontainer.insertAdjacentHTML('beforeend', '<' + mxClient.VML_PREFIX + ':group' +\n\t\t\t' style=\"DISPLAY: none;\"></' + mxClient.VML_PREFIX + ':group>');\n\t}\n};\n\n/**\n * Function: createHandlers\n * \n * Creates the tooltip-, panning-, connection- and graph-handler (in this\n * order). This is called in the constructor before <init> is called.\n */\nmxGraph.prototype.createHandlers = function()\n{\n\tthis.tooltipHandler = this.createTooltipHandler();\n\tthis.tooltipHandler.setEnabled(false);\n\tthis.selectionCellsHandler = this.createSelectionCellsHandler();\n\tthis.connectionHandler = this.createConnectionHandler();\n\tthis.connectionHandler.setEnabled(false);\n\tthis.graphHandler = this.createGraphHandler();\n\tthis.panningHandler = this.createPanningHandler();\n\tthis.panningHandler.panningEnabled = false;\n\tthis.popupMenuHandler = this.createPopupMenuHandler();\n};\n\n/**\n * Function: createTooltipHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createTooltipHandler = function()\n{\n\treturn new mxTooltipHandler(this);\n};\n\n/**\n * Function: createSelectionCellsHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createSelectionCellsHandler = function()\n{\n\treturn new mxSelectionCellsHandler(this);\n};\n\n/**\n * Function: createConnectionHandler\n * \n * Creates and returns a new <mxConnectionHandler> to be used in this graph.\n */\nmxGraph.prototype.createConnectionHandler = function()\n{\n\treturn new mxConnectionHandler(this);\n};\n\n/**\n * Function: createGraphHandler\n * \n * Creates and returns a new <mxGraphHandler> to be used in this graph.\n */\nmxGraph.prototype.createGraphHandler = function()\n{\n\treturn new mxGraphHandler(this);\n};\n\n/**\n * Function: createPanningHandler\n * \n * Creates and returns a new <mxPanningHandler> to be used in this graph.\n */\nmxGraph.prototype.createPanningHandler = function()\n{\n\treturn new mxPanningHandler(this);\n};\n\n/**\n * Function: createPopupMenuHandler\n * \n * Creates and returns a new <mxPopupMenuHandler> to be used in this graph.\n */\nmxGraph.prototype.createPopupMenuHandler = function()\n{\n\treturn new mxPopupMenuHandler(this);\n};\n\n/**\n * Function: createSelectionModel\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createSelectionModel = function()\n{\n\treturn new mxGraphSelectionModel(this);\n};\n\n/**\n * Function: createStylesheet\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createStylesheet = function()\n{\n\treturn new mxStylesheet();\n};\n\n/**\n * Function: createGraphView\n * \n * Creates a new <mxGraphView> to be used in this graph.\n */\nmxGraph.prototype.createGraphView = function()\n{\n\treturn new mxGraphView(this);\n};\n \n/**\n * Function: createCellRenderer\n * \n * Creates a new <mxCellRenderer> to be used in this graph.\n */\nmxGraph.prototype.createCellRenderer = function()\n{\n\treturn new mxCellRenderer();\n};\n\n/**\n * Function: createCellEditor\n * \n * Creates a new <mxCellEditor> to be used in this graph.\n */\nmxGraph.prototype.createCellEditor = function()\n{\n\treturn new mxCellEditor(this);\n};\n\n/**\n * Function: getModel\n * \n * Returns the <mxGraphModel> that contains the cells.\n */\nmxGraph.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: getView\n * \n * Returns the <mxGraphView> that contains the <mxCellStates>.\n */\nmxGraph.prototype.getView = function()\n{\n\treturn this.view;\n};\n\n/**\n * Function: getStylesheet\n * \n * Returns the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.getStylesheet = function()\n{\n\treturn this.stylesheet;\n};\n\n/**\n * Function: setStylesheet\n * \n * Sets the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.setStylesheet = function(stylesheet)\n{\n\tthis.stylesheet = stylesheet;\n};\n\n/**\n * Function: getSelectionModel\n * \n * Returns the <mxGraphSelectionModel> that contains the selection.\n */\nmxGraph.prototype.getSelectionModel = function()\n{\n\treturn this.selectionModel;\n};\n\n/**\n * Function: setSelectionModel\n * \n * Sets the <mxSelectionModel> that contains the selection.\n */\nmxGraph.prototype.setSelectionModel = function(selectionModel)\n{\n\tthis.selectionModel = selectionModel;\n};\n\n/**\n * Function: getSelectionCellsForChanges\n * \n * Returns the cells to be selected for the given array of changes.\n * \n * Parameters:\n * \n * ignoreFn - Optional function that takes a change and returns true if the\n * change should be ignored.\n * \n */\nmxGraph.prototype.getSelectionCellsForChanges = function(changes, ignoreFn)\n{\n\tvar dict = new mxDictionary();\n\tvar cells = [];\n\t\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!dict.get(cell) && this.model.contains(cell))\n\t\t{\n\t\t\tif (this.model.isEdge(cell) || this.model.isVertex(cell))\n\t\t\t{\n\t\t\t\tdict.put(cell, true);\n\t\t\t\tcells.push(cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\taddCell(this.model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change.constructor != mxRootChange &&\n\t\t\t(ignoreFn == null || !ignoreFn(change)))\n\t\t{\n\t\t\tvar cell = null;\n\n\t\t\tif (change instanceof mxChildChange)\n\t\t\t{\n\t\t\t\tcell = change.child;\n\t\t\t}\n\t\t\telse if (change.cell != null &&\n\t\t\t\tchange.cell instanceof mxCell)\n\t\t\t{\n\t\t\t\tcell = change.cell;\n\t\t\t}\n\t\t\t\n\t\t\tif (cell != null)\n\t\t\t{\n\t\t\t\taddCell(cell);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: graphModelChanged\n * \n * Called when the graph model changes. Invokes <processChange> on each\n * item of the given array to update the view accordingly.\n * \n * Parameters:\n * \n * changes - Array that contains the individual changes.\n */\nmxGraph.prototype.graphModelChanged = function(changes)\n{\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tthis.processChange(changes[i]);\n\t}\n\n\tthis.updateSelection();\n\tthis.view.validate();\n\tthis.sizeDidChange();\n};\n\n/**\n * Function: updateSelection\n * \n * Removes selection cells that are not in the model from the selection.\n */\nmxGraph.prototype.updateSelection = function()\n{\n\tvar cells = this.getSelectionCells();\n\tvar removed = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.model.contains(cells[i]) || !this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tremoved.push(cells[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar par = this.model.getParent(cells[i]);\n\t\t\t\n\t\t\twhile (par != null && par != this.view.currentRoot)\n\t\t\t{\n\t\t\t\tif (this.isCellCollapsed(par) || !this.isCellVisible(par))\n\t\t\t\t{\n\t\t\t\t\tremoved.push(cells[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpar = this.model.getParent(par);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.removeSelectionCells(removed);\n};\n\n/**\n * Function: processChange\n * \n * Processes the given change and invalidates the respective cached data\n * in <view>. This fires a <root> event if the root has changed in the\n * model.\n * \n * Parameters:\n * \n * change - Object that represents the change on the model.\n */\nmxGraph.prototype.processChange = function(change)\n{\n\t// Resets the view settings, removes all cells and clears\n\t// the selection if the root changes.\n\tif (change instanceof mxRootChange)\n\t{\n\t\tthis.clearSelection();\n\t\tthis.setDefaultParent(null);\n\t\tthis.removeStateForCell(change.previous);\n\t\t\n\t\tif (this.resetViewOnRootChange)\n\t\t{\n\t\t\tthis.view.scale = 1;\n\t\t\tthis.view.translate.x = 0;\n\t\t\tthis.view.translate.y = 0;\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t}\n\t\n\t// Adds or removes a child to the view by online invaliding\n\t// the minimal required portions of the cache, namely, the\n\t// old and new parent and the child.\n\telse if (change instanceof mxChildChange)\n\t{\n\t\tvar newParent = this.model.getParent(change.child);\n\t\tthis.view.invalidate(change.child, true, true);\n\t\t\n\t\tif (!this.model.contains(newParent) || this.isCellCollapsed(newParent))\n\t\t{\n\t\t\tthis.view.invalidate(change.child, true, true);\n\t\t\tthis.removeStateForCell(change.child);\n\t\t\t\n\t\t\t// Handles special case of current root of view being removed\n\t\t\tif (this.view.currentRoot == change.child)\n\t\t\t{\n\t\t\t\tthis.home();\n\t\t\t}\n\t\t}\n \n\t\tif (newParent != change.previous)\n\t\t{\n\t\t\t// Refreshes the collapse/expand icons on the parents\n\t\t\tif (newParent != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(newParent, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (change.previous != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(change.previous, false, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handles two special cases where the shape does not need to be\n\t// recreated from scratch, it only needs to be invalidated.\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\t// Checks if the geometry has changed to avoid unnessecary revalidation\n\t\tif (change instanceof mxTerminalChange || ((change.previous == null && change.geometry != null) ||\n\t\t\t(change.previous != null && !change.previous.equals(change.geometry))))\n\t\t{\n\t\t\tthis.view.invalidate(change.cell);\n\t\t}\n\t}\n\n\t// Handles two special cases where only the shape, but no\n\t// descendants need to be recreated\n\telse if (change instanceof mxValueChange)\n\t{\n\t\tthis.view.invalidate(change.cell, false, false);\n\t}\n\t\n\t// Requires a new mxShape in JavaScript\n\telse if (change instanceof mxStyleChange)\n\t{\n\t\tthis.view.invalidate(change.cell, true, true);\n\t\tvar state = this.view.getState(change.cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tstate.invalidStyle = true;\n\t\t}\n\t}\n\t\n\t// Removes the state from the cache by default\n\telse if (change.cell != null && change.cell instanceof mxCell)\n\t{\n\t\tthis.removeStateForCell(change.cell);\n\t}\n};\n\n/**\n * Function: removeStateForCell\n * \n * Removes all cached information for the given cell and its descendants.\n * This is called when a cell was removed from the model.\n * \n * Paramters:\n * \n * cell - <mxCell> that was removed from the model.\n */\nmxGraph.prototype.removeStateForCell = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.removeStateForCell(this.model.getChildAt(cell, i));\n\t}\n\n\tthis.view.invalidate(cell, false, true);\n\tthis.view.removeState(cell);\n};\n\n/**\n * Group: Overlays\n */\n\n/**\n * Function: addCellOverlay\n * \n * Adds an <mxCellOverlay> for the specified cell. This method fires an\n * <addoverlay> event and returns the new <mxCellOverlay>.\n * \n * Parameters:\n * \n * cell - <mxCell> to add the overlay for.\n * overlay - <mxCellOverlay> to be added for the cell.\n */\nmxGraph.prototype.addCellOverlay = function(cell, overlay)\n{\n\tif (cell.overlays == null)\n\t{\n\t\tcell.overlays = [];\n\t}\n\t\n\tcell.overlays.push(overlay);\n\n\tvar state = this.view.getState(cell);\n\n\t// Immediately updates the cell display if the state exists\n\tif (state != null)\n\t{\n\t\tthis.cellRenderer.redraw(state);\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD_OVERLAY,\n\t\t\t'cell', cell, 'overlay', overlay));\n\t\n\treturn overlay;\n};\n\n/**\n * Function: getCellOverlays\n * \n * Returns the array of <mxCellOverlays> for the given cell or null, if\n * no overlays are defined.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be returned.\n */\nmxGraph.prototype.getCellOverlays = function(cell)\n{\n\treturn cell.overlays;\n};\n\n/**\n * Function: removeCellOverlay\n * \n * Removes and returns the given <mxCellOverlay> from the given cell. This\n * method fires a <removeoverlay> event. If no overlay is given, then all\n * overlays are removed using <removeOverlays>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlay should be removed.\n * overlay - Optional <mxCellOverlay> to be removed.\n */\nmxGraph.prototype.removeCellOverlay = function(cell, overlay)\n{\n\tif (overlay == null)\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\telse\n\t{\n\t\tvar index = mxUtils.indexOf(cell.overlays, overlay);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tcell.overlays.splice(index, 1);\n\t\t\t\n\t\t\tif (cell.overlays.length == 0)\n\t\t\t{\n\t\t\t\tcell.overlays = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Immediately updates the cell display if the state exists\n\t\t\tvar state = this.view.getState(cell);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tthis.cellRenderer.redraw(state);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlay));\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\toverlay = null;\n\t\t}\n\t}\n\t\n\treturn overlay;\n};\n\n/**\n * Function: removeCellOverlays\n * \n * Removes all <mxCellOverlays> from the given cell. This method\n * fires a <removeoverlay> event for each <mxCellOverlay> and returns\n * the array of <mxCellOverlays> that was removed from the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be removed\n */\nmxGraph.prototype.removeCellOverlays = function(cell)\n{\n\tvar overlays = cell.overlays;\n\t\n\tif (overlays != null)\n\t{\n\t\tcell.overlays = null;\n\t\t\n\t\t// Immediately updates the cell display if the state exists\n\t\tvar state = this.view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.cellRenderer.redraw(state);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlays[i]));\n\t\t}\n\t}\n\t\n\treturn overlays;\n};\n\n/**\n * Function: clearCellOverlays\n * \n * Removes all <mxCellOverlays> in the graph for the given cell and all its\n * descendants. If no cell is specified then all overlays are removed from\n * the graph. This implementation uses <removeCellOverlays> to remove the\n * overlays from the individual cells.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> that represents the root of the subtree to\n * remove the overlays from. Default is the root in the model.\n */\nmxGraph.prototype.clearCellOverlays = function(cell)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tthis.removeCellOverlays(cell);\n\t\n\t// Recursively removes all overlays from the children\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\t\tthis.clearCellOverlays(child); // recurse\n\t}\n};\n\n/**\n * Function: setCellWarning\n * \n * Creates an overlay for the given cell using the warning and image or\n * <warningImage> and returns the new <mxCellOverlay>. The warning is\n * displayed as a tooltip in a red font and may contain HTML markup. If\n * the warning is null or a zero length string, then all overlays are\n * removed from the cell.\n * \n * Example:\n * \n * (code)\n * graph.setCellWarning(cell, '<b>Warning:</b>: Hello, World!');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose warning should be set.\n * warning - String that represents the warning to be displayed.\n * img - Optional <mxImage> to be used for the overlay. Default is\n * <warningImage>.\n * isSelect - Optional boolean indicating if a click on the overlay\n * should select the corresponding cell. Default is false.\n */\nmxGraph.prototype.setCellWarning = function(cell, warning, img, isSelect)\n{\n\tif (warning != null && warning.length > 0)\n\t{\n\t\timg = (img != null) ? img : this.warningImage;\n\t\t\n\t\t// Creates the overlay with the image and warning\n\t\tvar overlay = new mxCellOverlay(img,\n\t\t\t'<font color=red>'+warning+'</font>');\n\t\t\n\t\t// Adds a handler for single mouseclicks to select the cell\n\t\tif (isSelect)\n\t\t{\n\t\t\toverlay.addListener(mxEvent.CLICK,\n\t\t\t\tmxUtils.bind(this, function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isEnabled())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setSelectionCell(cell);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\t\n\t\t// Sets and returns the overlay in the graph\n\t\treturn this.addCellOverlay(cell, overlay);\n\t}\n\telse\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: In-place editing\n */\n\n/**\n * Function: startEditing\n * \n * Calls <startEditingAtCell> using the given cell or the first selection\n * cell.\n * \n * Parameters:\n * \n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditing = function(evt)\n{\n\tthis.startEditingAtCell(null, evt);\n};\n\n/**\n * Function: startEditingAtCell\n * \n * Fires a <startEditing> event and invokes <mxCellEditor.startEditing>\n * on <editor>. After editing was started, a <editingStarted> event is\n * fired.\n * \n * Parameters:\n * \n * cell - <mxCell> to start the in-place editor for.\n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditingAtCell = function(cell, evt)\n{\n\tif (evt == null || !mxEvent.isMultiTouchEvent(evt))\n\t{\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.getSelectionCell();\n\t\t\t\n\t\t\tif (cell != null && !this.isCellEditable(cell))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDITING,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t\tthis.cellEditor.startEditing(cell, evt);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STARTED,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t}\n\t}\n};\n\n/**\n * Function: getEditingValue\n * \n * Returns the initial value for in-place editing. This implementation\n * returns <convertValueToString> for the given cell. If this function is\n * overridden, then <mxGraphModel.valueForCellChanged> should take care\n * of correctly storing the actual new value inside the user object.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the initial editing value should be returned.\n * evt - Optional mouse event that triggered the editor.\n */\nmxGraph.prototype.getEditingValue = function(cell, evt)\n{\n\treturn this.convertValueToString(cell);\n};\n\n/**\n * Function: stopEditing\n * \n * Stops the current editing  and fires a <editingStopped> event.\n * \n * Parameters:\n * \n * cancel - Boolean that specifies if the current editing value\n * should be stored.\n */\nmxGraph.prototype.stopEditing = function(cancel)\n{\n\tthis.cellEditor.stopEditing(cancel);\n\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STOPPED, 'cancel', cancel));\n};\n\n/**\n * Function: labelChanged\n * \n * Sets the label of the specified cell to the given value using\n * <cellLabelChanged> and fires <mxEvent.LABEL_CHANGED> while the\n * transaction is in progress. Returns the cell whose label was changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * evt - Optional event that triggered the change.\n */\nmxGraph.prototype.labelChanged = function(cell, value, evt)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar old = cell.value;\n\t\tthis.cellLabelChanged(cell, value, this.isAutoSizeCell(cell));\n\t\tthis.fireEvent(new mxEventObject(mxEvent.LABEL_CHANGED,\n\t\t\t'cell', cell, 'value', value, 'old', old, 'event', evt));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellLabelChanged\n * \n * Sets the new label for a cell. If autoSize is true then\n * <cellSizeUpdated> will be called.\n * \n * In the following example, the function is extended to map changes to\n * attributes in an XML node, as shown in <convertValueToString>.\n * Alternatively, the handling of this can be implemented as shown in\n * <mxGraphModel.valueForCellChanged> without the need to clone the\n * user object.\n * \n * (code)\n * var graphCellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n * \t// Cloned for correct undo/redo\n * \tvar elt = cell.value.cloneNode(true);\n *  elt.setAttribute('label', newValue);\n *  \n *  newValue = elt;\n *  graphCellLabelChanged.apply(this, arguments);\n * };\n * (end) \n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * autoSize - Boolean that specifies if <cellSizeUpdated> should be called.\n */\nmxGraph.prototype.cellLabelChanged = function(cell, value, autoSize)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.model.setValue(cell, value);\n\t\t\n\t\tif (autoSize)\n\t\t{\n\t\t\tthis.cellSizeUpdated(cell, false);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n};\n\n/**\n * Group: Event processing\n */\n\n/**\n * Function: escape\n * \n * Processes an escape keystroke.\n * \n * Parameters:\n * \n * evt - Mouseevent that represents the keystroke.\n */\nmxGraph.prototype.escape = function(evt)\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n};\n\n/**\n * Function: click\n * \n * Processes a singleclick on an optional cell and fires a <click> event.\n * The click event is fired initially. If the graph is enabled and the\n * event has not been consumed, then the cell is selected using\n * <selectCellForEvent> or the selection is cleared using\n * <clearSelection>. The events consumed state is set to true if the\n * corresponding <mxMouseEvent> has been consumed.\n *\n * To handle a click event, use the following code.\n * \n * (code)\n * graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event'); // mouse event\n *   var cell = evt.getProperty('cell'); // cell may be null\n *   \n *   if (cell != null)\n *   {\n *     // Do something useful with cell and consume the event\n *     evt.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the single click.\n */\nmxGraph.prototype.click = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar cell = me.getCell();\n\tvar mxe = new mxEventObject(mxEvent.CLICK, 'event', evt, 'cell', cell);\n\t\n\tif (me.isConsumed())\n\t{\n\t\tmxe.consume();\n\t}\n\t\n\tthis.fireEvent(mxe);\n\t\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n\t{\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isTransparentClickEvent(evt))\n\t\t\t{\n\t\t\t\tvar active = false;\n\t\t\t\t\n\t\t\t\tvar tmp = this.getCellAt(me.graphX, me.graphY, null, null, null,\n\t\t\t\t\tmxUtils.bind(this, function(state)\n\t\t\t\t{\n\t\t\t\t\tvar selected = this.isCellSelected(state.cell);\n\t\t\t\t\tactive = active || selected;\n\t\t\t\t\t\n\t\t\t\t\treturn !active || selected || (state.cell != cell &&\n\t\t\t\t\t\tthis.model.isAncestor(state.cell, cell));\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tcell = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSwimlaneSelectionEnabled())\n\t\t{\n\t\t\tcell = this.getSwimlaneAt(me.getGraphX(), me.getGraphY());\n\t\t\t\t\n\t\t\tif (cell != null && (!this.isToggleEvent(evt) ||\n\t\t\t\t!mxEvent.isAltDown(evt)))\n\t\t\t{\n\t\t\t\tvar temp = cell;\n\t\t\t\tvar swimlanes = [];\n\t\t\t\t\n\t\t\t\twhile (temp != null)\n\t\t\t\t{\n\t\t\t\t\ttemp = this.model.getParent(temp);\n\t\t\t\t\tvar state = this.view.getState(temp);\n\t\t\t\t\t\n\t\t\t\t\tif (this.isSwimlane(temp) && state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tswimlanes.push(temp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Selects ancestors for selected swimlanes\n\t\t\t\tif (swimlanes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tswimlanes = swimlanes.reverse();\n\t\t\t\t\tswimlanes.splice(0, 0, cell);\n\t\t\t\t\tswimlanes.push(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < swimlanes.length - 1; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellSelected(swimlanes[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcell = swimlanes[(this.isToggleEvent(evt)) ?\n\t\t\t\t\t\t\t\ti : i + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.selectCellForEvent(cell, evt);\n\t\t}\n\t\telse if (!this.isToggleEvent(evt))\n\t\t{\n\t\t\tthis.clearSelection();\n\t\t}\n\t}\n};\n\n/**\n * Function: isSiblingSelected\n * \n * Returns true if any sibling of the given cell is selected.\n */\nmxGraph.prototype.isSiblingSelected = function(cell)\n{\n\tvar model = this.model;\n\tvar parent = model.getParent(cell);\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (cell != child && this.isCellSelected(child))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n\n/**\n * Function: dblClick\n * \n * Processes a doubleclick on an optional cell and fires a <dblclick>\n * event. The event is fired initially. If the graph is enabled and the\n * event has not been consumed, then <edit> is called with the given\n * cell. The event is ignored if no cell was specified.\n *\n * Example for overriding this method.\n *\n * (code)\n * graph.dblClick = function(evt, cell)\n * {\n *   var mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n *   this.fireEvent(mxe);\n *   \n *   if (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n *   {\n * \t   mxUtils.alert('Hello, World!');\n *     mxe.consume();\n *   }\n * }\n * (end)\n * \n * Example listener for this event.\n * \n * (code)\n * graph.addListener(mxEvent.DOUBLE_CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   // do something with the cell and consume the\n *   // event to prevent in-place editing from start\n * });\n * (end) \n * \n * Parameters:\n * \n * evt - Mouseevent that represents the doubleclick.\n * cell - Optional <mxCell> under the mousepointer.\n */\nmxGraph.prototype.dblClick = function(evt, cell)\n{\n\tvar mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() &&\n\t\tcell != null && this.isCellEditable(cell) && !this.isEditing(cell))\n\t{\n\t\tthis.startEditingAtCell(cell, evt);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: tapAndHold\n * \n * Handles the <mxMouseEvent> by highlighting the <mxCellState>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the touch event.\n * state - Optional <mxCellState> that is associated with the event.\n */\nmxGraph.prototype.tapAndHold = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar mxe = new mxEventObject(mxEvent.TAP_AND_HOLD, 'event', evt, 'cell', me.getCell());\n\n\t// LATER: Check if event should be consumed if me is consumed\n\tthis.fireEvent(mxe);\n\n\tif (mxe.isConsumed())\n\t{\n\t\t// Resets the state of the panning handler\n\t\tthis.panningHandler.panningTrigger = false;\n\t}\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() && this.connectionHandler.isEnabled())\n\t{\n\t\tvar state = this.view.getState(this.connectionHandler.marker.getCell(me));\n\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.connectionHandler.marker.currentColor = this.connectionHandler.marker.validColor;\n\t\t\tthis.connectionHandler.marker.markedState = state;\n\t\t\tthis.connectionHandler.marker.mark();\n\t\t\t\n\t\t\tthis.connectionHandler.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\tthis.connectionHandler.edgeState = this.connectionHandler.createEdgeState(me);\n\t\t\tthis.connectionHandler.previous = state;\n\t\t\tthis.connectionHandler.fireEvent(new mxEventObject(mxEvent.START, 'state', this.connectionHandler.previous));\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollPointToVisible\n * \n * Scrolls the graph to the given point, extending the graph container if\n * specified.\n */\nmxGraph.prototype.scrollPointToVisible = function(x, y, extend, border)\n{\n\tif (!this.timerAutoScroll && (this.ignoreScrollbars || mxUtils.hasScrollbars(this.container)))\n\t{\n\t\tvar c = this.container;\n\t\tborder = (border != null) ? border : 20;\n\t\t\n\t\tif (x >= c.scrollLeft && y >= c.scrollTop && x <= c.scrollLeft + c.clientWidth &&\n\t\t\ty <= c.scrollTop + c.clientHeight)\n\t\t{\n\t\t\tvar dx = c.scrollLeft + c.clientWidth - x;\n\t\t\t\n\t\t\tif (dx < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollLeft;\n\t\t\t\tc.scrollLeft += border - dx;\n\n\t\t\t\t// Automatically extends the canvas size to the bottom, right\n\t\t\t\t// if the event is outside of the canvas and the edge of the\n\t\t\t\t// canvas has been reached. Notes: Needs fix for IE.\n\t\t\t\tif (extend && old == c.scrollLeft)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar width = this.container.scrollWidth + border - dx;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar width = Math.max(c.clientWidth, c.scrollWidth) + border - dx;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollLeft += border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = x - c.scrollLeft;\n\t\t\t\t\n\t\t\t\tif (dx < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft -= border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar dy = c.scrollTop + c.clientHeight - y;\n\t\t\t\n\t\t\tif (dy < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollTop;\n\t\t\t\tc.scrollTop += border - dy;\n\n\t\t\t\tif (old == c.scrollTop && extend)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar height = this.container.scrollHeight + border - dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar height = Math.max(c.clientHeight, c.scrollHeight) + border - dy;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollTop += border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = y - c.scrollTop;\n\t\t\t\t\n\t\t\t\tif (dy < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop -= border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.allowAutoPanning && !this.panningHandler.isActive())\n\t{\n\t\tif (this.panningManager == null)\n\t\t{\n\t\t\tthis.panningManager = this.createPanningManager();\n\t\t}\n\n\t\tthis.panningManager.panTo(x + this.panDx, y + this.panDy);\n\t}\n};\n\n\n/**\n * Function: createPanningManager\n * \n * Creates and returns an <mxPanningManager>.\n */\nmxGraph.prototype.createPanningManager = function()\n{\n\treturn new mxPanningManager(this);\n};\n\n/**\n * Function: getBorderSizes\n * \n * Returns the size of the border and padding on all four sides of the\n * container. The left, top, right and bottom borders are stored in the x, y,\n * width and height of the returned <mxRectangle>, respectively.\n */\nmxGraph.prototype.getBorderSizes = function()\n{\n\tvar css = mxUtils.getCurrentStyle(this.container);\n\t\n\treturn new mxRectangle(mxUtils.parseCssNumber(css.paddingLeft) +\n\t\t\t((css.borderLeftStyle != 'none') ? mxUtils.parseCssNumber(css.borderLeftWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingTop) +\n\t\t\t((css.borderTopStyle != 'none') ? mxUtils.parseCssNumber(css.borderTopWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingRight) +\n\t\t\t((css.borderRightStyle != 'none') ? mxUtils.parseCssNumber(css.borderRightWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingBottom) +\n\t\t\t((css.borderBottomStyle != 'none') ? mxUtils.parseCssNumber(css.borderBottomWidth) : 0));\n};\n\n/**\n * Function: getPreferredPageSize\n * \n * Returns the preferred size of the background page if <preferPageSize> is true.\n */\nmxGraph.prototype.getPreferredPageSize = function(bounds, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = this.pageScale;\n\tvar page = new mxRectangle(0, 0, Math.ceil(fmt.width * ps), Math.ceil(fmt.height * ps));\n\t\n\tvar hCount = (this.pageBreaksVisible) ? Math.ceil(width / page.width) : 1;\n\tvar vCount = (this.pageBreaksVisible) ? Math.ceil(height / page.height) : 1;\n\t\n\treturn new mxRectangle(0, 0, hCount * page.width + 2 + tr.x, vCount * page.height + 2 + tr.y);\n};\n\n/**\n * Function: fit\n *\n * Scales the graph such that the complete diagram fits into <container> and\n * returns the current scale in the view. To fit an initial graph prior to\n * rendering, set <mxGraphView.rendering> to false prior to changing the model\n * and execute the following after changing the model.\n * \n * (code)\n * graph.fit();\n * graph.view.rendering = true;\n * graph.refresh();\n * (end)\n * \n * To fit and center the graph, the following code can be used.\n * \n * (code)\n * var margin = 2;\n * var max = 3;\n * \n * var bounds = graph.getGraphBounds();\n * var cw = graph.container.clientWidth - margin;\n * var ch = graph.container.clientHeight - margin;\n * var w = bounds.width / graph.view.scale;\n * var h = bounds.height / graph.view.scale;\n * var s = Math.min(max, Math.min(cw / w, ch / h));\n * \n * graph.view.scaleAndTranslate(s,\n *   (margin + cw - w * s) / (2 * s) - bounds.x / graph.view.scale,\n *   (margin + ch - h * s) / (2 * s) - bounds.y / graph.view.scale);\n * (end)\n * \n * Parameters:\n * \n * border - Optional number that specifies the border. Default is <border>.\n * keepOrigin - Optional boolean that specifies if the translate should be\n * changed. Default is false.\n * margin - Optional margin in pixels. Default is 0.\n * enabled - Optional boolean that specifies if the scale should be set or\n * just returned. Default is true.\n * ignoreWidth - Optional boolean that specifies if the width should be\n * ignored. Default is false.\n * ignoreHeight - Optional boolean that specifies if the height should be\n * ignored. Default is false.\n * maxHeight - Optional maximum height.\n */\nmxGraph.prototype.fit = function(border, keepOrigin, margin, enabled, ignoreWidth, ignoreHeight, maxHeight)\n{\n\tif (this.container != null)\n\t{\n\t\tborder = (border != null) ? border : this.getBorder();\n\t\tkeepOrigin = (keepOrigin != null) ? keepOrigin : false;\n\t\tmargin = (margin != null) ? margin : 0;\n\t\tenabled = (enabled != null) ? enabled : true;\n\t\tignoreWidth = (ignoreWidth != null) ? ignoreWidth : false;\n\t\tignoreHeight = (ignoreHeight != null) ? ignoreHeight : false;\n\t\t\n\t\t// Adds spacing and border from css\n\t\tvar cssBorder = this.getBorderSizes();\n\t\tvar w1 = this.container.offsetWidth - cssBorder.x - cssBorder.width - 1;\n\t\tvar h1 = (maxHeight != null) ? maxHeight : this.container.offsetHeight - cssBorder.y - cssBorder.height - 1;\n\t\tvar bounds = this.view.getGraphBounds();\n\t\t\n\t\tif (bounds.width > 0 && bounds.height > 0)\n\t\t{\n\t\t\tif (keepOrigin && bounds.x != null && bounds.y != null)\n\t\t\t{\n\t\t\t\tbounds = bounds.clone();\n\t\t\t\tbounds.width += bounds.x;\n\t\t\t\tbounds.height += bounds.y;\n\t\t\t\tbounds.x = 0;\n\t\t\t\tbounds.y = 0;\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Use unscaled bounding boxes to fix rounding errors\n\t\t\tvar s = this.view.scale;\n\t\t\tvar w2 = bounds.width / s;\n\t\t\tvar h2 = bounds.height / s;\n\t\t\t\n\t\t\t// Fits to the size of the background image if required\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tw2 = Math.max(w2, this.backgroundImage.width - bounds.x / s);\n\t\t\t\th2 = Math.max(h2, this.backgroundImage.height - bounds.y / s);\n\t\t\t}\n\t\t\t\n\t\t\tvar b = ((keepOrigin) ? border : 2 * border) + margin + 1;\n\n\t\t\tw1 -= b;\n\t\t\th1 -= b;\n\t\t\t\n\t\t\tvar s2 = (((ignoreWidth) ? h1 / h2 : (ignoreHeight) ? w1 / w2 :\n\t\t\t\tMath.min(w1 / w2, h1 / h2)));\n\t\t\t\n\t\t\tif (this.minFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.max(s2, this.minFitScale);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.maxFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.min(s2, this.maxFitScale);\n\t\t\t}\n\t\n\t\t\tif (enabled)\n\t\t\t{\n\t\t\t\tif (!keepOrigin)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.hasScrollbars(this.container))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar x0 = (bounds.x != null) ? Math.floor(this.view.translate.x - bounds.x / s + border / s2 + margin / 2) : border;\n\t\t\t\t\t\tvar y0 = (bounds.y != null) ? Math.floor(this.view.translate.y - bounds.y / s + border / s2 + margin / 2) : border;\n\n\t\t\t\t\t\tthis.view.scaleAndTranslate(s2, x0, y0);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t\t\tvar b2 = this.getGraphBounds();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.x != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollLeft = b2.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.y != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollTop = b2.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.view.scale != s2)\n\t\t\t\t{\n\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn s2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.view.scale;\n};\n\n/**\n * Function: sizeDidChange\n * \n * Called when the size of the graph has changed. This implementation fires\n * a <size> event after updating the clipping region of the SVG element in\n * SVG-bases browsers.\n */\nmxGraph.prototype.sizeDidChange = function()\n{\n\tvar bounds = this.getGraphBounds();\n\t\n\tif (this.container != null)\n\t{\n\t\tvar border = this.getBorder();\n\t\t\n\t\tvar width = Math.max(0, bounds.x) + bounds.width + 2 * border;\n\t\tvar height = Math.max(0, bounds.y) + bounds.height + 2 * border;\n\t\t\n\t\tif (this.minimumContainerSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumContainerSize.width);\n\t\t\theight = Math.max(height, this.minimumContainerSize.height);\n\t\t}\n\n\t\tif (this.resizeContainer)\n\t\t{\n\t\t\tthis.doResizeContainer(width, height);\n\t\t}\n\n\t\tif (this.preferPageSize || (!mxClient.IS_IE && this.pageVisible))\n\t\t{\n\t\t\tvar size = this.getPreferredPageSize(bounds, Math.max(1, width), Math.max(1, height));\n\t\t\t\n\t\t\tif (size != null)\n\t\t\t{\n\t\t\t\twidth = size.width * this.view.scale;\n\t\t\t\theight = size.height * this.view.scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.minimumGraphSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumGraphSize.width * this.view.scale);\n\t\t\theight = Math.max(height, this.minimumGraphSize.height * this.view.scale);\n\t\t}\n\n\t\twidth = Math.ceil(width);\n\t\theight = Math.ceil(height);\n\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\troot.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\troot.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t\troot.style.width = '100%';\n\t\t\t\troot.style.height = '100%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\t// Quirks mode does not support minWidth/-Height\n\t\t\t\tthis.view.updateHtmlCanvasSize(Math.max(1, width), Math.max(1, height));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.view.canvas.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\tthis.view.canvas.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.updatePageBreaks(this.pageBreaksVisible, width, height);\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SIZE, 'bounds', bounds));\n};\n\n/**\n * Function: doResizeContainer\n * \n * Resizes the container for the given graph width and height.\n */\nmxGraph.prototype.doResizeContainer = function(width, height)\n{\n\tif (this.maximumContainerSize != null)\n\t{\n\t\twidth = Math.min(this.maximumContainerSize.width, width);\n\t\theight = Math.min(this.maximumContainerSize.height, height);\n\t}\n\n\tthis.container.style.width = Math.ceil(width) + 'px';\n\tthis.container.style.height = Math.ceil(height) + 'px';\n};\n\n/**\n * Function: updatePageBreaks\n * \n * Invokes from <sizeDidChange> to redraw the page breaks.\n * \n * Parameters:\n * \n * visible - Boolean that specifies if page breaks should be shown.\n * width - Specifies the width of the container in pixels.\n * height - Specifies the height of the container in pixels.\n */\nmxGraph.prototype.updatePageBreaks = function(visible, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = scale * this.pageScale;\n\tvar bounds = new mxRectangle(0, 0, fmt.width * ps, fmt.height * ps);\n\n\tvar gb = mxRectangle.fromRectangle(this.getGraphBounds());\n\tgb.width = Math.max(1, gb.width);\n\tgb.height = Math.max(1, gb.height);\n\t\n\tbounds.x = Math.floor((gb.x - tr.x * scale) / bounds.width) * bounds.width + tr.x * scale;\n\tbounds.y = Math.floor((gb.y - tr.y * scale) / bounds.height) * bounds.height + tr.y * scale;\n\t\n\tgb.width = Math.ceil((gb.width + (gb.x - bounds.x)) / bounds.width) * bounds.width;\n\tgb.height = Math.ceil((gb.height + (gb.y - bounds.y)) / bounds.height) * bounds.height;\n\t\n\t// Does not show page breaks if the scale is too small\n\tvisible = visible && Math.min(bounds.width, bounds.height) > this.minPageBreakDist;\n\n\tvar horizontalCount = (visible) ? Math.ceil(gb.height / bounds.height) + 1 : 0;\n\tvar verticalCount = (visible) ? Math.ceil(gb.width / bounds.width) + 1 : 0;\n\tvar right = (verticalCount - 1) * bounds.width;\n\tvar bottom = (horizontalCount - 1) * bounds.height;\n\t\n\tif (this.horizontalPageBreaks == null && horizontalCount > 0)\n\t{\n\t\tthis.horizontalPageBreaks = [];\n\t}\n\n\tif (this.verticalPageBreaks == null && verticalCount > 0)\n\t{\n\t\tthis.verticalPageBreaks = [];\n\t}\n\t\n\tvar drawPageBreaks = mxUtils.bind(this, function(breaks)\n\t{\n\t\tif (breaks != null)\n\t\t{\n\t\t\tvar count = (breaks == this.horizontalPageBreaks) ? horizontalCount : verticalCount; \n\t\t\t\n\t\t\tfor (var i = 0; i <= count; i++)\n\t\t\t{\n\t\t\t\tvar pts = (breaks == this.horizontalPageBreaks) ?\n\t\t\t\t\t[new mxPoint(Math.round(bounds.x), Math.round(bounds.y + i * bounds.height)),\n\t\t\t         new mxPoint(Math.round(bounds.x + right), Math.round(bounds.y + i * bounds.height))] :\n\t\t\t        [new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y)),\n\t\t\t         new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y + bottom))];\n\n\t\t\t\tif (breaks[i] != null)\n\t\t\t\t{\n\t\t\t\t\tbreaks[i].points = pts;\n\t\t\t\t\tbreaks[i].redraw();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pageBreak = new mxPolyline(pts, this.pageBreakColor);\n\t\t\t\t\tpageBreak.dialect = this.dialect;\n\t\t\t\t\tpageBreak.pointerEvents = false;\n\t\t\t\t\tpageBreak.isDashed = this.pageBreakDashed;\n\t\t\t\t\tpageBreak.init(this.view.backgroundPane);\n\t\t\t\t\tpageBreak.redraw();\n\t\t\t\t\t\n\t\t\t\t\tbreaks[i] = pageBreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = count; i < breaks.length; i++)\n\t\t\t{\n\t\t\t\tbreaks[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tbreaks.splice(count, breaks.length - count);\n\t\t}\n\t});\n\t\n\tdrawPageBreaks(this.horizontalPageBreaks);\n\tdrawPageBreaks(this.verticalPageBreaks);\n};\n\n/**\n * Group: Cell styles\n */\n\n/**\n * Function: getCurrentCellStyle\n * \n * Returns the style for the given cell from the cell state, if one exists,\n * or using <getCellStyle>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n * ignoreState - Optional boolean that specifies if the cell state should be ignored.\n */\nmxGraph.prototype.getCurrentCellStyle = function(cell, ignoreState)\n{\n\tvar state = (ignoreState) ? null : this.view.getState(cell);\n\t\n\treturn (state != null) ? state.style : this.getCellStyle(cell);\n};\n\n/**\n * Function: getCellStyle\n * \n * Returns an array of key, value pairs representing the cell style for the\n * given cell. If no string is defined in the model that specifies the\n * style, then the default style for the cell is returned or an empty object,\n * if no style can be found. Note: You should try and get the cell state\n * for the given cell and use the cached style in the state before using\n * this method.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n */\nmxGraph.prototype.getCellStyle = function(cell)\n{\n\tvar stylename = this.model.getStyle(cell);\n\tvar style = null;\n\t\n\t// Gets the default style for the cell\n\tif (this.model.isEdge(cell))\n\t{\n\t\tstyle = this.stylesheet.getDefaultEdgeStyle();\n\t}\n\telse\n\t{\n\t\tstyle = this.stylesheet.getDefaultVertexStyle();\n\t}\n\t\n\t// Resolves the stylename using the above as the default\n\tif (stylename != null)\n\t{\n\t\tstyle = this.postProcessCellStyle(this.stylesheet.getCellStyle(stylename, style));\n\t}\n\t\n\t// Returns a non-null value if no style can be found\n\tif (style == null)\n\t{\n\t\tstyle = new Object();\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: postProcessCellStyle\n * \n * Tries to resolve the value for the image style in the image bundles and\n * turns short data URIs as defined in mxImageBundle to data URIs as\n * defined in RFC 2397 of the IETF.\n */\nmxGraph.prototype.postProcessCellStyle = function(style)\n{\n\tif (style != null)\n\t{\n\t\tvar key = style[mxConstants.STYLE_IMAGE];\n\t\tvar image = this.getImageFromBundles(key);\n\n\t\tif (image != null)\n\t\t{\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t\telse\n\t\t{\n\t\t\timage = key;\n\t\t}\n\t\t\n\t\t// Converts short data uris to normal data uris\n\t\tif (image != null && image.substring(0, 11) == 'data:image/')\n\t\t{\n\t\t\tif (image.substring(0, 20) == 'data:image/svg+xml,<')\n\t\t\t{\n\t\t\t\t// Required for FF and IE11\n\t\t\t\timage = image.substring(0, 19) + encodeURIComponent(image.substring(19));\n\t\t\t}\n\t\t\telse if (image.substring(0, 22) != 'data:image/svg+xml,%3C')\n\t\t\t{\n\t\t\t\tvar comma = image.indexOf(',');\n\t\t\t\t\n\t\t\t\t// Adds base64 encoding prefix if needed\n\t\t\t\tif (comma > 0 && image.substring(comma - 7, comma + 1) != ';base64,')\n\t\t\t\t{\n\t\t\t\t\timage = image.substring(0, comma) + ';base64,'\n\t\t\t\t\t\t+ image.substring(comma + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t}\n\n\treturn style;\n};\n\n/**\n * Function: setCellStyle\n * \n * Sets the style of the specified cells. If no cells are given, then the\n * selection cells are changed.\n * \n * Parameters:\n * \n * style - String representing the new style of the cells.\n * cells - Optional array of <mxCells> to set the style for. Default is the\n * selection cells.\n */\nmxGraph.prototype.setCellStyle = function(style, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(cells[i], style);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: toggleCellStyle\n * \n * Toggles the boolean value for the given key in the style of the given cell\n * and returns the new value as 0 or 1. If no cell is specified then the\n * selection cell is used.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cell - Optional <mxCell> whose style should be modified. Default is\n * the selection cell.\n */\nmxGraph.prototype.toggleCellStyle = function(key, defaultValue, cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\treturn this.toggleCellStyles(key, defaultValue, [cell]);\n};\n\n/**\n * Function: toggleCellStyles\n * \n * Toggles the boolean value for the given key in the style of the given cells\n * and returns the new value as 0 or 1. If no cells are specified, then the\n * selection cells are used. For example, this can be used to toggle\n * <mxConstants.STYLE_ROUNDED> or any other style with a boolean value.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cells - Optional array of <mxCells> whose styles should be modified.\n * Default is the selection cells.\n */\nmxGraph.prototype.toggleCellStyles = function(key, defaultValue, cells)\n{\n\tdefaultValue = (defaultValue != null) ? defaultValue : false;\n\tcells = cells || this.getSelectionCells();\n\tvar value = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cells[0]);\n\t\tvalue = (mxUtils.getValue(style, key, defaultValue)) ? 0 : 1;\n\t\tthis.setCellStyles(key, value, cells);\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: setCellStyles\n * \n * Sets the key to value in the styles of the given cells. This will modify\n * the existing cell styles in-place and override any existing assignment\n * for the given key. If no cells are specified, then the selection cells\n * are changed. If no value is specified, then the respective key is\n * removed from the styles.\n * \n * Parameters:\n * \n * key - String representing the key to be assigned.\n * value - String representing the new value for the key.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyles = function(key, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\tmxUtils.setCellStyles(this.model, cells, key, value);\n};\n\n/**\n * Function: toggleCellStyleFlags\n * \n * Toggles the given bit for the given key in the styles of the specified\n * cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.toggleCellStyleFlags = function(key, flag, cells)\n{\n\tthis.setCellStyleFlags(key, flag, null, cells);\n};\n\n/**\n * Function: setCellStyleFlags\n * \n * Sets or toggles the given bit for the given key in the styles of the\n * specified cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * value - Boolean value to be used or null if the value should be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyleFlags = function(key, flag, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvar style = this.getCurrentCellStyle(cells[0]);\n\t\t\tvar current = parseInt(style[key] || 0);\n\t\t\tvalue = !((current & flag) == flag);\n\t\t}\n\n\t\tmxUtils.setCellStyleFlags(this.model, cells, key, flag, value);\n\t}\n};\n\n/**\n * Group: Cell alignment and orientation\n */\n\n/**\n * Function: alignCells\n * \n * Aligns the given cells vertically or horizontally according to the given\n * alignment using the optional parameter as the coordinate.\n * \n * Parameters:\n * \n * align - Specifies the alignment. Possible values are all constants in\n * mxConstants with an ALIGN prefix.\n * cells - Array of <mxCells> to be aligned.\n * param - Optional coordinate for the alignment.\n */\nmxGraph.prototype.alignCells = function(align, cells, param)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tif (cells != null && cells.length > 1)\n\t{\n\t\t// Finds the required coordinate for the alignment\n\t\tif (param == null)\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\n\t\t\t\tif (state != null && !this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tif (param == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.x + state.width);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.y + state.height);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.x);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Aligns the cells to the coordinate\n\t\tif (param != null)\n\t\t{\n\t\t\tvar s = this.view.scale;\n\n\t\t\tthis.model.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null && !this.model.isEdge(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.resizeCell(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ALIGN_CELLS,\n\t\t\t\t\t\t'align', align, 'cells', cells));\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.model.endUpdate();\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: flipEdge\n * \n * Toggles the style of the given edge between null (or empty) and\n * <alternateEdgeStyle>. This method fires <mxEvent.FLIP_EDGE> while the\n * transaction is in progress. Returns the edge that was flipped.\n * \n * Here is an example that overrides this implementation to invert the\n * value of <mxConstants.STYLE_ELBOW> without removing any existing styles.\n * \n * (code)\n * graph.flipEdge = function(edge)\n * {\n *   if (edge != null)\n *   {\n *     var style = this.getCurrentCellStyle(edge);\n *     var elbow = mxUtils.getValue(style, mxConstants.STYLE_ELBOW,\n *         mxConstants.ELBOW_HORIZONTAL);\n *     var value = (elbow == mxConstants.ELBOW_HORIZONTAL) ?\n *         mxConstants.ELBOW_VERTICAL : mxConstants.ELBOW_HORIZONTAL;\n *     this.setCellStyles(mxConstants.STYLE_ELBOW, value, [edge]);\n *   }\n * };\n * (end)\n * \n * Parameters:\n * \n * edge - <mxCell> whose style should be changed.\n */\nmxGraph.prototype.flipEdge = function(edge)\n{\n\tif (edge != null &&\n\t\tthis.alternateEdgeStyle != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar style = this.model.getStyle(edge);\n\n\t\t\tif (style == null || style.length == 0)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, this.alternateEdgeStyle);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, null);\n\t\t\t}\n\n\t\t\t// Removes all existing control points\n\t\t\tthis.resetEdge(edge);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.FLIP_EDGE, 'edge', edge));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: addImageBundle\n *\n * Adds the specified <mxImageBundle>.\n */\nmxGraph.prototype.addImageBundle = function(bundle)\n{\n\tthis.imageBundles.push(bundle);\n};\n\n/**\n * Function: removeImageBundle\n * \n * Removes the specified <mxImageBundle>.\n */\nmxGraph.prototype.removeImageBundle = function(bundle)\n{\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t{\n\t\tif (this.imageBundles[i] != bundle)\n\t\t{\n\t\t\ttmp.push(this.imageBundles[i]);\n\t\t}\n\t}\n\t\n\tthis.imageBundles = tmp;\n};\n\n/**\n * Function: getImageFromBundles\n *\n * Searches all <imageBundles> for the specified key and returns the value\n * for the first match or null if the key is not found.\n */\nmxGraph.prototype.getImageFromBundles = function(key)\n{\n\tif (key != null)\n\t{\n\t\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t\t{\n\t\t\tvar image = this.imageBundles[i].getImage(key);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\treturn image;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: Order\n */\n\n/**\n * Function: orderCells\n * \n * Moves the given cells to the front or back. The change is carried out\n * using <cellsOrdered>. This method fires <mxEvent.ORDER_CELLS> while the\n * transaction is in progress.\n * \n * Parameters:\n * \n * back - Boolean that specifies if the cells should be moved to back.\n * cells - Array of <mxCells> to move to the background. If null is\n * specified then the selection cells are used.\n */\nmxGraph.prototype.orderCells = function(back, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsOrdered(cells, back);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ORDER_CELLS,\n\t\t\t\t'back', back, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsOrdered\n * \n * Moves the given cells to the front or back. This method fires\n * <mxEvent.CELLS_ORDERED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose order should be changed.\n * back - Boolean that specifies if the cells should be moved to back.\n */\nmxGraph.prototype.cellsOrdered = function(cells, back)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\n\t\t\t\tif (back)\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i], i);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i],\n\t\t\t\t\t\t\tthis.model.getChildCount(parent) - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ORDERED,\n\t\t\t\t\t'back', back, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Grouping\n */\n\n/**\n * Function: groupCells\n * \n * Adds the cells into the given group. The change is carried out using\n * <cellsAdded>, <cellsMoved> and <cellsResized>. This method fires\n * <mxEvent.GROUP_CELLS> while the transaction is in progress. Returns the\n * new group. A group is only created if there is at least one entry in the\n * given array of cells.\n * \n * Parameters:\n * \n * group - <mxCell> that represents the target group. If null is specified\n * then a new group is created using <createGroupCell>.\n * border - Optional integer that specifies the border between the child\n * area and the group bounds. Default is 0.\n * cells - Optional array of <mxCells> to be grouped. If null is specified\n * then the selection cells are used.\n */\nmxGraph.prototype.groupCells = function(group, border, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tcells = this.getCellsForGroup(cells);\n\n\tif (group == null)\n\t{\n\t\tgroup = this.createGroupCell(cells);\n\t}\n\n\tvar bounds = this.getBoundsForGroup(group, cells, border);\n\n\tif (cells.length > 1 && bounds != null)\n\t{\n\t\t// Uses parent of group or previous parent of first child\n\t\tvar parent = this.model.getParent(group);\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getParent(cells[0]);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Checks if the group has a geometry and\n\t\t\t// creates one if one does not exist\n\t\t\tif (this.getCellGeometry(group) == null)\n\t\t\t{\n\t\t\t\tthis.model.setGeometry(group, new mxGeometry());\n\t\t\t}\n\n\t\t\t// Adds the group into the parent\n\t\t\tvar index = this.model.getChildCount(parent);\n\t\t\tthis.cellsAdded([group], parent, index, null, null, false, false, false);\n\n\t\t\t// Adds the children into the group and moves\n\t\t\tindex = this.model.getChildCount(group);\n\t\t\tthis.cellsAdded(cells, group, index, null, null, false, false, false);\n\t\t\tthis.cellsMoved(cells, -bounds.x, -bounds.y, false, false, false);\n\n\t\t\t// Resizes the group\n\t\t\tthis.cellsResized([group], [bounds], false);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.GROUP_CELLS,\n\t\t\t\t\t'group', group, 'border', border, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn group;\n};\n\n/**\n * Function: getCellsForGroup\n * \n * Returns the cells with the same parent as the first cell\n * in the given array.\n */\nmxGraph.prototype.getCellsForGroup = function(cells)\n{\n\tvar result = [];\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar parent = this.model.getParent(cells[0]);\n\t\tresult.push(cells[0]);\n\n\t\t// Filters selection cells with the same parent\n\t\tfor (var i = 1; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getParent(cells[i]) == parent)\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getBoundsForGroup\n * \n * Returns the bounds to be used for the given group and children.\n */\nmxGraph.prototype.getBoundsForGroup = function(group, children, border)\n{\n\tvar result = this.getBoundingBoxFromGeometry(children, true);\n\t\n\tif (result != null)\n\t{\n\t\tif (this.isSwimlane(group))\n\t\t{\n\t\t\tvar size = this.getStartSize(group);\n\t\t\t\n\t\t\tresult.x -= size.width;\n\t\t\tresult.y -= size.height;\n\t\t\tresult.width += size.width;\n\t\t\tresult.height += size.height;\n\t\t}\n\t\t\n\t\t// Adds the border\n\t\tif (border != null)\n\t\t{\n\t\t\tresult.x -= border;\n\t\t\tresult.y -= border;\n\t\t\tresult.width += 2 * border;\n\t\t\tresult.height += 2 * border;\n\t\t}\n\t}\t\t\t\n\t\n\treturn result;\n};\n\n/**\n * Function: createGroupCell\n * \n * Hook for creating the group cell to hold the given array of <mxCells> if\n * no group cell was given to the <group> function.\n * \n * The following code can be used to set the style of new group cells.\n * \n * (code)\n * var graphCreateGroupCell = graph.createGroupCell;\n * graph.createGroupCell = function(cells)\n * {\n *   var group = graphCreateGroupCell.apply(this, arguments);\n *   group.setStyle('group');\n *   \n *   return group;\n * };\n */\nmxGraph.prototype.createGroupCell = function(cells)\n{\n\tvar group = new mxCell('');\n\tgroup.setVertex(true);\n\tgroup.setConnectable(false);\n\t\n\treturn group;\n};\n\n/**\n * Function: ungroupCells\n * \n * Ungroups the given cells by moving the children the children to their\n * parents parent and removing the empty groups. Returns the children that\n * have been removed from the groups.\n * \n * Parameters:\n * \n * cells - Array of cells to be ungrouped. If null is specified then the\n * selection cells are used.\n */\nmxGraph.prototype.ungroupCells = function(cells)\n{\n\tvar result = [];\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getCellsForUngroup();\n\t}\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tchildren = children.slice();\n\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\tvar index = this.model.getChildCount(parent);\n\n\t\t\t\t\tthis.cellsAdded(children, parent, index, null, null, true);\n\t\t\t\t\tresult = result.concat(children);\n\t\t\t\t\t\n\t\t\t\t\t// Fix relative child cells\n\t\t\t\t\tfor (var j = 0; j < children.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(children[j]);\n\t\t\t\t\t\tvar geo = this.getCellGeometry(children[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null && geo != null && geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = state.origin.x;\n\t\t\t\t\t\t\tgeo.y = state.origin.y;\n\t\t\t\t\t\t\tgeo.relative = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.model.setGeometry(children[j], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.removeCellsAfterUngroup(cells);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNGROUP_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForUngroup\n * \n * Returns the selection cells that can be ungrouped.\n */\nmxGraph.prototype.getCellsForUngroup = function()\n{\n\tvar cells = this.getSelectionCells();\n\n\t// Finds the cells with children\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.model.isVertex(cells[i]) &&\n\t\t\tthis.model.getChildCount(cells[i]) > 0)\n\t\t{\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\t}\n\n\treturn tmp;\n};\n\n/**\n * Function: removeCellsAfterUngroup\n * \n * Hook to remove the groups after <ungroupCells>.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> that were ungrouped.\n */\nmxGraph.prototype.removeCellsAfterUngroup = function(cells)\n{\n\tthis.cellsRemoved(this.addAllEdges(cells));\n};\n\n/**\n * Function: removeCellsFromParent\n * \n * Removes the specified cells from their parents and adds them to the\n * default parent. Returns the cells that were removed from their parents.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from their parents.\n */\nmxGraph.prototype.removeCellsFromParent = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar parent = this.getDefaultParent();\n\t\tvar index = this.model.getChildCount(parent);\n\n\t\tthis.cellsAdded(cells, parent, index, null, null, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS_FROM_PARENT, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given groups to include all children and returns\n * the passed-in cells. Call this with the groups in parent to child order,\n * top-most group first, the cells are processed in reverse order and cells\n * with no children are ignored.\n * \n * Parameters:\n * \n * cells - The groups whose bounds should be updated. If this is null, then\n * the selection cells are used.\n * border - Optional border to be added in the group. Default is 0.\n * moveGroup - Optional boolean that allows the group to be moved. Default\n * is false.\n * topBorder - Optional top border to be added in the group. Default is 0.\n * rightBorder - Optional top border to be added in the group. Default is 0.\n * bottomBorder - Optional top border to be added in the group. Default is 0.\n * leftBorder - Optional top border to be added in the group. Default is 0.\n */\nmxGraph.prototype.updateGroupBounds = function(cells, border, moveGroup, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tborder = (border != null) ? border : 0;\n\tmoveGroup = (moveGroup != null) ? moveGroup : false;\n\ttopBorder = (topBorder != null) ? topBorder : 0;\n\trightBorder = (rightBorder != null) ? rightBorder : 0;\n\tbottomBorder = (bottomBorder != null) ? bottomBorder : 0;\n\tleftBorder = (leftBorder != null) ? leftBorder : 0;\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = cells.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar children = this.getChildCells(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.getBoundingBoxFromGeometry(children, true);\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null && bounds.width > 0 && bounds.height > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Adds the size of the title area for swimlanes\n\t\t\t\t\t\tvar size = (this.isSwimlane(cells[i])) ?\n\t\t\t\t\t\t\tthis.getActualStartSize(cells[i], true) : new mxRectangle();\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (moveGroup)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = Math.round(geo.x + bounds.x - border - size.x - leftBorder);\n\t\t\t\t\t\t\tgeo.y = Math.round(geo.y + bounds.y - border - size.y - topBorder);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo.width = Math.round(bounds.width + 2 * border + size.x + leftBorder + rightBorder + size.width);\n\t\t\t\t\t\tgeo.height = Math.round(bounds.height + 2 * border + size.y + topBorder + bottomBorder + size.height);\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\tthis.moveCells(children, border + size.x - bounds.x + leftBorder,\n\t\t\t\t\t\t\t\tborder + size.y - bounds.y + topBorder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box for the given array of <mxCells>. The bounding box for\n * each cell and its descendants is computed using <mxGraphView.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraph.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.isVertex(cells[i]) || this.model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar bbox = this.view.getBoundingBox(this.view.getState(cells[i]), true);\n\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Group: Cell cloning, insertion and removal\n */\n\n/**\n * Function: cloneCell\n * \n * Returns the clone for the given cell. Uses <cloneCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCell = function(cell, allowInvalidEdges, mapping, keepPosition)\n{\n\treturn this.cloneCells([cell], allowInvalidEdges, mapping, keepPosition)[0];\n};\n\n/**\n * Function: cloneCells\n * \n * Returns the clones for the given cells. The clones are created recursively\n * using <mxGraphModel.cloneCells>. If the terminal of an edge is not in the\n * given array, then the respective end is assigned a terminal point and the\n * terminal is removed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCells = function(cells, allowInvalidEdges, mapping, keepPosition)\n{\n\tallowInvalidEdges = (allowInvalidEdges != null) ? allowInvalidEdges : true;\n\tvar clones = null;\n\t\n\tif (cells != null)\n\t{\n\t\t// Creates a dictionary for fast lookups\n\t\tvar dict = new mxDictionary();\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar trans = this.view.translate;\n\t\t\tclones = this.model.cloneCells(cells, true, mapping);\n\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!allowInvalidEdges && this.model.isEdge(clones[i]) &&\n\t\t\t\t\tthis.getEdgeValidationError(clones[i],\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], true),\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], false)) != null)\n\t\t\t\t{\n\t\t\t\t\tclones[i] = null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar g = this.model.getGeometry(clones[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(this.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null && pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = (keepPosition) ? 0 : pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = (keepPosition) ? 0 : pstate.origin.y;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isEdge(clones[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (pts != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Checks if the source is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (src == null && pts[0] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - trans.y), true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Checks if the target is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (trg == null && pts[n] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - trans.y), false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Translates the control points\n\t\t\t\t\t\t\t\t\tvar points = g.points;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (points != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfor (var j = 0; j < points.length; j++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].x += dx;\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].y += dy;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tg.translate(dx, dy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones = [];\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\n/**\n * Function: insertVertex\n * \n * Adds a new vertex into the given parent <mxCell> using value as the user\n * object and the given coordinates as the <mxGeometry> of the new vertex.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * When adding new vertices from a mouse event, one should take into\n * account the offset of the graph container and the scale and translation\n * of the view in order to find the correct unscaled, untranslated\n * coordinates using <mxGraph.getPointForEvent> as follows:\n * \n * (code)\n * var pt = graph.getPointForEvent(evt);\n * var parent = graph.getDefaultParent();\n * graph.insertVertex(parent, null,\n * \t\t\t'Hello, World!', x, y, 220, 30);\n * (end)\n * \n * For adding image cells, the style parameter can be assigned as\n * \n * (code)\n * stylename;image=imageUrl\n * (end)\n * \n * See <mxGraph> for more information on using images.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new vertex.\n * id - Optional string that defines the Id of the new vertex.\n * value - Object to be used as the user object.\n * x - Integer that defines the x coordinate of the vertex.\n * y - Integer that defines the y coordinate of the vertex.\n * width - Integer that defines the width of the vertex.\n * height - Integer that defines the height of the vertex.\n * style - Optional string that defines the cell style.\n * relative - Optional boolean that specifies if the geometry is relative.\n * Default is false.\n */\nmxGraph.prototype.insertVertex = function(parent, id, value,\n\tx, y, width, height, style, relative)\n{\n\tvar vertex = this.createVertex(parent, id, value, x, y, width, height, style, relative);\n\n\treturn this.addCell(vertex, parent);\n};\n\n/**\n * Function: createVertex\n * \n * Hook method that creates the new vertex for <insertVertex>.\n */\nmxGraph.prototype.createVertex = function(parent, id, value,\n\t\tx, y, width, height, style, relative)\n{\n\t// Creates the geometry for the vertex\n\tvar geometry = new mxGeometry(x, y, width, height);\n\tgeometry.relative = (relative != null) ? relative : false;\n\t\n\t// Creates the vertex\n\tvar vertex = new mxCell(value, geometry, style);\n\tvertex.setId(id);\n\tvertex.setVertex(true);\n\tvertex.setConnectable(true);\n\t\n\treturn vertex;\n};\n\t\n/**\n * Function: insertEdge\n * \n * Adds a new edge into the given parent <mxCell> using value as the user\n * object and the given source and target as the terminals of the new edge.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new edge.\n * id - Optional string that defines the Id of the new edge.\n * value - JavaScript object to be used as the user object.\n * source - <mxCell> that defines the source of the edge.\n * target - <mxCell> that defines the target of the edge.\n * style - Optional string that defines the cell style.\n */\nmxGraph.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tvar edge = this.createEdge(parent, id, value, source, target, style);\n\t\n\treturn this.addEdge(edge, parent, source, target);\n};\n\n/**\n * Function: createEdge\n * \n * Hook method that creates the new edge for <insertEdge>. This\n * implementation does not set the source and target of the edge, these\n * are set when the edge is added to the model.\n * \n */\nmxGraph.prototype.createEdge = function(parent, id, value, source, target, style)\n{\n\t// Creates the edge\n\tvar edge = new mxCell(value, new mxGeometry(), style);\n\tedge.setId(id);\n\tedge.setEdge(true);\n\tedge.geometry.relative = true;\n\t\n\treturn edge;\n};\n\n/**\n * Function: addEdge\n * \n * Adds the edge to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the edge that was\n * added.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n * index - Optional index to insert the cells at. Default is to append.\n */\nmxGraph.prototype.addEdge = function(edge, parent, source, target, index)\n{\n\treturn this.addCell(edge, parent, index, source, target);\n};\n\n/**\n * Function: addCell\n * \n * Adds the cell to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the cell that was\n * added.\n * \n * Parameters:\n * \n * cell - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.addCell = function(cell, parent, index, source, target)\n{\n\treturn this.addCells([cell], parent, index, source, target)[0];\n};\n\n/**\n * Function: addCells\n * \n * Adds the cells to the parent at the given index, connecting each cell to\n * the optional source and target terminal. The change is carried out using\n * <cellsAdded>. This method fires <mxEvent.ADD_CELLS> while the\n * transaction is in progress. Returns the cells that were added.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be inserted.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional source <mxCell> for all inserted cells.\n * target - Optional target <mxCell> for all inserted cells.\n * absolute - Optional boolean indicating of cells should be kept at\n * their absolute position. Default is false.\n */\nmxGraph.prototype.addCells = function(cells, parent, index, source, target, absolute)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getDefaultParent();\n\t}\n\t\n\tif (index == null)\n\t{\n\t\tindex = this.model.getChildCount(parent);\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsAdded(cells, parent, index, source, target, (absolute != null) ? absolute : false, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_CELLS, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsAdded\n * \n * Adds the specified cells to the given parent. This method fires\n * <mxEvent.CELLS_ADDED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsAdded = function(cells, parent, index, source, target, absolute, constrain, extend)\n{\n\tif (cells != null && parent != null && index != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar parentState = (absolute) ? this.view.getState(parent) : null;\n\t\t\tvar o1 = (parentState != null) ? parentState.origin : null;\n\t\t\tvar zero = new mxPoint(0, 0);\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] == null)\n\t\t\t\t{\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar previous = this.model.getParent(cells[i]);\n\t\n\t\t\t\t\t// Keeps the cell at its absolute location\n\t\t\t\t\tif (o1 != null && cells[i] != parent && parent != previous)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar oldState = this.view.getState(previous);\n\t\t\t\t\t\tvar o2 = (oldState != null) ? oldState.origin : zero;\n\t\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = o2.x - o1.x;\n\t\t\t\t\t\t\tvar dy = o2.y - o1.y;\n\t\n\t\t\t\t\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t\t\t\t\t// to avoid forward references in sessions.\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.translate(dx, dy);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!geo.relative && this.model.isVertex(cells[i]) &&\n\t\t\t\t\t\t\t\t!this.isAllowNegativeCoordinates())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\t\t\t\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Decrements all following indices\n\t\t\t\t\t// if cell is already in parent\n\t\t\t\t\tif (parent == previous && index + i > this.model.getChildCount(parent))\n\t\t\t\t\t{\n\t\t\t\t\t\tindex--;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.add(parent, cells[i], index + i);\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoSizeCellsOnAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.autoSizeCell(cells[i], true);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Extends the parent or constrains the child\n\t\t\t\t\tif ((extend == null || extend) &&\n\t\t\t\t\t\tthis.isExtendParentsOnAdd(cells[i]) && this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Additionally constrains the child after extending the parent\n\t\t\t\t\tif (constrain == null || constrain)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the source terminal\n\t\t\t\t\tif (source != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], source, true);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the target terminal\n\t\t\t\t\tif (target != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], target, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ADDED, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target,\n\t\t\t\t'absolute', absolute));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: autoSizeCell\n * \n * Resizes the specified cell to just fit around the its label and/or children\n * \n * Parameters:\n * \n * cell - <mxCells> to be resized.\n * recurse - Optional boolean which specifies if all descendants should be\n * autosized. Default is true.\n */\nmxGraph.prototype.autoSizeCell = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tif (recurse)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.autoSizeCell(this.model.getChildAt(cell, i));\n\t\t}\n\t}\n\n\tif (this.getModel().isVertex(cell) && this.isAutoSizeCell(cell))\n\t{\n\t\tthis.updateCellSize(cell);\n\t}\n};\n\n/**\n * Function: removeCells\n * \n * Removes the given cells from the graph including all connected edges if\n * includeEdges is true. The change is carried out using <cellsRemoved>.\n * This method fires <mxEvent.REMOVE_CELLS> while the transaction is in\n * progress. The removed cells are returned as an array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove. If null is specified then the\n * selection cells which are deletable are used.\n * includeEdges - Optional boolean which specifies if all connected edges\n * should be removed as well. Default is true.\n */\nmxGraph.prototype.removeCells = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getDeletableCells(this.getSelectionCells());\n\t}\n\n\t// Adds all edges to the cells\n\tif (includeEdges)\n\t{\n\t\t// FIXME: Remove duplicate cells in result or do not add if\n\t\t// in cells or descendant of cells\n\t\tcells = this.getDeletableCells(this.addAllEdges(cells));\n\t}\n\telse\n\t{\n\t\tcells = cells.slice();\n\t\t\n\t\t// Removes edges that are currently not\n\t\t// visible as those cannot be updated\n\t\tvar edges = this.getDeletableCells(this.getAllEdges(cells));\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.view.getState(edges[i]) == null &&\n\t\t\t\t!dict.get(edges[i]))\n\t\t\t{\n\t\t\t\tdict.put(edges[i], true);\n\t\t\t\tcells.push(edges[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsRemoved(cells);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS, \n\t\t\t\t'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: cellsRemoved\n * \n * Removes the given cells from the model. This method fires\n * <mxEvent.CELLS_REMOVED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove.\n */\nmxGraph.prototype.cellsRemoved = function(cells)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar scale = this.view.scale;\n\t\tvar tr = this.view.translate;\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Creates hashtable for faster lookup\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\t// Disconnects edges which are not being removed\n\t\t\t\tvar edges = this.getAllEdges([cells[i]]);\n\t\t\t\t\n\t\t\t\tvar disconnectTerminal = mxUtils.bind(this, function(edge, source)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(edge);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Checks if terminal is being removed\n\t\t\t\t\t\tvar terminal = this.model.getTerminal(edge, source);\n\t\t\t\t\t\tvar connected = false;\n\t\t\t\t\t\tvar tmp = terminal;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (cells[i] == tmp)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnected = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = this.model.getParent(tmp);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (connected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tvar state = this.view.getState(edge);\n\n\t\t\t\t\t\t\tif (state != null && state.absolutePoints != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\tvar n = (source) ? 0 : pts.length - 1;\n\n\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\tpts[n].x / scale - tr.x - state.origin.x,\n\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y - state.origin.y), source);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Fallback to center of terminal if routing\n\t\t\t\t\t\t\t\t// points are not available to add new point\n\t\t\t\t\t\t\t\t// KNOWN: Should recurse to find parent offset\n\t\t\t\t\t\t\t\t// of edge for nested groups but invisible edges\n\t\t\t\t\t\t\t\t// should be removed in removeCells step\n\t\t\t\t\t\t\t\tvar tstate = this.view.getState(terminal);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tstate != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterX() / scale - tr.x,\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterY() / scale - tr.y), source);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t\t\t\tthis.model.setTerminal(edge, null, source);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (!dict.get(edges[j]))\n\t\t\t\t\t{\n\t\t\t\t\t\tdict.put(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.model.remove(cells[i]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_REMOVED, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: splitEdge\n * \n * Splits the given edge by adding the newEdge between the previous source\n * and the given cell and reconnecting the source of the given edge to the\n * given cell. This method fires <mxEvent.SPLIT_EDGE> while the transaction\n * is in progress. Returns the new edge that was inserted.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that represents the cells to insert into the edge.\n * newEdge - <mxCell> that represents the edge to be inserted.\n * dx - Optional integer that specifies the vector to move the cells.\n * dy - Optional integer that specifies the vector to move the cells.\n * x - Integer that specifies the x-coordinate of the drop location.\n * y - Integer that specifies the y-coordinate of the drop location.\n * parent - Optional parent to insert the cell. If null the parent of\n * the edge is used.\n */\nmxGraph.prototype.splitEdge = function(edge, cells, newEdge, dx, dy, x, y, parent)\n{\n\tdx = dx || 0;\n\tdy = dy || 0;\n\n\tparent = (parent != null) ? parent : this.model.getParent(edge);\n\tvar source = this.model.getTerminal(edge, true);\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tif (newEdge == null)\n\t\t{\n\t\t\tnewEdge = this.cloneCell(edge);\n\t\t\t\n\t\t\t// Removes waypoints before/after new cell\n\t\t\tvar state = this.view.getState(edge);\n\t\t\tvar geo = this.getCellGeometry(newEdge);\n\t\t\t\n\t\t\tif (geo != null && geo.points != null && state != null)\n\t\t\t{\n\t\t\t\tvar t = this.view.translate;\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar idx = mxUtils.findNearestSegment(state, (dx + t.x) * s, (dy + t.y) * s);\n\t\t\t\tgeo.points = geo.points.slice(0, idx);\n\t\t\t\t\t\t\t\t\n\t\t\t\tgeo = this.getCellGeometry(edge);\n\t\t\t\t\n\t\t\t\tif (geo != null && geo.points != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.points = geo.points.slice(idx);\n\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.cellsMoved(cells, dx, dy, false, false);\n\t\tthis.cellsAdded(cells, parent, this.model.getChildCount(parent), null, null,\n\t\t\t\ttrue);\n\t\tthis.cellsAdded([newEdge], parent, this.model.getChildCount(parent),\n\t\t\t\tsource, cells[0], false);\n\t\tthis.cellConnected(edge, cells[0], true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SPLIT_EDGE, 'edge', edge,\n\t\t\t\t'cells', cells, 'newEdge', newEdge, 'dx', dx, 'dy', dy));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn newEdge;\n};\n\n/**\n * Group: Cell visibility\n */\n\n/**\n * Function: toggleCells\n * \n * Sets the visible state of the specified cells and all connected edges\n * if includeEdges is true. The change is carried out using <cellsToggled>.\n * This method fires <mxEvent.TOGGLE_CELLS> while the transaction is in\n * progress. Returns the cells whose visible state was changed.\n * \n * Parameters:\n * \n * show - Boolean that specifies the visible state to be assigned.\n * cells - Array of <mxCells> whose visible state should be changed. If\n * null is specified then the selection cells are used.\n * includeEdges - Optional boolean indicating if the visible state of all\n * connected edges should be changed as well. Default is true.\n */\nmxGraph.prototype.toggleCells = function(show, cells, includeEdges)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\n\t// Adds all connected edges recursively\n\tif (includeEdges)\n\t{\n\t\tcells = this.addAllEdges(cells);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsToggled(cells, show);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.TOGGLE_CELLS,\n\t\t\t'show', show, 'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsToggled\n * \n * Sets the visible state of the specified cells.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose visible state should be changed.\n * show - Boolean that specifies the visible state to be assigned.\n */\nmxGraph.prototype.cellsToggled = function(cells, show)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setVisible(cells[i], show);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Folding\n */\n\n/**\n * Function: foldCells\n * \n * Sets the collapsed state of the specified cells and all descendants\n * if recurse is true. The change is carried out using <cellsFolded>.\n * This method fires <mxEvent.FOLD_CELLS> while the transaction is in\n * progress. Returns the cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Optional boolean indicating if the collapsed state of all\n * descendants should be set. Default is false.\n * cells - Array of <mxCells> whose collapsed state should be set. If\n * null is specified then the foldable selection cells are used.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n * evt - Optional native event that triggered the invocation.\n */\nmxGraph.prototype.foldCells = function(collapse, recurse, cells, checkFoldable, evt)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getFoldableCells(this.getSelectionCells(), collapse);\n\t}\n\n\tthis.stopEditing(false);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsFolded(cells, collapse, recurse, checkFoldable);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FOLD_CELLS,\n\t\t\t'collapse', collapse, 'recurse', recurse, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsFolded\n * \n * Sets the collapsed state of the specified cells. This method fires\n * <mxEvent.CELLS_FOLDED> while the transaction is in progress. Returns the\n * cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose collapsed state should be set.\n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Boolean indicating if the collapsed state of all descendants\n * should be set.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n */\nmxGraph.prototype.cellsFolded = function(cells, collapse, recurse, checkFoldable)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif ((!checkFoldable || this.isCellFoldable(cells[i], collapse)) &&\n\t\t\t\t\tcollapse != this.isCellCollapsed(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.model.setCollapsed(cells[i], collapse);\n\t\t\t\t\tthis.swapBounds(cells[i], collapse);\n\n\t\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recurse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\t\tthis.cellsFolded(children, collapse, recurse);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_FOLDED,\n\t\t\t\t'cells', cells, 'collapse', collapse, 'recurse', recurse));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swapBounds\n * \n * Swaps the alternate and the actual bounds in the geometry of the given\n * cell invoking <updateAlternateBounds> before carrying out the swap.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the bounds should be swapped.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.swapBounds = function(cell, willCollapse)\n{\n\tif (cell != null)\n\t{\n\t\tvar geo = this.model.getGeometry(cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tthis.updateAlternateBounds(cell, geo, willCollapse);\n\t\t\tgeo.swap();\n\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateAlternateBounds\n * \n * Updates or sets the alternate bounds in the given geometry for the given\n * cell depending on whether the cell is going to be collapsed. If no\n * alternate bounds are defined in the geometry and\n * <collapseToPreferredSize> is true, then the preferred size is used for\n * the alternate bounds. The top, left corner is always kept at the same\n * location.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the geometry is being udpated.\n * g - <mxGeometry> for which the alternate bounds should be updated.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.updateAlternateBounds = function(cell, geo, willCollapse)\n{\n\tif (cell != null && geo != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\n\t\tif (geo.alternateBounds == null)\n\t\t{\n\t\t\tvar bounds = geo;\n\t\t\t\n\t\t\tif (this.collapseToPreferredSize)\n\t\t\t{\n\t\t\t\tvar tmp = this.getPreferredSizeForCell(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tbounds = tmp;\n\n\t\t\t\t\tvar startSize = mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE);\n\n\t\t\t\t\tif (startSize > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbounds.height = Math.max(bounds.height, startSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tgeo.alternateBounds = new mxRectangle(0, 0, bounds.width, bounds.height);\n\t\t}\n\t\t\n\t\tif (geo.alternateBounds != null)\n\t\t{\n\t\t\tgeo.alternateBounds.x = geo.x;\n\t\t\tgeo.alternateBounds.y = geo.y;\n\t\t\t\n\t\t\tvar alpha = mxUtils.toRadians(style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar dx = geo.alternateBounds.getCenterX() - geo.getCenterX();\n\t\t\t\tvar dy = geo.alternateBounds.getCenterY() - geo.getCenterY();\n\t\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\n\t\t\t\tvar dx2 = cos * dx - sin * dy;\n\t\t\t\tvar dy2 = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tgeo.alternateBounds.x += dx2 - dx;\n\t\t\t\tgeo.alternateBounds.y += dy2 - dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: addAllEdges\n * \n * Returns an array with the given cells and all edges that are connected\n * to a cell or one of its descendants.\n */\nmxGraph.prototype.addAllEdges = function(cells)\n{\n\tvar allCells = cells.slice();\n\t\n\treturn mxUtils.removeDuplicates(allCells.concat(this.getAllEdges(cells)));\n};\n\n/**\n * Function: getAllEdges\n * \n * Returns all edges connected to the given cells or its descendants.\n */\nmxGraph.prototype.getAllEdges = function(cells)\n{\n\tvar edges = [];\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar edgeCount = this.model.getEdgeCount(cells[i]);\n\t\t\t\n\t\t\tfor (var j = 0; j < edgeCount; j++)\n\t\t\t{\n\t\t\t\tedges.push(this.model.getEdgeAt(cells[i], j));\n\t\t\t}\n\n\t\t\t// Recurses\n\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\tedges = edges.concat(this.getAllEdges(children));\n\t\t}\n\t}\n\t\n\treturn edges;\n};\n\n/**\n * Group: Cell sizing\n */\n\n/**\n * Function: updateCellSize\n * \n * Updates the size of the given cell in the model using <cellSizeUpdated>.\n * This method fires <mxEvent.UPDATE_CELL_SIZE> while the transaction is in\n * progress. Returns the cell whose size was updated.\n * \n * Parameters:\n * \n * cell - <mxCell> whose size should be updated.\n */\nmxGraph.prototype.updateCellSize = function(cell, ignoreChildren)\n{\n\tignoreChildren = (ignoreChildren != null) ? ignoreChildren : false;\n\t\n\tthis.model.beginUpdate();\t\t\t\t\n\ttry\n\t{\n\t\tthis.cellSizeUpdated(cell, ignoreChildren);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UPDATE_CELL_SIZE,\n\t\t\t\t'cell', cell, 'ignoreChildren', ignoreChildren));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellSizeUpdated\n * \n * Updates the size of the given cell in the model using\n * <getPreferredSizeForCell> to get the new size.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the size should be changed.\n */\nmxGraph.prototype.cellSizeUpdated = function(cell, ignoreChildren)\n{\n\tif (cell != null)\n\t{\n\t\tthis.model.beginUpdate();\t\t\t\t\n\t\ttry\n\t\t{\n\t\t\tvar size = this.getPreferredSizeForCell(cell);\n\t\t\tvar geo = this.model.getGeometry(cell);\n\t\t\t\n\t\t\tif (size != null && geo != null)\n\t\t\t{\n\t\t\t\tvar collapsed = this.isCellCollapsed(cell);\n\t\t\t\tgeo = geo.clone();\n\n\t\t\t\tif (this.isSwimlane(cell))\n\t\t\t\t{\n\t\t\t\t\tvar style = this.getCellStyle(cell);\n\t\t\t\t\tvar cellStyle = this.model.getStyle(cell);\n\n\t\t\t\t\tif (cellStyle == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.height + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = size.height + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.width + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = size.width + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.setStyle(cell, cellStyle);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.createState(cell);\n\t\t\t\t\tvar align = (state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER);\n\t\t\t\t\t\n\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += geo.width - size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse if (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += Math.round((geo.width - size.width) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar valign = this.getVerticalAlign(state);\n\t\t\t\t\t\n\t\t\t\t\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += geo.height - size.height;\n\t\t\t\t\t}\n\t\t\t\t\telse if (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += Math.round((geo.height - size.height) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t}\n\n\t\t\t\tif (!ignoreChildren && !collapsed)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.view.getBounds(this.model.getChildren(cell));\n\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tr = this.view.translate;\n\t\t\t\t\t\tvar scale = this.view.scale;\n\n\t\t\t\t\t\tvar width = (bounds.x + bounds.width) / scale - geo.x - tr.x;\n\t\t\t\t\t\tvar height = (bounds.y + bounds.height) / scale - geo.y - tr.y;\n\n\t\t\t\t\t\tgeo.width = Math.max(geo.width, width);\n\t\t\t\t\t\tgeo.height = Math.max(geo.height, height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.cellsResized([cell], [geo], false);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getPreferredSizeForCell\n * \n * Returns the preferred width and height of the given <mxCell> as an\n * <mxRectangle>. To implement a minimum width, add a new style eg.\n * minWidth in the vertex and override this method as follows.\n * \n * (code)\n * var graphGetPreferredSizeForCell = graph.getPreferredSizeForCell;\n * graph.getPreferredSizeForCell = function(cell)\n * {\n *   var result = graphGetPreferredSizeForCell.apply(this, arguments);\n *   var style = this.getCellStyle(cell);\n *   \n *   if (style['minWidth'] > 0)\n *   {\n *     result.width = Math.max(style['minWidth'], result.width);\n *   }\n * \n *   return result;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> for which the preferred size should be returned.\n * textWidth - Optional maximum text width for word wrapping.\n */\nmxGraph.prototype.getPreferredSizeForCell = function(cell, textWidth)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar state = this.view.createState(cell);\n\t\tvar style = state.style;\n\n\t\tif (!this.model.isEdge(cell))\n\t\t{\n\t\t\tvar fontSize = style[mxConstants.STYLE_FONTSIZE] || mxConstants.DEFAULT_FONTSIZE;\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t\t// Adds dimension of image if shape is a label\n\t\t\tif (this.getImage(state) != null || style[mxConstants.STYLE_IMAGE] != null)\n\t\t\t{\n\t\t\t\tif (style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_LABEL)\n\t\t\t\t{\n\t\t\t\t\tif (style[mxConstants.STYLE_VERTICAL_ALIGN] == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx += parseFloat(style[mxConstants.STYLE_IMAGE_WIDTH]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (style[mxConstants.STYLE_ALIGN] != mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy += parseFloat(style[mxConstants.STYLE_IMAGE_HEIGHT]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adds spacings\n\t\t\tdx += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdx += style[mxConstants.STYLE_SPACING_LEFT] || 0;\n\t\t\tdx += style[mxConstants.STYLE_SPACING_RIGHT] || 0;\n\n\t\t\tdy += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdy += style[mxConstants.STYLE_SPACING_TOP] || 0;\n\t\t\tdy += style[mxConstants.STYLE_SPACING_BOTTOM] || 0;\n\t\t\t\n\t\t\t// Add spacing for collapse/expand icon\n\t\t\t// LATER: Check alignment and use constants\n\t\t\t// for image spacing\n\t\t\tvar image = this.getFoldingImage(state);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\tdx += image.width + 8;\n\t\t\t}\n\n\t\t\t// Adds space for label\n\t\t\tvar value = this.cellRenderer.getLabelValue(state);\n\n\t\t\tif (value != null && value.length > 0)\n\t\t\t{\n\t\t\t\tif (!this.isHtmlLabel(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvalue = mxUtils.htmlEntities(value, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = value.replace(/\\n/g, '<br>');\n\t\t\t\t\n\t\t\t\tvar size = mxUtils.getSizeForString(value, fontSize,\n\t\t\t\t\tstyle[mxConstants.STYLE_FONTFAMILY], textWidth,\n\t\t\t\t\tstyle[mxConstants.STYLE_FONTSTYLE]);\n\t\t\t\tvar width = size.width + dx;\n\t\t\t\tvar height = size.height + dy;\n\t\t\t\t\n\t\t\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tvar tmp = height;\n\t\t\t\t\t\n\t\t\t\t\theight = width;\n\t\t\t\t\twidth = tmp;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (this.gridEnabled)\n\t\t\t\t{\n\t\t\t\t\twidth = this.snap(width + this.gridSize / 2);\n\t\t\t\t\theight = this.snap(height + this.gridSize / 2);\n\t\t\t\t}\n\n\t\t\t\tresult = new mxRectangle(0, 0, width, height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gs2 = 4 * this.gridSize;\n\t\t\t\tresult = new mxRectangle(0, 0, gs2, gs2);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: resizeCell\n * \n * Sets the bounds of the given cell using <resizeCells>. Returns the\n * cell which was passed to the function.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangle> that represents the new bounds.\n */\nmxGraph.prototype.resizeCell = function(cell, bounds, recurse)\n{\n\treturn this.resizeCells([cell], [bounds], recurse)[0];\n};\n\n/**\n * Function: resizeCells\n * \n * Sets the bounds of the given cells and fires a <mxEvent.RESIZE_CELLS>\n * event while the transaction is in progress. Returns the cells which\n * have been passed to the function.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n */\nmxGraph.prototype.resizeCells = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : this.isRecursiveResize();\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar prev = this.cellsResized(cells, bounds, recurse);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_CELLS,\n\t\t\t'cells', cells, 'bounds', bounds, 'previous', prev));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsResized\n * \n * Sets the bounds of the given cells and fires a <mxEvent.CELLS_RESIZED>\n * event. If <extendParents> is true, then the parent is extended if a\n * child size is changed so that it overlaps with the parent.\n * \n * The following example shows how to control group resizes to make sure\n * that all child cells stay within the group.\n * \n * (code)\n * graph.addListener(mxEvent.CELLS_RESIZED, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n *   \n *   if (cells != null)\n *   {\n *     for (var i = 0; i < cells.length; i++)\n *     {\n *       if (graph.getModel().getChildCount(cells[i]) > 0)\n *       {\n *         var geo = graph.getCellGeometry(cells[i]);\n *         \n *         if (geo != null)\n *         {\n *           var children = graph.getChildCells(cells[i], true, true);\n *           var bounds = graph.getBoundingBoxFromGeometry(children, true);\n *           \n *           geo = geo.clone();\n *           geo.width = Math.max(geo.width, bounds.width);\n *           geo.height = Math.max(geo.height, bounds.height);\n *           \n *           graph.getModel().setGeometry(cells[i], geo);\n *         }\n *       }\n *     }\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellsResized = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\tvar prev = [];\n\n\tif (cells != null && bounds != null && cells.length == bounds.length)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tprev.push(this.cellResized(cells[i], bounds[i], false, recurse));\n\n\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnResize)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_RESIZED,\n\t\t\t\t'cells', cells, 'bounds', bounds, 'previous', prev));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn prev;\n};\n\n/**\n * Function: cellResized\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangles> that represent the new bounds.\n * ignoreRelative - Boolean that indicates if relative cells should be ignored.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellResized = function(cell, bounds, ignoreRelative, recurse)\n{\n\tvar prev = this.model.getGeometry(cell);\n\n\tif (prev != null && (prev.x != bounds.x || prev.y != bounds.y ||\n\t\tprev.width != bounds.width || prev.height != bounds.height))\n\t{\n\t\tvar geo = prev.clone();\n\n\t\tif (!ignoreRelative && geo.relative)\n\t\t{\n\t\t\tvar offset = geo.offset;\n\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\toffset.x += bounds.x - geo.x;\n\t\t\t\toffset.y += bounds.y - geo.y;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.x = bounds.x;\n\t\t\tgeo.y = bounds.y;\n\t\t}\n\n\t\tgeo.width = bounds.width;\n\t\tgeo.height = bounds.height;\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (recurse)\n\t\t\t{\n\t\t\t\tthis.resizeChildCells(cell, geo);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\tthis.constrainChildCells(cell);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn prev;\n};\n\n/**\n * Function: resizeChildCells\n * \n * Resizes the child cells of the given cell for the given new geometry with\n * respect to the current geometry of the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n * newGeo - <mxGeometry> that represents the new bounds.\n */\nmxGraph.prototype.resizeChildCells = function(cell, newGeo)\n{\n\tvar geo = this.model.getGeometry(cell);\n\tvar dx = (geo.width != 0) ? newGeo.width / geo.width : 1;\n\tvar dy = (geo.height != 0) ? newGeo.height / geo.height : 1;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.scaleCell(this.model.getChildAt(cell, i), dx, dy, true);\n\t}\n};\n\n/**\n * Function: constrainChildCells\n * \n * Constrains the children of the given cell using <constrainChild>.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.constrainChildCells = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.constrainChild(this.model.getChildAt(cell, i));\n\t}\n};\n\n/**\n * Function: scaleCell\n * \n * Scales the points, position and size of the given cell according to the\n * given vertical and horizontal scaling factors.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be scaled.\n * dx - Horizontal scaling factor.\n * dy - Vertical scaling factor.\n * recurse - Boolean indicating if the child cells should be scaled.\n */\nmxGraph.prototype.scaleCell = function(cell, dx, dy, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\t\tgeo = geo.clone();\n\t\t\n\t\t// Stores values for restoring based on style\n\t\tvar x = geo.x;\n\t\tvar y = geo.y\n\t\tvar w = geo.width;\n\t\tvar h = geo.height;\n\t\t\n\t\tgeo.scale(dx, dy, style[mxConstants.STYLE_ASPECT] == 'fixed');\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_WIDTH] == '1')\n\t\t{\n\t\t\tgeo.width = w * dx;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_WIDTH] == '0')\n\t\t{\n\t\t\tgeo.width = w;\n\t\t}\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_HEIGHT] == '1')\n\t\t{\n\t\t\tgeo.height = h * dy;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_HEIGHT] == '0')\n\t\t{\n\t\t\tgeo.height = h;\n\t\t}\n\t\t\n\t\tif (!this.isCellMovable(cell))\n\t\t{\n\t\t\tgeo.x = x;\n\t\t\tgeo.y = y;\n\t\t}\n\t\t\n\t\tif (!this.isCellResizable(cell))\n\t\t{\n\t\t\tgeo.width = w;\n\t\t\tgeo.height = h;\n\t\t}\n\n\t\tif (this.model.isVertex(cell))\n\t\t{\n\t\t\tthis.cellResized(cell, geo, true, recurse);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendParent\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.extendParent = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\tvar p = this.getCellGeometry(parent);\n\t\t\n\t\tif (parent != null && p != null && !this.isCellCollapsed(parent))\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative &&\n\t\t\t\t(p.width < geo.x + geo.width ||\n\t\t\t\tp.height < geo.y + geo.height))\n\t\t\t{\n\t\t\t\tp = p.clone();\n\t\t\t\t\n\t\t\t\tp.width = Math.max(p.width, geo.x + geo.width);\n\t\t\t\tp.height = Math.max(p.height, geo.y + geo.height);\n\t\t\t\t\n\t\t\t\tthis.cellsResized([parent], [p], false);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Cell moving\n */\n\n/**\n * Function: importCells\n * \n * Clones and inserts the given cells into the graph using the move\n * method and returns the inserted cells. This shortcut is used if\n * cells are inserted via datatransfer.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be imported.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.importCells = function(cells, dx, dy, target, evt, mapping)\n{\t\n\treturn this.moveCells(cells, dx, dy, true, target, evt, mapping);\n};\n\n/**\n * Function: moveCells\n * \n * Moves or clones the specified cells and moves the cells or clones by the\n * given amount, adding them to the optional target cell. The evt is the\n * mouse event as the mouse was released. The change is carried out using\n * <cellsMoved>. This method fires <mxEvent.MOVE_CELLS> while the\n * transaction is in progress. Returns the cells that were moved.\n * \n * Use the following code to move all cells in the graph.\n * \n * (code)\n * graph.moveCells(graph.getChildCells(null, true, true), 10, 10);\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be moved, cloned or added to the target.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * clone - Boolean indicating if the cells should be cloned. Default is false.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.moveCells = function(cells, dx, dy, clone, target, evt, mapping)\n{\n\tdx = (dx != null) ? dx : 0;\n\tdy = (dy != null) ? dy : 0;\n\tclone = (clone != null) ? clone : false;\n\t\n\tif (cells != null && (dx != 0 || dy != 0 || clone || target != null))\n\t{\n\t\t// Removes descendants with ancestors in cells to avoid multiple moving\n\t\tcells = this.model.getTopmostCells(cells);\n\t\tvar origCells = cells;\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Faster cell lookups to remove relative edge labels with selected\n\t\t\t// terminals to avoid explicit and implicit move at same time\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tvar isSelected = mxUtils.bind(this, function(cell)\n\t\t\t{\n\t\t\t\twhile (cell != null)\n\t\t\t\t{\n\t\t\t\t\tif (dict.get(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcell = this.model.getParent(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\t\n\t\t\t// Removes relative edge labels with selected terminals\n\t\t\tvar checked = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\n\t\t\t\tif ((geo == null || !geo.relative) || !this.model.isEdge(parent) ||\n\t\t\t\t\t(!isSelected(this.model.getTerminal(parent, true)) &&\n\t\t\t\t\t!isSelected(this.model.getTerminal(parent, false))))\n\t\t\t\t{\n\t\t\t\t\tchecked.push(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcells = checked;\n\t\t\t\n\t\t\tif (clone)\n\t\t\t{\n\t\t\t\tcells = this.cloneCells(cells, this.isCloneInvalidEdges(), mapping);\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\ttarget = this.getDefaultParent();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t// to avoid forward references in sessions.\n\t\t\t// Need to disable allowNegativeCoordinates if target not null to\n\t\t\t// allow for temporary negative numbers until cellsAdded is called.\n\t\t\tvar previous = this.isAllowNegativeCoordinates();\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tthis.setAllowNegativeCoordinates(true);\n\t\t\t}\n\t\t\t\n\t\t\tthis.cellsMoved(cells, dx, dy, !clone && this.isDisconnectOnMove()\n\t\t\t\t\t&& this.isAllowDanglingEdges(), target == null,\n\t\t\t\t\tthis.isExtendParentsOnMove() && target == null);\n\t\t\t\n\t\t\tthis.setAllowNegativeCoordinates(previous);\n\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tvar index = this.model.getChildCount(target);\n\t\t\t\tthis.cellsAdded(cells, target, index, null, null, true);\n\t\t\t\t\n\t\t\t\t// Restores parent edge on cloned edge labels\n\t\t\t\tif (clone)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\t\tvar parent = this.model.getParent(origCells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null && geo.relative &&\n\t\t\t\t\t\t\tthis.model.isEdge(parent) &&\n\t\t\t\t\t\t\tthis.model.contains(parent))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.model.add(parent, cells[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Dispatches a move event\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_CELLS, 'cells', cells,\n\t\t\t\t'dx', dx, 'dy', dy, 'clone', clone, 'target', target, 'event', evt));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsMoved\n * \n * Moves the specified cells by the given vector, disconnecting the cells\n * using disconnectGraph is disconnect is true. This method fires\n * <mxEvent.CELLS_MOVED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsMoved = function(cells, dx, dy, disconnect, constrain, extend)\n{\n\tif (cells != null && (dx != 0 || dy != 0))\n\t{\n\t\textend = (extend != null) ? extend : false;\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (disconnect)\n\t\t\t{\n\t\t\t\tthis.disconnectGraph(cells);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.translateCell(cells[i], dx, dy);\n\t\t\t\t\n\t\t\t\tif (extend && this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\telse if (constrain)\n\t\t\t\t{\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnMove)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_MOVED,\n\t\t\t\t'cells', cells, 'dx', dx, 'dy', dy, 'disconnect', disconnect));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: translateCell\n * \n * Translates the geometry of the given cell and stores the new,\n * translated geometry in the model as an atomic change.\n */\nmxGraph.prototype.translateCell = function(cell, dx, dy)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null)\n\t{\n\t\tdx = parseFloat(dx);\n\t\tdy = parseFloat(dy);\n\t\tgeo = geo.clone();\n\t\tgeo.translate(dx, dy);\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, parseFloat(geo.x));\n\t\t\tgeo.y = Math.max(0, parseFloat(geo.y));\n\t\t}\n\t\t\n\t\tif (geo.relative && !this.model.isEdge(cell))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar angle = 0;\n\t\t\t\n\t\t\tif (this.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar style = this.getCurrentCellStyle(parent);\n\t\t\t\tangle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (angle != 0)\n\t\t\t{\n\t\t\t\tvar rad = mxUtils.toRadians(-angle);\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(dx, dy), cos, sin, new mxPoint(0, 0));\n\t\t\t\tdx = pt.x;\n\t\t\t\tdy = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x = parseFloat(geo.offset.x) + dx;\n\t\t\t\tgeo.offset.y = parseFloat(geo.offset.y) + dy;\n\t\t\t}\n\t\t}\n\n\t\tthis.model.setGeometry(cell, geo);\n\t}\n};\n\n/**\n * Function: getCellContainmentArea\n * \n * Returns the <mxRectangle> inside which a cell is to be kept.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the area should be returned.\n */\nmxGraph.prototype.getCellContainmentArea = function(cell)\n{\n\tif (cell != null && !this.model.isEdge(cell))\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\t\n\t\tif (parent != null && parent != this.getDefaultParent())\n\t\t{\n\t\t\tvar g = this.model.getGeometry(parent);\n\t\t\t\n\t\t\tif (g != null)\n\t\t\t{\n\t\t\t\tvar x = 0;\n\t\t\t\tvar y = 0;\n\t\t\t\tvar w = g.width;\n\t\t\t\tvar h = g.height;\n\t\t\t\t\n\t\t\t\tif (this.isSwimlane(parent))\n\t\t\t\t{\n\t\t\t\t\tvar size = this.getStartSize(parent);\n\t\t\t\t\tvar style = this.getCurrentCellStyle(parent);\n\t\t\t\t\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\t\t\t\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_SOUTH || dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = size.width;\n\t\t\t\t\t\tsize.width = size.height;\n\t\t\t\t\t\tsize.height = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((dir == mxConstants.DIRECTION_EAST && !flipV) || (dir == mxConstants.DIRECTION_NORTH && !flipH) ||\n\t\t\t\t\t\t(dir == mxConstants.DIRECTION_WEST && flipV) || (dir == mxConstants.DIRECTION_SOUTH && flipH))\n\t\t\t\t\t{\n\t\t\t\t\t\tx = size.width;\n\t\t\t\t\t\ty = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tw -= size.width;\n\t\t\t\t\th -= size.height;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxRectangle(x, y, w, h);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getMaximumGraphBounds\n * \n * Returns the bounds inside which the diagram should be kept as an\n * <mxRectangle>.\n */\nmxGraph.prototype.getMaximumGraphBounds = function()\n{\n\treturn this.maximumGraphBounds;\n};\n\n/**\n * Function: constrainChild\n * \n * Keeps the given cell inside the bounds returned by\n * <getCellContainmentArea> for its parent, according to the rules defined by\n * <getOverlap> and <isConstrainChild>. This modifies the cell's geometry\n * in-place and does not clone it.\n * \n * Parameters:\n * \n * cells - <mxCell> which should be constrained.\n * sizeFirst - Specifies if the size should be changed first. Default is true.\n */\nmxGraph.prototype.constrainChild = function(cell, sizeFirst)\n{\n\tsizeFirst = (sizeFirst != null) ? sizeFirst : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvar geo = this.getCellGeometry(cell);\n\t\t\n\t\tif (geo != null && (this.isConstrainRelativeChildren() || !geo.relative))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar pgeo = this.getCellGeometry(parent);\n\t\t\tvar max = this.getMaximumGraphBounds();\n\t\t\t\n\t\t\t// Finds parent offset\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar off = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\n\t\t\t\t\tmax.x -= off.x;\n\t\t\t\t\tmax.y -= off.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isConstrainChild(cell))\n\t\t\t{\n\t\t\t\tvar tmp = this.getCellContainmentArea(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tvar overlap = this.getOverlap(cell);\n\t\n\t\t\t\t\tif (overlap > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\t\n\t\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Find the intersection between max and tmp\n\t\t\t\t\tif (max == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar cells = [cell];\n\t\t\t\t\n\t\t\t\tif (!this.isCellCollapsed(cell))\n\t\t\t\t{\n\t\t\t\t\tvar desc = this.model.getDescendants(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < desc.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellVisible(desc[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcells.push(desc[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bbox = this.getBoundingBoxFromGeometry(cells, false);\n\t\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative horizontal movement\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.width > max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = geo.width - max.width;\n\t\t\t\t\t\tgeo.width -= dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x + bbox.width > max.x + max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x + bbox.width - max.x - max.width - dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative vertical movement\n\t\t\t\t\tvar dy = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.height > max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = geo.height - max.height;\n\t\t\t\t\t\tgeo.height -= dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y + bbox.height > max.y + max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y + bbox.height - max.y - max.height - dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x < max.x)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x - max.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y < max.y)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y - max.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Relative geometries are moved via absolute offset\n\t\t\t\t\t\t\tif (geo.offset == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.offset = new mxPoint();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tgeo.offset.x += dx;\n\t\t\t\t\t\t\tgeo.offset.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x += dx;\n\t\t\t\t\t\t\tgeo.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdges\n * \n * Resets the control points of the edges that are connected to the given\n * cells if not both ends of the edge are in the given cells array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> for which the connected edges should be\n * reset.\n */\nmxGraph.prototype.resetEdges = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\t// Prepares faster cells lookup\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar edges = this.model.getEdges(cells[i]);\n\t\t\t\t\n\t\t\t\tif (edges != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(edges[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[j], true);\n\t\t\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[j], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if one of the terminals is not in the given array\n\t\t\t\t\t\tif (!dict.get(source) || !dict.get(target))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.resetEdge(edges[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.resetEdges(this.model.getChildren(cells[i]));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdge\n * \n * Resets the control points of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose points should be reset.\n */\nmxGraph.prototype.resetEdge = function(edge)\n{\n\tvar geo = this.model.getGeometry(edge);\n\t\n\t// Resets the control points\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tgeo = geo.clone();\n\t\tgeo.points = [];\n\t\tthis.model.setGeometry(edge, geo);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Group: Cell connecting and connection constraints\n */\n\n/**\n * Function: getOutlineConstraint\n * \n * Returns the constraint used to connect to the outline of the given state.\n */\nmxGraph.prototype.getOutlineConstraint = function(point, terminalState, me)\n{\n\tif (terminalState.shape != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(terminalState);\n\t\tvar direction = terminalState.style[mxConstants.STYLE_DIRECTION];\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tbounds.x += bounds.width / 2 - bounds.height / 2;\n\t\t\tbounds.y += bounds.height / 2 - bounds.width / 2;\n\t\t\tvar tmp = bounds.width;\n\t\t\tbounds.width = bounds.height;\n\t\t\tbounds.height = tmp;\n\t\t}\n\t\n\t\tvar alpha = mxUtils.toRadians(terminalState.shape.getShapeRotation());\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(-alpha);\n\t\t\tvar sin = Math.sin(-alpha);\n\t\n\t\t\tvar ct = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\t\tpoint = mxUtils.getRotatedPoint(point, cos, sin, ct);\n\t\t}\n\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\t// LATER: Add flipping support for image shapes\n\t\tif (this.getModel().isVertex(terminalState.cell))\n\t\t{\n\t\t\tvar flipH = terminalState.style[mxConstants.STYLE_FLIPH];\n\t\t\tvar flipV = terminalState.style[mxConstants.STYLE_FLIPV];\n\t\t\t\n\t\t\t// Legacy support for stencilFlipH/V\n\t\t\tif (terminalState.shape != null && terminalState.shape.stencil != null)\n\t\t\t{\n\t\t\t\tflipH = mxUtils.getValue(terminalState.style, 'stencilFlipH', 0) == 1 || flipH;\n\t\t\t\tflipV = mxUtils.getValue(terminalState.style, 'stencilFlipV', 0) == 1 || flipV;\n\t\t\t}\n\t\t\t\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tvar tmp = flipH;\n\t\t\t\tflipH = flipV;\n\t\t\t\tflipV = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipH)\n\t\t\t{\n\t\t\t\tsx = -1;\n\t\t\t\tdx = -bounds.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipV)\n\t\t\t{\n\t\t\t\tsy = -1;\n\t\t\t\tdy = -bounds.height ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpoint = new mxPoint((point.x - bounds.x) * sx - dx + bounds.x, (point.y - bounds.y) * sy - dy + bounds.y);\n\t\t\n\t\tvar x = (bounds.width == 0) ? 0 : Math.round((point.x - bounds.x) * 1000 / bounds.width) / 1000;\n\t\tvar y = (bounds.height == 0) ? 0 : Math.round((point.y - bounds.y) * 1000 / bounds.height) / 1000;\n\t\t\n\t\treturn new mxConnectionConstraint(new mxPoint(x, y), false);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getAllConnectionConstraints\n * \n * Returns an array of all <mxConnectionConstraints> for the given terminal. If\n * the shape of the given terminal is a <mxStencilShape> then the constraints\n * of the corresponding <mxStencil> are returned.\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the terminal is the source or target.\n */\nmxGraph.prototype.getAllConnectionConstraints = function(terminal, source)\n{\n\tif (terminal != null && terminal.shape != null && terminal.shape.stencil != null)\n\t{\n\t\treturn terminal.shape.stencil.constraints;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getConnectionConstraint\n * \n * Returns an <mxConnectionConstraint> that describes the given connection\n * point. This result can then be passed to <getConnectionPoint>.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n */\nmxGraph.prototype.getConnectionConstraint = function(edge, terminal, source)\n{\n\tvar point = null;\n\tvar x = edge.style[(source) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\n\tif (x != null)\n\t{\n\t\tvar y = edge.style[(source) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t\n\t\tif (y != null)\n\t\t{\n\t\t\tpoint = new mxPoint(parseFloat(x), parseFloat(y));\n\t\t}\n\t}\n\t\n\tvar perimeter = false;\n\tvar dx = 0, dy = 0;\n\t\n\tif (point != null)\n\t{\n\t\tperimeter = mxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, true);\n\n\t\t//Add entry/exit offset\n\t\tdx = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DX : mxConstants.STYLE_ENTRY_DX]);\n\t\tdy = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DY : mxConstants.STYLE_ENTRY_DY]);\n\t\t\n\t\tdx = isFinite(dx)? dx : 0;\n\t\tdy = isFinite(dy)? dy : 0;\n\t}\n\n\treturn new mxConnectionConstraint(point, perimeter, null, dx, dy);\n};\n\n/**\n * Function: setConnectionConstraint\n * \n * Sets the <mxConnectionConstraint> that describes the given connection point.\n * If no constraint is given then nothing is changed. To remove an existing\n * constraint from the given edge, use an empty constraint instead.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * terminal - <mxCell> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.setConnectionConstraint = function(edge, terminal, source, constraint)\n{\n\tif (constraint != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tif (constraint == null || constraint.point == null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t}\n\t\t\telse if (constraint.point != null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, constraint.point.x, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, constraint.point.y, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, constraint.dx, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, constraint.dy, [edge]);\n\t\t\t\t\n\t\t\t\t// Only writes 0 since 1 is default\n\t\t\t\tif (!constraint.perimeter)\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, '0', [edge]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getConnectionPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * vertex - <mxCellState> that represents the vertex.\n * constraint - <mxConnectionConstraint> that represents the connection point\n * constraint as returned by <getConnectionConstraint>.\n */\nmxGraph.prototype.getConnectionPoint = function(vertex, constraint, round)\n{\n\tround = (round != null) ? round : true;\n\tvar point = null;\n\t\n\tif (vertex != null && constraint.point != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(vertex);\n        var cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\tvar direction = vertex.style[mxConstants.STYLE_DIRECTION];\n\t\tvar r1 = 0;\n\t\t\n\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\tif (direction != null && mxUtils.getValue(vertex.style,\n\t\t\tmxConstants.STYLE_ANCHOR_POINT_DIRECTION, 1) == 1)\n\t\t{\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t{\n\t\t\t\tr1 += 270;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t{\n\t\t\t\tr1 += 180;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tr1 += 90;\n\t\t\t}\n\n\t\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tbounds.rotate90();\n\t\t\t}\n\t\t}\n\n\t\tvar scale = this.view.scale;\n\t\tpoint = new mxPoint(bounds.x + constraint.point.x * bounds.width + constraint.dx * scale,\n\t\t\t\tbounds.y + constraint.point.y * bounds.height + constraint.dy * scale);\n\t\t\n\t\t// Rotation for direction before projection on perimeter\n\t\tvar r2 = vertex.style[mxConstants.STYLE_ROTATION] || 0;\n\t\t\n\t\tif (constraint.perimeter)\n\t\t{\n\t\t\tif (r1 != 0)\n\t\t\t{\n\t\t\t\t// Only 90 degrees steps possible here so no trig needed\n\t\t\t\tvar cos = 0;\n\t\t\t\tvar sin = 0;\n\t\t\t\t\n\t\t\t\tif (r1 == 90)\n\t\t\t\t{\n\t\t\t\t\tsin = 1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 180)\n\t\t\t\t{\n\t\t\t\t\tcos = -1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 270)\n\t\t\t\t{\n\t\t\t\t\tsin = -1;\n\t\t\t\t}\n\t\t\t\t\n\t\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t\t}\n\t\n\t\t\tpoint = this.view.getPerimeterPoint(vertex, point, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr2 += r1;\n\t\t\t\n\t\t\tif (this.getModel().isVertex(vertex.cell))\n\t\t\t{\n\t\t\t\tvar flipH = vertex.style[mxConstants.STYLE_FLIPH] == 1;\n\t\t\t\tvar flipV = vertex.style[mxConstants.STYLE_FLIPV] == 1;\n\t\t\t\t\n\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\tif (vertex.shape != null && vertex.shape.stencil != null)\n\t\t\t\t{\n\t\t\t\t\tflipH = (mxUtils.getValue(vertex.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\tflipV = (mxUtils.getValue(vertex.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tvar temp = flipH;\n\t\t\t\t\tflipH = flipV\n\t\t\t\t\tflipV = temp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipH)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipV)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Generic rotation after projection on perimeter\n\t\tif (r2 != 0 && point != null)\n\t\t{\n\t        var rad = mxUtils.toRadians(r2);\n\t        var cos = Math.cos(rad);\n\t        var sin = Math.sin(rad);\n\t        \n\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t}\n\t}\n\t\n\tif (round && point != null)\n\t{\n\t\tpoint.x = Math.round(point.x);\n\t\tpoint.y = Math.round(point.y);\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: connectCell\n * \n * Connects the specified end of the given edge to the given terminal\n * using <cellConnected> and fires <mxEvent.CONNECT_CELL> while the\n * transaction is in progress. Returns the updated edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.connectCell = function(edge, terminal, source, constraint)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar previous = this.model.getTerminal(edge, source);\n\t\tthis.cellConnected(edge, terminal, source, constraint);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT_CELL,\n\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t'previous', previous));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: cellConnected\n * \n * Sets the new terminal for the given edge and resets the edge points if\n * <resetEdgesOnConnect> is true. This method fires\n * <mxEvent.CELL_CONNECTED> while the transaction is in progress.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - <mxConnectionConstraint> to be used for this connection.\n */\nmxGraph.prototype.cellConnected = function(edge, terminal, source, constraint)\n{\n\tif (edge != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar previous = this.model.getTerminal(edge, source);\n\n\t\t\t// Updates the constraint\n\t\t\tthis.setConnectionConstraint(edge, terminal, source, constraint);\n\t\t\t\n\t\t\t// Checks if the new terminal is a port, uses the ID of the port in the\n\t\t\t// style and the parent of the port as the actual terminal of the edge.\n\t\t\tif (this.isPortsEnabled())\n\t\t\t{\n\t\t\t\tvar id = null;\n\t\n\t\t\t\tif (this.isPort(terminal))\n\t\t\t\t{\n\t\t\t\t\tid = terminal.getId();\n\t\t\t\t\tterminal = this.getTerminalForPort(terminal, source);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Sets or resets all previous information for connecting to a child port\n\t\t\t\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\t\t\t\tmxConstants.STYLE_TARGET_PORT;\n\t\t\t\tthis.setCellStyles(key, id, [edge]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.model.setTerminal(edge, terminal, source);\n\t\t\t\n\t\t\tif (this.resetEdgesOnConnect)\n\t\t\t{\n\t\t\t\tthis.resetEdge(edge);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELL_CONNECTED,\n\t\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t\t'previous', previous));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: disconnectGraph\n * \n * Disconnects the given edges from the terminals which are not in the\n * given array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be disconnected.\n */\nmxGraph.prototype.disconnectGraph = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\t\t\t\t\t\t\t\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar tr = this.view.translate;\n\t\t\t\n\t\t\t// Fast lookup for finding cells in array\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(\n\t\t\t\t\t\t\tthis.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null &&\n\t\t\t\t\t\t\tpstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar dx = -pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = -pstate.origin.y;\n\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\n\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (src != null && this.isCellDisconnectable(cells[i], src, true))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (src == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - tr.y + dy), true);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (trg != null && this.isCellDisconnectable(cells[i], trg, false))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (trg == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y + dy), false);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Drilldown\n */\n\n/**\n * Function: getCurrentRoot\n * \n * Returns the current root of the displayed cell hierarchy. This is a\n * shortcut to <mxGraphView.currentRoot> in <view>.\n */\nmxGraph.prototype.getCurrentRoot = function()\n{\n\treturn this.view.currentRoot;\n};\n \n/**\n * Function: getTranslateForRoot\n * \n * Returns the translation to be used if the given cell is the root cell as\n * an <mxPoint>. This implementation returns null.\n * \n * Example:\n * \n * To keep the children at their absolute position while stepping into groups,\n * this function can be overridden as follows.\n * \n * (code)\n * var offset = new mxPoint(0, 0);\n * \n * while (cell != null)\n * {\n *   var geo = this.model.getGeometry(cell);\n * \n *   if (geo != null)\n *   {\n *     offset.x -= geo.x;\n *     offset.y -= geo.y;\n *   }\n * \n *   cell = this.model.getParent(cell);\n * }\n * \n * return offset;\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the root.\n */\nmxGraph.prototype.getTranslateForRoot = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, the cell returned by getTerminalForPort should be used as the\n * terminal and the port should be referenced by the ID in either the\n * mxConstants.STYLE_SOURCE_PORT or the or the\n * mxConstants.STYLE_TARGET_PORT. Note that a port should not be movable.\n * This implementation always returns false.\n * \n * A typical implementation is the following:\n * \n * (code)\n * graph.isPort = function(cell)\n * {\n *   var geo = this.getCellGeometry(cell);\n *   \n *   return (geo != null) ? geo.relative : false;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxGraph.prototype.isPort = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getTerminalForPort\n * \n * Returns the terminal to be used for a given port. This implementation\n * always returns the parent cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n * source - If the cell is the source or target port.\n */\nmxGraph.prototype.getTerminalForPort = function(cell, source)\n{\n\treturn this.model.getParent(cell);\n};\n\n/**\n * Function: getChildOffsetForCell\n * \n * Returns the offset to be used for the cells inside the given cell. The\n * root and layer cells may be identified using <mxGraphModel.isRoot> and\n * <mxGraphModel.isLayer>. For all other current roots, the\n * <mxGraphView.currentRoot> field points to the respective cell, so that\n * the following holds: cell == this.view.currentRoot. This implementation\n * returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose offset should be returned.\n */\nmxGraph.prototype.getChildOffsetForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: enterGroup\n * \n * Uses the given cell as the root of the displayed cell hierarchy. If no\n * cell is specified then the selection cell is used. The cell is only used\n * if <isValidRoot> returns true.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the new root. Default is the\n * selection cell.\n */\nmxGraph.prototype.enterGroup = function(cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\tif (cell != null && this.isValidRoot(cell))\n\t{\n\t\tthis.view.setCurrentRoot(cell);\n\t\tthis.clearSelection();\n\t}\n};\n\n/**\n * Function: exitGroup\n * \n * Changes the current root to the next valid root in the displayed cell\n * hierarchy.\n */\nmxGraph.prototype.exitGroup = function()\n{\n\tvar root = this.model.getRoot();\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tvar next = this.model.getParent(current);\n\t\t\n\t\t// Finds the next valid root in the hierarchy\n\t\twhile (next != root && !this.isValidRoot(next) &&\n\t\t\t\tthis.model.getParent(next) != root)\n\t\t{\n\t\t\tnext = this.model.getParent(next);\n\t\t}\n\t\t\n\t\t// Clears the current root if the new root is\n\t\t// the model's root or one of the layers.\n\t\tif (next == root || this.model.getParent(next) == root)\n\t\t{\n\t\t\tthis.view.setCurrentRoot(null);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.view.setCurrentRoot(next);\n\t\t}\n\t\t\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\t// Selects the previous root in the graph\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: home\n * \n * Uses the root of the model as the root of the displayed cell hierarchy\n * and selects the previous root.\n */\nmxGraph.prototype.home = function()\n{\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tthis.view.setCurrentRoot(null);\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: isValidRoot\n * \n * Returns true if the given cell is a valid root for the cell display\n * hierarchy. This implementation returns true for all non-null values.\n * \n * Parameters:\n * \n * cell - <mxCell> which should be checked as a possible root.\n */\nmxGraph.prototype.isValidRoot = function(cell)\n{\n\treturn (cell != null);\n};\n\n/**\n * Group: Graph display\n */\n \n/**\n * Function: getGraphBounds\n * \n * Returns the bounds of the visible graph. Shortcut to\n * <mxGraphView.getGraphBounds>. See also: <getBoundingBoxFromGeometry>.\n */\n mxGraph.prototype.getGraphBounds = function()\n {\n \treturn this.view.getGraphBounds();\n };\n\n/**\n * Function: getCellBounds\n * \n * Returns the scaled, translated bounds for the given cell. See\n * <mxGraphView.getBounds> for arrays.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be returned.\n * includeEdge - Optional boolean that specifies if the bounds of\n * the connected edges should be included. Default is false.\n * includeDescendants - Optional boolean that specifies if the bounds\n * of all descendants should be included. Default is false.\n */\nmxGraph.prototype.getCellBounds = function(cell, includeEdges, includeDescendants)\n{\n\tvar cells = [cell];\n\t\n\t// Includes all connected edges\n\tif (includeEdges)\n\t{\n\t\tcells = cells.concat(this.model.getEdges(cell));\n\t}\n\t\n\tvar result = this.view.getBounds(cells);\n\t\n\t// Recursively includes the bounds of the children\n\tif (includeDescendants)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar tmp = this.getCellBounds(this.model.getChildAt(cell, i),\n\t\t\t\tincludeEdges, true);\n\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\tresult.add(tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getBoundingBoxFromGeometry\n * \n * Returns the bounding box for the geometries of the vertices in the\n * given array of cells. This can be used to find the graph bounds during\n * a layout operation (ie. before the last endUpdate) as follows:\n * \n * (code)\n * var cells = graph.getChildCells(graph.getDefaultParent(), true, true);\n * var bounds = graph.getBoundingBoxFromGeometry(cells, true);\n * (end)\n * \n * This can then be used to move cells to the origin:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.moveCells(cells, -Math.min(bounds.x, 0), -Math.min(bounds.y, 0))\n * }\n * (end)\n * \n * Or to translate the graph view:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.view.setTranslate(-Math.min(bounds.x, 0), -Math.min(bounds.y, 0));\n * }\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be returned.\n * includeEdges - Specifies if edge bounds should be included by computing\n * the bounding box for all points in geometry. Default is false.\n */\nmxGraph.prototype.getBoundingBoxFromGeometry = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : false;\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (includeEdges || this.model.isVertex(cells[i]))\n\t\t\t{\n\t\t\t\t// Computes the bounding box for the points in the geometry\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = null;\n\t\t\t\t\t\n\t\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar addPoint = function(pt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (pt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (tmp == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp = new mxRectangle(pt.x, pt.y, 0, 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.add(new mxRectangle(pt.x, pt.y, 0, 0));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], true) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(true));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], false) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(false));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tvar pts = geo.points;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pts != null && pts.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = new mxRectangle(pts[0].x, pts[0].y, 0, 0);\n\n\t\t\t\t\t\t\tfor (var j = 1; j < pts.length; j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taddPoint(pts[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbbox = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && parent != this.view.currentRoot)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox = new mxRectangle(geo.x * tmp.width, geo.y * tmp.height, geo.width, geo.height);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox = mxRectangle.fromRectangle(geo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null && geo.offset != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox.x += geo.offset.x;\n\t\t\t\t\t\t\tbbox.y += geo.offset.y;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar style = this.getCurrentCellStyle(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar angle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (angle != 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, angle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: refresh\n * \n * Clears all cell states or the states for the hierarchy starting at the\n * given cell and validates the graph. This fires a refresh event as the\n * last step.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the cell states should be cleared.\n */\nmxGraph.prototype.refresh = function(cell)\n{\n\tthis.view.clear(cell, cell == null);\n\tthis.view.validate();\n\tthis.sizeDidChange();\n\tthis.fireEvent(new mxEventObject(mxEvent.REFRESH));\n};\n\n/**\n * Function: snap\n * \n * Snaps the given numeric value to the grid if <gridEnabled> is true.\n * \n * Parameters:\n * \n * value - Numeric value to be snapped to the grid.\n */\nmxGraph.prototype.snap = function(value)\n{\n\tif (this.gridEnabled)\n\t{\n\t\tvalue = Math.round(value / this.gridSize ) * this.gridSize;\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: snapDelta\n * \n * Snaps the given delta with the given scaled bounds.\n */\nmxGraph.prototype.snapDelta = function(delta, bounds, ignoreGrid, ignoreHorizontal, ignoreVertical)\n{\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\t\n\tif (!ignoreGrid && this.gridEnabled)\n\t{\n\t\tvar tol = this.gridSize * s * 0.5;\n\t\t\n\t\tif (!ignoreHorizontal)\n\t\t{\n\t\t\tvar tx = bounds.x - (this.snap(bounds.x / s - t.x) + t.x) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.x- tx) < tol)\n\t\t\t{\n\t\t\t\tdelta.x = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.x = this.snap(delta.x / s) * s - tx;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ignoreVertical)\n\t\t{\n\t\t\tvar ty = bounds.y - (this.snap(bounds.y / s - t.y) + t.y) * s;\n\t\t\t\t\n\t\t\tif (Math.abs(delta.y - ty) < tol)\n\t\t\t{\n\t\t\t\tdelta.y = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.y = this.snap(delta.y / s) * s - ty;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tol = 0.5 * s;\n\t\t\n\t\tif (!ignoreHorizontal)\n\t\t{\n\t\t\tvar tx = bounds.x - (Math.round(bounds.x / s - t.x) + t.x) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.x - tx) < tol)\n\t\t\t{\n\t\t\t\tdelta.x = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.x = Math.round(delta.x / s) * s - tx;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!ignoreVertical)\n\t\t{\t\t\n\t\t\tvar ty = bounds.y - (Math.round(bounds.y / s - t.y) + t.y) * s;\n\t\t\t\n\t\t\tif (Math.abs(delta.y - ty) < tol)\n\t\t\t{\n\t\t\t\tdelta.y = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta.y = Math.round(delta.y / s) * s - ty;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: panGraph\n * \n * Shifts the graph display by the given amount. This is used to preview\n * panning operations, use <mxGraphView.setTranslate> to set a persistent\n * translation of the view. Fires <mxEvent.PAN>.\n * \n * Parameters:\n * \n * dx - Amount to shift the graph along the x-axis.\n * dy - Amount to shift the graph along the y-axis.\n */\nmxGraph.prototype.panGraph = function(dx, dy)\n{\n\tif (this.useScrollbarsForPanning && mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.container.scrollLeft = -dx;\n\t\tthis.container.scrollTop = -dy;\n\t}\n\telse\n\t{\n\t\tvar canvas = this.view.getCanvas();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\t// Puts everything inside the container in a DIV so that it\n\t\t\t// can be moved without changing the state of the container\n\t\t\tif (dx == 0 && dy == 0)\n\t\t\t{\n\t\t\t\t// Workaround for ignored removeAttribute on SVG element in IE9 standards\n\t\t\t\tif (mxClient.IS_IE)\n\t\t\t\t{\n\t\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.removeAttribute('transform');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 != null)\n\t\t\t\t{\n\t\t\t\t\tvar child = this.shiftPreview1.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview1.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview1.parentNode.removeChild(this.shiftPreview1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview1 = null;\n\t\t\t\t\t\n\t\t\t\t\tthis.container.appendChild(canvas.parentNode);\n\t\t\t\t\t\n\t\t\t\t\tchild = this.shiftPreview2.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview2.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview2.parentNode.removeChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 == null)\n\t\t\t\t{\n\t\t\t\t\t// Needs two divs for stuff before and after the SVG element\n\t\t\t\t\tthis.shiftPreview1 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview1.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview1.style.overflow = 'visible';\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview2.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview2.style.overflow = 'visible';\n\n\t\t\t\t\tvar current = this.shiftPreview1;\n\t\t\t\t\tvar child = this.container.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// SVG element is moved via transform attribute\n\t\t\t\t\t\tif (child != canvas.parentNode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent.appendChild(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = this.shiftPreview2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Inserts elements only if not empty\n\t\t\t\t\tif (this.shiftPreview1.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.insertBefore(this.shiftPreview1, canvas.parentNode);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.shiftPreview2.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.appendChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.shiftPreview1.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview1.style.top = dy + 'px';\n\t\t\t\tthis.shiftPreview2.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview2.style.top = dy + 'px';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcanvas.style.left = dx + 'px';\n\t\t\tcanvas.style.top = dy + 'px';\n\t\t}\n\t\t\n\t\tthis.panDx = dx;\n\t\tthis.panDy = dy;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN));\n\t}\n};\n\n/**\n * Function: zoomIn\n * \n * Zooms into the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomIn = function()\n{\n\tthis.zoom(this.zoomFactor);\n};\n\n/**\n * Function: zoomOut\n * \n * Zooms out of the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomOut = function()\n{\n\tthis.zoom(1 / this.zoomFactor);\n};\n\n/**\n * Function: zoomActual\n * \n * Resets the zoom and panning in the view.\n */\nmxGraph.prototype.zoomActual = function()\n{\n\tif (this.view.scale == 1)\n\t{\n\t\tthis.view.setTranslate(0, 0);\n\t}\n\telse\n\t{\n\t\tthis.view.translate.x = 0;\n\t\tthis.view.translate.y = 0;\n\n\t\tthis.view.setScale(1);\n\t}\n};\n\n/**\n * Function: zoomTo\n * \n * Zooms the graph to the given scale with an optional boolean center\n * argument, which is passd to <zoom>.\n */\nmxGraph.prototype.zoomTo = function(scale, center)\n{\n\tthis.zoom(scale / this.view.scale, center);\n};\n\n/**\n * Function: center\n * \n * Centers the graph in the container.\n * \n * Parameters:\n * \n * horizontal - Optional boolean that specifies if the graph should be centered\n * horizontally. Default is true.\n * vertical - Optional boolean that specifies if the graph should be centered\n * vertically. Default is true.\n * cx - Optional float that specifies the horizontal center. Default is 0.5.\n * cy - Optional float that specifies the vertical center. Default is 0.5.\n */\nmxGraph.prototype.center = function(horizontal, vertical, cx, cy)\n{\n\thorizontal = (horizontal != null) ? horizontal : true;\n\tvertical = (vertical != null) ? vertical : true;\n\tcx = (cx != null) ? cx : 0.5;\n\tcy = (cy != null) ? cy : 0.5;\n\t\n\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\tvar padding = 2 * this.getBorder();\n\tvar cw = this.container.clientWidth - padding;\n\tvar ch = this.container.clientHeight - padding;\n\tvar bounds = this.getGraphBounds();\n\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\n\tvar dx = (horizontal) ? cw - bounds.width : 0;\n\tvar dy = (vertical) ? ch - bounds.height : 0;\n\t\n\tif (!hasScrollbars)\n\t{\n\t\tthis.view.setTranslate((horizontal) ? Math.floor(t.x - bounds.x * s + dx * cx / s) : t.x,\n\t\t\t(vertical) ? Math.floor(t.y - bounds.y * s + dy * cy / s) : t.y);\n\t}\n\telse\n\t{\n\t\tbounds.x -= t.x;\n\t\tbounds.y -= t.y;\n\t\n\t\tvar sw = this.container.scrollWidth;\n\t\tvar sh = this.container.scrollHeight;\n\t\t\n\t\tif (sw > cw)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\t\n\t\tif (sh > ch)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\n\t\tthis.view.setTranslate(Math.floor(dx / 2 - bounds.x), Math.floor(dy / 2 - bounds.y));\n\t\tthis.container.scrollLeft = (sw - cw) / 2;\n\t\tthis.container.scrollTop = (sh - ch) / 2;\n\t}\n};\n\n/**\n * Function: zoom\n * \n * Zooms the graph using the given factor. Center is an optional boolean\n * argument that keeps the graph scrolled to the center. If the center argument\n * is omitted, then <centerZoom> will be used as its value.\n */\nmxGraph.prototype.zoom = function(factor, center)\n{\n\tcenter = (center != null) ? center : this.centerZoom;\n\tvar scale = Math.round(this.view.scale * factor * 100) / 100;\n\tvar state = this.view.getState(this.getSelectionCell());\n\tfactor = scale / this.view.scale;\n\t\n\tif (this.keepSelectionVisibleOnZoom && state != null)\n\t{\n\t\tvar rect = new mxRectangle(state.x * factor, state.y * factor,\n\t\t\tstate.width * factor, state.height * factor);\n\t\t\n\t\t// Refreshes the display only once if a scroll is carried out\n\t\tthis.view.scale = scale;\n\t\t\n\t\tif (!this.scrollRectToVisible(rect))\n\t\t{\n\t\t\tthis.view.revalidate();\n\t\t\t\n\t\t\t// Forces an event to be fired but does not revalidate again\n\t\t\tthis.view.setScale(scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\t\t\n\t\tif (center && !hasScrollbars)\n\t\t{\n\t\t\tvar dx = this.container.offsetWidth;\n\t\t\tvar dy = this.container.offsetHeight;\n\t\t\t\n\t\t\tif (factor > 1)\n\t\t\t{\n\t\t\t\tvar f = (factor - 1) / (scale * 2);\n\t\t\t\tdx *= -f;\n\t\t\t\tdy *= -f;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = (1 / factor - 1) / (this.view.scale * 2);\n\t\t\t\tdx *= f;\n\t\t\t\tdy *= f;\n\t\t\t}\n\n\t\t\tthis.view.scaleAndTranslate(scale,\n\t\t\t\tthis.view.translate.x + dx,\n\t\t\t\tthis.view.translate.y + dy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Allows for changes of translate and scrollbars during setscale\n\t\t\tvar tx = this.view.translate.x;\n\t\t\tvar ty = this.view.translate.y;\n\t\t\tvar sl = this.container.scrollLeft;\n\t\t\tvar st = this.container.scrollTop;\n\t\t\t\n\t\t\tthis.view.setScale(scale);\n\t\t\t\n\t\t\tif (hasScrollbars)\n\t\t\t{\n\t\t\t\tvar dx = 0;\n\t\t\t\tvar dy = 0;\n\t\t\t\t\n\t\t\t\tif (center)\n\t\t\t\t{\n\t\t\t\t\tdx = this.container.offsetWidth * (factor - 1) / 2;\n\t\t\t\t\tdy = this.container.offsetHeight * (factor - 1) / 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.container.scrollLeft = (this.view.translate.x - tx) * this.view.scale + Math.round(sl * factor + dx);\n\t\t\t\tthis.container.scrollTop = (this.view.translate.y - ty) * this.view.scale + Math.round(st * factor + dy);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: zoomToRect\n * \n * Zooms the graph to the specified rectangle. If the rectangle does not have same aspect\n * ratio as the display container, it is increased in the smaller relative dimension only\n * until the aspect match. The original rectangle is centralised within this expanded one.\n * \n * Note that the input rectangular must be un-scaled and un-translated.\n * \n * Parameters:\n * \n * rect - The un-scaled and un-translated rectangluar region that should be just visible \n * after the operation\n */\nmxGraph.prototype.zoomToRect = function(rect)\n{\n\tvar scaleX = this.container.clientWidth / rect.width;\n\tvar scaleY = this.container.clientHeight / rect.height;\n\tvar aspectFactor = scaleX / scaleY;\n\n\t// Remove any overlap of the rect outside the client area\n\trect.x = Math.max(0, rect.x);\n\trect.y = Math.max(0, rect.y);\n\tvar rectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\tvar rectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\trect.width = rectRight - rect.x;\n\trect.height = rectBottom - rect.y;\n\n\t// The selection area has to be increased to the same aspect\n\t// ratio as the container, centred around the centre point of the \n\t// original rect passed in.\n\tif (aspectFactor < 1.0)\n\t{\n\t\t// Height needs increasing\n\t\tvar newHeight = rect.height / aspectFactor;\n\t\tvar deltaHeightBuffer = (newHeight - rect.height) / 2.0;\n\t\trect.height = newHeight;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar upperBuffer = Math.min(rect.y , deltaHeightBuffer);\n\t\trect.y = rect.y - upperBuffer;\n\t\t\n\t\t// Check if the bottom has extended too far\n\t\trectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\t\trect.height = rectBottom - rect.y;\n\t}\n\telse\n\t{\n\t\t// Width needs increasing\n\t\tvar newWidth = rect.width * aspectFactor;\n\t\tvar deltaWidthBuffer = (newWidth - rect.width) / 2.0;\n\t\trect.width = newWidth;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar leftBuffer = Math.min(rect.x , deltaWidthBuffer);\n\t\trect.x = rect.x - leftBuffer;\n\t\t\n\t\t// Check if the right hand side has extended too far\n\t\trectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\t\trect.width = rectRight - rect.x;\n\t}\n\n\tvar scale = this.container.clientWidth / rect.width;\n\tvar newScale = this.view.scale * scale;\n\n\tif (!mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.view.scaleAndTranslate(newScale, (this.view.translate.x - rect.x / this.view.scale), (this.view.translate.y - rect.y / this.view.scale));\n\t}\n\telse\n\t{\n\t\tthis.view.setScale(newScale);\n\t\tthis.container.scrollLeft = Math.round(rect.x * scale);\n\t\tthis.container.scrollTop = Math.round(rect.y * scale);\n\t}\n};\n\n/**\n * Function: scrollCellToVisible\n * \n * Pans the graph so that it shows the given cell. Optionally the cell may\n * be centered in the container.\n * \n * To center a given graph if the <container> has no scrollbars, use the following code.\n * \n * [code]\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x - (bounds.width - container.clientWidth) / 2,\n * \t\t\t\t\t\t   -bounds.y - (bounds.height - container.clientHeight) / 2);\n * [/code]\n * \n * Parameters:\n * \n * cell - <mxCell> to be made visible.\n * center - Optional boolean flag. Default is false.\n */\nmxGraph.prototype.scrollCellToVisible = function(cell, center)\n{\n\tvar x = -this.view.translate.x;\n\tvar y = -this.view.translate.y;\n\n\tvar state = this.view.getState(cell);\n\n\tif (state != null)\n\t{\n\t\tvar bounds = new mxRectangle(x + state.x, y + state.y, state.width,\n\t\t\tstate.height);\n\n\t\tif (center && this.container != null)\n\t\t{\n\t\t\tvar w = this.container.clientWidth;\n\t\t\tvar h = this.container.clientHeight;\n\n\t\t\tbounds.x = bounds.getCenterX() - w / 2;\n\t\t\tbounds.width = w;\n\t\t\tbounds.y = bounds.getCenterY() - h / 2;\n\t\t\tbounds.height = h;\n\t\t}\n\t\t\n\t\tvar tr = new mxPoint(this.view.translate.x, this.view.translate.y);\n\n\t\tif (this.scrollRectToVisible(bounds))\n\t\t{\n\t\t\t// Triggers an update via the view's event source\n\t\t\tvar tr2 = new mxPoint(this.view.translate.x, this.view.translate.y);\n\t\t\tthis.view.translate.x = tr.x;\n\t\t\tthis.view.translate.y = tr.y;\n\t\t\tthis.view.setTranslate(tr2.x, tr2.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollRectToVisible\n * \n * Pans the graph so that it shows the given rectangle.\n * \n * Parameters:\n * \n * rect - <mxRectangle> to be made visible.\n */\nmxGraph.prototype.scrollRectToVisible = function(rect)\n{\n\tvar isChanged = false;\n\t\n\tif (rect != null)\n\t{\n\t\tvar w = this.container.offsetWidth;\n\t\tvar h = this.container.offsetHeight;\n\n        var widthLimit = Math.min(w, rect.width);\n        var heightLimit = Math.min(h, rect.height);\n\n\t\tif (mxUtils.hasScrollbars(this.container))\n\t\t{\n\t\t\tvar c = this.container;\n\t\t\trect.x += this.view.translate.x;\n\t\t\trect.y += this.view.translate.y;\n\t\t\tvar dx = c.scrollLeft - rect.x;\n\t\t\tvar ddx = Math.max(dx - c.scrollLeft, 0);\n\n\t\t\tif (dx > 0)\n\t\t\t{\n\t\t\t\tc.scrollLeft -= dx + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = rect.x + widthLimit - c.scrollLeft - c.clientWidth;\n\n\t\t\t\tif (dx > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft += dx + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dy = c.scrollTop - rect.y;\n\t\t\tvar ddy = Math.max(0, dy - c.scrollTop);\n\n\t\t\tif (dy > 0)\n\t\t\t{\n\t\t\t\tc.scrollTop -= dy + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = rect.y + heightLimit - c.scrollTop - c.clientHeight;\n\n\t\t\t\tif (dy > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop += dy + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.useScrollbarsForPanning && (ddx != 0 || ddy != 0))\n\t\t\t{\n\t\t\t\tthis.view.setTranslate(ddx, ddy);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar x = -this.view.translate.x;\n\t\t\tvar y = -this.view.translate.y;\n\n\t\t\tvar s = this.view.scale;\n\n\t\t\tif (rect.x + widthLimit > x + w)\n\t\t\t{\n\t\t\t\tthis.view.translate.x -= (rect.x + widthLimit - w - x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y + heightLimit > y + h)\n\t\t\t{\n\t\t\t\tthis.view.translate.y -= (rect.y + heightLimit - h - y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.x < x)\n\t\t\t{\n\t\t\t\tthis.view.translate.x += (x - rect.x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y  < y)\n\t\t\t{\n\t\t\t\tthis.view.translate.y += (y - rect.y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (isChanged)\n\t\t\t{\n\t\t\t\tthis.view.refresh();\n\t\t\t\t\n\t\t\t\t// Repaints selection marker (ticket 18)\n\t\t\t\tif (this.selectionCellsHandler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.selectionCellsHandler.refresh();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn isChanged;\n};\n\n/**\n * Function: getCellGeometry\n * \n * Returns the <mxGeometry> for the given cell. This implementation uses\n * <mxGraphModel.getGeometry>. Subclasses can override this to implement\n * specific geometries for cells in only one graph, that is, it can return\n * geometries that depend on the current state of the view.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraph.prototype.getCellGeometry = function(cell)\n{\n\treturn this.model.getGeometry(cell);\n};\n\n/**\n * Function: isCellVisible\n * \n * Returns true if the given cell is visible in this graph. This\n * implementation uses <mxGraphModel.isVisible>. Subclassers can override\n * this to implement specific visibility for cells in only one graph, that\n * is, without affecting the visible state of the cell.\n * \n * When using dynamic filter expressions for cell visibility, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraph.prototype.isCellVisible = function(cell)\n{\n\treturn this.model.isVisible(cell);\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the given cell is collapsed in this graph. This\n * implementation uses <mxGraphModel.isCollapsed>. Subclassers can override\n * this to implement specific collapsed states for cells in only one graph,\n * that is, without affecting the collapsed state of the cell.\n * \n * When using dynamic filter expressions for the collapsed state, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraph.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.model.isCollapsed(cell);\n};\n\n/**\n * Function: isCellConnectable\n * \n * Returns true if the given cell is connectable in this graph. This\n * implementation uses <mxGraphModel.isConnectable>. Subclassers can override\n * this to implement specific connectable states for cells in only one graph,\n * that is, without affecting the connectable state of the cell in the model.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraph.prototype.isCellConnectable = function(cell)\n{\n\treturn this.model.isConnectable(cell);\n};\n\n/**\n * Function: isOrthogonal\n * \n * Returns true if perimeter points should be computed such that the\n * resulting edge has only horizontal or vertical segments.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n */\nmxGraph.prototype.isOrthogonal = function(edge)\n{\n\tvar orthogonal = edge.style[mxConstants.STYLE_ORTHOGONAL];\n\t\n\tif (orthogonal != null)\n\t{\n\t\treturn orthogonal;\n\t}\n\t\n\tvar tmp = this.view.getEdgeStyle(edge);\n\t\n\treturn tmp == mxEdgeStyle.SegmentConnector ||\n\t\ttmp == mxEdgeStyle.ElbowConnector ||\n\t\ttmp == mxEdgeStyle.SideToSide ||\n\t\ttmp == mxEdgeStyle.TopToBottom ||\n\t\ttmp == mxEdgeStyle.EntityRelation ||\n\t\ttmp == mxEdgeStyle.OrthConnector;\n};\n\n/**\n * Function: isLoop\n * \n * Returns true if the given cell state is a loop.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents a potential loop.\n */\nmxGraph.prototype.isLoop = function(state)\n{\n\tvar src = state.getVisibleTerminalState(true);\n\tvar trg = state.getVisibleTerminalState(false);\n\t\n\treturn (src != null && src == trg);\n};\n\n/**\n * Function: isCloneEvent\n * \n * Returns true if the given event is a clone event. This implementation\n * returns true if control is pressed.\n */\nmxGraph.prototype.isCloneEvent = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isTransparentClickEvent\n * \n * Hook for implementing click-through behaviour on selected cells. If this\n * returns true the cell behind the selected cell will be selected. This\n * implementation returns false;\n */\nmxGraph.prototype.isTransparentClickEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Function: isToggleEvent\n * \n * Returns true if the given event is a toggle event. This implementation\n * returns true if the meta key (Cmd) is pressed on Macs or if control is\n * pressed on any other platform.\n */\nmxGraph.prototype.isToggleEvent = function(evt)\n{\n\treturn (mxClient.IS_MAC) ? mxEvent.isMetaDown(evt) : mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isGridEnabledEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isGridEnabledEvent = function(evt)\n{\n\treturn evt != null && !mxEvent.isAltDown(evt);\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isConstrainedEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isIgnoreTerminalEvent\n * \n * Returns true if the given mouse event should not allow any connections to be\n * made. This implementation returns false.\n */\nmxGraph.prototype.isIgnoreTerminalEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Group: Validation\n */\n\n/**\n * Function: validationAlert\n * \n * Displays the given validation error in a dialog. This implementation uses\n * mxUtils.alert.\n */\nmxGraph.prototype.validationAlert = function(message)\n{\n\tmxUtils.alert(message);\n};\n\n/**\n * Function: isEdgeValid\n * \n * Checks if the return value of <getEdgeValidationError> for the given\n * arguments is null.\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.isEdgeValid = function(edge, source, target)\n{\n\treturn this.getEdgeValidationError(edge, source, target) == null;\n};\n\n/**\n * Function: getEdgeValidationError\n * \n * Returns the validation error message to be displayed when inserting or\n * changing an edges' connectivity. A return value of null means the edge\n * is valid, a return value of '' means it's not valid, but do not display\n * an error message. Any other (non-empty) string returned from this method\n * is displayed as an error message when trying to connect an edge to a\n * source and target. This implementation uses the <multiplicities>, and\n * checks <multigraph>, <allowDanglingEdges> and <allowLoops> to generate\n * validation errors.\n * \n * For extending this method with specific checks for source/target cells,\n * the method can be extended as follows. Returning an empty string means\n * the edge is invalid with no error message, a non-null string specifies\n * the error message, and null means the edge is valid.\n * \n * (code)\n * graph.getEdgeValidationError = function(edge, source, target)\n * {\n *   if (source != null && target != null &&\n *     this.model.getValue(source) != null &&\n *     this.model.getValue(target) != null)\n *   {\n *     if (target is not valid for source)\n *     {\n *       return 'Invalid Target';\n *     }\n *   }\n *   \n *   // \"Supercall\"\n *   return mxGraph.prototype.getEdgeValidationError.apply(this, arguments);\n * }\n * (end)\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.getEdgeValidationError = function(edge, source, target)\n{\n\tif (edge != null && !this.isAllowDanglingEdges() && (source == null || target == null))\n\t{\n\t\treturn '';\n\t}\n\t\n\tif (edge != null && this.model.getTerminal(edge, true) == null &&\n\t\tthis.model.getTerminal(edge, false) == null)\t\n\t{\n\t\treturn null;\n\t}\n\t\n\t// Checks if we're dealing with a loop\n\tif (!this.allowLoops && source == target && source != null)\n\t{\n\t\treturn '';\n\t}\n\t\n\t// Checks if the connection is generally allowed\n\tif (!this.isValidConnection(source, target))\n\t{\n\t\treturn '';\n\t}\n\n\tif (source != null && target != null)\n\t{\n\t\tvar error = '';\n\n\t\t// Checks if the cells are already connected\n\t\t// and adds an error message if required\t\t\t\n\t\tif (!this.multigraph)\n\t\t{\n\t\t\tvar tmp = this.model.getEdgesBetween(source, target, true);\n\t\t\t\n\t\t\t// Checks if the source and target are not connected by another edge\n\t\t\tif (tmp.length > 1 || (tmp.length == 1 && tmp[0] != edge))\n\t\t\t{\n\t\t\t\terror += (mxResources.get(this.alreadyConnectedResource) ||\n\t\t\t\t\tthis.alreadyConnectedResource)+'\\n';\n\t\t\t}\n\t\t}\n\n\t\t// Gets the number of outgoing edges from the source\n\t\t// and the number of incoming edges from the target\n\t\t// without counting the edge being currently changed.\n\t\tvar sourceOut = this.model.getDirectedEdgeCount(source, true, edge);\n\t\tvar targetIn = this.model.getDirectedEdgeCount(target, false, edge);\n\n\t\t// Checks the change against each multiplicity rule\n\t\tif (this.multiplicities != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t\t{\n\t\t\t\tvar err = this.multiplicities[i].check(this, edge, source,\n\t\t\t\t\ttarget, sourceOut, targetIn);\n\t\t\t\t\n\t\t\t\tif (err != null)\n\t\t\t\t{\n\t\t\t\t\terror += err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validates the source and target terminals independently\n\t\tvar err = this.validateEdge(edge, source, target);\n\t\t\n\t\tif (err != null)\n\t\t{\n\t\t\terror += err;\n\t\t}\n\t\t\n\t\treturn (error.length > 0) ? error : null;\n\t}\n\t\n\treturn (this.allowDanglingEdges) ? null : '';\n};\n\n/**\n * Function: validateEdge\n * \n * Hook method for subclassers to return an error message for the given\n * edge and terminals. This implementation returns null.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.validateEdge = function(edge, source, target)\n{\n\treturn null;\n};\n\n/**\n * Function: validateGraph\n * \n * Validates the graph by validating each descendant of the given cell or\n * the root of the model. Context is an object that contains the validation\n * state for the complete validation run. The validation errors are\n * attached to their cells using <setCellWarning>. Returns null in the case of\n * successful validation or an array of strings (warnings) in the case of\n * failed validations.\n * \n * Paramters:\n * \n * cell - Optional <mxCell> to start the validation recursion. Default is\n * the graph root.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateGraph = function(cell, context)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tcontext = (context != null) ? context : new Object();\n\t\n\tvar isValid = true;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar tmp = this.model.getChildAt(cell, i);\n\t\tvar ctx = context;\n\t\t\n\t\tif (this.isValidRoot(tmp))\n\t\t{\n\t\t\tctx = new Object();\n\t\t}\n\t\t\n\t\tvar warn = this.validateGraph(tmp, ctx);\n\t\t\n\t\tif (warn != null)\n\t\t{\n\t\t\tthis.setCellWarning(tmp, warn.replace(/\\n/g, '<br>'));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setCellWarning(tmp, null);\n\t\t}\n\t\t\n\t\tisValid = isValid && warn == null;\n\t}\n\t\n\tvar warning = '';\n\t\n\t// Adds error for invalid children if collapsed (children invisible)\n\tif (this.isCellCollapsed(cell) && !isValid)\n\t{\n\t\twarning += (mxResources.get(this.containsValidationErrorsResource) ||\n\t\t\tthis.containsValidationErrorsResource) + '\\n';\n\t}\n\t\n\t// Checks edges and cells using the defined multiplicities\n\tif (this.model.isEdge(cell))\n\t{\n\t\twarning += this.getEdgeValidationError(cell,\n\t\tthis.model.getTerminal(cell, true),\n\t\tthis.model.getTerminal(cell, false)) || '';\n\t}\n\telse\n\t{\n\t\twarning += this.getCellValidationError(cell) || '';\n\t}\n\t\n\t// Checks custom validation rules\n\tvar err = this.validateCell(cell, context);\n\t\n\tif (err != null)\n\t{\n\t\twarning += err;\n\t}\n\t\n\t// Updates the display with the warning icons\n\t// before any potential alerts are displayed.\n\t// LATER: Move this into addCellOverlay. Redraw\n\t// should check if overlay was added or removed.\n\tif (this.model.getParent(cell) == null)\n\t{\n\t\tthis.view.validate();\n\t}\n\n\treturn (warning.length > 0 || !isValid) ? warning : null;\n};\n\n/**\n * Function: getCellValidationError\n * \n * Checks all <multiplicities> that cannot be enforced while the graph is\n * being modified, namely, all multiplicities that require a minimum of\n * 1 edge.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the multiplicities should be checked.\n */\nmxGraph.prototype.getCellValidationError = function(cell)\n{\n\tvar outCount = this.model.getDirectedEdgeCount(cell, true);\n\tvar inCount = this.model.getDirectedEdgeCount(cell, false);\n\tvar value = this.model.getValue(cell);\n\tvar error = '';\n\n\tif (this.multiplicities != null)\n\t{\n\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t{\n\t\t\tvar rule = this.multiplicities[i];\n\t\t\t\n\t\t\tif (rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\trule.attr, rule.value) && (outCount > rule.max ||\n\t\t\t\toutCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t\telse if (!rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\t\trule.attr, rule.value) && (inCount > rule.max ||\n\t\t\t\t\tinCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: validateCell\n * \n * Hook method for subclassers to return an error message for the given\n * cell and validation context. This implementation returns null. Any HTML\n * breaks will be converted to linefeeds in the calling method.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to validate.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateCell = function(cell, context)\n{\n\treturn null;\n};\n\n/**\n * Group: Graph appearance\n */\n\n/**\n * Function: getBackgroundImage\n * \n * Returns the <backgroundImage> as an <mxImage>.\n */\nmxGraph.prototype.getBackgroundImage = function()\n{\n\treturn this.backgroundImage;\n};\n\n/**\n * Function: setBackgroundImage\n * \n * Sets the new <backgroundImage>.\n * \n * Parameters:\n * \n * image - New <mxImage> to be used for the background.\n */\nmxGraph.prototype.setBackgroundImage = function(image)\n{\n\tthis.backgroundImage = image;\n};\n\n/**\n * Function: getFoldingImage\n * \n * Returns the <mxImage> used to display the collapsed state of\n * the specified cell state. This returns null for all edges.\n */\nmxGraph.prototype.getFoldingImage = function(state)\n{\n\tif (state != null && this.foldingEnabled && !this.getModel().isEdge(state.cell))\n\t{\n\t\tvar tmp = this.isCellCollapsed(state.cell);\n\t\t\n\t\tif (this.isCellFoldable(state.cell, !tmp))\n\t\t{\n\t\t\treturn (tmp) ? this.collapsedImage : this.expandedImage;\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: convertValueToString\n * \n * Returns the textual representation for the given cell. This\n * implementation returns the nodename or string-representation of the user\n * object.\n *\n * Example:\n * \n * The following returns the label attribute from the cells user\n * object if it is an XML node.\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n * \treturn cell.getAttribute('label');\n * }\n * (end)\n * \n * See also: <cellLabelChanged>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose textual representation should be returned.\n */\nmxGraph.prototype.convertValueToString = function(cell)\n{\n\tvar value = this.model.getValue(cell);\n\t\n\tif (value != null)\n\t{\n\t\tif (mxUtils.isNode(value))\n\t\t{\n\t\t\treturn value.nodeName;\n\t\t}\n\t\telse if (typeof(value.toString) == 'function')\n\t\t{\n\t\t\treturn value.toString();\n\t\t}\n\t}\n\t\n\treturn '';\n};\n\n/**\n * Function: getLabel\n * \n * Returns a string or DOM node that represents the label for the given\n * cell. This implementation uses <convertValueToString> if <labelsVisible>\n * is true. Otherwise it returns an empty string.\n * \n * To truncate a label to match the size of the cell, the following code\n * can be used.\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var label = mxGraph.prototype.getLabel.apply(this, arguments);\n * \n *   if (label != null && this.model.isVertex(cell))\n *   {\n *     var geo = this.getCellGeometry(cell);\n * \n *     if (geo != null)\n *     {\n *       var max = parseInt(geo.width / 8);\n * \n *       if (label.length > max)\n *       {\n *         label = label.substring(0, max)+'...';\n *       }\n *     }\n *   } \n *   return mxUtils.htmlEntities(label);\n * }\n * (end)\n * \n * A resize listener is needed in the graph to force a repaint of the label\n * after a resize.\n * \n * (code)\n * graph.addListener(mxEvent.RESIZE_CELLS, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n * \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     this.view.removeState(cells[i]);\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be returned.\n */\nmxGraph.prototype.getLabel = function(cell)\n{\n\tvar result = '';\n\t\n\tif (this.labelsVisible && cell != null)\n\t{\n\t\tvar style = this.getCurrentCellStyle(cell);\n\t\t\n\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_NOLABEL, false))\n\t\t{\n\t\t\tresult = this.convertValueToString(cell);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isHtmlLabel\n * \n * Returns true if the label must be rendered as HTML markup. The default\n * implementation returns <htmlLabels>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be displayed as HTML markup.\n */\nmxGraph.prototype.isHtmlLabel = function(cell)\n{\n\treturn this.isHtmlLabels();\n};\n \n/**\n * Function: isHtmlLabels\n * \n * Returns <htmlLabels>.\n */\nmxGraph.prototype.isHtmlLabels = function()\n{\n\treturn this.htmlLabels;\n};\n \n/**\n * Function: setHtmlLabels\n * \n * Sets <htmlLabels>.\n */\nmxGraph.prototype.setHtmlLabels = function(value)\n{\n\tthis.htmlLabels = value;\n};\n\n/**\n * Function: isWrapping\n * \n * This enables wrapping for HTML labels.\n * \n * Returns true if no white-space CSS style directive should be used for\n * displaying the given cells label. This implementation returns true if\n * <mxConstants.STYLE_WHITE_SPACE> in the style of the given cell is 'wrap'.\n * \n * This is used as a workaround for IE ignoring the white-space directive\n * of child elements if the directive appears in a parent element. It\n * should be overridden to return true if a white-space directive is used\n * in the HTML markup that represents the given cells label. In order for\n * HTML markup to work in labels, <isHtmlLabel> must also return true\n * for the given cell.\n * \n * Example:\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var tmp = mxGraph.prototype.getLabel.apply(this, arguments); // \"supercall\"\n *   \n *   if (this.model.isEdge(cell))\n *   {\n *     tmp = '<div style=\"width: 150px; white-space:normal;\">'+tmp+'</div>';\n *   }\n *   \n *   return tmp;\n * }\n * \n * graph.isWrapping = function(state)\n * {\n * \t return this.model.isEdge(state.cell);\n * }\n * (end)\n * \n * Makes sure no edge label is wider than 150 pixels, otherwise the content\n * is wrapped. Note: No width must be specified for wrapped vertex labels as\n * the vertex defines the width in its geometry.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be wrapped.\n */\nmxGraph.prototype.isWrapping = function(cell)\n{\n\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_WHITE_SPACE] == 'wrap';\n};\n\n/**\n * Function: isLabelClipped\n * \n * Returns true if the overflow portion of labels should be hidden. If this\n * returns true then vertex labels will be clipped to the size of the vertices.\n * This implementation returns true if <mxConstants.STYLE_OVERFLOW> in the\n * style of the given cell is 'hidden'.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be clipped.\n */\nmxGraph.prototype.isLabelClipped = function(cell)\n{\n\treturn this.getCurrentCellStyle(cell)[mxConstants.STYLE_OVERFLOW] == 'hidden';\n};\n\n/**\n * Function: getTooltip\n * \n * Returns the string or DOM node that represents the tooltip for the given\n * state, node and coordinate pair. This implementation checks if the given\n * node is a folding icon or overlay and returns the respective tooltip. If\n * this does not result in a tooltip, the handler for the cell is retrieved\n * from <selectionCellsHandler> and the optional getTooltipForNode method is\n * called. If no special tooltip exists here then <getTooltipForCell> is used\n * with the cell in the given state as the argument to return a tooltip for the\n * given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose tooltip should be returned.\n * node - DOM node that is currently under the mouse.\n * x - X-coordinate of the mouse.\n * y - Y-coordinate of the mouse.\n */\nmxGraph.prototype.getTooltip = function(state, node, x, y)\n{\n\tvar tip = null;\n\t\n\tif (state != null)\n\t{\n\t\t// Checks if the mouse is over the folding icon\n\t\tif (state.control != null && (node == state.control.node ||\n\t\t\tnode.parentNode == state.control.node))\n\t\t{\n\t\t\ttip = this.collapseExpandResource;\n\t\t\ttip = mxUtils.htmlEntities(mxResources.get(tip) || tip).replace(/\\\\n/g, '<br>');\n\t\t}\n\n\t\tif (tip == null && state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\t// LATER: Exit loop if tip is not null\n\t\t\t\tif (tip == null && (node == shape.node || node.parentNode == shape.node))\n\t\t\t\t{\n\t\t\t\t\ttip = shape.overlay.toString();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\tvar handler = this.selectionCellsHandler.getHandler(state.cell);\n\t\t\t\n\t\t\tif (handler != null && typeof(handler.getTooltipForNode) == 'function')\n\t\t\t{\n\t\t\t\ttip = handler.getTooltipForNode(node);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\ttip = this.getTooltipForCell(state.cell);\n\t\t}\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getTooltipForCell\n * \n * Returns the string or DOM node to be used as the tooltip for the given\n * cell. This implementation uses the cells getTooltip function if it\n * exists, or else it returns <convertValueToString> for the cell.\n * \n * Example:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   return 'Hello, World!';\n * }\n * (end)\n * \n * Replaces all tooltips with the string Hello, World!\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getTooltipForCell = function(cell)\n{\n\tvar tip = null;\n\t\n\tif (cell != null && cell.getTooltip != null)\n\t{\n\t\ttip = cell.getTooltip();\n\t}\n\telse\n\t{\n\t\ttip = this.convertValueToString(cell);\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getLinkForCell\n * \n * Returns the string to be used as the link for the given cell. This\n * implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getLinkForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getCursorForMouseEvent\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given event. This implementation calls <getCursorForCell>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForMouseEvent = function(me)\n{\n\treturn this.getCursorForCell(me.getCell());\n};\n\n/**\n * Function: getCursorForCell\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given cell. This implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getStartSize\n * \n * Returns the start size of the given swimlane, that is, the width or\n * height of the part that contains the title, depending on the\n * horizontal style. The return value is an <mxRectangle> with either\n * width or height set as appropriate.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose start size should be returned.\n * ignoreState - Optional boolean that specifies if cell state should be ignored.\n */\nmxGraph.prototype.getStartSize = function(swimlane, ignoreState)\n{\n\tvar result = new mxRectangle();\n\tvar style = this.getCurrentCellStyle(swimlane, ignoreState);\n\tvar size = parseInt(mxUtils.getValue(style,\n\t\tmxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n\t\n\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t{\n\t\tresult.height = size;\n\t}\n\telse\n\t{\n\t\tresult.width = size;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSwimlaneDirection\n * \n * Returns the direction for the given swimlane style.\n */\nmxGraph.prototype.getSwimlaneDirection = function(style)\n{\n\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\tvar h = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true);\n\tvar n = (h) ? 0 : 3;\n\t\n\tif (dir == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tn--;\n\t}\n\telse if (dir == mxConstants.DIRECTION_WEST)\n\t{\n\t\tn += 2;\n\t}\n\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tn += 1;\n\t}\n\t\n\tvar mod = mxUtils.mod(n, 2);\n\t\n\tif (flipH && mod == 1)\n\t{\n\t\tn += 2;\n\t}\n\t\n\tif (flipV && mod == 0)\n\t{\n\t\tn += 2;\n\t}\n\t\n\treturn [mxConstants.DIRECTION_NORTH, mxConstants.DIRECTION_EAST,\n\t\tmxConstants.DIRECTION_SOUTH, mxConstants.DIRECTION_WEST]\n\t\t[mxUtils.mod(n, 4)];\n};\n\n/**\n * Function: getActualStartSize\n * \n * Returns the actual start size of the given swimlane taking into account\n * direction and horizontal and vertial flip styles. The start size is\n * returned as an <mxRectangle> where top, left, bottom, right start sizes\n * are returned as x, y, height and width, respectively.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose start size should be returned.\n * ignoreState - Optional boolean that specifies if cell state should be ignored.\n */\nmxGraph.prototype.getActualStartSize = function(swimlane, ignoreState)\n{\n\tvar result = new mxRectangle();\n\t\n\tif (this.isSwimlane(swimlane, ignoreState))\n\t{\n\t\tvar style = this.getCurrentCellStyle(swimlane, ignoreState);\n\t\tvar size = parseInt(mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE,\n\t\t\tmxConstants.DEFAULT_STARTSIZE));\n\t\tvar dir = this.getSwimlaneDirection(style);\n\t\t\n\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tresult.y = size;\n\t\t}\n\t\telse if (dir == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tresult.x = size;\n\t\t}\n\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tresult.height = size;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.width = size;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getImage\n * \n * Returns the image URL for the given cell state. This implementation\n * returns the value stored under <mxConstants.STYLE_IMAGE> in the cell\n * style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose image URL should be returned.\n */\nmxGraph.prototype.getImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_IMAGE] : null;\n};\n\n/**\n * Function: isTransparentState\n * \n * Returns true if the given state has no stroke- or fillcolor and no image.\n * \n * Parameters:\n * \n * state - <mxCellState> to check.\n */\nmxGraph.prototype.isTransparentState = function(state)\n{\n\tvar result = false;\n\t\n\tif (state != null)\n\t{\n\t\tvar stroke = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\t\tvar fill = mxUtils.getValue(state.style, mxConstants.STYLE_FILLCOLOR, mxConstants.NONE);\n\t\t\n\t\tresult = stroke == mxConstants.NONE && fill == mxConstants.NONE && this.getImage(state) == null;\n\t\t\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVerticalAlign\n * \n * Returns the vertical alignment for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_VERTICAL_ALIGN> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose vertical alignment should be\n * returned.\n */\nmxGraph.prototype.getVerticalAlign = function(state)\n{\n\treturn (state != null && state.style != null) ?\n\t\t(state.style[mxConstants.STYLE_VERTICAL_ALIGN] ||\n\t\tmxConstants.ALIGN_MIDDLE) : null;\n};\n\n/**\n * Function: getIndicatorColor\n * \n * Returns the indicator color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_COLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_COLOR] : null;\n};\n\n/**\n * Function: getIndicatorGradientColor\n * \n * Returns the indicator gradient color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_GRADIENTCOLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator gradient color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorGradientColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_GRADIENTCOLOR] : null;\n};\n\n/**\n * Function: getIndicatorShape\n * \n * Returns the indicator shape for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_SHAPE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator shape should be returned.\n */\nmxGraph.prototype.getIndicatorShape = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_SHAPE] : null;\n};\n\n/**\n * Function: getIndicatorImage\n * \n * Returns the indicator image for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_IMAGE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator image should be returned.\n */\nmxGraph.prototype.getIndicatorImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_IMAGE] : null;\n};\n\n/**\n * Function: getBorder\n * \n * Returns the value of <border>.\n */\nmxGraph.prototype.getBorder = function()\n{\n\treturn this.border;\n};\n\n/**\n * Function: setBorder\n * \n * Sets the value of <border>.\n * \n * Parameters:\n * \n * value - Positive integer that represents the border to be used.\n */\nmxGraph.prototype.setBorder = function(value)\n{\n\tthis.border = value;\n};\n\n/**\n * Function: isSwimlane\n * \n * Returns true if the given cell is a swimlane in the graph. A swimlane is\n * a container cell with some specific behaviour. This implementation\n * checks if the shape associated with the given cell is a <mxSwimlane>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be checked.\n * ignoreState - Optional boolean that specifies if the cell state should be ignored.\n */\nmxGraph.prototype.isSwimlane = function(cell, ignoreState)\n{\n\tif (cell != null && this.model.getParent(cell) != this.model.getRoot() &&\n\t\t!this.model.isEdge(cell))\n\t{\n\t\treturn this.getCurrentCellStyle(cell, ignoreState)\n\t\t\t[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_SWIMLANE;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Group: Graph behaviour\n */\n\n/**\n * Function: isResizeContainer\n * \n * Returns <resizeContainer>.\n */\nmxGraph.prototype.isResizeContainer = function()\n{\n\treturn this.resizeContainer;\n};\n\n/**\n * Function: setResizeContainer\n * \n * Sets <resizeContainer>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the container should be resized.\n */\nmxGraph.prototype.setResizeContainer = function(value)\n{\n\tthis.resizeContainer = value;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if the graph is <enabled>.\n */\nmxGraph.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Specifies if the graph should allow any interactions. This\n * implementation updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be enabled.\n */\nmxGraph.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isEscapeEnabled\n * \n * Returns <escapeEnabled>.\n */\nmxGraph.prototype.isEscapeEnabled = function()\n{\n\treturn this.escapeEnabled;\n};\n\n/**\n * Function: setEscapeEnabled\n * \n * Sets <escapeEnabled>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if escape should be enabled.\n */\nmxGraph.prototype.setEscapeEnabled = function(value)\n{\n\tthis.escapeEnabled = value;\n};\n\n/**\n * Function: isInvokesStopCellEditing\n * \n * Returns <invokesStopCellEditing>.\n */\nmxGraph.prototype.isInvokesStopCellEditing = function()\n{\n\treturn this.invokesStopCellEditing;\n};\n\n/**\n * Function: setInvokesStopCellEditing\n * \n * Sets <invokesStopCellEditing>.\n */\nmxGraph.prototype.setInvokesStopCellEditing = function(value)\n{\n\tthis.invokesStopCellEditing = value;\n};\n\n/**\n * Function: isEnterStopsCellEditing\n * \n * Returns <enterStopsCellEditing>.\n */\nmxGraph.prototype.isEnterStopsCellEditing = function()\n{\n\treturn this.enterStopsCellEditing;\n};\n\n/**\n * Function: setEnterStopsCellEditing\n * \n * Sets <enterStopsCellEditing>.\n */\nmxGraph.prototype.setEnterStopsCellEditing = function(value)\n{\n\tthis.enterStopsCellEditing = value;\n};\n\n/**\n * Function: isCellLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellLocked = function(cell)\n{\n\tvar geometry = this.model.getGeometry(cell);\n\t\n\treturn this.isCellsLocked() || (geometry != null && this.model.isVertex(cell) && geometry.relative);\n};\n\n/**\n * Function: isCellsLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellsLocked = function()\n{\n\treturn this.cellsLocked;\n};\n\n/**\n * Function: setCellsLocked\n * \n * Sets if any cell may be moved, sized, bended, disconnected, edited or\n * selected.\n * \n * Parameters:\n * \n * value - Boolean that defines the new value for <cellsLocked>.\n */\nmxGraph.prototype.setCellsLocked = function(value)\n{\n\tthis.cellsLocked = value;\n};\n\n/**\n * Function: getCloneableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getCloneableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellCloneable(cell);\n\t}));\n};\n\n/**\n * Function: isCellCloneable\n * \n * Returns true if the given cell is cloneable. This implementation returns\n * <isCellsCloneable> for all cells unless a cell style specifies\n * <mxConstants.STYLE_CLONEABLE> to be 0. \n * \n * Parameters:\n * \n * cell - Optional <mxCell> whose cloneable state should be returned.\n */\nmxGraph.prototype.isCellCloneable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\n\treturn this.isCellsCloneable() && style[mxConstants.STYLE_CLONEABLE] != 0;\n};\n\n/**\n * Function: isCellsCloneable\n * \n * Returns <cellsCloneable>, that is, if the graph allows cloning of cells\n * by using control-drag.\n */\nmxGraph.prototype.isCellsCloneable = function()\n{\n\treturn this.cellsCloneable;\n};\n\n/**\n * Function: setCellsCloneable\n * \n * Specifies if the graph should allow cloning of cells by holding down the\n * control key while cells are being moved. This implementation updates\n * <cellsCloneable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be cloneable.\n */\nmxGraph.prototype.setCellsCloneable = function(value)\n{\n\tthis.cellsCloneable = value;\n};\n\n/**\n * Function: getExportableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getExportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canExportCell(cell);\n\t}));\n};\n\n/**\n * Function: canExportCell\n * \n * Returns true if the given cell may be exported to the clipboard. This\n * implementation returns <exportEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be exported.\n */\nmxGraph.prototype.canExportCell = function(cell)\n{\n\treturn this.exportEnabled;\n};\n\n/**\n * Function: getImportableCells\n * \n * Returns the cells which may be imported in the given array of cells.\n */\nmxGraph.prototype.getImportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canImportCell(cell);\n\t}));\n};\n\n/**\n * Function: canImportCell\n * \n * Returns true if the given cell may be imported from the clipboard.\n * This implementation returns <importEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be imported.\n */\nmxGraph.prototype.canImportCell = function(cell)\n{\n\treturn this.importEnabled;\n};\n\n/**\n * Function: isCellSelectable\n *\n * Returns true if the given cell is selectable. This implementation\n * returns <cellsSelectable>.\n * \n * To add a new style for making cells (un)selectable, use the following code.\n * \n * (code)\n * mxGraph.prototype.isCellSelectable = function(cell)\n * {\n *   var style = this.getCurrentCellStyle(cell);\n *   \n *   return this.isCellsSelectable() && !this.isCellLocked(cell) && style['selectable'] != 0;\n * };\n * (end)\n * \n * You can then use the new style as shown in this example.\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'selectable=0');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose selectable state should be returned.\n */\nmxGraph.prototype.isCellSelectable = function(cell)\n{\n\treturn this.isCellsSelectable();\n};\n\n/**\n * Function: isCellsSelectable\n *\n * Returns <cellsSelectable>.\n */\nmxGraph.prototype.isCellsSelectable = function()\n{\n\treturn this.cellsSelectable;\n};\n\n/**\n * Function: setCellsSelectable\n *\n * Sets <cellsSelectable>.\n */\nmxGraph.prototype.setCellsSelectable = function(value)\n{\n\tthis.cellsSelectable = value;\n};\n\n/**\n * Function: getDeletableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getDeletableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellDeletable(cell);\n\t}));\n};\n\n/**\n * Function: isCellDeletable\n *\n * Returns true if the given cell is moveable. This returns\n * <cellsDeletable> for all given cells if a cells style does not specify\n * <mxConstants.STYLE_DELETABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose deletable state should be returned.\n */\nmxGraph.prototype.isCellDeletable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsDeletable() && style[mxConstants.STYLE_DELETABLE] != 0;\n};\n\n/**\n * Function: isCellsDeletable\n *\n * Returns <cellsDeletable>.\n */\nmxGraph.prototype.isCellsDeletable = function()\n{\n\treturn this.cellsDeletable;\n};\n\n/**\n * Function: setCellsDeletable\n * \n * Sets <cellsDeletable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow deletion of cells.\n */\nmxGraph.prototype.setCellsDeletable = function(value)\n{\n\tthis.cellsDeletable = value;\n};\n\n/**\n * Function: isLabelMovable\n *\n * Returns true if the given edges's label is moveable. This returns\n * <movable> for all given cells if <isLocked> does not return true\n * for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be moved.\n */\nmxGraph.prototype.isLabelMovable = function(cell)\n{\n\treturn !this.isCellLocked(cell) &&\n\t\t((this.model.isEdge(cell) && this.edgeLabelsMovable) ||\n\t\t(this.model.isVertex(cell) && this.vertexLabelsMovable));\n};\n\n/**\n * Function: isCellRotatable\n *\n * Returns true if the given cell is rotatable. This returns true for the given\n * cell if its style does not specify <mxConstants.STYLE_ROTATABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose rotatable state should be returned.\n */\nmxGraph.prototype.isCellRotatable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn style[mxConstants.STYLE_ROTATABLE] != 0;\n};\n\n/**\n * Function: getMovableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getMovableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellMovable(cell);\n\t}));\n};\n\n/**\n * Function: isCellMovable\n *\n * Returns true if the given cell is moveable. This returns <cellsMovable>\n * for all given cells if <isCellLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_MOVABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraph.prototype.isCellMovable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsMovable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_MOVABLE] != 0;\n};\n\n/**\n * Function: isCellsMovable\n *\n * Returns <cellsMovable>.\n */\nmxGraph.prototype.isCellsMovable = function()\n{\n\treturn this.cellsMovable;\n};\n\n/**\n * Function: setCellsMovable\n * \n * Specifies if the graph should allow moving of cells. This implementation\n * updates <cellsMsovable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow moving of cells.\n */\nmxGraph.prototype.setCellsMovable = function(value)\n{\n\tthis.cellsMovable = value;\n};\n\n/**\n * Function: isGridEnabled\n *\n * Returns <gridEnabled> as a boolean.\n */\nmxGraph.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Specifies if the grid should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the grid should be enabled.\n */\nmxGraph.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: isPortsEnabled\n *\n * Returns <portsEnabled> as a boolean.\n */\nmxGraph.prototype.isPortsEnabled = function()\n{\n\treturn this.portsEnabled;\n};\n\n/**\n * Function: setPortsEnabled\n * \n * Specifies if the ports should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the ports should be enabled.\n */\nmxGraph.prototype.setPortsEnabled = function(value)\n{\n\tthis.portsEnabled = value;\n};\n\n/**\n * Function: getGridSize\n *\n * Returns <gridSize>.\n */\nmxGraph.prototype.getGridSize = function()\n{\n\treturn this.gridSize;\n};\n\n/**\n * Function: setGridSize\n * \n * Sets <gridSize>.\n */\nmxGraph.prototype.setGridSize = function(value)\n{\n\tthis.gridSize = value;\n};\n\n/**\n * Function: getTolerance\n *\n * Returns <tolerance>.\n */\nmxGraph.prototype.getTolerance = function()\n{\n\treturn this.tolerance;\n};\n\n/**\n * Function: setTolerance\n * \n * Sets <tolerance>.\n */\nmxGraph.prototype.setTolerance = function(value)\n{\n\tthis.tolerance = value;\n};\n\n/**\n * Function: isVertexLabelsMovable\n *\n * Returns <vertexLabelsMovable>.\n */\nmxGraph.prototype.isVertexLabelsMovable = function()\n{\n\treturn this.vertexLabelsMovable;\n};\n\n/**\n * Function: setVertexLabelsMovable\n * \n * Sets <vertexLabelsMovable>.\n */\nmxGraph.prototype.setVertexLabelsMovable = function(value)\n{\n\tthis.vertexLabelsMovable = value;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n *\n * Returns <edgeLabelsMovable>.\n */\nmxGraph.prototype.isEdgeLabelsMovable = function()\n{\n\treturn this.edgeLabelsMovable;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n * \n * Sets <edgeLabelsMovable>.\n */\nmxGraph.prototype.setEdgeLabelsMovable = function(value)\n{\n\tthis.edgeLabelsMovable = value;\n};\n\n/**\n * Function: isSwimlaneNesting\n *\n * Returns <swimlaneNesting> as a boolean.\n */\nmxGraph.prototype.isSwimlaneNesting = function()\n{\n\treturn this.swimlaneNesting;\n};\n\n/**\n * Function: setSwimlaneNesting\n * \n * Specifies if swimlanes can be nested by drag and drop. This is only\n * taken into account if dropEnabled is true.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes can be nested.\n */\nmxGraph.prototype.setSwimlaneNesting = function(value)\n{\n\tthis.swimlaneNesting = value;\n};\n\n/**\n * Function: isSwimlaneSelectionEnabled\n *\n * Returns <swimlaneSelectionEnabled> as a boolean.\n */\nmxGraph.prototype.isSwimlaneSelectionEnabled = function()\n{\n\treturn this.swimlaneSelectionEnabled;\n};\n\n/**\n * Function: setSwimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selected if the mouse is released\n * over their content area.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes content areas\n * should be selected when the mouse is released over them.\n */\nmxGraph.prototype.setSwimlaneSelectionEnabled = function(value)\n{\n\tthis.swimlaneSelectionEnabled = value;\n};\n\n/**\n * Function: isMultigraph\n *\n * Returns <multigraph> as a boolean.\n */\nmxGraph.prototype.isMultigraph = function()\n{\n\treturn this.multigraph;\n};\n\n/**\n * Function: setMultigraph\n * \n * Specifies if the graph should allow multiple connections between the\n * same pair of vertices.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph allows multiple connections\n * between the same pair of vertices.\n */\nmxGraph.prototype.setMultigraph = function(value)\n{\n\tthis.multigraph = value;\n};\n\n/**\n * Function: isAllowLoops\n *\n * Returns <allowLoops> as a boolean.\n */\nmxGraph.prototype.isAllowLoops = function()\n{\n\treturn this.allowLoops;\n};\n\n/**\n * Function: setAllowDanglingEdges\n * \n * Specifies if dangling edges are allowed, that is, if edges are allowed\n * that do not have a source and/or target terminal defined.\n * \n * Parameters:\n * \n * value - Boolean indicating if dangling edges are allowed.\n */\nmxGraph.prototype.setAllowDanglingEdges = function(value)\n{\n\tthis.allowDanglingEdges = value;\n};\n\n/**\n * Function: isAllowDanglingEdges\n *\n * Returns <allowDanglingEdges> as a boolean.\n */\nmxGraph.prototype.isAllowDanglingEdges = function()\n{\n\treturn this.allowDanglingEdges;\n};\n\n/**\n * Function: setConnectableEdges\n * \n * Specifies if edges should be connectable.\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be connectable.\n */\nmxGraph.prototype.setConnectableEdges = function(value)\n{\n\tthis.connectableEdges = value;\n};\n\n/**\n * Function: isConnectableEdges\n *\n * Returns <connectableEdges> as a boolean.\n */\nmxGraph.prototype.isConnectableEdges = function()\n{\n\treturn this.connectableEdges;\n};\n\n/**\n * Function: setCloneInvalidEdges\n * \n * Specifies if edges should be inserted when cloned but not valid wrt.\n * <getEdgeValidationError>. If false such edges will be silently ignored.\n * \n * Parameters:\n * \n * value - Boolean indicating if cloned invalid edges should be\n * inserted into the graph or ignored.\n */\nmxGraph.prototype.setCloneInvalidEdges = function(value)\n{\n\tthis.cloneInvalidEdges = value;\n};\n\n/**\n * Function: isCloneInvalidEdges\n *\n * Returns <cloneInvalidEdges> as a boolean.\n */\nmxGraph.prototype.isCloneInvalidEdges = function()\n{\n\treturn this.cloneInvalidEdges;\n};\n\n/**\n * Function: setAllowLoops\n * \n * Specifies if loops are allowed.\n * \n * Parameters:\n * \n * value - Boolean indicating if loops are allowed.\n */\nmxGraph.prototype.setAllowLoops = function(value)\n{\n\tthis.allowLoops = value;\n};\n\n/**\n * Function: isDisconnectOnMove\n *\n * Returns <disconnectOnMove> as a boolean.\n */\nmxGraph.prototype.isDisconnectOnMove = function()\n{\n\treturn this.disconnectOnMove;\n};\n\n/**\n * Function: setDisconnectOnMove\n * \n * Specifies if edges should be disconnected when moved. (Note: Cloned\n * edges are always disconnected.)\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be disconnected\n * when moved.\n */\nmxGraph.prototype.setDisconnectOnMove = function(value)\n{\n\tthis.disconnectOnMove = value;\n};\n\n/**\n * Function: isDropEnabled\n *\n * Returns <dropEnabled> as a boolean.\n */\nmxGraph.prototype.isDropEnabled = function()\n{\n\treturn this.dropEnabled;\n};\n\n/**\n * Function: setDropEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setDropEnabled = function(value)\n{\n\tthis.dropEnabled = value;\n};\n\n/**\n * Function: isSplitEnabled\n *\n * Returns <splitEnabled> as a boolean.\n */\nmxGraph.prototype.isSplitEnabled = function()\n{\n\treturn this.splitEnabled;\n};\n\n/**\n * Function: setSplitEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setSplitEnabled = function(value)\n{\n\tthis.splitEnabled = value;\n};\n\n/**\n * Function: isCellResizable\n *\n * Returns true if the given cell is resizable. This returns\n * <cellsResizable> for all given cells if <isCellLocked> does not return\n * true for the given cell and its style does not specify\n * <mxConstants.STYLE_RESIZABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose resizable state should be returned.\n */\nmxGraph.prototype.isCellResizable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\n\treturn this.isCellsResizable() && !this.isCellLocked(cell) &&\n\t\tmxUtils.getValue(style, mxConstants.STYLE_RESIZABLE, '1') != '0';\n};\n\n/**\n * Function: isCellsResizable\n *\n * Returns <cellsResizable>.\n */\nmxGraph.prototype.isCellsResizable = function()\n{\n\treturn this.cellsResizable;\n};\n\n/**\n * Function: setCellsResizable\n * \n * Specifies if the graph should allow resizing of cells. This\n * implementation updates <cellsResizable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow resizing of\n * cells.\n */\nmxGraph.prototype.setCellsResizable = function(value)\n{\n\tthis.cellsResizable = value;\n};\n\n/**\n * Function: isTerminalPointMovable\n *\n * Returns true if the given terminal point is movable. This is independent\n * from <isCellConnectable> and <isCellDisconnectable> and controls if terminal\n * points can be moved in the graph if the edge is not connected. Note that it\n * is required for this to return true to connect unconnected edges. This\n * implementation returns true.\n * \n * Parameters:\n * \n * cell - <mxCell> whose terminal point should be moved.\n * source - Boolean indicating if the source or target terminal should be moved.\n */\nmxGraph.prototype.isTerminalPointMovable = function(cell, source)\n{\n\treturn true;\n};\n\n/**\n * Function: isCellBendable\n *\n * Returns true if the given cell is bendable. This returns <cellsBendable>\n * for all given cells if <isLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_BENDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bendable state should be returned.\n */\nmxGraph.prototype.isCellBendable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsBendable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_BENDABLE] != 0;\n};\n\n/**\n * Function: isCellsBendable\n *\n * Returns <cellsBenadable>.\n */\nmxGraph.prototype.isCellsBendable = function()\n{\n\treturn this.cellsBendable;\n};\n\n/**\n * Function: setCellsBendable\n * \n * Specifies if the graph should allow bending of edges. This\n * implementation updates <bendable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow bending of\n * edges.\n */\nmxGraph.prototype.setCellsBendable = function(value)\n{\n\tthis.cellsBendable = value;\n};\n\n/**\n * Function: isCellEditable\n *\n * Returns true if the given cell is editable. This returns <cellsEditable> for\n * all given cells if <isCellLocked> does not return true for the given cell\n * and its style does not specify <mxConstants.STYLE_EDITABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose editable state should be returned.\n */\nmxGraph.prototype.isCellEditable = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isCellsEditable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_EDITABLE] != 0;\n};\n\n/**\n * Function: isCellsEditable\n *\n * Returns <cellsEditable>.\n */\nmxGraph.prototype.isCellsEditable = function()\n{\n\treturn this.cellsEditable;\n};\n\n/**\n * Function: setCellsEditable\n * \n * Specifies if the graph should allow in-place editing for cell labels.\n * This implementation updates <cellsEditable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow in-place\n * editing.\n */\nmxGraph.prototype.setCellsEditable = function(value)\n{\n\tthis.cellsEditable = value;\n};\n\n/**\n * Function: isCellDisconnectable\n *\n * Returns true if the given cell is disconnectable from the source or\n * target terminal. This returns <isCellsDisconnectable> for all given\n * cells if <isCellLocked> does not return true for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose disconnectable state should be returned.\n * terminal - <mxCell> that represents the source or target terminal.\n * source - Boolean indicating if the source or target terminal is to be\n * disconnected.\n */\nmxGraph.prototype.isCellDisconnectable = function(cell, terminal, source)\n{\n\treturn this.isCellsDisconnectable() && !this.isCellLocked(cell);\n};\n\n/**\n * Function: isCellsDisconnectable\n *\n * Returns <cellsDisconnectable>.\n */\nmxGraph.prototype.isCellsDisconnectable = function()\n{\n\treturn this.cellsDisconnectable;\n};\n\n/**\n * Function: setCellsDisconnectable\n *\n * Sets <cellsDisconnectable>.\n */\nmxGraph.prototype.setCellsDisconnectable = function(value)\n{\n\tthis.cellsDisconnectable = value;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns true if the given cell is a valid source for new connections.\n * This implementation returns true for all non-null values and is\n * called by is called by <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible source or null.\n */\nmxGraph.prototype.isValidSource = function(cell)\n{\n\treturn (cell == null && this.allowDanglingEdges) ||\n\t\t(cell != null && (!this.model.isEdge(cell) ||\n\t\tthis.connectableEdges) && this.isCellConnectable(cell));\n};\n\t\n/**\n * Function: isValidTarget\n * \n * Returns <isValidSource> for the given cell. This is called by\n * <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible target or null.\n */\nmxGraph.prototype.isValidTarget = function(cell)\n{\n\treturn this.isValidSource(cell);\n};\n\n/**\n * Function: isValidConnection\n * \n * Returns true if the given target cell is a valid target for source.\n * This is a boolean implementation for not allowing connections between\n * certain pairs of vertices and is called by <getEdgeValidationError>.\n * This implementation returns true if <isValidSource> returns true for\n * the source and <isValidTarget> returns true for the target.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source cell.\n * target - <mxCell> that represents the target cell.\n */\nmxGraph.prototype.isValidConnection = function(source, target)\n{\n\treturn this.isValidSource(source) && this.isValidTarget(target);\n};\n\n/**\n * Function: setConnectable\n * \n * Specifies if the graph should allow new connections. This implementation\n * updates <mxConnectionHandler.enabled> in <connectionHandler>.\n * \n * Parameters:\n * \n * connectable - Boolean indicating if new connections should be allowed.\n */\nmxGraph.prototype.setConnectable = function(connectable)\n{\n\tthis.connectionHandler.setEnabled(connectable);\n};\n\t\n/**\n * Function: isConnectable\n * \n * Returns true if the <connectionHandler> is enabled.\n */\nmxGraph.prototype.isConnectable = function()\n{\n\treturn this.connectionHandler.isEnabled();\n};\n\n/**\n * Function: setTooltips\n * \n * Specifies if tooltips should be enabled. This implementation updates\n * <mxTooltipHandler.enabled> in <tooltipHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if tooltips should be enabled.\n */\nmxGraph.prototype.setTooltips = function (enabled)\n{\n\tthis.tooltipHandler.setEnabled(enabled);\n};\n\n/**\n * Function: setPanning\n * \n * Specifies if panning should be enabled. This implementation updates\n * <mxPanningHandler.panningEnabled> in <panningHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if panning should be enabled.\n */\nmxGraph.prototype.setPanning = function(enabled)\n{\n\tthis.panningHandler.panningEnabled = enabled;\n};\n\n/**\n * Function: isEditing\n * \n * Returns true if the given cell is currently being edited.\n * If no cell is specified then this returns true if any\n * cell is currently being edited.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be checked.\n */\nmxGraph.prototype.isEditing = function(cell)\n{\n\tif (this.cellEditor != null)\n\t{\n\t\tvar editingCell = this.cellEditor.getEditingCell();\n\t\t\n\t\treturn (cell == null) ? editingCell != null : cell == editingCell;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isAutoSizeCell\n * \n * Returns true if the size of the given cell should automatically be\n * updated after a change of the label. This implementation returns\n * <autoSizeCells> or checks if the cell style does specify\n * <mxConstants.STYLE_AUTOSIZE> to be 1.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be resized.\n */\nmxGraph.prototype.isAutoSizeCell = function(cell)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.isAutoSizeCells() || style[mxConstants.STYLE_AUTOSIZE] == 1;\n};\n\n/**\n * Function: isAutoSizeCells\n * \n * Returns <autoSizeCells>.\n */\nmxGraph.prototype.isAutoSizeCells = function()\n{\n\treturn this.autoSizeCells;\n};\n\n/**\n * Function: setAutoSizeCells\n * \n * Specifies if cell sizes should be automatically updated after a label\n * change. This implementation sets <autoSizeCells> to the given parameter.\n * To update the size of cells when the cells are added, set\n * <autoSizeCellsOnAdd> to true.\n * \n * Parameters:\n * \n * value - Boolean indicating if cells should be resized\n * automatically.\n */\nmxGraph.prototype.setAutoSizeCells = function(value)\n{\n\tthis.autoSizeCells = value;\n};\n\n/**\n * Function: isExtendParent\n * \n * Returns true if the parent of the given cell should be extended if the\n * child has been resized so that it overlaps the parent. This\n * implementation returns <isExtendParents> if the cell is not an edge.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.isExtendParent = function(cell)\n{\n\treturn !this.getModel().isEdge(cell) && this.isExtendParents();\n};\n\n/**\n * Function: isExtendParents\n * \n * Returns <extendParents>.\n */\nmxGraph.prototype.isExtendParents = function()\n{\n\treturn this.extendParents;\n};\n\n/**\n * Function: setExtendParents\n * \n * Sets <extendParents>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParents>.\n */\nmxGraph.prototype.setExtendParents = function(value)\n{\n\tthis.extendParents = value;\n};\n\n/**\n * Function: isExtendParentsOnAdd\n * \n * Returns <extendParentsOnAdd>.\n */\nmxGraph.prototype.isExtendParentsOnAdd = function(cell)\n{\n\treturn this.extendParentsOnAdd;\n};\n\n/**\n * Function: setExtendParentsOnAdd\n * \n * Sets <extendParentsOnAdd>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnAdd = function(value)\n{\n\tthis.extendParentsOnAdd = value;\n};\n\n/**\n * Function: isExtendParentsOnMove\n * \n * Returns <extendParentsOnMove>.\n */\nmxGraph.prototype.isExtendParentsOnMove = function()\n{\n\treturn this.extendParentsOnMove;\n};\n\n/**\n * Function: setExtendParentsOnMove\n * \n * Sets <extendParentsOnMove>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnMove = function(value)\n{\n\tthis.extendParentsOnMove = value;\n};\n\n/**\n * Function: isRecursiveResize\n * \n * Returns <recursiveResize>.\n * \n * Parameters:\n * \n * state - <mxCellState> that is being resized.\n */\nmxGraph.prototype.isRecursiveResize = function(state)\n{\n\treturn this.recursiveResize;\n};\n\n/**\n * Function: setRecursiveResize\n * \n * Sets <recursiveResize>.\n * \n * Parameters:\n * \n * value - New boolean value for <recursiveResize>.\n */\nmxGraph.prototype.setRecursiveResize = function(value)\n{\n\tthis.recursiveResize = value;\n};\n\n/**\n * Function: isConstrainChild\n * \n * Returns true if the given cell should be kept inside the bounds of its\n * parent according to the rules defined by <getOverlap> and\n * <isAllowOverlapParent>. This implementation returns false for all children\n * of edges and <isConstrainChildren> otherwise.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be constrained.\n */\nmxGraph.prototype.isConstrainChild = function(cell)\n{\n\treturn this.isConstrainChildren() && !this.getModel().isEdge(this.getModel().getParent(cell));\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <constrainChildren>.\n */\nmxGraph.prototype.isConstrainChildren = function()\n{\n\treturn this.constrainChildren;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <constrainChildren>.\n */\nmxGraph.prototype.setConstrainChildren = function(value)\n{\n\tthis.constrainChildren = value;\n};\n\n/**\n * Function: isConstrainRelativeChildren\n * \n * Returns <constrainRelativeChildren>.\n */\nmxGraph.prototype.isConstrainRelativeChildren = function()\n{\n\treturn this.constrainRelativeChildren;\n};\n\n/**\n * Function: setConstrainRelativeChildren\n * \n * Sets <constrainRelativeChildren>.\n */\nmxGraph.prototype.setConstrainRelativeChildren = function(value)\n{\n\tthis.constrainRelativeChildren = value;\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <allowNegativeCoordinates>.\n */\nmxGraph.prototype.isAllowNegativeCoordinates = function()\n{\n\treturn this.allowNegativeCoordinates;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <allowNegativeCoordinates>.\n */\nmxGraph.prototype.setAllowNegativeCoordinates = function(value)\n{\n\tthis.allowNegativeCoordinates = value;\n};\n\n/**\n * Function: getOverlap\n * \n * Returns a decimal number representing the amount of the width and height\n * of the given cell that is allowed to overlap its parent. A value of 0\n * means all children must stay inside the parent, 1 means the child is\n * allowed to be placed outside of the parent such that it touches one of\n * the parents sides. If <isAllowOverlapParent> returns false for the given\n * cell, then this method returns 0.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the overlap ratio should be returned.\n */\nmxGraph.prototype.getOverlap = function(cell)\n{\n\treturn (this.isAllowOverlapParent(cell)) ? this.defaultOverlap : 0;\n};\n\t\n/**\n * Function: isAllowOverlapParent\n * \n * Returns true if the given cell is allowed to be placed outside of the\n * parents area.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the child to be checked.\n */\nmxGraph.prototype.isAllowOverlapParent = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getFoldableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getFoldableCells = function(cells, collapse)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellFoldable(cell, collapse);\n\t}));\n};\n\n/**\n * Function: isCellFoldable\n * \n * Returns true if the given cell is foldable. This implementation\n * returns true if the cell has at least one child and its style\n * does not specify <mxConstants.STYLE_FOLDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose foldable state should be returned.\n */\nmxGraph.prototype.isCellFoldable = function(cell, collapse)\n{\n\tvar style = this.getCurrentCellStyle(cell);\n\t\n\treturn this.model.getChildCount(cell) > 0 && style[mxConstants.STYLE_FOLDABLE] != 0;\n};\n\n/**\n * Function: isValidDropTarget\n *\n * Returns true if the given cell is a valid drop target for the specified\n * cells. If <splitEnabled> is true then this returns <isSplitTarget> for\n * the given arguments else it returns true if the cell is not collapsed\n * and its child count is greater than 0.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the possible drop target.\n * cells - <mxCells> that should be dropped into the target.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isValidDropTarget = function(cell, cells, evt)\n{\n\treturn cell != null && ((this.isSplitEnabled() &&\n\t\tthis.isSplitTarget(cell, cells, evt)) || (!this.model.isEdge(cell) &&\n\t\t(this.isSwimlane(cell) || (this.model.getChildCount(cell) > 0 &&\n\t\t!this.isCellCollapsed(cell)))));\n};\n\n/**\n * Function: isSplitTarget\n *\n * Returns true if the given edge may be splitted into two edges with the\n * given cell as a new terminal between the two.\n * \n * Parameters:\n * \n * target - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that should split the edge.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isSplitTarget = function(target, cells, evt)\n{\n\tif (this.model.isEdge(target) && cells != null && cells.length == 1 &&\n\t\tthis.isCellConnectable(cells[0]) && this.getEdgeValidationError(target,\n\t\t\tthis.model.getTerminal(target, true), cells[0]) == null)\n\t{\n\t\tvar src = this.model.getTerminal(target, true);\n\t\tvar trg = this.model.getTerminal(target, false);\n\n\t\treturn (!this.model.isAncestor(cells[0], src) &&\n\t\t\t\t!this.model.isAncestor(cells[0], trg));\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the given cell if it is a drop target for the given cells or the\n * nearest ancestor that may be used as a drop target for the given cells.\n * If the given array contains a swimlane and <swimlaneNesting> is false\n * then this always returns null. If no cell is given, then the bottommost\n * swimlane at the location of the given event is returned.\n * \n * This function should only be used if <isDropEnabled> returns true.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> which are to be dropped onto the target.\n * evt - Mouseevent for the drag and drop.\n * cell - <mxCell> that is under the mousepointer.\n * clone - Optional boolean to indicate of cells will be cloned.\n */\nmxGraph.prototype.getDropTarget = function(cells, evt, cell, clone)\n{\n\tif (!this.isSwimlaneNesting())\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar pt = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\tpt.x -= this.panDx;\n\tpt.y -= this.panDy;\n\tvar swimlane = this.getSwimlaneAt(pt.x, pt.y);\n\t\n\tif (cell == null)\n\t{\n\t\tcell = swimlane;\n\t}\n\telse if (swimlane != null)\n\t{\n\t\t// Checks if the cell is an ancestor of the swimlane\n\t\t// under the mouse and uses the swimlane in that case\n\t\tvar tmp = this.model.getParent(swimlane);\n\t\t\n\t\twhile (tmp != null && this.isSwimlane(tmp) && tmp != cell)\n\t\t{\n\t\t\ttmp = this.model.getParent(tmp);\n\t\t}\n\t\t\n\t\tif (tmp == cell)\n\t\t{\n\t\t\tcell = swimlane;\n\t\t}\n\t}\n\t\n\twhile (cell != null && !this.isValidDropTarget(cell, cells, evt) &&\n\t\t!this.model.isLayer(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\t// Checks if parent is dropped into child if not cloning\n\tif (clone == null || !clone)\n\t{\n\t\tvar parent = cell;\n\t\t\n\t\twhile (parent != null && mxUtils.indexOf(cells, parent) < 0)\n\t\t{\n\t\t\tparent = this.model.getParent(parent);\n\t\t}\n\t}\n\n\treturn (!this.model.isLayer(cell) && parent == null) ? cell : null;\n};\n\n/**\n * Group: Cell retrieval\n */\n\n/**\n * Function: getDefaultParent\n * \n * Returns <defaultParent> or <mxGraphView.currentRoot> or the first child\n * child of <mxGraphModel.root> if both are null. The value returned by\n * this function should be used as the parent for new cells (aka default\n * layer).\n */\nmxGraph.prototype.getDefaultParent = function()\n{\n\tvar parent = this.getCurrentRoot();\n\t\n\tif (parent == null)\n\t{\n\t\tparent = this.defaultParent;\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tvar root = this.model.getRoot();\n\t\t\tparent = this.model.getChildAt(root, 0);\n\t\t}\n\t}\n\t\n\treturn parent;\n};\n\n/**\n * Function: setDefaultParent\n * \n * Sets the <defaultParent> to the given cell. Set this to null to return\n * the first child of the root in getDefaultParent.\n */\nmxGraph.prototype.setDefaultParent = function(cell)\n{\n\tthis.defaultParent = cell;\n};\n\n/**\n * Function: getSwimlane\n * \n * Returns the nearest ancestor of the given cell which is a swimlane, or\n * the given cell, if it is itself a swimlane.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the ancestor swimlane should be returned.\n */\nmxGraph.prototype.getSwimlane = function(cell)\n{\n\twhile (cell != null && !this.isSwimlane(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: getSwimlaneAt\n * \n * Returns the bottom-most swimlane that intersects the given point (x, y)\n * in the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.getSwimlaneAt = function (x, y, parent)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getRoot();\n\t\t}\n\t}\n\t\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\tvar result = this.getSwimlaneAt(x, y, child);\n\t\t\t\t\n\t\t\t\tif (result != null)\n\t\t\t\t{\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\telse if (this.isCellVisible(child) && this.isSwimlane(child))\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\t\n\t\t\t\t\tif (this.intersects(state, x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getCellAt\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy starting at the given parent. This will also return\n * swimlanes if the given location intersects the content area of the\n * swimlane. If this is not desired, then the <hitsSwimlaneContent> may be\n * used if the returned cell is a swimlane to determine if the location\n * is inside the content area or on the actual title of the swimlane.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * vertices - Optional boolean indicating if vertices should be returned.\n * Default is true.\n * edges - Optional boolean indicating if edges should be returned. Default\n * is true.\n * ignoreFn - Optional function that returns true if cell should be ignored.\n * The function is passed the cell state and the x and y parameter.\n */\nmxGraph.prototype.getCellAt = function(x, y, parent, vertices, edges, ignoreFn)\n{\n\tvertices = (vertices != null) ? vertices : true;\n\tedges = (edges != null) ? edges : true;\n\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar cell = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getCellAt(x, y, cell, vertices, edges, ignoreFn);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isCellVisible(cell) && (edges && this.model.isEdge(cell) ||\n\t\t\t\tvertices && this.model.isVertex(cell)))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cell);\n\n\t\t\t\tif (state != null && (ignoreFn == null || !ignoreFn(state, x, y)) &&\n\t\t\t\t\tthis.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: intersects\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n */\nmxGraph.prototype.intersects = function(state, x, y)\n{\n\tif (state != null)\n\t{\n\t\tvar pts = state.absolutePoints;\n\n\t\tif (pts != null)\n\t\t{\n\t\t\tvar t2 = this.tolerance * this.tolerance;\n\t\t\tvar pt = pts[0];\n\t\t\t\n\t\t\tfor (var i = 1; i < pts.length; i++)\n\t\t\t{\n\t\t\t\tvar next = pts[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(pt.x, pt.y, next.x, next.y, x, y);\n\t\t\t\t\n\t\t\t\tif (dist <= t2)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpt = next;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (mxUtils.contains(state, x, y))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: hitsSwimlaneContent\n * \n * Returns true if the given coordinate pair is inside the content\n * are of the given swimlane.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that specifies the swimlane.\n * x - X-coordinate of the mouse event.\n * y - Y-coordinate of the mouse event.\n */\nmxGraph.prototype.hitsSwimlaneContent = function(swimlane, x, y)\n{\n\tvar state = this.getView().getState(swimlane);\n\tvar size = this.getStartSize(swimlane);\n\t\n\tif (state != null)\n\t{\n\t\tvar scale = this.getView().getScale();\n\t\tx -= state.x;\n\t\ty -= state.y;\n\t\t\n\t\tif (size.width > 0 && x > 0 && x > size.width * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (size.height > 0 && y > 0 && y > size.height * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getChildVertices\n * \n * Returns the visible child vertices of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n */\nmxGraph.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\n/**\n * Function: getChildEdges\n * \n * Returns the visible child edges of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose child vertices should be returned.\n */\nmxGraph.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the visible child vertices or edges in the given parent. If\n * vertices and edges is false, then all children are returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n * vertices - Optional boolean that specifies if child vertices should\n * be returned. Default is false.\n * edges - Optional boolean that specifies if child edges should\n * be returned. Default is false.\n */\nmxGraph.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tparent = (parent != null) ? parent : this.getDefaultParent();\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\n\tvar cells = this.model.getChildCells(parent, vertices, edges);\n\tvar result = [];\n\n\t// Filters out the non-visible child cells\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tresult.push(cells[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\n/**\n * Function: getConnections\n * \n * Returns all visible edges connected to the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connections should be returned.\n * parent - Optional parent of the opposite end for a connection to be\n * returned.\n */\nmxGraph.prototype.getConnections = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, true, false);\n};\n\t\n/**\n * Function: getIncomingEdges\n * \n * Returns the visible incoming edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getIncomingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, false, false);\n};\n\t\n/**\n * Function: getOutgoingEdges\n * \n * Returns the visible outgoing edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getOutgoingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, false, true, false);\n};\n\t\n/**\n * Function: getEdges\n * \n * Returns the incoming and/or outgoing edges for the given cell.\n * If the optional parent argument is specified, then only edges are returned\n * where the opposite is in the given parent cell. If at least one of incoming\n * or outgoing is true, then loops are ignored, if both are false, then all\n * edges connected to the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n * incoming - Optional boolean that specifies if incoming edges should\n * be included in the result. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should\n * be included in the result. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be\n * included in the result. Default is true.\n * recurse - Optional boolean the specifies if the parent specified only \n * need be an ancestral parent, true, or the direct parent, false.\n * Default is false\n */\nmxGraph.prototype.getEdges = function(cell, parent, incoming, outgoing, includeLoops, recurse)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tvar edges = [];\n\tvar isCollapsed = this.isCellCollapsed(cell);\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\n\t\tif (isCollapsed || !this.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(this.model.getEdges(child, incoming, outgoing));\n\t\t}\n\t}\n\n\tedges = edges.concat(this.model.getEdges(cell, incoming, outgoing));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming &&\n\t\t\ttarget == cell && (parent == null || this.isValidAncestor(source, parent, recurse))) ||\n\t\t\t(outgoing && source == cell && (parent == null ||\n\t\t\t\t\tthis.isValidAncestor(target, parent, recurse))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isValidAncestor\n * \n * Returns whether or not the specified parent is a valid\n * ancestor of the specified cell, either direct or indirectly\n * based on whether ancestor recursion is enabled.\n * \n * Parameters:\n * \n * cell - <mxCell> the possible child cell\n * parent - <mxCell> the possible parent cell\n * recurse - boolean whether or not to recurse the child ancestors\n */\nmxGraph.prototype.isValidAncestor = function(cell, parent, recurse)\n{\n\treturn (recurse ? this.model.isAncestor(parent, cell) : this.model\n\t\t\t.getParent(cell) == parent);\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all distinct visible opposite cells for the specified terminal\n * on the given edges.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contains the edges whose opposite\n * terminals should be returned.\n * terminal - Terminal that specifies the end whose opposite should be\n * returned.\n * sources - Optional boolean that specifies if source terminals should be\n * included in the result. Default is true.\n * targets - Optional boolean that specifies if targer terminals should be\n * included in the result. Default is true.\n */\nmxGraph.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\t// Fast lookup to avoid duplicates in terminals array\n\tvar dict = new mxDictionary();\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar state = this.view.getState(edges[i]);\n\t\t\t\n\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of the edge and if the\n\t\t\t// target should be stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tif (!dict.get(target))\n\t\t\t\t{\n\t\t\t\t\tdict.put(target, true);\n\t\t\t\t\tterminals.push(target);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of the edge and if the\n\t\t\t// source should be stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tif (!dict.get(source))\n\t\t\t\t{\n\t\t\t\t\tdict.put(source, true);\n\t\t\t\t\tterminals.push(source);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and returns the connected edges\n * as displayed on the screen.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxGraph.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar src = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar trg = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns an <mxPoint> representing the given event in the unscaled,\n * non-translated coordinate space of <container> and applies the grid.\n * \n * Parameters:\n * \n * evt - Mousevent that contains the mouse pointer location.\n * addOffset - Optional boolean that specifies if the position should be\n * offset by half of the <gridSize>. Default is true.\n */\n mxGraph.prototype.getPointForEvent = function(evt, addOffset)\n {\n\tvar p = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\n\tvar s = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar off = (addOffset != false) ? this.gridSize / 2 : 0;\n\t\n\tp.x = this.snap(p.x / s - tr.x - off);\n\tp.y = this.snap(p.y / s - tr.y - off);\n\t\n\treturn p;\n};\n\n/**\n * Function: getCells\n * \n * Returns the child vertices and edges of the given parent that are contained\n * in the given rectangle. The result is added to the optional result array,\n * which is returned. If no result array is specified then a new array is\n * created and returned.\n * \n * Parameters:\n * \n * x - X-coordinate of the rectangle.\n * y - Y-coordinate of the rectangle.\n * width - Width of the rectangle.\n * height - Height of the rectangle.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * result - Optional array to store the result in.\n * intersection - Optional <mxRectangle> to check vertices for intersection.\n * ignoreFn - Optional function to check if a cell state is ignored.\n * includeDescendants - Optional boolean flag to add descendants to the result.\n * Default is false.\n */\nmxGraph.prototype.getCells = function(x, y, width, height, parent, result, intersection, ignoreFn, includeDescendants)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (width > 0 || height > 0 || intersection != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar right = x + width;\n\t\tvar bottom = y + height;\n\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getCurrentRoot();\n\t\t\t\n\t\t\tif (parent == null)\n\t\t\t{\n\t\t\t\tparent = model.getRoot();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(cell);\n\t\t\t\t\n\t\t\t\tif (state != null && this.isCellVisible(cell) &&\n\t\t\t\t\t(ignoreFn == null || !ignoreFn(state)))\n\t\t\t\t{\n\t\t\t\t\tvar deg = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0;\n\t\t\t\t\tvar box = state;\n\t\t\t\t\t\n\t\t\t\t\tif (deg != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbox = mxUtils.getBoundingBox(box, deg);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar hit = (intersection != null && model.isVertex(cell) && mxUtils.intersects(intersection, box)) ||\n\t\t\t\t\t\t(intersection == null && (model.isEdge(cell) || model.isVertex(cell)) &&\n\t\t\t\t\t\tbox.x >= x && box.y + box.height <= bottom &&\n\t\t\t\t\t\tbox.y >= y && box.x + box.width <= right);\n\t\t\t\t\t\n\t\t\t\t\tif (hit)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(cell);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!hit || includeDescendants)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.getCells(x, y, width, height, cell, result, intersection, ignoreFn, includeDescendants);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsBeyond\n * \n * Returns the children of the given parent that are contained in the\n * halfpane from the given point (x0, y0) rightwards or downwards\n * depending on rightHalfpane and bottomHalfpane.\n * \n * Parameters:\n * \n * x0 - X-coordinate of the origin.\n * y0 - Y-coordinate of the origin.\n * parent - Optional <mxCell> whose children should be checked. Default is\n * <defaultParent>.\n * rightHalfpane - Boolean indicating if the cells in the right halfpane\n * from the origin should be returned.\n * bottomHalfpane - Boolean indicating if the cells in the bottom halfpane\n * from the origin should be returned.\n */\nmxGraph.prototype.getCellsBeyond = function(x0, y0, parent, rightHalfpane, bottomHalfpane)\n{\n\tvar result = [];\n\t\n\tif (rightHalfpane || bottomHalfpane)\n\t{\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getDefaultParent();\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\n\t\t\t\tif (this.isCellVisible(child) && state != null)\n\t\t\t\t{\n\t\t\t\t\tif ((!rightHalfpane || state.x >= x0) &&\n\t\t\t\t\t\t(!bottomHalfpane || state.y >= y0))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: findTreeRoots\n * \n * Returns all children in the given parent which do not have incoming\n * edges. If the result is empty then the with the greatest difference\n * between incoming and outgoing edges is returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * isolate - Optional boolean that specifies if edges should be ignored if\n * the opposite end is not a child of the given parent cell. Default is\n * false.\n * invert - Optional boolean that specifies if outgoing or incoming edges\n * should be counted for a tree root. If false then outgoing edges will be\n * counted. Default is false.\n */\nmxGraph.prototype.findTreeRoots = function(parent, isolate, invert)\n{\n\tisolate = (isolate != null) ? isolate : false;\n\tinvert = (invert != null) ? invert : false;\n\tvar roots = [];\n\t\n\tif (parent != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar best = null;\n\t\tvar maxDiff = 0;\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (this.model.isVertex(cell) && this.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getConnections(cell, (isolate) ? parent : null);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < conns.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.view.getVisibleTerminal(conns[j], true);\n\n                    if (src == cell)\n                    {\n                        fanOut++;\n                    }\n                    else\n                    {\n                        fanIn++;\n                    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((invert && fanOut == 0 && fanIn > 0) ||\n\t\t\t\t\t(!invert && fanIn == 0 && fanOut > 0))\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar diff = (invert) ? fanIn - fanOut : fanOut - fanIn;\n\t\t\t\t\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> from cells to true for the visited cells.\n * inverse - Optional boolean to traverse in inverse direction. Default is false.\n * This is ignored if directed is false.\n */\nmxGraph.prototype.traverse = function(vertex, directed, func, edge, visited, inverse)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tinverse = (inverse != null) ? inverse : false;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || (!inverse == isSource))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.model.getTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited, inverse);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Selection\n */\n\n/**\n * Function: isCellSelected\n * \n * Returns true if the given cell is selected.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the selection state should be returned.\n */\nmxGraph.prototype.isCellSelected = function(cell)\n{\n\treturn this.getSelectionModel().isSelected(cell);\n};\n\n/**\n * Function: isSelectionEmpty\n * \n * Returns true if the selection is empty.\n */\nmxGraph.prototype.isSelectionEmpty = function()\n{\n\treturn this.getSelectionModel().isEmpty();\n};\n\n/**\n * Function: clearSelection\n * \n * Clears the selection using <mxGraphSelectionModel.clear>.\n */\nmxGraph.prototype.clearSelection = function()\n{\n\treturn this.getSelectionModel().clear();\n};\n\n/**\n * Function: getSelectionCount\n * \n * Returns the number of selected cells.\n */\nmxGraph.prototype.getSelectionCount = function()\n{\n\treturn this.getSelectionModel().cells.length;\n};\n\t\n/**\n * Function: getSelectionCell\n * \n * Returns the first cell from the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCell = function()\n{\n\treturn this.getSelectionModel().cells[0];\n};\n\n/**\n * Function: getSelectionCells\n * \n * Returns the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCells = function()\n{\n\treturn this.getSelectionModel().cells.slice();\n};\n\n/**\n * Function: setSelectionCell\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraph.prototype.setSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().setCell(cell);\n};\n\n/**\n * Function: setSelectionCells\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraph.prototype.setSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().setCells(cells);\n};\n\n/**\n * Function: addSelectionCell\n * \n * Adds the given cell to the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be add to the selection.\n */\nmxGraph.prototype.addSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().addCell(cell);\n};\n\n/**\n * Function: addSelectionCells\n * \n * Adds the given cells to the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be added to the selection.\n */\nmxGraph.prototype.addSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().addCells(cells);\n};\n\n/**\n * Function: removeSelectionCell\n * \n * Removes the given cell from the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().removeCell(cell);\n};\n\n/**\n * Function: removeSelectionCells\n * \n * Removes the given cells from the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().removeCells(cells);\n};\n\n/**\n * Function: selectRegion\n * \n * Selects and returns the cells inside the given rectangle for the\n * specified event.\n * \n * Parameters:\n * \n * rect - <mxRectangle> that represents the region to be selected.\n * evt - Mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectRegion = function(rect, evt)\n{\n\tvar cells = this.getCells(rect.x, rect.y, rect.width, rect.height);\n\tthis.selectCellsForEvent(cells, evt);\n\t\n\treturn cells;\n};\n\n/**\n * Function: selectNextCell\n * \n * Selects the next cell.\n */\nmxGraph.prototype.selectNextCell = function()\n{\n\tthis.selectCell(true);\n};\n\n/**\n * Function: selectPreviousCell\n * \n * Selects the previous cell.\n */\nmxGraph.prototype.selectPreviousCell = function()\n{\n\tthis.selectCell();\n};\n\n/**\n * Function: selectParentCell\n * \n * Selects the parent cell.\n */\nmxGraph.prototype.selectParentCell = function()\n{\n\tthis.selectCell(false, true);\n};\n\n/**\n * Function: selectChildCell\n * \n * Selects the first child cell.\n */\nmxGraph.prototype.selectChildCell = function()\n{\n\tthis.selectCell(false, false, true);\n};\n\n/**\n * Function: selectCell\n * \n * Selects the next, parent, first child or previous cell, if all arguments\n * are false.\n * \n * Parameters:\n * \n * isNext - Boolean indicating if the next cell should be selected.\n * isParent - Boolean indicating if the parent cell should be selected.\n * isChild - Boolean indicating if the first child cell should be selected.\n */\nmxGraph.prototype.selectCell = function(isNext, isParent, isChild)\n{\n\tvar sel = this.selectionModel;\n\tvar cell = (sel.cells.length > 0) ? sel.cells[0] : null;\n\t\n\tif (sel.cells.length > 1)\n\t{\n\t\tsel.clear();\n\t}\n\t\n\tvar parent = (cell != null) ?\n\t\tthis.model.getParent(cell) :\n\t\tthis.getDefaultParent();\n\t\n\tvar childCount = this.model.getChildCount(parent);\n\t\n\tif (cell == null && childCount > 0)\n\t{\n\t\tvar child = this.model.getChildAt(parent, 0);\n\t\tthis.setSelectionCell(child);\n\t}\n\telse if ((cell == null || isParent) &&\n\t\tthis.view.getState(parent) != null &&\n\t\tthis.model.getGeometry(parent) != null)\n\t{\n\t\tif (this.getCurrentRoot() != parent)\n\t\t{\n\t\t\tthis.setSelectionCell(parent);\n\t\t}\n\t}\n\telse if (cell != null && isChild)\n\t{\n\t\tvar tmp = this.model.getChildCount(cell);\n\t\t\n\t\tif (tmp > 0)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(cell, 0);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n\telse if (childCount > 0)\n\t{\n\t\tvar i = parent.getIndex(cell);\n\t\t\n\t\tif (isNext)\n\t\t{\n\t\t\ti++;\n\t\t\tvar child = this.model.getChildAt(parent, i % childCount);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti--;\n\t\t\tvar index =  (i < 0) ? childCount - 1 : i;\n\t\t\tvar child = this.model.getChildAt(parent, index);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectAll\n * \n * Selects all children of the given parent cell or the children of the\n * default parent if no parent is specified. To select leaf vertices and/or\n * edges use <selectCells>.\n * \n * Parameters:\n * \n * parent - Optional <mxCell> whose children should be selected.\n * Default is <defaultParent>.\n * descendants - Optional boolean specifying whether all descendants should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectAll = function(parent, descendants)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar cells = (descendants) ? this.model.filterDescendants(mxUtils.bind(this, function(cell)\n\t{\n\t\treturn cell != parent && this.view.getState(cell) != null;\n\t}), parent) : this.model.getChildren(parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectVertices = function(parent, selectGroups)\n{\n\tthis.selectCells(true, false, parent, selectGroups);\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectEdges = function(parent)\n{\n\tthis.selectCells(false, true, parent);\n};\n\n/**\n * Function: selectCells\n * \n * Selects all vertices and/or edges depending on the given boolean\n * arguments recursively, starting at the given parent or the default\n * parent if no parent is specified. Use <selectAll> to select all cells.\n * For vertices, only cells with no children are selected.\n * \n * Parameters:\n * \n * vertices - Boolean indicating if vertices should be selected.\n * edges - Boolean indicating if edges should be selected.\n * parent - Optional <mxCell> that acts as the root of the recursion.\n * Default is <defaultParent>.\n * selectGroups - Optional boolean that specifies if groups should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectCells = function(vertices, edges, parent, selectGroups)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.view.getState(cell) != null &&\n\t\t\t(((selectGroups || this.model.getChildCount(cell) == 0) &&\n\t\t\tthis.model.isVertex(cell) && vertices\n\t\t\t&& !this.model.isEdge(this.model.getParent(cell))) ||\n\t\t\t(this.model.isEdge(cell) && edges));\n\t});\n\t\n\tvar cells = this.model.filterDescendants(filter, parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectCellForEvent\n * \n * Selects the given cell by either adding it to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellForEvent = function(cell, evt)\n{\n\tvar isSelected = this.isCellSelected(cell);\n\t\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tif (isSelected)\n\t\t{\n\t\t\tthis.removeSelectionCell(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.addSelectionCell(cell);\n\t\t}\n\t}\n\telse if (!isSelected || this.getSelectionCount() != 1)\n\t{\n\t\tthis.setSelectionCell(cell);\n\t}\n};\n\n/**\n * Function: selectCellsForEvent\n * \n * Selects the given cells by either adding them to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellsForEvent = function(cells, evt)\n{\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tthis.addSelectionCells(cells);\n\t}\n\telse\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Group: Selection state\n */\n\n/**\n * Function: createHandler\n * \n * Creates a new handler for the given cell state. This implementation\n * returns a new <mxEdgeHandler> of the corresponding cell is an edge,\n * otherwise it returns an <mxVertexHandler>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose handler should be created.\n */\nmxGraph.prototype.createHandler = function(state)\n{\n\tvar result = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (this.model.isEdge(state.cell))\n\t\t{\n\t\t\tvar source = state.getVisibleTerminalState(true);\n\t\t\tvar target = state.getVisibleTerminalState(false);\n\t\t\tvar geo = this.getCellGeometry(state.cell);\n\t\t\t\n\t\t\tvar edgeStyle = this.view.getEdgeStyle(state, (geo != null) ? geo.points : null, source, target);\n\t\t\tresult = this.createEdgeHandler(state, edgeStyle);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = this.createVertexHandler(state);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createVertexHandler\n * \n * Hooks to create a new <mxVertexHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createVertexHandler = function(state)\n{\n\treturn new mxVertexHandler(state);\n};\n\n/**\n * Function: createEdgeHandler\n * \n * Hooks to create a new <mxEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeHandler = function(state, edgeStyle)\n{\n\tvar result = null;\n\t\n\tif (edgeStyle == mxEdgeStyle.Loop ||\n\t\tedgeStyle == mxEdgeStyle.ElbowConnector ||\n\t\tedgeStyle == mxEdgeStyle.SideToSide ||\n\t\tedgeStyle == mxEdgeStyle.TopToBottom)\n\t{\n\t\tresult = this.createElbowEdgeHandler(state);\n\t}\n\telse if (edgeStyle == mxEdgeStyle.SegmentConnector || \n\t\t\tedgeStyle == mxEdgeStyle.OrthConnector)\n\t{\n\t\tresult = this.createEdgeSegmentHandler(state);\n\t}\n\telse\n\t{\n\t\tresult = new mxEdgeHandler(state);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createEdgeSegmentHandler\n * \n * Hooks to create a new <mxEdgeSegmentHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeSegmentHandler = function(state)\n{\n\treturn new mxEdgeSegmentHandler(state);\n};\n\n/**\n * Function: createElbowEdgeHandler\n * \n * Hooks to create a new <mxElbowEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createElbowEdgeHandler = function(state)\n{\n\treturn new mxElbowEdgeHandler(state);\n};\n\n/**\n * Group: Graph events\n */\n\n/**\n * Function: addMouseListener\n * \n * Adds a listener to the graph event dispatch loop. The listener\n * must implement the mouseDown, mouseMove and mouseUp methods\n * as shown in the <mxMouseEvent> class.\n * \n * Parameters:\n * \n * listener - Listener to be added to the graph event listeners.\n */\nmxGraph.prototype.addMouseListener = function(listener)\n{\n\tif (this.mouseListeners == null)\n\t{\n\t\tthis.mouseListeners = [];\n\t}\n\t\n\tthis.mouseListeners.push(listener);\n};\n\n/**\n * Function: removeMouseListener\n * \n * Removes the specified graph listener.\n * \n * Parameters:\n * \n * listener - Listener to be removed from the graph event listeners.\n */\nmxGraph.prototype.removeMouseListener = function(listener)\n{\n\tif (this.mouseListeners != null)\n\t{\n\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t{\n\t\t\tif (this.mouseListeners[i] == listener)\n\t\t\t{\n\t\t\t\tthis.mouseListeners.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateMouseEvent\n * \n * Sets the graphX and graphY properties if the given <mxMouseEvent> if\n * required and returned the event.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> to be updated.\n * evtName - Name of the mouse event.\n */\nmxGraph.prototype.updateMouseEvent = function(me, evtName)\n{\n\tif (me.graphX == null || me.graphY == null)\n\t{\n\t\tvar pt = mxUtils.convertPoint(this.container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x - this.panDx;\n\t\tme.graphY = pt.y - this.panDy;\n\t\t\n\t\t// Searches for rectangles using method if native hit detection is disabled on shape\n\t\tif (me.getCell() == null && this.isMouseDown && evtName == mxEvent.MOUSE_MOVE)\n\t\t{\n\t\t\tme.state = this.view.getState(this.getCellAt(pt.x, pt.y, null, null, null, function(state)\n\t\t\t{\n\t\t\t\treturn state.shape == null || state.shape.paintBackground != mxRectangleShape.prototype.paintBackground ||\n\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1' ||\n\t\t\t\t\t(state.shape.fill != null && state.shape.fill != mxConstants.NONE);\n\t\t\t}));\n\t\t}\n\t}\n\t\n\treturn me;\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the state for the given touch event.\n */\nmxGraph.prototype.getStateForTouchEvent = function(evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\t\n\t// Dispatches the drop event to the graph which\n\t// consumes and executes the source function\n\tvar pt = mxUtils.convertPoint(this.container, x, y);\n\n\treturn this.view.getState(this.getCellAt(pt.x, pt.y));\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>.\n */\nmxGraph.prototype.isEventIgnored = function(evtName, me, sender)\n{\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\tvar result = false;\n\n\t// Drops events that are fired more than once\n\tif (me.getEvent() == this.lastEvent)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tthis.lastEvent = me.getEvent();\n\t}\n\n\t// Installs event listeners to capture the complete gesture from the event source\n\t// for non-MS touch events as a workaround for all events for the same geture being\n\t// fired from the event source even if that was removed from the DOM.\n\tif (this.eventSource != null && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t\tthis.mouseMoveRedirect = null;\n\t\tthis.mouseUpRedirect = null;\n\t\tthis.eventSource = null;\n\t}\n\telse if (!mxClient.IS_GC && this.eventSource != null && me.getSource() != this.eventSource)\n\t{\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_TOUCH && evtName == mxEvent.MOUSE_DOWN &&\n\t\t\t!mouseEvent && !mxEvent.isPenEvent(me.getEvent()))\n\t{\n\t\tthis.eventSource = me.getSource();\n\n\t\tthis.mouseMoveRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\tthis.mouseUpRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t}\n\n\t// Factored out the workarounds for FF to make it easier to override/remove\n\t// Note this method has side-effects!\n\tif (this.isSyntheticEventIgnored(evtName, me, sender))\n\t{\n\t\tresult = true;\n\t}\n\n\t// Never fires mouseUp/-Down for double clicks\n\tif (!mxEvent.isPopupTrigger(this.lastEvent) && evtName != mxEvent.MOUSE_MOVE && this.lastEvent.detail == 2)\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Filters out of sequence events or mixed event types during a gesture\n\tif (evtName == mxEvent.MOUSE_UP && this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = false;\n\t}\n\telse if (evtName == mxEvent.MOUSE_DOWN && !this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = true;\n\t\tthis.isMouseTrigger = mouseEvent;\n\t}\n\t// Drops mouse events that are fired during touch gestures as a workaround for Webkit\n\t// and mouse events that are not in sync with the current internal button state\n\telse if (!result && (((!mxClient.IS_FF || evtName != mxEvent.MOUSE_MOVE) &&\n\t\tthis.isMouseDown && this.isMouseTrigger != mouseEvent) ||\n\t\t(evtName == mxEvent.MOUSE_DOWN && this.isMouseDown) ||\n\t\t(evtName == mxEvent.MOUSE_UP && !this.isMouseDown)))\n\t{\n\t\tresult = true;\n\t}\n\t\n\tif (!result && evtName == mxEvent.MOUSE_DOWN)\n\t{\n\t\tthis.lastMouseX = me.getX();\n\t\tthis.lastMouseY = me.getY();\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isSyntheticEventIgnored\n * \n * Hook for ignoring synthetic mouse events after touchend in Firefox.\n */\nmxGraph.prototype.isSyntheticEventIgnored = function(evtName, me, sender)\n{\n\tvar result = false;\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\t\n\t// LATER: This does not cover all possible cases that can go wrong in FF\n\tif (this.ignoreMouseEvents && mouseEvent && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tthis.ignoreMouseEvents = evtName != mxEvent.MOUSE_UP;\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_FF && !mouseEvent && evtName == mxEvent.MOUSE_UP)\n\t{\n\t\tthis.ignoreMouseEvents = true;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isEventSourceIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>. This\n * implementation returns true for select, option and input (if not of type\n * checkbox, radio, button, submit or file) event sources if the event is not\n * a mouse event or a left mouse button press event.\n * \n * Parameters:\n * \n * evtName - The name of the event.\n * me - <mxMouseEvent> that should be ignored.\n */\nmxGraph.prototype.isEventSourceIgnored = function(evtName, me)\n{\n\tvar source = me.getSource();\n\tvar name = (source.nodeName != null) ? source.nodeName.toLowerCase() : '';\n\tvar candidate = !mxEvent.isMouseEvent(me.getEvent()) || mxEvent.isLeftMouseButton(me.getEvent());\n\t\n\treturn evtName == mxEvent.MOUSE_DOWN && candidate && (name == 'select' || name == 'option' ||\n\t\t(name == 'input' && source.type != 'checkbox' && source.type != 'radio' &&\n\t\tsource.type != 'button' && source.type != 'submit' && source.type != 'file'));\n};\n\n/**\n * Function: getEventState\n * \n * Returns the <mxCellState> to be used when firing the mouse event for the\n * given state. This implementation returns the given state.\n * \n * Parameters:\n * \n * <mxCellState> - State whose event source should be returned.\n */\nmxGraph.prototype.getEventState = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: fireMouseEvent\n * \n * Dispatches the given event in the graph event dispatch loop. Possible\n * event names are <mxEvent.MOUSE_DOWN>, <mxEvent.MOUSE_MOVE> and\n * <mxEvent.MOUSE_UP>. All listeners are invoked for all events regardless\n * of the consumed state of the event.\n * \n * Parameters:\n * \n * evtName - String that specifies the type of event to be dispatched.\n * me - <mxMouseEvent> to be fired.\n * sender - Optional sender argument. Default is this.\n */\nmxGraph.prototype.fireMouseEvent = function(evtName, me, sender)\n{\n\tif (this.isEventSourceIgnored(evtName, me))\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t\t\n\t\treturn;\n\t}\n\t\n\tif (sender == null)\n\t{\n\t\tsender = this;\n\t}\n\n\t// Updates the graph coordinates in the event\n\tme = this.updateMouseEvent(me, evtName);\n\n\t// Detects and processes double taps for touch-based devices which do not have native double click events\n\t// or where detection of double click is not always possible (quirks, IE10+). Note that this can only handle\n\t// double clicks on cells because the sequence of events in IE prevents detection on the background, it fires\n\t// two mouse ups, one of which without a cell but no mousedown for the second click which means we cannot\n\t// detect which mouseup(s) are part of the first click, ie we do not know when the first click ends.\n\tif ((!this.nativeDblClickEnabled && !mxEvent.isPopupTrigger(me.getEvent())) || (this.doubleTapEnabled &&\n\t\tmxClient.IS_TOUCH && (mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent()))))\n\t{\n\t\tvar currentTime = new Date().getTime();\n\t\t\n\t\t// NOTE: Second mouseDown for double click missing in quirks mode\n\t\tif ((!mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_DOWN) || (mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_UP && !this.fireDoubleClick))\n\t\t{\n\t\t\tif (this.lastTouchEvent != null && this.lastTouchEvent != me.getEvent() &&\n\t\t\t\tcurrentTime - this.lastTouchTime < this.doubleTapTimeout &&\n\t\t\t\tMath.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance &&\n\t\t\t\tthis.doubleClickCounter < 2)\n\t\t\t{\n\t\t\t\tthis.doubleClickCounter++;\n\t\t\t\tvar doubleClickFired = false;\n\t\t\t\t\n\t\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t{\n\t\t\t\t\tif (me.getCell() == this.lastTouchCell && this.lastTouchCell != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t\t\tvar cell = this.lastTouchCell;\n\t\t\t\t\t\tthis.lastTouchCell = null;\n\n\t\t\t\t\t\t// Fires native dblclick event via event source\n\t\t\t\t\t\t// NOTE: This fires two double click events on edges in quirks mode. While\n\t\t\t\t\t\t// trying to fix this, we realized that nativeDoubleClick can be disabled for\n\t\t\t\t\t\t// quirks and IE10+ (or we didn't find the case mentioned above where it\n\t\t\t\t\t\t// would not work), ie. all double clicks seem to be working without this.\n\t\t\t\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tme.getSource().fireEvent('ondblclick');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t\t\t\tdoubleClickFired = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.fireDoubleClick = true;\n\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t}\n\n\t\t\t\t// Do not ignore mouse up in quirks in this case\n\t\t\t\tif (!mxClient.IS_QUIRKS || doubleClickFired)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.lastTouchEvent == null || this.lastTouchEvent != me.getEvent())\n\t\t\t{\n\t\t\t\tthis.lastTouchCell = me.getCell();\n\t\t\t\tthis.lastTouchX = me.getX();\n\t\t\t\tthis.lastTouchY = me.getY();\n\t\t\t\tthis.lastTouchTime = currentTime;\n\t\t\t\tthis.lastTouchEvent = me.getEvent();\n\t\t\t\tthis.doubleClickCounter = 0;\n\t\t\t}\n\t\t}\n\t\telse if ((this.isMouseDown || evtName == mxEvent.MOUSE_UP) && this.fireDoubleClick)\n\t\t{\n\t\t\tthis.fireDoubleClick = false;\n\t\t\tvar cell = this.lastTouchCell;\n\t\t\tthis.lastTouchCell = null;\n\t\t\tthis.isMouseDown = false;\n\t\t\t\n\t\t\t// Workaround for Chrome/Safari not firing native double click events for double touch on background\n\t\t\tvar valid = (cell != null) || ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\t\t(mxClient.IS_GC || mxClient.IS_SF));\n\t\t\t\n\t\t\tif (valid && Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance)\n\t\t\t{\n\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!this.isEventIgnored(evtName, me, sender))\n\t{\n\t\t// Updates the event state via getEventState\n\t\tme.state = this.getEventState(me.getState());\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FIRE_MOUSE_EVENT, 'eventName', evtName, 'event', me));\n\t\t\n\t\tif ((mxClient.IS_OP || mxClient.IS_SF || mxClient.IS_GC || mxClient.IS_IE11 ||\n\t\t\t(mxClient.IS_IE && mxClient.IS_SVG) || me.getEvent().target != this.container))\n\t\t{\n\t\t\tif (evtName == mxEvent.MOUSE_MOVE && this.isMouseDown && this.autoScroll && !mxEvent.isMultiTouchEvent(me.getEvent))\n\t\t\t{\n\t\t\t\tthis.scrollPointToVisible(me.getGraphX(), me.getGraphY(), this.autoExtend);\n\t\t\t}\n\t\t\telse if (evtName == mxEvent.MOUSE_UP && this.ignoreScrollbars && this.translateToScrollPosition &&\n\t\t\t\t\t(this.container.scrollLeft != 0 || this.container.scrollTop != 0))\n\t\t\t{\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar tr = this.view.translate;\n\t\t\t\tthis.view.setTranslate(tr.x - this.container.scrollLeft / s, tr.y - this.container.scrollTop / s);\n\t\t\t\tthis.container.scrollLeft = 0;\n\t\t\t\tthis.container.scrollTop = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.mouseListeners != null)\n\t\t\t{\n\t\t\t\tvar args = [sender, me];\n\t\n\t\t\t\t// Does not change returnValue in Opera\n\t\t\t\tif (!me.getEvent().preventDefault)\n\t\t\t\t{\n\t\t\t\t\tme.getEvent().returnValue = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar l = this.mouseListeners[i];\n\t\t\t\t\t\n\t\t\t\t\tif (evtName == mxEvent.MOUSE_DOWN)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseDown.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_MOVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseMove.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseUp.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Invokes the click handler\n\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t{\n\t\t\t\tthis.click(me);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Detects tapAndHold events using a timer\n\t\tif ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\tevtName == mxEvent.MOUSE_DOWN && this.tapAndHoldEnabled && !this.tapAndHoldInProgress)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = true;\n\t\t\tthis.initialTouchX = me.getGraphX();\n\t\t\tthis.initialTouchY = me.getGraphY();\n\t\t\t\n\t\t\tvar handler = function()\n\t\t\t{\n\t\t\t\tif (this.tapAndHoldValid)\n\t\t\t\t{\n\t\t\t\t\tthis.tapAndHold(me);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\t\tthis.tapAndHoldValid = false;\n\t\t\t};\n\t\t\t\n\t\t\tif (this.tapAndHoldThread)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.tapAndHoldThread);\n\t\t\t}\n\t\n\t\t\tthis.tapAndHoldThread = window.setTimeout(mxUtils.bind(this, handler), this.tapAndHoldDelay);\n\t\t\tthis.tapAndHoldValid = true;\n\t\t}\n\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\tthis.tapAndHoldValid = false;\n\t\t}\n\t\telse if (this.tapAndHoldValid)\n\t\t{\n\t\t\tthis.tapAndHoldValid =\n\t\t\t\tMath.abs(this.initialTouchX - me.getGraphX()) < this.tolerance &&\n\t\t\t\tMath.abs(this.initialTouchY - me.getGraphY()) < this.tolerance;\n\t\t}\n\n\t\t// Stops editing for all events other than from cellEditor\n\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isEditing() && !this.cellEditor.isEventSource(me.getEvent()))\n\t\t{\n\t\t\tthis.stopEditing(!this.isInvokesStopCellEditing());\n\t\t}\n\n\t\tthis.consumeMouseEvent(evtName, me, sender);\n\t}\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given <mxMouseEvent> if it's a touchStart event.\n */\nmxGraph.prototype.consumeMouseEvent = function(evtName, me, sender)\n{\n\t// Workaround for duplicate click in Windows 8 with Chrome/FF/Opera with touch\n\tif (evtName == mxEvent.MOUSE_DOWN && mxEvent.isTouchEvent(me.getEvent()))\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: fireGestureEvent\n * \n * Dispatches a <mxEvent.GESTURE> event. The following example will resize the\n * cell under the mouse based on the scale property of the native touch event.\n * \n * (code)\n * graph.addListener(mxEvent.GESTURE, function(sender, eo)\n * {\n *   var evt = eo.getProperty('event');\n *   var state = graph.view.getState(eo.getProperty('cell'));\n *   \n *   if (graph.isEnabled() && graph.isCellResizable(state.cell) && Math.abs(1 - evt.scale) > 0.2)\n *   {\n *     var scale = graph.view.scale;\n *     var tr = graph.view.translate;\n *     \n *     var w = state.width * evt.scale;\n *     var h = state.height * evt.scale;\n *     var x = state.x - (w - state.width) / 2;\n *     var y = state.y - (h - state.height) / 2;\n *     \n *     var bounds = new mxRectangle(graph.snap(x / scale) - tr.x,\n *     \t\tgraph.snap(y / scale) - tr.y, graph.snap(w / scale), graph.snap(h / scale));\n *     graph.resizeCell(state.cell, bounds);\n *     eo.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * evt - Gestureend event that represents the gesture.\n * cell - Optional <mxCell> associated with the gesture.\n */\nmxGraph.prototype.fireGestureEvent = function(evt, cell)\n{\n\t// Resets double tap event handling when gestures take place\n\tthis.lastTouchTime = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.GESTURE, 'event', evt, 'cell', cell));\n};\n\n/**\n * Function: destroy\n * \n * Destroys the graph and all its resources.\n */\nmxGraph.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\t\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.selectionCellsHandler != null)\n\t\t{\n\t\t\tthis.selectionCellsHandler.destroy();\n\t\t}\n\n\t\tif (this.panningHandler != null)\n\t\t{\n\t\t\tthis.panningHandler.destroy();\n\t\t}\n\n\t\tif (this.popupMenuHandler != null)\n\t\t{\n\t\t\tthis.popupMenuHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.connectionHandler != null)\n\t\t{\n\t\t\tthis.connectionHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.graphHandler != null)\n\t\t{\n\t\t\tthis.graphHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.cellEditor != null)\n\t\t{\n\t\t\tthis.cellEditor.destroy();\n\t\t}\n\t\t\n\t\tif (this.view != null)\n\t\t{\n\t\t\tthis.view.destroy();\n\t\t}\n\n\t\tif (this.model != null && this.graphModelChangeListener != null)\n\t\t{\n\t\t\tthis.model.removeListener(this.graphModelChangeListener);\n\t\t\tthis.graphModelChangeListener = null;\n\t\t}\n\n\t\tthis.container = null;\n\t}\n};\n\n__mxOutput.mxGraph = typeof mxGraph !== 'undefined' ? mxGraph : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellOverlay\n *\n * Extends <mxEventSource> to implement a graph overlay, represented by an icon\n * and a tooltip. Overlays can handle and fire <click> events and are added to\n * the graph using <mxGraph.addCellOverlay>, and removed using\n * <mxGraph.removeCellOverlay>, or <mxGraph.removeCellOverlays> to remove all overlays.\n * The <mxGraph.getCellOverlays> function returns the array of overlays for a given\n * cell in a graph. If multiple overlays exist for the same cell, then\n * <getBounds> should be overridden in at least one of the overlays.\n * \n * Overlays appear on top of all cells in a special layer. If this is not\n * desirable, then the image must be rendered as part of the shape or label of\n * the cell instead.\n *\n * Example:\n * \n * The following adds a new overlays for a given vertex and selects the cell\n * if the overlay is clicked.\n *\n * (code)\n * var overlay = new mxCellOverlay(img, html);\n * graph.addCellOverlay(vertex, overlay);\n * overlay.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   graph.setSelectionCell(cell);\n * });\n * (end)\n * \n * For cell overlays to be printed use <mxPrintPreview.printOverlays>.\n *\n * Event: mxEvent.CLICK\n *\n * Fires when the user clicks on the overlay. The <code>event</code> property\n * contains the corresponding mouse event and the <code>cell</code> property\n * contains the cell. For touch devices this is fired if the element receives\n * a touchend event.\n * \n * Constructor: mxCellOverlay\n *\n * Constructs a new overlay using the given image and tooltip.\n * \n * Parameters:\n * \n * image - <mxImage> that represents the icon to be displayed.\n * tooltip - Optional string that specifies the tooltip.\n * align - Optional horizontal alignment for the overlay. Possible\n * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>\n * (default).\n * verticalAlign - Vertical alignment for the overlay. Possible\n * values are <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>\n * (default).\n */\nfunction mxCellOverlay(image, tooltip, align, verticalAlign, offset, cursor)\n{\n\tthis.image = image;\n\tthis.tooltip = tooltip;\n\tthis.align = (align != null) ? align : this.align;\n\tthis.verticalAlign = (verticalAlign != null) ? verticalAlign : this.verticalAlign;\n\tthis.offset = (offset != null) ? offset : new mxPoint();\n\tthis.cursor = (cursor != null) ? cursor : 'help';\n};\n\n/**\n * Extends mxEventSource.\n */\nmxCellOverlay.prototype = new mxEventSource();\nmxCellOverlay.prototype.constructor = mxCellOverlay;\n\n/**\n * Variable: image\n *\n * Holds the <mxImage> to be used as the icon.\n */\nmxCellOverlay.prototype.image = null;\n\n/**\n * Variable: tooltip\n * \n * Holds the optional string to be used as the tooltip.\n */\nmxCellOverlay.prototype.tooltip = null;\n\n/**\n * Variable: align\n * \n * Holds the horizontal alignment for the overlay. Default is\n * <mxConstants.ALIGN_RIGHT>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.align = mxConstants.ALIGN_RIGHT;\n\n/**\n * Variable: verticalAlign\n * \n * Holds the vertical alignment for the overlay. Default is\n * <mxConstants.ALIGN_BOTTOM>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.verticalAlign = mxConstants.ALIGN_BOTTOM;\n\n/**\n * Variable: offset\n * \n * Holds the offset as an <mxPoint>. The offset will be scaled according to the\n * current scale.\n */\nmxCellOverlay.prototype.offset = null;\n\n/**\n * Variable: cursor\n * \n * Holds the cursor for the overlay. Default is 'help'.\n */\nmxCellOverlay.prototype.cursor = null;\n\n/**\n * Variable: defaultOverlap\n * \n * Defines the overlapping for the overlay, that is, the proportional distance\n * from the origin to the point defined by the alignment. Default is 0.5.\n */\nmxCellOverlay.prototype.defaultOverlap = 0.5;\n\n/**\n * Function: getBounds\n * \n * Returns the bounds of the overlay for the given <mxCellState> as an\n * <mxRectangle>. This should be overridden when using multiple overlays\n * per cell so that the overlays do not overlap.\n * \n * The following example will place the overlay along an edge (where\n * x=[-1..1] from the start to the end of the edge and y is the\n * orthogonal offset in px).\n * \n * (code)\n * overlay.getBounds = function(state)\n * {\n *   var bounds = mxCellOverlay.prototype.getBounds.apply(this, arguments);\n *   \n *   if (state.view.graph.getModel().isEdge(state.cell))\n *   {\n *     var pt = state.view.getPoint(state, {x: 0, y: 0, relative: true});\n *     \n *     bounds.x = pt.x - bounds.width / 2;\n *     bounds.y = pt.y - bounds.height / 2;\n *   }\n *   \n *   return bounds;\n * };\n * (end)\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the current state of the\n * associated cell.\n */\nmxCellOverlay.prototype.getBounds = function(state)\n{\n\tvar isEdge = state.view.graph.getModel().isEdge(state.cell);\n\tvar s = state.view.scale;\n\tvar pt = null;\n\n\tvar w = this.image.width;\n\tvar h = this.image.height;\n\t\n\tif (isEdge)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (pts.length % 2 == 1)\n\t\t{\n\t\t\tpt = pts[Math.floor(pts.length / 2)];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar idx = pts.length / 2;\n\t\t\tvar p0 = pts[idx-1];\n\t\t\tvar p1 = pts[idx];\n\t\t\tpt = new mxPoint(p0.x + (p1.x - p0.x) / 2,\n\t\t\t\tp0.y + (p1.y - p0.y) / 2);\n\t\t}\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint();\n\t\t\n\t\tif (this.align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tpt.x = state.x;\n\t\t}\n\t\telse if (this.align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tpt.x = state.x + state.width / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.x = state.x + state.width;\n\t\t}\n\t\t\n\t\tif (this.verticalAlign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tpt.y = state.y;\n\t\t}\n\t\telse if (this.verticalAlign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tpt.y = state.y + state.height / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.y = state.y + state.height;\n\t\t}\n\t}\n\n\treturn new mxRectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s),\n\t\tMath.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);\n};\n\n/**\n * Function: toString\n * \n * Returns the textual representation of the overlay to be used as the\n * tooltip. This implementation returns <tooltip>.\n */\nmxCellOverlay.prototype.toString = function()\n{\n\treturn this.tooltip;\n};\n\n__mxOutput.mxCellOverlay = typeof mxCellOverlay !== 'undefined' ? mxCellOverlay : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxOutline\n *\n * Implements an outline (aka overview) for a graph. Set <updateOnPan> to true\n * to enable updates while the source graph is panning.\n * \n * Example:\n * \n * (code)\n * var outline = new mxOutline(graph, div);\n * (end)\n * \n * If an outline is used in an <mxWindow> in IE8 standards mode, the following\n * code makes sure that the shadow filter is not inherited and that any\n * transparent elements in the graph do not show the page background, but the\n * background of the graph container.\n * \n * (code)\n * if (document.documentMode == 8)\n * {\n *   container.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n * }\n * (end)\n * \n * To move the graph to the top, left corner the following code can be used.\n * \n * (code)\n * var scale = graph.view.scale;\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x / scale, -bounds.y / scale);\n * (end)\n * \n * To toggle the suspended mode, the following can be used.\n * \n * (code)\n * outline.suspended = !outln.suspended;\n * if (!outline.suspended)\n * {\n *   outline.update(true);\n * }\n * (end)\n * \n * Constructor: mxOutline\n *\n * Constructs a new outline for the specified graph inside the given\n * container.\n * \n * Parameters:\n * \n * source - <mxGraph> to create the outline for.\n * container - DOM node that will contain the outline.\n */\nfunction mxOutline(source, container)\n{\n\tthis.source = source;\n\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\n/**\n * Function: source\n * \n * Reference to the source <mxGraph>.\n */\nmxOutline.prototype.source = null;\n\n/**\n * Function: outline\n * \n * Reference to the <mxGraph> that renders the outline.\n */\nmxOutline.prototype.outline = null;\n\n/**\n * Function: graphRenderHint\n * \n * Renderhint to be used for the outline graph. Default is faster.\n */\nmxOutline.prototype.graphRenderHint = mxConstants.RENDERING_HINT_FASTER;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxOutline.prototype.enabled = true;\n\n/**\n * Variable: showViewport\n * \n * Specifies a viewport rectangle should be shown. Default is true.\n */\nmxOutline.prototype.showViewport = true;\n\n/**\n * Variable: border\n * \n * Border to be added at the bottom and right. Default is 10.\n */\nmxOutline.prototype.border = 10;\n\n/**\n * Variable: enabled\n * \n * Specifies the size of the sizer handler. Default is 8.\n */\nmxOutline.prototype.sizerSize = 8;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible in the outline. Default is false.\n */\nmxOutline.prototype.labelsVisible = false;\n\n/**\n * Variable: updateOnPan\n * \n * Specifies if <update> should be called for <mxEvent.PAN> in the source\n * graph. Default is false.\n */\nmxOutline.prototype.updateOnPan = false;\n\n/**\n * Variable: sizerImage\n * \n * Optional <mxImage> to be used for the sizer. Default is null.\n */\nmxOutline.prototype.sizerImage = null;\n\n/**\n * Variable: minScale\n * \n * Minimum scale to be used. Default is 0.0001.\n */\nmxOutline.prototype.minScale = 0.0001;\n\n/**\n * Variable: suspended\n * \n * Optional boolean flag to suspend updates. Default is false. This flag will\n * also suspend repaints of the outline. To toggle this switch, use the\n * following code.\n * \n * (code)\n * nav.suspended = !nav.suspended;\n * \n * if (!nav.suspended)\n * {\n *   nav.update(true);\n * }\n * (end)\n */\nmxOutline.prototype.suspended = false;\n\n/**\n * Variable: forceVmlHandles\n * \n * Specifies if VML should be used to render the handles in this control. This\n * is true for IE8 standards mode and false for all other browsers and modes.\n * This is a workaround for rendering issues of HTML elements over elements\n * with filters in IE 8 standards mode.\n */\nmxOutline.prototype.forceVmlHandles = document.documentMode == 8;\n\n/**\n * Function: createGraph\n * \n * Creates the <mxGraph> used in the outline.\n */\nmxOutline.prototype.createGraph = function(container)\n{\n\tvar graph = new mxGraph(container, this.source.getModel(), this.graphRenderHint, this.source.getStylesheet());\n\tgraph.foldingEnabled = false;\n\tgraph.autoScroll = false;\n\t\n\treturn graph;\n};\n\n/**\n * Function: init\n * \n * Initializes the outline inside the given container.\n */\nmxOutline.prototype.init = function(container)\n{\n\tthis.outline = this.createGraph(container);\n\t\n\t// Do not repaint when suspended\n\tvar outlineGraphModelChanged = this.outline.graphModelChanged;\n\tthis.outline.graphModelChanged = mxUtils.bind(this, function(changes)\n\t{\n\t\tif (!this.suspended && this.outline != null)\n\t\t{\n\t\t\toutlineGraphModelChanged.apply(this.outline, arguments);\n\t\t}\n\t});\n\n\t// Enables faster painting in SVG\n\tif (mxClient.IS_SVG)\n\t{\n\t\tvar node = this.outline.getView().getCanvas().parentNode;\n\t\tnode.setAttribute('shape-rendering', 'optimizeSpeed');\n\t\tnode.setAttribute('image-rendering', 'optimizeSpeed');\n\t}\n\t\n\t// Hides cursors and labels\n\tthis.outline.labelsVisible = this.labelsVisible;\n\tthis.outline.setEnabled(false);\n\t\n\tthis.updateHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (!this.suspended && !this.active)\n\t\t{\n\t\t\tthis.update();\n\t\t}\n\t});\n\t\n\t// Updates the scale of the outline after a change of the main graph\n\tthis.source.getModel().addListener(mxEvent.CHANGE, this.updateHandler);\n\tthis.outline.addMouseListener(this);\n\t\n\t// Adds listeners to keep the outline in sync with the source graph\n\tvar view = this.source.getView();\n\tview.addListener(mxEvent.SCALE, this.updateHandler);\n\tview.addListener(mxEvent.TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.SCALE_AND_TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.DOWN, this.updateHandler);\n\tview.addListener(mxEvent.UP, this.updateHandler);\n\n\t// Updates blue rectangle on scroll\n\tmxEvent.addListener(this.source.container, 'scroll', this.updateHandler);\n\t\n\tthis.panHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.updateOnPan)\n\t\t{\n\t\t\tthis.updateHandler.apply(this, arguments);\n\t\t}\n\t});\n\tthis.source.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Refreshes the graph in the outline after a refresh of the main graph\n\tthis.refreshHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.outline.setStylesheet(this.source.getStylesheet());\n\t\tthis.outline.refresh();\n\t});\n\tthis.source.addListener(mxEvent.REFRESH, this.refreshHandler);\n\n\t// Creates the blue rectangle for the viewport\n\tthis.bounds = new mxRectangle(0, 0, 0, 0);\n\tthis.selectionBorder = new mxRectangleShape(this.bounds, null,\n\t\tmxConstants.OUTLINE_COLOR, mxConstants.OUTLINE_STROKEWIDTH);\n\tthis.selectionBorder.dialect = this.outline.dialect;\n\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.selectionBorder.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.selectionBorder.init(this.outline.getView().getOverlayPane());\n\n\t// Handles event by catching the initial pointer start and then listening to the\n\t// complete gesture on the event target. This is needed because all the events\n\t// are routed via the initial element even if that element is removed from the\n\t// DOM, which happens when we repaint the selection border and zoom handles.\n\tvar handler = mxUtils.bind(this, function(evt)\n\t{\n\t\tvar t = mxEvent.getSource(evt);\n\t\t\n\t\tvar redirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tvar redirect2 = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tmxEvent.removeGestureListeners(t, null, redirect, redirect2);\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(t, null, redirect, redirect2);\n\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t});\n\t\n\tmxEvent.addGestureListeners(this.selectionBorder.node, handler);\n\n\t// Creates a small blue rectangle for sizing (sizer handle)\n\tthis.sizer = this.createSizer();\n\t\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.sizer.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.sizer.init(this.outline.getView().getOverlayPane());\n\t\n\tif (this.enabled)\n\t{\n\t\tthis.sizer.node.style.cursor = 'nwse-resize';\n\t}\n\t\n\tmxEvent.addGestureListeners(this.sizer.node, handler);\n\n\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\tthis.sizer.node.style.display = this.selectionBorder.node.style.display;\n\tthis.selectionBorder.node.style.cursor = 'move';\n\n\tthis.update(false);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxOutline.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setZoomEnabled\n * \n * Enables or disables the zoom handling by showing or hiding the respective\n * handle.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setZoomEnabled = function(value)\n{\n\tthis.sizer.node.style.visibility = (value) ? 'visible' : 'hidden';\n};\n\n/**\n * Function: refresh\n * \n * Invokes <update> and revalidate the outline. This method is deprecated.\n */\nmxOutline.prototype.refresh = function()\n{\n\tthis.update(true);\n};\n\n/**\n * Function: createSizer\n * \n * Creates the shape used as the sizer.\n */\nmxOutline.prototype.createSizer = function()\n{\n\tif (this.sizerImage != null)\n\t{\n\t\tvar sizer = new mxImageShape(new mxRectangle(0, 0, this.sizerImage.width, this.sizerImage.height), this.sizerImage.src);\n\t\tsizer.dialect = this.outline.dialect;\n\t\t\n\t\treturn sizer;\n\t}\n\telse\n\t{\n\t\tvar sizer = new mxRectangleShape(new mxRectangle(0, 0, this.sizerSize, this.sizerSize),\n\t\t\tmxConstants.OUTLINE_HANDLE_FILLCOLOR, mxConstants.OUTLINE_HANDLE_STROKECOLOR);\n\t\tsizer.dialect = this.outline.dialect;\n\t\n\t\treturn sizer;\n\t}\n};\n\n/**\n * Function: getSourceContainerSize\n * \n * Returns the size of the source container.\n */\nmxOutline.prototype.getSourceContainerSize = function()\n{\n\treturn new mxRectangle(0, 0, this.source.container.scrollWidth, this.source.container.scrollHeight);\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getOutlineOffset = function(scale)\n{\n\treturn null;\n};\n\n/**\n * Function: getSourceGraphBounds\n * \n * Returns the graph bound boxing of the source.\n */\nmxOutline.prototype.getSourceGraphBounds = function()\n{\n\treturn this.source.getGraphBounds();\n};\n\n/**\n * Function: update\n * \n * Updates the outline.\n */\nmxOutline.prototype.update = function(revalidate)\n{\n\tif (this.source != null && this.source.container != null &&\n\t\tthis.outline != null && this.outline.container != null)\n\t{\n\t\tvar sourceScale = this.source.view.scale;\n\t\tvar scaledGraphBounds = this.getSourceGraphBounds();\n\t\tvar unscaledGraphBounds = new mxRectangle(scaledGraphBounds.x / sourceScale + this.source.panDx,\n\t\t\t\tscaledGraphBounds.y / sourceScale + this.source.panDy, scaledGraphBounds.width / sourceScale,\n\t\t\t\tscaledGraphBounds.height / sourceScale);\n\n\t\tvar unscaledFinderBounds = new mxRectangle(0, 0,\n\t\t\tthis.source.container.clientWidth / sourceScale,\n\t\t\tthis.source.container.clientHeight / sourceScale);\n\t\t\n\t\tvar union = unscaledGraphBounds.clone();\n\t\tunion.add(unscaledFinderBounds);\n\t\n\t\t// Zooms to the scrollable area if that is bigger than the graph\n\t\tvar size = this.getSourceContainerSize();\n\t\tvar completeWidth = Math.max(size.width / sourceScale, union.width);\n\t\tvar completeHeight = Math.max(size.height / sourceScale, union.height);\n\t\n\t\tvar availableWidth = Math.max(0, this.outline.container.clientWidth - this.border);\n\t\tvar availableHeight = Math.max(0, this.outline.container.clientHeight - this.border);\n\t\t\n\t\tvar outlineScale = Math.min(availableWidth / completeWidth, availableHeight / completeHeight);\n\t\tvar scale = (isNaN(outlineScale)) ? this.minScale : Math.max(this.minScale, outlineScale);\n\n\t\tif (scale > 0)\n\t\t{\n\t\t\tif (this.outline.getView().scale != scale)\n\t\t\t{\n\t\t\t\tthis.outline.getView().scale = scale;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\tvar navView = this.outline.getView();\n\t\t\t\n\t\t\tif (navView.currentRoot != this.source.getView().currentRoot)\n\t\t\t{\n\t\t\t\tnavView.setCurrentRoot(this.source.getView().currentRoot);\n\t\t\t}\n\n\t\t\tvar t = this.source.view.translate;\n\t\t\tvar tx = t.x + this.source.panDx;\n\t\t\tvar ty = t.y + this.source.panDy;\n\t\t\t\n\t\t\tvar off = this.getOutlineOffset(scale);\n\t\t\t\n\t\t\tif (off != null)\n\t\t\t{\n\t\t\t\ttx += off.x;\n\t\t\t\tty += off.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (unscaledGraphBounds.x < 0)\n\t\t\t{\n\t\t\t\ttx = tx - unscaledGraphBounds.x;\n\t\t\t}\n\t\t\tif (unscaledGraphBounds.y < 0)\n\t\t\t{\n\t\t\t\tty = ty - unscaledGraphBounds.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (navView.translate.x != tx || navView.translate.y != ty)\n\t\t\t{\n\t\t\t\tnavView.translate.x = tx;\n\t\t\t\tnavView.translate.y = ty;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\t// Prepares local variables for computations\n\t\t\tvar t2 = navView.translate;\n\t\t\tscale = this.source.getView().scale;\n\t\t\tvar scale2 = scale / navView.scale;\n\t\t\tvar scale3 = 1.0 / navView.scale;\n\t\t\tvar container = this.source.container;\n\t\t\t\n\t\t\t// Updates the bounds of the viewrect in the navigation\n\t\t\tthis.bounds = new mxRectangle(\n\t\t\t\t(t2.x - t.x - this.source.panDx) / scale3,\n\t\t\t\t(t2.y - t.y - this.source.panDy) / scale3,\n\t\t\t\t(container.clientWidth / scale2),\n\t\t\t\t(container.clientHeight / scale2));\n\t\t\t\n\t\t\t// Adds the scrollbar offset to the finder\n\t\t\tthis.bounds.x += this.source.container.scrollLeft * navView.scale / scale;\n\t\t\tthis.bounds.y += this.source.container.scrollTop * navView.scale / scale;\n\t\t\t\n\t\t\tvar b = this.selectionBorder.bounds;\n\t\t\t\n\t\t\tif (b.x != this.bounds.x || b.y != this.bounds.y || b.width != this.bounds.width || b.height != this.bounds.height)\n\t\t\t{\n\t\t\t\tthis.selectionBorder.bounds = this.bounds;\n\t\t\t\tthis.selectionBorder.redraw();\n\t\t\t}\n\t\t\n\t\t\t// Updates the bounds of the zoom handle at the bottom right\n\t\t\tvar b = this.sizer.bounds;\n\t\t\tvar b2 = new mxRectangle(this.bounds.x + this.bounds.width - b.width / 2,\n\t\t\t\t\tthis.bounds.y + this.bounds.height - b.height / 2, b.width, b.height);\n\n\t\t\tif (b.x != b2.x || b.y != b2.y || b.width != b2.width || b.height != b2.height)\n\t\t\t{\n\t\t\t\tthis.sizer.bounds = b2;\n\t\t\t\t\n\t\t\t\t// Avoids update of visibility in redraw for VML\n\t\t\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t\t\t{\n\t\t\t\t\tthis.sizer.redraw();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (revalidate)\n\t\t\t{\n\t\t\t\tthis.outline.view.revalidate();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by starting a translation or zoom.\n */\nmxOutline.prototype.mouseDown = function(sender, me)\n{\n\tif (this.enabled && this.showViewport)\n\t{\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.source.tolerance : 0;\n\t\tvar hit = (this.source.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tthis.zoom = me.isSource(this.sizer) || (hit != null && mxUtils.intersects(shape.bounds, hit));\n\t\tthis.startX = me.getX();\n\t\tthis.startY = me.getY();\n\t\tthis.active = true;\n\n\t\tif (this.source.useScrollbarsForPanning && mxUtils.hasScrollbars(this.source.container))\n\t\t{\n\t\t\tthis.dx0 = this.source.container.scrollLeft;\n\t\t\tthis.dy0 = this.source.container.scrollTop;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx0 = 0;\n\t\t\tthis.dy0 = 0;\n\t\t}\n\t}\n\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by previewing the viewrect in <graph> and updating the\n * rectangle that represents the viewrect in the outline.\n */\nmxOutline.prototype.mouseMove = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\t\tthis.sizer.node.style.display = this.selectionBorder.node.style.display; \n\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar bounds = null;\n\t\t\n\t\tif (!this.zoom)\n\t\t{\n\t\t\t// Previews the panning on the source graph\n\t\t\tvar scale = this.outline.getView().scale;\n\t\t\tbounds = new mxRectangle(this.bounds.x + dx,\n\t\t\t\tthis.bounds.y + dy, this.bounds.width, this.bounds.height);\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t\tdx /= scale;\n\t\t\tdx *= this.source.getView().scale;\n\t\t\tdy /= scale;\n\t\t\tdy *= this.source.getView().scale;\n\t\t\tthis.source.panGraph(-dx - this.dx0, -dy - this.dy0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Does *not* preview zooming on the source graph\n\t\t\tvar container = this.source.container;\n\t\t\tvar viewRatio = container.clientWidth / container.clientHeight;\n\t\t\tdy = dx / viewRatio;\n\t\t\tbounds = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y,\n\t\t\t\tMath.max(1, this.bounds.width + dx),\n\t\t\t\tMath.max(1, this.bounds.height + dy));\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t}\n\t\t\n\t\t// Updates the zoom handle\n\t\tvar b = this.sizer.bounds;\n\t\tthis.sizer.bounds = new mxRectangle(\n\t\t\tbounds.x + bounds.width - b.width / 2,\n\t\t\tbounds.y + bounds.height - b.height / 2,\n\t\t\tb.width, b.height);\n\t\t\n\t\t// Avoids update of visibility in redraw for VML\n\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t{\n\t\t\tthis.sizer.redraw();\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: getTranslateForEvent\n * \n * Gets the translate for the given mouse event. Here is an example to limit\n * the outline to stay within positive coordinates:\n * \n * (code)\n * outline.getTranslateForEvent = function(me)\n * {\n *   var pt = new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n *   \n *   if (!this.zoom)\n *   {\n *     var tr = this.source.view.translate;\n *     pt.x = Math.max(tr.x * this.outline.view.scale, pt.x);\n *     pt.y = Math.max(tr.y * this.outline.view.scale, pt.y);\n *   }\n *   \n *   return pt;\n * };\n * (end)\n */\nmxOutline.prototype.getTranslateForEvent = function(me)\n{\n\treturn new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the translation or zoom to <graph>.\n */\nmxOutline.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\t\n\t\tif (Math.abs(dx) > 0 || Math.abs(dy) > 0)\n\t\t{\n\t\t\tif (!this.zoom)\n\t\t\t{\n\t\t\t\t// Applies the new translation if the source\n\t\t\t\t// has no scrollbars\n\t\t\t\tif (!this.source.useScrollbarsForPanning ||\n\t\t\t\t\t!mxUtils.hasScrollbars(this.source.container))\n\t\t\t\t{\n\t\t\t\t\tthis.source.panGraph(0, 0);\n\t\t\t\t\tdx /= this.outline.getView().scale;\n\t\t\t\t\tdy /= this.outline.getView().scale;\n\t\t\t\t\tvar t = this.source.getView().translate;\n\t\t\t\t\tthis.source.getView().setTranslate(t.x - dx, t.y - dy);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Applies the new zoom\n\t\t\t\tvar w = this.selectionBorder.bounds.width;\n\t\t\t\tvar scale = this.source.getView().scale;\n\t\t\t\tthis.source.zoomTo(Math.max(this.minScale, scale - (dx * scale) / w), false);\n\t\t\t}\n\n\t\t\tthis.update();\n\t\t\tme.consume();\n\t\t}\n\t\t\t\n\t\t// Resets the state of the handler\n\t\tthis.index = null;\n\t\tthis.active = false;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroy this outline and removes all listeners from <source>.\n */\nmxOutline.prototype.destroy = function()\n{\n\tif (this.source != null)\n\t{\n\t\tthis.source.removeListener(this.panHandler);\n\t\tthis.source.removeListener(this.refreshHandler);\n\t\tthis.source.getModel().removeListener(this.updateHandler);\n\t\tthis.source.getView().removeListener(this.updateHandler);\n\t\tmxEvent.removeListener(this.source.container, 'scroll', this.updateHandler);\n\t\tthis.source = null;\n\t}\n\t\n\tif (this.outline != null)\n\t{\n\t\tthis.outline.removeMouseListener(this);\n\t\tthis.outline.destroy();\n\t\tthis.outline = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tif (this.sizer != null)\n\t{\n\t\tthis.sizer.destroy();\n\t\tthis.sizer = null;\n\t}\n};\n\n__mxOutput.mxOutline = typeof mxOutline !== 'undefined' ? mxOutline : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMultiplicity\n * \n * Defines invalid connections along with the error messages that they produce.\n * To add or remove rules on a graph, you must add/remove instances of this\n * class to <mxGraph.multiplicities>.\n * \n * Example:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only circle targets allowed'));\n * (end)\n * \n * Defines a rule where each rectangle must be connected to no more than 2\n * circles and no other types of targets are allowed.\n * \n * Constructor: mxMultiplicity\n * \n * Instantiate class mxMultiplicity in order to describe allowed\n * connections in a graph. Not all constraints can be enforced while\n * editing, some must be checked at validation time. The <countError> and\n * <typeError> are treated as resource keys in <mxResources>.\n * \n * Parameters:\n * \n * source - Boolean indicating if this rule applies to the source or target\n * terminal.\n * type - Type of the source or target terminal that this rule applies to.\n * See <type> for more information.\n * attr - Optional attribute name to match the source or target terminal.\n * value - Optional attribute value to match the source or target terminal.\n * min - Minimum number of edges for this rule. Default is 1.\n * max - Maximum number of edges for this rule. n means infinite. Default\n * is n.\n * validNeighbors - Array of types of the opposite terminal for which this\n * rule applies.\n * countError - Error to be displayed for invalid number of edges.\n * typeError - Error to be displayed for invalid opposite terminals.\n * validNeighborsAllowed - Optional boolean indicating if the array of\n * opposite types should be valid or invalid.\n */\nfunction mxMultiplicity(source, type, attr, value, min, max,\n\tvalidNeighbors, countError, typeError, validNeighborsAllowed)\n{\n\tthis.source = source;\n\tthis.type = type;\n\tthis.attr = attr;\n\tthis.value = value;\n\tthis.min = (min != null) ? min : 0;\n\tthis.max = (max != null) ? max : 'n';\n\tthis.validNeighbors = validNeighbors;\n\tthis.countError = mxResources.get(countError) || countError;\n\tthis.typeError = mxResources.get(typeError) || typeError;\n\tthis.validNeighborsAllowed = (validNeighborsAllowed != null) ?\n\t\tvalidNeighborsAllowed : true;\n};\n\n/**\n * Variable: type\n * \n * Defines the type of the source or target terminal. The type is a string\n * passed to <mxUtils.isNode> together with the source or target vertex\n * value as the first argument.\n */\nmxMultiplicity.prototype.type = null;\n\n/**\n * Variable: attr\n * \n * Optional string that specifies the attributename to be passed to\n * <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.attr = null;\n\n/**\n * Variable: value\n * \n * Optional string that specifies the value of the attribute to be passed\n * to <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.value = null;\n\n/**\n * Variable: source\n * \n * Boolean that specifies if the rule is applied to the source or target\n * terminal of an edge.\n */\nmxMultiplicity.prototype.source = null;\n\n/**\n * Variable: min\n * \n * Defines the minimum number of connections for which this rule applies.\n * Default is 0.\n */\nmxMultiplicity.prototype.min = null;\n\n/**\n * Variable: max\n * \n * Defines the maximum number of connections for which this rule applies.\n * A value of 'n' means unlimited times. Default is 'n'. \n */\nmxMultiplicity.prototype.max = null;\n\n/**\n * Variable: validNeighbors\n * \n * Holds an array of strings that specify the type of neighbor for which\n * this rule applies. The strings are used in <mxCell.is> on the opposite\n * terminal to check if the rule applies to the connection.\n */\nmxMultiplicity.prototype.validNeighbors = null;\n\n/**\n * Variable: validNeighborsAllowed\n * \n * Boolean indicating if the list of validNeighbors are those that are allowed\n * for this rule or those that are not allowed for this rule.\n */\nmxMultiplicity.prototype.validNeighborsAllowed = true;\n\n/**\n * Variable: countError\n * \n * Holds the localized error message to be displayed if the number of\n * connections for which the rule applies is smaller than <min> or greater\n * than <max>.\n */\nmxMultiplicity.prototype.countError = null;\n\n/**\n * Variable: typeError\n * \n * Holds the localized error message to be displayed if the type of the\n * neighbor for a connection does not match the rule.\n */\nmxMultiplicity.prototype.typeError = null;\n\n/**\n * Function: check\n * \n * Checks the multiplicity for the given arguments and returns the error\n * for the given connection or null if the multiplicity does not apply.\n *  \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph> instance.\n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * sourceOut - Number of outgoing edges from the source terminal.\n * targetIn - Number of incoming edges for the target terminal.\n */\nmxMultiplicity.prototype.check = function(graph, edge, source, target, sourceOut, targetIn)\n{\n\tvar error = '';\n\n\tif ((this.source && this.checkTerminal(graph, source, edge)) ||\n\t\t(!this.source && this.checkTerminal(graph, target, edge)))\n\t{\n\t\tif (this.countError != null && \n\t\t\t((this.source && (this.max == 0 || (sourceOut >= this.max))) ||\n\t\t\t(!this.source && (this.max == 0 || (targetIn >= this.max)))))\n\t\t{\n\t\t\terror += this.countError + '\\n';\n\t\t}\n\n\t\tif (this.validNeighbors != null && this.typeError != null && this.validNeighbors.length > 0)\n\t\t{\n\t\t\tvar isValid = this.checkNeighbors(graph, edge, source, target);\n\n\t\t\tif (!isValid)\n\t\t\t{\n\t\t\t\terror += this.typeError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: checkNeighbors\n * \n * Checks if there are any valid neighbours in <validNeighbors>. This is only\n * called if <validNeighbors> is a non-empty array.\n */\nmxMultiplicity.prototype.checkNeighbors = function(graph, edge, source, target)\n{\n\tvar sourceValue = graph.model.getValue(source);\n\tvar targetValue = graph.model.getValue(target);\n\tvar isValid = !this.validNeighborsAllowed;\n\tvar valid = this.validNeighbors;\n\t\n\tfor (var j = 0; j < valid.length; j++)\n\t{\n\t\tif (this.source &&\n\t\t\tthis.checkType(graph, targetValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t\telse if (!this.source && \n\t\t\tthis.checkType(graph, sourceValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn isValid;\n};\n\n/**\n * Function: checkTerminal\n * \n * Checks the given terminal cell and returns true if this rule applies. The\n * given cell is the source or target of the given edge, depending on\n * <source>. This implementation uses <checkType> on the terminal's value.\n */\nmxMultiplicity.prototype.checkTerminal = function(graph, terminal, edge)\n{\n\tvar value = graph.model.getValue(terminal);\n\t\n\treturn this.checkType(graph, value, this.type, this.attr, this.value);\n};\n\n/**\n * Function: checkType\n * \n * Checks the type of the given value.\n */\nmxMultiplicity.prototype.checkType = function(graph, value, type, attr, attrValue)\n{\n\tif (value != null)\n\t{\n\t\tif (!isNaN(value.nodeType)) // Checks if value is a DOM node\n\t\t{\n\t\t\treturn mxUtils.isNode(value, type, attr, attrValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn value == type;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n__mxOutput.mxMultiplicity = typeof mxMultiplicity !== 'undefined' ? mxMultiplicity : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLayoutManager\n * \n * Implements a layout manager that runs a given layout after any changes to the graph:\n * \n * Example:\n * \n * (code)\n * var layoutMgr = new mxLayoutManager(graph);\n * layoutMgr.getLayout = function(cell, eventName)\n * {\n *   return layout;\n * };\n * (end)\n * \n * See <getLayout> for a description of the possible eventNames.\n * \n * Event: mxEvent.LAYOUT_CELLS\n * \n * Fires between begin- and endUpdate after all cells have been layouted in\n * <layoutCells>. The <code>cells</code> property contains all cells that have\n * been passed to <layoutCells>.\n * \n * Constructor: mxLayoutManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxLayoutManager(graph)\n{\n\t// Executes the layout before the changes are dispatched\n\tthis.undoHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.beforeUndo(evt.getProperty('edit'));\n\t\t}\n\t});\n\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.moveHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsMoved(evt.getProperty('cells'), evt.getProperty('event'));\n\t\t}\n\t});\n\t\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'), evt.getProperty('bounds'),\n\t\t\t\tevt.getProperty('previous'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxLayoutManager.prototype = new mxEventSource();\nmxLayoutManager.prototype.constructor = mxLayoutManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxLayoutManager.prototype.graph = null;\n\n/**\n * Variable: bubbling\n * \n * Specifies if the layout should bubble along\n * the cell hierarchy. Default is true.\n */\nmxLayoutManager.prototype.bubbling = true;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxLayoutManager.prototype.enabled = true;\n\n/**\n * Variable: undoHandler\n * \n * Holds the function that handles the endUpdate event.\n */\nmxLayoutManager.prototype.undoHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxLayoutManager.prototype.moveHandler = null;\n\n/**\n * Variable: resizeHandler\n * \n * Holds the function that handles the resize event.\n */\nmxLayoutManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxLayoutManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxLayoutManager.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isBubbling\n * \n * Returns true if a layout should bubble, that is, if the parent layout\n * should be executed whenever a cell layout (layout of the children of\n * a cell) has been executed. This implementation returns <bubbling>.\n */\nmxLayoutManager.prototype.isBubbling = function()\n{\n\treturn this.bubbling;\n};\n\n/**\n * Function: setBubbling\n * \n * Sets <bubbling>.\n */\nmxLayoutManager.prototype.setBubbling = function(value)\n{\n\tthis.bubbling = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxLayoutManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxLayoutManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\t\n\t\tmodel.removeListener(this.undoHandler);\n\t\tthis.graph.removeListener(this.moveHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\n\t\tmodel.addListener(mxEvent.BEFORE_UNDO, this.undoHandler);\n\t\tthis.graph.addListener(mxEvent.MOVE_CELLS, this.moveHandler);\n\t\tthis.graph.addListener(mxEvent.RESIZE_CELLS, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: hasLayout\n * \n * Returns true if the given cell has a layout. This implementation invokes\n * <getLayout> with <mxEvent.LAYOUT_CELLS> as the eventName. Override this\n * if creating layouts in <getLayout> is expensive and return true if\n * <getLayout> will return a layout for the given cell for\n * <mxEvent.BEGIN_UPDATE> or <mxEvent.END_UPDATE>.\n */\nmxLayoutManager.prototype.hasLayout = function(cell)\n{\n\treturn this.getLayout(cell, mxEvent.LAYOUT_CELLS);\n};\n\n/**\n * Function: getLayout\n * \n * Returns the layout for the given cell and eventName. Possible\n * event names are <mxEvent.MOVE_CELLS> and <mxEvent.RESIZE_CELLS>\n * when cells are moved or resized and <mxEvent.BEGIN_UPDATE> or\n * <mxEvent.END_UPDATE> for the bottom up and top down phases after\n * changes to the graph model. <mxEvent.LAYOUT_CELLS> is used to\n * check if a layout exists for the given cell. This is called\n * from <hasLayout>.\n */\nmxLayoutManager.prototype.getLayout = function(cell, eventName)\n{\n\treturn null;\n};\n\n/**\n * Function: beforeUndo\n * \n * Called from <undoHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.beforeUndo = function(undoableEdit)\n{\n\tthis.executeLayoutForCells(this.getCellsForChanges(undoableEdit.changes));\n};\n\n/**\n * Function: cellsMoved\n * \n * Called from <moveHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.cellsMoved = function(cells, evt)\n{\n\tif (cells != null && evt != null)\n\t{\n\t\tvar point = mxUtils.convertPoint(this.getGraph().container,\n\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar layout = this.getLayout(model.getParent(cells[i]), mxEvent.MOVE_CELLS);\n\n\t\t\tif (layout != null)\n\t\t\t{\n\t\t\t\tlayout.moveCell(cells[i], point.x, point.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called from <resizeHandler>.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been resized.\n * bounds - <mxRectangle> taht represents the new bounds.\n */\nmxLayoutManager.prototype.cellsResized = function(cells, bounds, prev)\n{\n\tif (cells != null && bounds != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar layout = this.getLayout(model.getParent(cells[i]), mxEvent.RESIZE_CELLS);\n\n\t\t\tif (layout != null)\n\t\t\t{\n\t\t\t\tlayout.resizeCell(cells[i], bounds[i], prev[i]);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getCellsForChanges\n * \n * Returns the cells for which a layout should be executed.\n */\nmxLayoutManager.prototype.getCellsForChanges = function(changes)\n{\n\tvar result = [];\n\t\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change instanceof mxRootChange)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = result.concat(this.getCellsForChange(change));\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForChange\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.getCellsForChange = function(change)\n{\n\tif (change instanceof mxChildChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.child,\n\t\t\tthis.addCellsWithLayout(change.previous));\n\t}\n\telse if (change instanceof mxTerminalChange ||\n\t\tchange instanceof mxGeometryChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.cell);\n\t}\n\telse if (change instanceof mxVisibleChange ||\n\t\tchange instanceof mxStyleChange)\n\t{\n\t\treturn this.addCellsWithLayout(change.cell);\n\t}\n\t\n\treturn [];\n};\n\n/**\n * Function: addCellsWithLayout\n * \n * Adds all ancestors of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addCellsWithLayout = function(cell, result)\n{\n\treturn this.addDescendantsWithLayout(cell,\n\t\tthis.addAncestorsWithLayout(cell, result));\n};\n\n/**\n * Function: addAncestorsWithLayout\n * \n * Adds all ancestors of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addAncestorsWithLayout = function(cell, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (cell != null)\n\t{\n\t\tvar layout = this.hasLayout(cell);\n\t\t\n\t\tif (layout != null)\n\t\t{\n\t\t\tresult.push(cell);\n\t\t}\n\t\t\n\t\tif (this.isBubbling())\n\t\t{\n\t\t\tvar model = this.getGraph().getModel();\n\t\t\tthis.addAncestorsWithLayout(\n\t\t\t\tmodel.getParent(cell), result);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: addDescendantsWithLayout\n * \n * Adds all descendants of the given cell that have a layout.\n */\nmxLayoutManager.prototype.addDescendantsWithLayout = function(cell, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (cell != null && this.hasLayout(cell))\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tfor (var i = 0; i < model.getChildCount(cell); i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\tif (this.hasLayout(child))\n\t\t\t{\n\t\t\t\tresult.push(child);\n\t\t\t\tthis.addDescendantsWithLayout(child, result);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: executeLayoutForCells\n * \n * Executes all layouts for the given cells in two phases: In the first phase\n * layouts for child cells are executed before layouts for parent cells with\n * <mxEvent.BEGIN_UPDATE>, in the second phase layouts for parent cells are\n * executed before layouts for child cells with <mxEvent.END_UPDATE>.\n */\nmxLayoutManager.prototype.executeLayoutForCells = function(cells)\n{\n\tvar sorted = mxUtils.sortCells(cells, false);\n\tthis.layoutCells(sorted, true);\n\tthis.layoutCells(sorted.reverse(), false);\n};\n\n/**\n * Function: layoutCells\n * \n * Executes all layouts which have been scheduled during the changes.\n */\nmxLayoutManager.prototype.layoutCells = function(cells, bubble)\n{\n\tif (cells.length > 0)\n\t{\n\t\t// Invokes the layouts while removing duplicates\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry \n\t\t{\n\t\t\tvar last = null;\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] != model.getRoot() && cells[i] != last)\n\t\t\t\t{\n\t\t\t\t\tthis.executeLayout(cells[i], bubble);\n\t\t\t\t\tlast = cells[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.LAYOUT_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayout = function(cell, bubble)\n{\n\tvar layout = this.getLayout(cell, (bubble) ?\n\t\tmxEvent.BEGIN_UPDATE : mxEvent.END_UPDATE);\n\n\tif (layout != null)\n\t{\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxLayoutManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxLayoutManager = typeof mxLayoutManager !== 'undefined' ? mxLayoutManager : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneManager\n * \n * Manager for swimlanes and nested swimlanes that sets the size of newly added\n * swimlanes to that of their siblings, and propagates changes to the size of a\n * swimlane to its siblings, if <siblings> is true, and its ancestors, if\n * <bubbling> is true.\n * \n * Constructor: mxSwimlaneManager\n *\n * Constructs a new swimlane manager for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxSwimlaneManager(graph, horizontal, addEnabled, resizeEnabled)\n{\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.addEnabled = (addEnabled != null) ? addEnabled : true;\n\tthis.resizeEnabled = (resizeEnabled != null) ? resizeEnabled : true;\n\n\tthis.addHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isAddEnabled())\n\t\t{\n\t\t\tthis.cellsAdded(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isResizeEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxSwimlaneManager.prototype = new mxEventSource();\nmxSwimlaneManager.prototype.constructor = mxSwimlaneManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSwimlaneManager.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxSwimlaneManager.prototype.enabled = true;\n\n/**\n * Variable: horizontal\n * \n * Specifies the orientation of the swimlanes. Default is true.\n */\nmxSwimlaneManager.prototype.horizontal = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if newly added cells should be resized to match the size of their\n * existing siblings. Default is true.\n */\nmxSwimlaneManager.prototype.addEnabled = true;\n\n/**\n * Variable: resizeEnabled\n * \n * Specifies if resizing of swimlanes should be handled. Default is true.\n */\nmxSwimlaneManager.prototype.resizeEnabled = true;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.addHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxSwimlaneManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxSwimlaneManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxSwimlaneManager.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: setHorizontal\n * \n * Sets <horizontal>.\n */\nmxSwimlaneManager.prototype.setHorizontal = function(value)\n{\n\tthis.horizontal = value;\n};\n\n/**\n * Function: isAddEnabled\n * \n * Returns <addEnabled>.\n */\nmxSwimlaneManager.prototype.isAddEnabled = function()\n{\n\treturn this.addEnabled;\n};\n\n/**\n * Function: setAddEnabled\n * \n * Sets <addEnabled>.\n */\nmxSwimlaneManager.prototype.setAddEnabled = function(value)\n{\n\tthis.addEnabled = value;\n};\n\n/**\n * Function: isResizeEnabled\n * \n * Returns <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.isResizeEnabled = function()\n{\n\treturn this.resizeEnabled;\n};\n\n/**\n * Function: setResizeEnabled\n * \n * Sets <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.setResizeEnabled = function(value)\n{\n\tthis.resizeEnabled = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this manager operates on.\n */\nmxSwimlaneManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the manager operates on.\n */\nmxSwimlaneManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.removeListener(this.addHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.addListener(mxEvent.ADD_CELLS, this.addHandler);\n\t\tthis.graph.addListener(mxEvent.CELLS_RESIZED, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: isSwimlaneIgnored\n * \n * Returns true if the given swimlane should be ignored.\n */\nmxSwimlaneManager.prototype.isSwimlaneIgnored = function(swimlane)\n{\n\treturn !this.getGraph().isSwimlane(swimlane);\n};\n\n/**\n * Function: isCellHorizontal\n * \n * Returns true if the given cell is horizontal. If the given cell is not a\n * swimlane, then the global orientation is returned.\n */\nmxSwimlaneManager.prototype.isCellHorizontal = function(cell)\n{\n\tif (this.graph.isSwimlane(cell))\n\t{\n\t\tvar style = this.graph.getCellStyle(cell);\n\t\t\n\t\treturn mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n\t}\n\t\n\treturn !this.isHorizontal();\n};\n\n/**\n * Function: cellsAdded\n * \n * Called if any cells have been added.\n * \n * Parameters:\n * \n * cell - Array of <mxCells> that have been added.\n */\nmxSwimlaneManager.prototype.cellsAdded = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.swimlaneAdded(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swimlaneAdded\n * \n * Updates the size of the given swimlane to match that of any existing\n * siblings swimlanes.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that represents the new swimlane.\n */\nmxSwimlaneManager.prototype.swimlaneAdded = function(swimlane)\n{\n\tvar model = this.getGraph().getModel();\n\tvar parent = model.getParent(swimlane);\n\tvar childCount = model.getChildCount(parent);\n\tvar geo = null;\n\t\n\t// Finds the first valid sibling swimlane as reference\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (child != swimlane && !this.isSwimlaneIgnored(child))\n\t\t{\n\t\t\tgeo = model.getGeometry(child);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Applies the size of the refernece to the newly added swimlane\n\tif (geo != null)\n\t{\n\t\tvar parentHorizontal = (parent != null) ? this.isCellHorizontal(parent) : this.horizontal;\n\t\tthis.resizeSwimlane(swimlane, geo.width, geo.height, parentHorizontal);\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called if any cells have been resizes. Calls <swimlaneResized> for all\n * swimlanes where <isSwimlaneIgnored> returns false.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose size was changed.\n */\nmxSwimlaneManager.prototype.cellsResized = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Finds the top-level swimlanes and adds offsets\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = model.getGeometry(cells[i]);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = new mxRectangle(0, 0, geo.width, geo.height);\n\t\t\t\t\t\tvar top = cells[i];\n\t\t\t\t\t\tvar current = top;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (current != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttop = current;\n\t\t\t\t\t\t\tcurrent = model.getParent(current);\n\t\t\t\t\t\t\tvar tmp = (this.graph.isSwimlane(current)) ?\n\t\t\t\t\t\t\t\t\tthis.graph.getStartSize(current) :\n\t\t\t\t\t\t\t\t\tnew mxRectangle();\n\t\t\t\t\t\t\tsize.width += tmp.width;\n\t\t\t\t\t\t\tsize.height += tmp.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar parentHorizontal = (current != null) ? this.isCellHorizontal(current) : this.horizontal;\n\t\t\t\t\t\tthis.resizeSwimlane(top, size.width, size.height, parentHorizontal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeSwimlane\n * \n * Called from <cellsResized> for all swimlanes that are not ignored to update\n * the size of the siblings and the size of the parent swimlanes, recursively,\n * if <bubbling> is true.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose size has changed.\n */\nmxSwimlaneManager.prototype.resizeSwimlane = function(swimlane, w, h, parentHorizontal)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar horizontal = this.isCellHorizontal(swimlane);\n\t\t\n\t\tif (!this.isSwimlaneIgnored(swimlane))\n\t\t{\n\t\t\tvar geo = model.getGeometry(swimlane);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tif ((parentHorizontal && geo.height != h) || (!parentHorizontal && geo.width != w))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (parentHorizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = h;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = w;\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.setGeometry(swimlane, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = (this.graph.isSwimlane(swimlane)) ?\n\t\t\t\tthis.graph.getStartSize(swimlane) :\n\t\t\t\tnew mxRectangle();\n\t\tw -= tmp.width;\n\t\th -= tmp.height;\n\t\t\n\t\tvar childCount = model.getChildCount(swimlane);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(swimlane, i);\n\t\t\tthis.resizeSwimlane(child, w, h, horizontal);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxSwimlaneManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n\n__mxOutput.mxSwimlaneManager = typeof mxSwimlaneManager !== 'undefined' ? mxSwimlaneManager : undefined;\n\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxTemporaryCellStates\n * \n * Creates a temporary set of cell states.\n */\nfunction mxTemporaryCellStates(view, scale, cells, isCellVisibleFn, getLinkForCellState)\n{\n\tscale = (scale != null) ? scale : 1;\n\tthis.view = view;\n\t\n\t// Stores the previous state\n\tthis.oldValidateCellState = view.validateCellState;\n\tthis.oldBounds = view.getGraphBounds();\n\tthis.oldStates = view.getStates();\n\tthis.oldScale = view.getScale();\n\tthis.oldDoRedrawShape = view.graph.cellRenderer.doRedrawShape;\n\n\tvar self = this;\n\n\t// Overrides doRedrawShape and paint shape to add links on shapes\n\tif (getLinkForCellState != null)\n\t{\n\t\tview.graph.cellRenderer.doRedrawShape = function(state)\n\t\t{\n\t\t\tvar oldPaint = state.shape.paint;\n\t\t\t\n\t\t\tstate.shape.paint = function(c)\n\t\t\t{\n\t\t\t\tvar link = getLinkForCellState(state);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(link);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toldPaint.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(null);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tself.oldDoRedrawShape.apply(view.graph.cellRenderer, arguments);\n\t\t\tstate.shape.paint = oldPaint;\n\t\t};\n\t}\n\n\t// Overrides validateCellState to ignore invisible cells\n\tview.validateCellState = function(cell, resurse)\n\t{\n\t\tif (cell == null || isCellVisibleFn == null || isCellVisibleFn(cell))\n\t\t{\n\t\t\treturn self.oldValidateCellState.apply(view, arguments);\n\t\t}\n\t\t\n\t\treturn null;\n\t};\n\t\n\t// Creates space for new states\n\tview.setStates(new mxDictionary());\n\tview.setScale(scale);\n\t\n\tif (cells != null)\n\t{\n\t\tview.resetValidationState();\n\t\tvar bbox = null;\n\n\t\t// Validates the vertices and edges without adding them to\n\t\t// the model so that the original cells are not modified\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar bounds = view.getBoundingBox(view.validateCellState(view.validateCell(cells[i])));\n\t\t\t\n\t\t\tif (bbox == null)\n\t\t\t{\n\t\t\t\tbbox = bounds;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox.add(bounds);\n\t\t\t}\n\t\t}\n\n\t\tview.setGraphBounds(bbox || new mxRectangle());\n\t}\n};\n\n/**\n * Variable: view\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.view = null;\n\n/**\n * Variable: oldStates\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldStates = null;\n\n/**\n * Variable: oldBounds\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldBounds = null;\n\n/**\n * Variable: oldScale\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldScale = null;\n\n/**\n * Function: destroy\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxTemporaryCellStates.prototype.destroy = function()\n{\n\tthis.view.setScale(this.oldScale);\n\tthis.view.setStates(this.oldStates);\n\tthis.view.setGraphBounds(this.oldBounds);\n\tthis.view.validateCellState = this.oldValidateCellState;\n\tthis.view.graph.cellRenderer.doRedrawShape = this.oldDoRedrawShape;\n};\n\n__mxOutput.mxTemporaryCellStates = typeof mxTemporaryCellStates !== 'undefined' ? mxTemporaryCellStates : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxCellStatePreview\n * \n * Implements a live preview for moving cells.\n * \n * Constructor: mxCellStatePreview\n * \n * Constructs a move preview for the given graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellStatePreview(graph)\n{\n\tthis.deltas = new mxDictionary();\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.graph = null;\n\n/**\n * Variable: deltas\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.deltas = null;\n\n/**\n * Variable: count\n * \n * Contains the number of entries in the map.\n */\nmxCellStatePreview.prototype.count = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if this contains no entries.\n */\nmxCellStatePreview.prototype.isEmpty = function()\n{\n\treturn this.count == 0;\n};\n\n/**\n * Function: moveState\n */\nmxCellStatePreview.prototype.moveState = function(state, dx, dy, add, includeEdges)\n{\n\tadd = (add != null) ? add : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar delta = this.deltas.get(state.cell);\n\n\tif (delta == null)\n\t{\n\t\t// Note: Deltas stores the point and the state since the key is a string.\n\t\tdelta = {point: new mxPoint(dx, dy), state: state};\n\t\tthis.deltas.put(state.cell, delta);\n\t\tthis.count++;\n\t}\n\telse if (add)\n\t{\n\t\tdelta.point.x += dx;\n\t\tdelta.point.y += dy;\n\t}\n\telse\n\t{\n\t\tdelta.point.x = dx;\n\t\tdelta.point.y = dy;\n\t}\n\t\n\tif (includeEdges)\n\t{\n\t\tthis.addEdges(state);\n\t}\n\t\n\treturn delta.point;\n};\n\n/**\n * Function: show\n */\nmxCellStatePreview.prototype.show = function(visitor)\n{\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.translateState(delta.state, delta.point.x, delta.point.y);\n\t}));\n\t\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.revalidateState(delta.state, delta.point.x, delta.point.y, visitor);\n\t}));\n};\n\n/**\n * Function: translateState\n */\nmxCellStatePreview.prototype.translateState = function(state, dx, dy)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tif (model.isVertex(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t\tvar geo = model.getGeometry(state.cell);\n\t\t\t\n\t\t\t// Moves selection cells and non-relative vertices in\n\t\t\t// the first phase so that edge terminal points will\n\t\t\t// be updated in the second phase\n\t\t\tif ((dx != 0 || dy != 0) && geo != null && (!geo.relative || this.deltas.get(state.cell) != null))\n\t\t\t{\n\t\t\t\tstate.x += dx;\n\t\t\t\tstate.y += dy;\n\t\t\t}\n\t\t}\n\t    \n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.translateState(state.view.getState(model.getChildAt(state.cell, i)), dx, dy);\n\t    }\n\t}\n};\n\n/**\n * Function: revalidateState\n */\nmxCellStatePreview.prototype.revalidateState = function(state, dx, dy, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\t// Updates the edge terminal points and restores the\n\t\t// (relative) positions of any (relative) children\n\t\tif (model.isEdge(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t}\n\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\n\t\tvar pState = state.view.getState(model.getParent(state.cell));\n\t\t\n\t\t// Moves selection vertices which are relative\n\t\tif ((dx != 0 || dy != 0) && geo != null && geo.relative &&\n\t\t\tmodel.isVertex(state.cell) && (pState == null ||\n\t\t\tmodel.isVertex(pState.cell) || this.deltas.get(state.cell) != null))\n\t\t{\n\t\t\tstate.x += dx;\n\t\t\tstate.y += dy;\n\t\t}\n\t\t\n\t\tthis.graph.cellRenderer.redraw(state);\n\t\n\t\t// Invokes the visitor on the given state\n\t\tif (visitor != null)\n\t\t{\n\t\t\tvisitor(state);\n\t\t}\n\t\t\t\t\t\t\n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.revalidateState(this.graph.view.getState(model.getChildAt(state.cell, i)), dx, dy, visitor);\n\t    }\n\t}\n};\n\n/**\n * Function: addEdges\n */\nmxCellStatePreview.prototype.addEdges = function(state)\n{\n\tvar model = this.graph.getModel();\n\tvar edgeCount = model.getEdgeCount(state.cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar s = state.view.getState(model.getEdgeAt(state.cell, i));\n\n\t\tif (s != null)\n\t\t{\n\t\t\tthis.moveState(s, 0, 0);\n\t\t}\n\t}\n};\n\n__mxOutput.mxCellStatePreview = typeof mxCellStatePreview !== 'undefined' ? mxCellStatePreview : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnectionConstraint\n * \n * Defines an object that contains the constraints about how to connect one\n * side of an edge to its terminal.\n * \n * Constructor: mxConnectionConstraint\n * \n * Constructs a new connection constraint for the given point and boolean\n * arguments.\n * \n * Parameters:\n * \n * point - Optional <mxPoint> that specifies the fixed location of the point\n * in relative coordinates. Default is null.\n * perimeter - Optional boolean that specifies if the fixed point should be\n * projected onto the perimeter of the terminal. Default is true.\n */\nfunction mxConnectionConstraint(point, perimeter, name, dx, dy)\n{\n\tthis.point = point;\n\tthis.perimeter = (perimeter != null) ? perimeter : true;\n\tthis.name = name;\n\tthis.dx = dx? dx : 0;\n\tthis.dy = dy? dy : 0;\n};\n\n/**\n * Variable: point\n * \n * <mxPoint> that specifies the fixed location of the connection point.\n */\nmxConnectionConstraint.prototype.point = null;\n\n/**\n * Variable: perimeter\n * \n * Boolean that specifies if the point should be projected onto the perimeter\n * of the terminal.\n */\nmxConnectionConstraint.prototype.perimeter = null;\n\n/**\n * Variable: name\n * \n * Optional string that specifies the name of the constraint.\n */\nmxConnectionConstraint.prototype.name = null;\n\n/**\n * Variable: dx\n * \n * Optional float that specifies the horizontal offset of the constraint.\n */\nmxConnectionConstraint.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Optional float that specifies the vertical offset of the constraint.\n */\nmxConnectionConstraint.prototype.dy = null;\n\n\n__mxOutput.mxConnectionConstraint = typeof mxConnectionConstraint !== 'undefined' ? mxConnectionConstraint : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHandler\n * \n * Graph event handler that handles selection. Individual cells are handled\n * separately using <mxVertexHandler> or one of the edge handlers. These\n * handlers are created using <mxGraph.createHandler> in\n * <mxGraphSelectionModel.cellAdded>.\n * \n * To avoid the container to scroll a moved cell into view, set\n * <scrollAfterMove> to false.\n * \n * Constructor: mxGraphHandler\n * \n * Constructs an event handler that creates handles for the\n * selection cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphHandler(graph)\n{\n\tthis.graph = graph;\n\tthis.graph.addMouseListener(this);\n\t\n\t// Repaints the handler after autoscroll\n\tthis.panHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (!this.suspended)\n\t\t{\n\t\t\tthis.updatePreview();\n\t\t\tthis.updateHint();\n\t\t}\n\t});\n\t\n\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Handles escape keystrokes\n\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t\n\t// Updates the preview box for remote changes\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Merges multiple pending calls\n\t\tif (this.refreshThread)\n\t\t{\n\t\t\twindow.clearTimeout(this.refreshThread);\n\t\t}\n\n\t\t// Waits for the states and handlers to be updated\n\t\tthis.refreshThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.refreshThread = null;\n\t\t\t\n\t\t\tif (this.first != null && !this.suspended)\n\t\t\t{\n\t\t\t\t// Updates preview with no translate to compute bounding box\n\t\t\t\tvar dx = this.currentDx;\n\t\t\t\tvar dy = this.currentDy;\n\t\t\t\tthis.currentDx = 0;\n\t\t\t\tthis.currentDy = 0;\n\t\t\t\tthis.updatePreview();\n\t\t\t\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\t\t\t\tthis.pBounds = this.getPreviewBounds(this.cells);\n\n\t\t\t\tif (this.pBounds == null && !this.livePreviewUsed)\n\t\t\t\t{\n\t\t\t\t\tthis.reset();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Restores translate and updates preview\n\t\t\t\t\tthis.currentDx = dx;\n\t\t\t\t\tthis.currentDy = dy;\n\t\t\t\t\tthis.updatePreview();\n\t\t\t\t\tthis.updateHint();\n\n\t\t\t\t\tif (this.livePreviewUsed)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Forces update to ignore last visible state\n\t\t\t\t\t\tthis.setHandlesVisibleForCells(\n\t\t\t\t\t\t\tthis.graph.selectionCellsHandler.\n\t\t\t\t\t\t\tgetHandledSelectionCells(), false, true);\n\t\t\t\t\t\tthis.updatePreview();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}), 0);\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.addListener(mxEvent.REFRESH, this.refreshHandler);\n\t\n\tthis.keyHandler = mxUtils.bind(this, function(e)\n\t{\n\t\tif (this.graph.container != null && this.graph.container.style.visibility != 'hidden' &&\n\t\t\tthis.first != null && !this.suspended)\n\t\t{\n\t\t\tvar clone = this.graph.isCloneEvent(e) &&\n\t\t\t\tthis.graph.isCellsCloneable() &&\n\t\t\t\tthis.isCloneEnabled();\n\t\t\t\n\t\t\tif (clone != this.cloning)\n\t\t\t{\n\t\t\t\tthis.cloning = clone;\n\t\t\t\tthis.checkPreview();\n\t\t\t\tthis.updatePreview();\n\t\t\t}\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(document, 'keydown', this.keyHandler);\n\tmxEvent.addListener(document, 'keyup', this.keyHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphHandler.prototype.graph = null;\n\n/**\n * Variable: maxCells\n * \n * Defines the maximum number of cells to paint subhandles\n * for. Default is 50 for Firefox and 20 for IE. Set this\n * to 0 if you want an unlimited number of handles to be\n * displayed. This is only recommended if the number of\n * cells in the graph is limited to a small number, eg.\n * 500.\n */\nmxGraphHandler.prototype.maxCells = (mxClient.IS_IE) ? 20 : 50;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxGraphHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightEnabled\n * \n * Specifies if drop targets under the mouse should be enabled. Default is\n * true.\n */\nmxGraphHandler.prototype.highlightEnabled = true;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxGraphHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: moveEnabled\n * \n * Specifies if moving is enabled. Default is true.\n */\nmxGraphHandler.prototype.moveEnabled = true;\n\n/**\n * Variable: guidesEnabled\n * \n * Specifies if other cells should be used for snapping the right, center or\n * left side of the current selection. Default is false.\n */\nmxGraphHandler.prototype.guidesEnabled = false;\n\n/**\n * Variable: handlesVisible\n * \n * Whether the handles of the selection are currently visible.\n */\nmxGraphHandler.prototype.handlesVisible = true;\n\n/**\n * Variable: guide\n * \n * Holds the <mxGuide> instance that is used for alignment.\n */\nmxGraphHandler.prototype.guide = null;\n\n/**\n * Variable: currentDx\n * \n * Stores the x-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDx = null;\n\n/**\n * Variable: currentDy\n * \n * Stores the y-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDy = null;\n\n/**\n * Variable: updateCursor\n * \n * Specifies if a move cursor should be shown if the mouse is over a movable\n * cell. Default is true.\n */\nmxGraphHandler.prototype.updateCursor = true;\n\n/**\n * Variable: selectEnabled\n * \n * Specifies if selecting is enabled. Default is true.\n */\nmxGraphHandler.prototype.selectEnabled = true;\n\n/**\n * Variable: removeCellsFromParent\n * \n * Specifies if cells may be moved out of their parents. Default is true.\n */\nmxGraphHandler.prototype.removeCellsFromParent = true;\n\n/**\n * Variable: removeEmptyParents\n * \n * If empty parents should be removed from the model after all child cells\n * have been moved out. Default is true.\n */\nmxGraphHandler.prototype.removeEmptyParents = false;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if drop events are interpreted as new connections if no other\n * drop action is defined. Default is false.\n */\nmxGraphHandler.prototype.connectOnDrop = false;\n\n/**\n * Variable: scrollOnMove\n * \n * Specifies if the view should be scrolled so that a moved cell is\n * visible. Default is true.\n */\nmxGraphHandler.prototype.scrollOnMove = true;\n\n/**\n * Variable: minimumSize\n * \n * Specifies the minimum number of pixels for the width and height of a\n * selection border. Default is 6.\n */\nmxGraphHandler.prototype.minimumSize = 6;\n\n/**\n * Variable: previewColor\n * \n * Specifies the color of the preview shape. Default is black.\n */\nmxGraphHandler.prototype.previewColor = 'black';\n\n/**\n * Variable: htmlPreview\n * \n * Specifies if the graph container should be used for preview. If this is used\n * then drop target detection relies entirely on <mxGraph.getCellAt> because\n * the HTML preview does not \"let events through\". Default is false.\n */\nmxGraphHandler.prototype.htmlPreview = false;\n\n/**\n * Variable: shape\n * \n * Reference to the <mxShape> that represents the preview.\n */\nmxGraphHandler.prototype.shape = null;\n\n/**\n * Variable: scaleGrid\n * \n * Specifies if the grid should be scaled. Default is false.\n */\nmxGraphHandler.prototype.scaleGrid = false;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if the bounding box should allow for rotation. Default is true.\n */\nmxGraphHandler.prototype.rotationEnabled = true;\n\n/**\n * Variable: maxLivePreview\n * \n * Maximum number of cells for which live preview should be used. Default is 0\n * which means no live preview.\n */\nmxGraphHandler.prototype.maxLivePreview = 0;\n\n/**\n * Variable: allowLivePreview\n * \n * If live preview is allowed on this system. Default is true for systems with\n * SVG support.\n */\nmxGraphHandler.prototype.allowLivePreview = mxClient.IS_SVG;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxGraphHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxGraphHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isCloneEnabled\n * \n * Returns <cloneEnabled>.\n */\nmxGraphHandler.prototype.isCloneEnabled = function()\n{\n\treturn this.cloneEnabled;\n};\n\n/**\n * Function: setCloneEnabled\n * \n * Sets <cloneEnabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new clone enabled state.\n */\nmxGraphHandler.prototype.setCloneEnabled = function(value)\n{\n\tthis.cloneEnabled = value;\n};\n\n/**\n * Function: isMoveEnabled\n * \n * Returns <moveEnabled>.\n */\nmxGraphHandler.prototype.isMoveEnabled = function()\n{\n\treturn this.moveEnabled;\n};\n\n/**\n * Function: setMoveEnabled\n * \n * Sets <moveEnabled>.\n */\nmxGraphHandler.prototype.setMoveEnabled = function(value)\n{\n\tthis.moveEnabled = value;\n};\n\n/**\n * Function: isSelectEnabled\n * \n * Returns <selectEnabled>.\n */\nmxGraphHandler.prototype.isSelectEnabled = function()\n{\n\treturn this.selectEnabled;\n};\n\n/**\n * Function: setSelectEnabled\n * \n * Sets <selectEnabled>.\n */\nmxGraphHandler.prototype.setSelectEnabled = function(value)\n{\n\tthis.selectEnabled = value;\n};\n\n/**\n * Function: isRemoveCellsFromParent\n * \n * Returns <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.isRemoveCellsFromParent = function()\n{\n\treturn this.removeCellsFromParent;\n};\n\n/**\n * Function: setRemoveCellsFromParent\n * \n * Sets <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.setRemoveCellsFromParent = function(value)\n{\n\tthis.removeCellsFromParent = value;\n};\n\n/**\n * Function: isPropagateSelectionCell\n * \n * Returns true if the given cell and parent should propagate\n * selection state to the parent.\n */\nmxGraphHandler.prototype.isPropagateSelectionCell = function(cell, immediate, me)\n{\n\tvar parent = this.graph.model.getParent(cell);\n\n\tif (immediate)\n\t{\n\t\tvar geo = (this.graph.model.isEdge(cell)) ? null :\n\t\t\tthis.graph.getCellGeometry(cell);\n\t\t\n\t\treturn !this.graph.isSiblingSelected(cell) &&\n\t\t\t((geo != null && geo.relative) ||\n\t\t\t!this.graph.isSwimlane(parent));\n\t}\n\telse\n\t{\n\t\treturn (!this.graph.isToggleEvent(me.getEvent()) ||\n\t\t\t(!this.graph.isSiblingSelected(cell) &&\n\t\t\t!this.graph.isCellSelected(cell) &&\n\t\t\t(!this.graph.isSwimlane(parent)) ||\n\t\t\tthis.graph.isCellSelected(parent))) &&\n\t\t\t(this.graph.isToggleEvent(me.getEvent()) ||\n\t\t\t!this.graph.isCellSelected(parent));\n\t}\n};\n\n/**\n * Function: getInitialCellForEvent\n * \n * Hook to return initial cell for the given event. This returns\n * the topmost cell that is not a swimlane or is selected.\n */\nmxGraphHandler.prototype.getInitialCellForEvent = function(me)\n{\n\tvar state = me.getState();\n\t\n\tif ((!this.graph.isToggleEvent(me.getEvent()) || !mxEvent.isAltDown(me.getEvent())) &&\n\t\tstate != null && !this.graph.isCellSelected(state.cell))\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar next = this.graph.view.getState(model.getParent(state.cell));\n\n\t\twhile (next != null && !this.graph.isCellSelected(next.cell) &&\n\t\t\t(model.isVertex(next.cell) || model.isEdge(next.cell)) &&\n\t\t\tthis.isPropagateSelectionCell(state.cell, true, me))\n\t\t{\n\t\t\tstate = next;\n\t\t\tnext = this.graph.view.getState(this.graph.getModel().getParent(state.cell));\n\t\t}\n\t}\n\t\n\treturn (state != null) ? state.cell : null;\n};\n\n/**\n * Function: isDelayedSelection\n * \n * Returns true if the cell or one of its ancestors is selected.\n */\nmxGraphHandler.prototype.isDelayedSelection = function(cell, me)\n{\n\tif (!this.graph.isToggleEvent(me.getEvent()) || !mxEvent.isAltDown(me.getEvent()))\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\tif (this.graph.selectionCellsHandler.isHandled(cell))\n\t\t\t{\n\t\t\t\treturn this.graph.cellEditor.getEditingCell() != cell;\n\t\t\t}\n\t\t\t\n\t\t\tcell = this.graph.model.getParent(cell);\n\t\t}\n\t}\n\t\n\treturn this.graph.isToggleEvent(me.getEvent()) && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: selectDelayed\n * \n * Implements the delayed selection for the given mouse event.\n */\nmxGraphHandler.prototype.selectDelayed = function(me)\n{\n\tif (!this.graph.popupMenuHandler.isPopupTrigger(me))\n\t{\n\t\tvar cell = me.getCell();\n\t\t\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.cell;\n\t\t}\n\t\t\n\t\tthis.selectCellForEvent(cell, me);\n\t}\n};\n\n/**\n * Function: selectCellForEvent\n * \n * Selects the given cell for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.selectCellForEvent = function(cell, me)\n{\n\tvar state = this.graph.view.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tif (me.isSource(state.control))\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!this.graph.isToggleEvent(me.getEvent()) ||\n\t\t\t\t!mxEvent.isAltDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\t\n\t\t\t\twhile (this.graph.view.getState(parent) != null &&\n\t\t\t\t\t(model.isVertex(parent) || model.isEdge(parent)) &&\n\t\t\t\t\tthis.isPropagateSelectionCell(cell, false, me))\n\t\t\t\t{\n\t\t\t\t\tcell = parent;\n\t\t\t\t\tparent = model.getParent(cell);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given mouse event. NOTE: This may be used to enable click\n * events for links in labels on iOS as follows as consuming the initial\n * touchStart disables firing the subsequent click event on the link.\n * \n * <code>\n * mxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n * {\n *   var source = mxEvent.getSource(me.getEvent());\n *   \n *   if (!mxEvent.isTouchEvent(me.getEvent()) || source.nodeName != 'A')\n *   {\n *     me.consume();\n *   }\n * }\n * </code>\n */\nmxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by selecing the given cell and creating a handle for\n * it. By consuming the event all subsequent events of the gesture are\n * redirected to this handler.\n */\nmxGraphHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() != null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar cell = this.getInitialCellForEvent(me);\n\t\tthis.delayedSelection = this.isDelayedSelection(cell, me);\n\t\tthis.cell = null;\n\t\t\n\t\tif (this.isSelectEnabled() && !this.delayedSelection)\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\n\t\tif (this.isMoveEnabled())\n\t\t{\n\t\t\tvar model = this.graph.model;\n\t\t\tvar geo = model.getGeometry(cell);\n\n\t\t\tif (this.graph.isCellMovable(cell) && ((!model.isEdge(cell) || this.graph.getSelectionCount() > 1 ||\n\t\t\t\t(geo.points != null && geo.points.length > 0) || model.getTerminal(cell, true) == null ||\n\t\t\t\tmodel.getTerminal(cell, false) == null) || this.graph.allowDanglingEdges || \n\t\t\t\t(this.graph.isCloneEvent(me.getEvent()) && this.graph.isCellsCloneable())))\n\t\t\t{\n\t\t\t\tthis.start(cell, me.getX(), me.getY());\n\t\t\t}\n\t\t\telse if (this.delayedSelection)\n\t\t\t{\n\t\t\t\tthis.cell = cell;\n\t\t\t}\n\n\t\t\tthis.cellWasClicked = true;\n\t\t\tthis.consumeMouseEvent(mxEvent.MOUSE_DOWN, me);\n\t\t}\n\t}\n};\n\n/**\n * Function: getGuideStates\n * \n * Creates an array of cell states which should be used as guides.\n */\nmxGraphHandler.prototype.getGuideStates = function()\n{\n\tvar parent = this.graph.getDefaultParent();\n\tvar model = this.graph.getModel();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.graph.view.getState(cell) != null &&\n\t\t\tmodel.isVertex(cell) &&\n\t\t\tmodel.getGeometry(cell) != null &&\n\t\t\t!model.getGeometry(cell).relative;\n\t});\n\t\n\treturn this.graph.view.getCellStates(model.filterDescendants(filter, parent));\n};\n\n/**\n * Function: getCells\n * \n * Returns the cells to be modified by this handler. This implementation\n * returns all selection cells that are movable, or the given initial cell if\n * the given cell is not selected and movable. This handles the case of moving\n * unselectable or unselected cells.\n * \n * Parameters:\n * \n * initialCell - <mxCell> that triggered this handler.\n */\nmxGraphHandler.prototype.getCells = function(initialCell)\n{\n\tif (!this.delayedSelection && this.graph.isCellMovable(initialCell))\n\t{\n\t\treturn [initialCell];\n\t}\n\telse\n\t{\n\t\treturn this.graph.getMovableCells(this.graph.getSelectionCells());\n\t}\n};\n\n/**\n * Function: getPreviewBounds\n * \n * Returns the <mxRectangle> used as the preview bounds for\n * moving the given cells.\n */\nmxGraphHandler.prototype.getPreviewBounds = function(cells)\n{\n\tvar bounds = this.getBoundingBox(cells);\n\t\n\tif (bounds != null)\n\t{\n\t\t// Corrects width and height\n\t\tbounds.width = Math.max(0, bounds.width - 1);\n\t\tbounds.height = Math.max(0, bounds.height - 1);\n\t\t\n\t\tif (bounds.width < this.minimumSize)\n\t\t{\n\t\t\tvar dx = this.minimumSize - bounds.width;\n\t\t\tbounds.x -= dx / 2;\n\t\t\tbounds.width = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.x = Math.round(bounds.x);\n\t\t\tbounds.width = Math.ceil(bounds.width);\n\t\t}\n\t\t\n\t\tvar tr = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (bounds.height < this.minimumSize)\n\t\t{\n\t\t\tvar dy = this.minimumSize - bounds.height;\n\t\t\tbounds.y -= dy / 2;\n\t\t\tbounds.height = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.y = Math.round(bounds.y);\n\t\t\tbounds.height = Math.ceil(bounds.height);\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the union of the <mxCellStates> for the given array of <mxCells>.\n * For vertices, this method uses the bounding box of the corresponding shape\n * if one exists. The bounding box of the corresponding text label and all\n * controls and overlays are ignored. See also: <mxGraphView.getBounds> and\n * <mxGraph.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraphHandler.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = state;\n\t\t\t\t\t\n\t\t\t\t\tif (model.isVertex(cells[i]) && state.shape != null && state.shape.boundingBox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = state.shape.boundingBox;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createPreviewShape\n * \n * Creates the shape used to draw the preview for the given bounds.\n */\nmxGraphHandler.prototype.createPreviewShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.previewColor);\n\tshape.isDashed = true;\n\t\n\tif (this.htmlPreview)\n\t{\n\t\tshape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tshape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t// event-transparency on the background area of the rectangle since\n\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\tshape.init(this.graph.getView().getOverlayPane());\n\t\tshape.pointerEvents = false;\n\t\t\n\t\t// Workaround for artifacts on iOS\n\t\tif (mxClient.IS_IOS)\n\t\t{\n\t\t\tshape.getSvgScreenOffset = function()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxGraphHandler.prototype.start = function(cell, x, y, cells)\n{\n\tthis.cell = cell;\n\tthis.first = mxUtils.convertPoint(this.graph.container, x, y);\n\tthis.cells = (cells != null) ? cells : this.getCells(this.cell);\n\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\tthis.pBounds = this.getPreviewBounds(this.cells);\n\tthis.allCells = new mxDictionary();\n\tthis.cloning = false;\n\tthis.cellCount = 0;\n\t\n\tfor (var i = 0; i < this.cells.length; i++)\n\t{\n\t\tthis.cellCount += this.addStates(this.cells[i], this.allCells);\n\t}\n\t\n\tif (this.guidesEnabled)\n\t{\n\t\tthis.guide = new mxGuide(this.graph, this.getGuideStates());\n\t\tvar parent = this.graph.model.getParent(cell);\n\t\tvar ignore = this.graph.model.getChildCount(parent) < 2;\n\t\t\n\t\t// Uses connected states as guides\n\t\tvar connected = new mxDictionary();\n\t\tvar opps = this.graph.getOpposites(this.graph.getEdges(this.cell), this.cell);\n\t\t\n\t\tfor (var i = 0; i < opps.length; i++)\n\t\t{\n\t\t\tvar state = this.graph.view.getState(opps[i]);\n\t\t\t\n\t\t\tif (state != null && !connected.get(state))\n\t\t\t{\n\t\t\t\tconnected.put(state, true);\n\t\t\t}\n\t\t}\n\n\t\tthis.guide.isStateIgnored = mxUtils.bind(this, function(state)\n\t\t{\n\t\t\tvar p = this.graph.model.getParent(state.cell);\n\t\t\t\n\t\t\treturn state.cell != null && ((!this.cloning &&\n\t\t\t\tthis.isCellMoving(state.cell)) ||\n\t\t\t\t(state.cell != (this.target || parent) && !ignore &&\n\t\t\t\t!connected.get(state) &&\n\t\t\t\t(this.target == null || this.graph.model.getChildCount(\n\t\t\t\tthis.target) >= 2) && p != (this.target || parent)));  \n\t\t});\n\t}\n};\n\n/**\n * Function: addStates\n * \n * Adds the states for the given cell recursively to the given dictionary.\n */\nmxGraphHandler.prototype.addStates = function(cell, dict)\n{\n\tvar state = this.graph.view.getState(cell);\n\tvar count = 0;\n\t\n\tif (state != null && dict.get(cell) == null)\n\t{\n\t\tdict.put(cell, state);\n\t\tcount++;\n\t\t\n\t\tvar childCount = this.graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tcount += this.addStates(this.graph.model.getChildAt(cell, i), dict);\n\t\t}\n\t}\n\t\n\treturn count;\n};\n\n/**\n * Function: isCellMoving\n * \n * Returns true if the given cell is currently being moved.\n */\nmxGraphHandler.prototype.isCellMoving = function(cell)\n{\n\treturn this.allCells.get(cell) != null;\n};\n\n/**\n * Function: useGuidesForEvent\n * \n * Returns true if the guides should be used for the given <mxMouseEvent>.\n * This implementation returns <mxGuide.isEnabledForEvent>.\n */\nmxGraphHandler.prototype.useGuidesForEvent = function(me)\n{\n\treturn (this.guide != null) ? this.guide.isEnabledForEvent(me.getEvent()) &&\n\t\t!this.graph.isConstrainedEvent(me.getEvent()) : true;\n};\n\n\n/**\n * Function: snap\n * \n * Snaps the given vector to the grid and returns the given mxPoint instance.\n */\nmxGraphHandler.prototype.snap = function(vector)\n{\n\tvar scale = (this.scaleGrid) ? this.graph.view.scale : 1;\n\t\n\tvector.x = this.graph.snap(vector.x / scale) * scale;\n\tvector.y = this.graph.snap(vector.y / scale) * scale;\n\t\n\treturn vector;\n};\n\n/**\n * Function: getDelta\n * \n * Returns an <mxPoint> that represents the vector for moving the cells\n * for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.getDelta = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\t\n\treturn new mxPoint(point.x - this.first.x - this.graph.panDx,\n\t\tpoint.y - this.first.y - this.graph.panDy);\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxGraphHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxGraphHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled vector. Allows for half steps in the raster so\n * numbers coming in should be rounded if no half steps are allowed (ie for non\n * aligned standard moving where pixel steps should be preferred).\n */\nmxGraphHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 100) / 100;\n};\n\n/**\n * Function: isValidDropTarget\n * \n * Returns true if the given cell is a valid drop target.\n */\nmxGraphHandler.prototype.isValidDropTarget = function(target, me)\n{\n\treturn this.graph.model.getParent(this.cell) != target;\n};\n\n/**\n * Function: checkPreview\n * \n * Updates the preview if cloning state has changed.\n */\nmxGraphHandler.prototype.checkPreview = function()\n{\n\tif (this.livePreviewActive && this.cloning)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.livePreviewActive = false;\n\t}\n\telse if (this.maxLivePreview >= this.cellCount && !this.livePreviewActive && this.allowLivePreview)\n\t{\n\t\tif (!this.cloning || !this.livePreviewActive)\n\t\t{\n\t\t\tthis.livePreviewActive = true;\n\t\t\tthis.livePreviewUsed = true;\n\t\t}\n\t}\n\telse if (!this.livePreviewUsed && this.shape == null)\n\t{\n\t\tthis.shape = this.createPreviewShape(this.bounds);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting possible drop targets and updating the\n * preview.\n */\nmxGraphHandler.prototype.mouseMove = function(sender, me)\n{\n\tvar graph = this.graph;\n\n\tif (!me.isConsumed() && graph.isMouseDown && this.cell != null &&\n\t\tthis.first != null && this.bounds != null && !this.suspended)\n\t{\n\t\t// Stops moving if a multi touch event is received\n\t\tif (mxEvent.isMultiTouchEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.reset();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar delta = this.getDelta(me);\n\t\tvar tol = graph.tolerance;\n\n\t\tif (this.shape != null || this.livePreviewActive || Math.abs(delta.x) > tol || Math.abs(delta.y) > tol)\n\t\t{\n\t\t\t// Highlight is used for highlighting drop targets\n\t\t\tif (this.highlight == null)\n\t\t\t{\n\t\t\t\tthis.highlight = new mxCellHighlight(this.graph,\n\t\t\t\t\tmxConstants.DROP_TARGET_COLOR, 3);\n\t\t\t}\n\n\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\tvar gridEnabled = graph.isGridEnabledEvent(me.getEvent());\n\t\t\tvar cell = me.getCell();\n\t\t\tvar hideGuide = true;\n\t\t\tvar target = null;\n\t\t\tthis.cloning = clone;\n\t\t\t\n\t\t\tif (graph.isDropEnabled() && this.highlightEnabled)\n\t\t\t{\n\t\t\t\t// Contains a call to getCellAt to find the cell under the mouse\n\t\t\t\ttarget = graph.getDropTarget(this.cells, me.getEvent(), cell, clone);\n\t\t\t}\n\n\t\t\tvar state = graph.getView().getState(target);\n\t\t\tvar highlight = false;\n\t\t\t\n\t\t\tif (state != null && (clone || this.isValidDropTarget(target, me)))\n\t\t\t{\n\t\t\t    if (this.target != target)\n\t\t\t    {\n\t\t\t\t    this.target = target;\n\t\t\t\t    this.setHighlightColor(mxConstants.DROP_TARGET_COLOR);\n\t\t\t\t}\n\t\t\t    \n\t\t\t    highlight = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.target = null;\n\n\t\t\t\tif (this.connectOnDrop && cell != null && this.cells.length == 1 &&\n\t\t\t\t\tgraph.getModel().isVertex(cell) && graph.isCellConnectable(cell))\n\t\t\t\t{\n\t\t\t\t\tstate = graph.getView().getState(cell);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar error = graph.getEdgeValidationError(null, this.cell, cell);\n\t\t\t\t\t\tvar color = (error == null) ?\n\t\t\t\t\t\t\tmxConstants.VALID_COLOR :\n\t\t\t\t\t\t\tmxConstants.INVALID_CONNECT_TARGET_COLOR;\n\t\t\t\t\t\tthis.setHighlightColor(color);\n\t\t\t\t\t\thighlight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (state != null && highlight)\n\t\t\t{\n\t\t\t\tthis.highlight.highlight(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.highlight.hide();\n\t\t\t}\n\n\t\t\tif (this.guide != null && this.useGuidesForEvent(me))\n\t\t\t{\n\t\t\t\tdelta = this.guide.move(this.bounds, delta, gridEnabled, clone);\n\t\t\t\thideGuide = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdelta = this.graph.snapDelta(delta, this.bounds, !gridEnabled, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.guide != null && hideGuide)\n\t\t\t{\n\t\t\t\tthis.guide.hide();\n\t\t\t}\n\n\t\t\t// Constrained movement if shift key is pressed\n\t\t\tif (graph.isConstrainedEvent(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(delta.x) > Math.abs(delta.y))\n\t\t\t\t{\n\t\t\t\t\tdelta.y = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelta.x = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.checkPreview();\n\t\t\t\n\t\t\tif (this.currentDx != delta.x || this.currentDy != delta.y)\n\t\t\t{\n\t\t\t\tthis.currentDx = delta.x;\n\t\t\t\tthis.currentDy = delta.y;\n\t\t\t\tthis.updatePreview();\n\t\t\t}\n\t\t}\n\n\t\tthis.updateHint(me);\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_MOVE, me);\n\t\t\n\t\t// Cancels the bubbling of events to the container so\n\t\t// that the droptarget is not reset due to an mouseMove\n\t\t// fired on the container with no associated state.\n\t\tmxEvent.consume(me.getEvent());\n\t}\n\telse if ((this.isMoveEnabled() || this.isCloneEnabled()) && this.updateCursor && !me.isConsumed() &&\n\t\t\t(me.getState() != null || me.sourceState != null) && !graph.isMouseDown)\n\t{\n\t\tvar cursor = graph.getCursorForMouseEvent(me);\n\t\t\n\t\tif (cursor == null && graph.isEnabled() && graph.isCellMovable(me.getCell()))\n\t\t{\n\t\t\tif (graph.getModel().isEdge(me.getCell()))\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_EDGE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_VERTEX;\n\t\t\t}\n\t\t}\n\n\t\t// Sets the cursor on the original source state under the mouse\n\t\t// instead of the event source state which can be the parent\n\t\tif (cursor != null && me.sourceState != null)\n\t\t{\n\t\t\tme.sourceState.setCursor(cursor);\n\t\t}\n\t}\n};\n\n/**\n * Function: updatePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreview = function(remote)\n{\n\tif (this.livePreviewUsed && !remote)\n\t{\n\t\tif (this.cells != null)\n\t\t{\n\t\t\tthis.setHandlesVisibleForCells(\n\t\t\t\tthis.graph.selectionCellsHandler.\n\t\t\t\tgetHandledSelectionCells(), false);\n\t\t\tthis.updateLivePreview(this.currentDx, this.currentDy);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.updatePreviewShape();\n\t}\n};\n\n/**\n * Function: updatePreviewShape\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreviewShape = function()\n{\n\tif (this.shape != null && this.pBounds != null)\n\t{\n\t\tthis.shape.bounds = new mxRectangle(Math.round(this.pBounds.x + this.currentDx),\n\t\t\t\tMath.round(this.pBounds.y + this.currentDy), this.pBounds.width, this.pBounds.height);\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updateLivePreview = function(dx, dy)\n{\n\tif (!this.suspended)\n\t{\n\t\tvar states = [];\n\t\t\n\t\tif (this.allCells != null)\n\t\t{\n\t\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t\t{\n\t\t\t\tvar realState = this.graph.view.getState(state.cell);\n\t\t\t\t\n\t\t\t\t// Checks if cell was removed or replaced\n\t\t\t\tif (realState != state)\n\t\t\t\t{\n\t\t\t\t\tstate.destroy();\n\t\t\t\t\t\n\t\t\t\t\tif (realState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.allCells.put(state.cell, realState);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.allCells.remove(state.cell);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstate = realState;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\t// Saves current state\n\t\t\t\t\tvar tempState = state.clone();\n\t\t\t\t\tstates.push([state, tempState]);\n\t\t\n\t\t\t\t\t// Makes transparent for events to detect drop targets\n\t\t\t\t\tif (state.shape != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (state.shape.originalPointerEvents == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.shape.originalPointerEvents = state.shape.pointerEvents;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstate.shape.pointerEvents = false;\n\t\t\n\t\t\t\t\t\tif (state.text != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (state.text.originalPointerEvents == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.originalPointerEvents = state.text.pointerEvents;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tstate.text.pointerEvents = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\t// Temporarily changes position\n\t\t\t\t\tif (this.graph.model.isVertex(state.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.x += dx;\n\t\t\t\t\t\tstate.y += dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Draws the live preview\n\t\t\t\t\t\tif (!this.cloning)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Forces redraw of connected edges after all states\n\t\t\t\t\t\t\t// have been updated but avoids update of state\n\t\t\t\t\t\t\tstate.view.invalidate(state.cell);\n\t\t\t\t\t\t\tstate.invalid = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Hides folding icon\n\t\t\t\t\t\t\tif (state.control != null && state.control.node != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.control.node.style.visibility = 'hidden';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Clone live preview may use text bounds\n\t\t\t\t\t\telse if (state.text != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.text.updateBoundingBox();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Fixes preview box for edge labels\n\t\t\t\t\t\t\tif (state.text.boundingBox != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.boundingBox.x += dx;\n\t\t\t\t\t\t\t\tstate.text.boundingBox.y += dy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (state.text.unrotatedBoundingBox != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.text.unrotatedBoundingBox.x += dx;\n\t\t\t\t\t\t\t\tstate.text.unrotatedBoundingBox.y += dy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Resets the handler if everything was removed\n\t\tif (states.length == 0)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Redraws connected edges\n\t\t\tvar s = this.graph.view.scale;\n\t\t\t\n\t\t\tfor (var i = 0; i < states.length; i++)\n\t\t\t{\n\t\t\t\tvar state = states[i][0];\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isEdge(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\t\t\tvar points = [];\n\t\t\t\t\t\n\t\t\t\t\tif (geometry != null && geometry.points != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var j = 0; j < geometry.points.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (geometry.points[j] != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.push(new mxPoint(\n\t\t\t\t\t\t\t\t\tgeometry.points[j].x + dx / s,\n\t\t\t\t\t\t\t\t\tgeometry.points[j].y + dy / s));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar source = state.visibleSourceState;\n\t\t\t\t\tvar target = state.visibleTargetState;\n\t\t\t\t\tvar pts = states[i][1].absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\tif (source == null || !this.isCellMoving(source.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt0 = pts[0];\n\t\t\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(pt0.x + dx, pt0.y + dy), true);\n\t\t\t\t\t\tsource = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.updateFixedTerminalPoint(state, source, true,\n\t\t\t\t\t\t\tthis.graph.getConnectionConstraint(state, source, true));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (target == null || !this.isCellMoving(target.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ptn = pts[pts.length - 1];\n\t\t\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(ptn.x + dx, ptn.y + dy), false);\n\t\t\t\t\t\ttarget = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.updateFixedTerminalPoint(state, target, false,\n\t\t\t\t\t\t\tthis.graph.getConnectionConstraint(state, target, false));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tstate.view.updatePoints(state, points, source, target);\n\t\t\t\t\tstate.view.updateFloatingTerminalPoints(state, source, target);\n\t\t\t\t\tstate.view.updateEdgeLabelOffset(state);\n\t\t\t\t\tstate.invalid = false;\n\t\n\t\t\t\t\t// Draws the live preview but avoids update of state\n\t\t\t\t\tif (!this.cloning)\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tthis.graph.view.validate();\n\t\t\tthis.redrawHandles(states);\n\t\t\tthis.resetPreviewStates(states);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the preview shape for the given states array.\n */\nmxGraphHandler.prototype.redrawHandles = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tvar handler = this.graph.selectionCellsHandler.getHandler(states[i][0].cell);\n\t\t\n\t\tif (handler != null)\n\t\t{\n\t\t\thandler.redraw(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetPreviewStates\n * \n * Resets the given preview states array.\n */\nmxGraphHandler.prototype.resetPreviewStates = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tstates[i][0].setState(states[i][1]);\n\t}\n};\n\n/**\n * Function: suspend\n * \n * Suspends the livew preview.\n */\nmxGraphHandler.prototype.suspend = function()\n{\n\tif (!this.suspended)\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.updateLivePreview(0, 0);\n\t\t}\n\t\t\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.node.style.visibility = 'hidden';\n\t\t} \n\t\n\t\tif (this.guide != null)\n\t\t{\n\t\t\tthis.guide.setVisible(false);\n\t\t}\n\t\t\n\t\tthis.suspended = true;\n\t}\n};\n\n/**\n * Function: resume\n * \n * Suspends the livew preview.\n */\nmxGraphHandler.prototype.resume = function()\n{\n\tif (this.suspended)\n\t{\n\t\tthis.suspended = null;\n\t\t\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.livePreviewActive = true;\n\t\t}\n\t\t\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.node.style.visibility = 'visible';\n\t\t}\n\t\t\n\t\tif (this.guide != null)\n\t\t{\n\t\t\tthis.guide.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetLivePreview\n * \n * Resets the livew preview.\n */\nmxGraphHandler.prototype.resetLivePreview = function()\n{\n\tif (this.allCells != null)\n\t{\n\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t{\n\t\t\t// Restores event handling\n\t\t\tif (state.shape != null && state.shape.originalPointerEvents != null)\n\t\t\t{\n\t\t\t\tstate.shape.pointerEvents = state.shape.originalPointerEvents;\n\t\t\t\tstate.shape.originalPointerEvents = null;\n\t\t\t\t\n\t\t\t\t// Forces repaint even if not moved to update pointer events\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t\t\n\t\t\t\tif (state.text != null)\n\t\t\t\t{\n\t\t\t\t\tstate.text.pointerEvents = state.text.originalPointerEvents;\n\t\t\t\t\tstate.text.originalPointerEvents = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Shows folding icon\n\t\t\tif (state.control != null && state.control.node != null &&\n\t\t\t\tstate.control.node.style.visibility == 'hidden')\n\t\t\t{\n\t\t\t\tstate.control.node.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\t// Fixes preview box for edge labels\n\t\t\tif (!this.cloning)\n\t\t\t{\n\t\t\t\tif (state.text != null)\n\t\t\t\t{\n\t\t\t\t\tstate.text.updateBoundingBox();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Forces repaint of connected edges\n\t\t\tstate.view.invalidate(state.cell);\n\t\t}));\n\n\t\t// Repaints all invalid states\n\t\tthis.graph.view.validate();\n\t}\n};\n\n/**\n * Function: setHandlesVisibleForCells\n * \n * Sets wether the handles attached to the given cells are visible.\n * \n * Parameters:\n * \n * cells - Array of <mxCells>.\n * visible - Boolean that specifies if the handles should be visible.\n * force - Forces an update of the handler regardless of the last used value.\n */\nmxGraphHandler.prototype.setHandlesVisibleForCells = function(cells, visible, force)\n{\n\tif (force || this.handlesVisible != visible)\n\t{\n\t\tthis.handlesVisible = visible;\n\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(cells[i]);\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\thandler.setHandlesVisible(visible);\n\t\t\t\t\n\t\t\t\tif (visible)\n\t\t\t\t{\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxGraphHandler.prototype.setHighlightColor = function(color)\n{\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.setHighlightColor(color);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the selection cells.\n */\nmxGraphHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed())\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.resetLivePreview();\n\t\t}\n\t\t\n\t\tif (this.cell != null && this.first != null && (this.shape != null || this.livePreviewUsed) &&\n\t\t\tthis.currentDx != null && this.currentDy != null)\n\t\t{\n\t\t\tvar graph = this.graph;\n\t\t\tvar cell = me.getCell();\n\t\t\t\n\t\t\tif (this.connectOnDrop && this.target == null && cell != null && graph.getModel().isVertex(cell) &&\n\t\t\t\tgraph.isCellConnectable(cell) && graph.isEdgeValid(null, this.cell, cell))\n\t\t\t{\n\t\t\t\tgraph.connectionHandler.connect(this.cell, cell, me.getEvent());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\t\tvar scale = graph.getView().scale;\n\t\t\t\tvar dx = this.roundLength(this.currentDx / scale);\n\t\t\t\tvar dy = this.roundLength(this.currentDy / scale);\n\t\t\t\tvar target = this.target;\n\t\t\t\t\n\t\t\t\tif (graph.isSplitEnabled() && graph.isSplitTarget(target, this.cells, me.getEvent()))\n\t\t\t\t{\n\t\t\t\t\tgraph.splitEdge(target, this.cells, null, dx, dy,\n\t\t\t\t\t\tme.getGraphX(), me.getGraphY());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.moveCells(this.cells, dx, dy, clone, this.target, me.getEvent());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSelectEnabled() && this.delayedSelection && this.cell != null)\n\t\t{\n\t\t\tthis.selectDelayed(me);\n\t\t}\n\t}\n\n\t// Consumes the event if a cell was initially clicked\n\tif (this.cellWasClicked)\n\t{\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_UP, me);\n\t}\n\n\tthis.reset();\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.reset = function()\n{\n\tif (this.livePreviewUsed)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.setHandlesVisibleForCells(\n\t\t\tthis.graph.selectionCellsHandler.\n\t\t\tgetHandledSelectionCells(), true);\n\t}\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n\n\tthis.delayedSelection = false;\n\tthis.livePreviewActive = null;\n\tthis.livePreviewUsed = null;\n\tthis.cellWasClicked = false;\n\tthis.suspended = null;\n\tthis.currentDx = null;\n\tthis.currentDy = null;\n\tthis.cellCount = null;\n\tthis.cloning = false;\n\tthis.allCells = null;\n\tthis.pBounds = null;\n\tthis.guides = null;\n\tthis.target = null;\n\tthis.first = null;\n\tthis.cells = null;\n\tthis.cell = null;\n};\n\n/**\n * Function: shouldRemoveCellsFromParent\n * \n * Returns true if the given cells should be removed from the parent for the specified\n * mousereleased event.\n */\nmxGraphHandler.prototype.shouldRemoveCellsFromParent = function(parent, cells, evt)\n{\n\tif (this.graph.getModel().isVertex(parent))\n\t{\n\t\tvar pState = this.graph.getView().getState(parent);\n\t\t\n\t\tif (pState != null)\n\t\t{\n\t\t\tvar pt = mxUtils.convertPoint(this.graph.container,\n\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(pState.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, cx);\n\t\t\t}\n\t\t\n\t\t\treturn !mxUtils.contains(pState, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: moveCells\n * \n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.moveCells = function(cells, dx, dy, clone, target, evt)\n{\n\tif (clone)\n\t{\n\t\tcells = this.graph.getCloneableCells(cells);\n\t}\n\t\n\t// Removes cells from parent\n\tvar parent = this.graph.getModel().getParent(this.cell);\n\t\n\tif (target == null && this.isRemoveCellsFromParent() &&\n\t\tthis.shouldRemoveCellsFromParent(parent, cells, evt))\n\t{\n\t\ttarget = this.graph.getDefaultParent();\n\t}\n\t\n\t// Cloning into locked cells is not allowed\n\tclone = clone && !this.graph.isCellLocked(target || this.graph.getDefaultParent());\n\n\tthis.graph.getModel().beginUpdate();\n\ttry\n\t{\n\t\tvar parents = [];\n\t\t\n\t\t// Removes parent if all child cells are removed\n\t\tif (!clone && target != null && this.removeEmptyParents)\n\t\t{\n\t\t\t// Collects all non-selected parents\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Recurse up the cell hierarchy\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar par = this.graph.model.getParent(cells[i]);\n\n\t\t\t\tif (par != null && !dict.get(par))\n\t\t\t\t{\n\t\t\t\t\tdict.put(par, true);\n\t\t\t\t\tparents.push(par);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Passes all selected cells in order to correctly clone or move into\n\t\t// the target cell. The method checks for each cell if its movable.\n\t\tcells = this.graph.moveCells(cells, dx, dy, clone, target, evt);\n\n\t\t// Removes parent if all child cells are removed\n\t\tvar temp = [];\n\t\t\n\t\tfor (var i = 0; i < parents.length; i++)\n\t\t{\n\t\t\tif (this.shouldRemoveParent(parents[i]))\n\t\t\t{\n\t\t\t\ttemp.push(parents[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.graph.removeCells(temp, false);\n\t}\n\tfinally\n\t{\n\t\tthis.graph.getModel().endUpdate();\n\t}\n\n\t// Selects the new cells if cells have been cloned\n\tif (clone)\n\t{\n\t\tthis.graph.setSelectionCells(cells);\n\t}\n\n\tif (this.isSelectEnabled() && this.scrollOnMove)\n\t{\n\t\tthis.graph.scrollCellToVisible(cells[0]);\n\t}\n};\n\n/**\n * Function: shouldRemoveParent\n * \n * Returns true if the given parent should be removed after removal of child cells.\n */\nmxGraphHandler.prototype.shouldRemoveParent = function(parent)\n{\n\tvar state = this.graph.view.getState(parent);\n\t\n\treturn state != null && (this.graph.model.isEdge(state.cell) || this.graph.model.isVertex(state.cell)) &&\n\t\tthis.graph.isCellDeletable(state.cell) && this.graph.model.getChildCount(state.cell) == 0 &&\n\t\tthis.graph.isTransparentState(state);\n};\n\n/**\n * Function: destroyShapes\n * \n * Destroy the preview and highlight shapes.\n */\nmxGraphHandler.prototype.destroyShapes = function()\n{\n\t// Destroys the preview dashed rectangle\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.guide != null)\n\t{\n\t\tthis.guide.destroy();\n\t\tthis.guide = null;\n\t}\n\t\n\t// Destroys the drop target highlight\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.destroy();\n\t\tthis.highlight = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxGraphHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.panHandler);\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n\t\n\tmxEvent.removeListener(document, 'keydown', this.keyHandler);\n\tmxEvent.removeListener(document, 'keyup', this.keyHandler);\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n};\n\n__mxOutput.mxGraphHandler = typeof mxGraphHandler !== 'undefined' ? mxGraphHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningHandler\n * \n * Event handler that pans and creates popupmenus. To use the left\n * mousebutton for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>. This handler is built-into\n * <mxGraph.panningHandler> and enabled using <mxGraph.setPanning>.\n * \n * Constructor: mxPanningHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>\n * and pans the graph.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n */\nfunction mxPanningHandler(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force panning event\n\t\tthis.forcePanningHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForcePanningEvent(me))\n\t\t\t{\n\t\t\t\tthis.start(me);\n\t\t\t\tthis.active = true;\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n\t\t\n\t\t// Handles pinch gestures\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.isPinchEnabled())\n\t\t\t{\n\t\t\t\tvar evt = eo.getProperty('event');\n\t\t\t\t\n\t\t\t\tif (!mxEvent.isConsumed(evt) && evt.type == 'gesturestart')\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\t\t// Forces start of panning when pinch gesture starts\n\t\t\t\t\tif (!this.active && this.mouseDownEvent != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.start(this.mouseDownEvent);\n\t\t\t\t\t\tthis.mouseDownEvent = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (evt.type == 'gestureend' && this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.zoomGraph(evt);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.reset();\n\t    \t}\n\t\t});\n\t\t\n\t\t// Stops scrolling on every mouseup anywhere in the document\n\t\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPanningHandler.prototype = new mxEventSource();\nmxPanningHandler.prototype.constructor = mxPanningHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPanningHandler.prototype.graph = null;\n\n/**\n * Variable: useLeftButtonForPanning\n * \n * Specifies if panning should be active for the left mouse button.\n * Setting this to true may conflict with <mxRubberband>. Default is false.\n */\nmxPanningHandler.prototype.useLeftButtonForPanning = false;\n\n/**\n * Variable: usePopupTrigger\n * \n * Specifies if <mxEvent.isPopupTrigger> should also be used for panning.\n */\nmxPanningHandler.prototype.usePopupTrigger = true;\n\n/**\n * Variable: ignoreCell\n * \n * Specifies if panning should be active even if there is a cell under the\n * mousepointer. Default is false.\n */\nmxPanningHandler.prototype.ignoreCell = false;\n\n/**\n * Variable: previewEnabled\n * \n * Specifies if the panning should be previewed. Default is true.\n */\nmxPanningHandler.prototype.previewEnabled = true;\n\n/**\n * Variable: useGrid\n * \n * Specifies if the panning steps should be aligned to the grid size.\n * Default is false.\n */\nmxPanningHandler.prototype.useGrid = false;\n\n/**\n * Variable: panningEnabled\n * \n * Specifies if panning should be enabled. Default is true.\n */\nmxPanningHandler.prototype.panningEnabled = true;\n\n/**\n * Variable: pinchEnabled\n * \n * Specifies if pinch gestures should be handled as zoom. Default is true.\n */\nmxPanningHandler.prototype.pinchEnabled = true;\n\n/**\n * Variable: maxScale\n * \n * Specifies the maximum scale. Default is 8.\n */\nmxPanningHandler.prototype.maxScale = 8;\n\n/**\n * Variable: minScale\n * \n * Specifies the minimum scale. Default is 0.01.\n */\nmxPanningHandler.prototype.minScale = 0.01;\n\n/**\n * Variable: dx\n * \n * Holds the current horizontal offset.\n */\nmxPanningHandler.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Holds the current vertical offset.\n */\nmxPanningHandler.prototype.dy = null;\n\n/**\n * Variable: startX\n * \n * Holds the x-coordinate of the start point.\n */\nmxPanningHandler.prototype.startX = 0;\n\n/**\n * Variable: startY\n * \n * Holds the y-coordinate of the start point.\n */\nmxPanningHandler.prototype.startY = 0;\n\n/**\n * Function: isActive\n * \n * Returns true if the handler is currently active.\n */\nmxPanningHandler.prototype.isActive = function()\n{\n\treturn this.active || this.initialScale != null;\n};\n\n/**\n * Function: isPanningEnabled\n * \n * Returns <panningEnabled>.\n */\nmxPanningHandler.prototype.isPanningEnabled = function()\n{\n\treturn this.panningEnabled;\n};\n\n/**\n * Function: setPanningEnabled\n * \n * Sets <panningEnabled>.\n */\nmxPanningHandler.prototype.setPanningEnabled = function(value)\n{\n\tthis.panningEnabled = value;\n};\n\n/**\n * Function: isPinchEnabled\n * \n * Returns <pinchEnabled>.\n */\nmxPanningHandler.prototype.isPinchEnabled = function()\n{\n\treturn this.pinchEnabled;\n};\n\n/**\n * Function: setPinchEnabled\n * \n * Sets <pinchEnabled>.\n */\nmxPanningHandler.prototype.setPinchEnabled = function(value)\n{\n\tthis.pinchEnabled = value;\n};\n\n/**\n * Function: isPanningTrigger\n * \n * Returns true if the given event is a panning trigger for the optional\n * given cell. This returns true if control-shift is pressed or if\n * <usePopupTrigger> is true and the event is a popup trigger.\n */\nmxPanningHandler.prototype.isPanningTrigger = function(me)\n{\n\tvar evt = me.getEvent();\n\t\n\treturn (this.useLeftButtonForPanning && me.getState() == null &&\n\t\t\tmxEvent.isLeftMouseButton(evt)) || (mxEvent.isControlDown(evt) &&\n\t\t\tmxEvent.isShiftDown(evt)) || (this.usePopupTrigger && mxEvent.isPopupTrigger(evt));\n};\n\n/**\n * Function: isForcePanningEvent\n * \n * Returns true if the given <mxMouseEvent> should start panning. This\n * implementation always returns true if <ignoreCell> is true or for\n * multi touch events.\n */\nmxPanningHandler.prototype.isForcePanningEvent = function(me)\n{\n\treturn this.ignoreCell || mxEvent.isMultiTouchEvent(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPanningHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownEvent = me;\n\t\n\tif (!me.isConsumed() && this.isPanningEnabled() && !this.active && this.isPanningTrigger(me))\n\t{\n\t\tthis.start(me);\n\t\tthis.consumePanningTrigger(me);\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts panning at the given event.\n */\nmxPanningHandler.prototype.start = function(me)\n{\n\tthis.dx0 = -this.graph.container.scrollLeft;\n\tthis.dy0 = -this.graph.container.scrollTop;\n\n\t// Stores the location of the trigger event\n\tthis.startX = me.getX();\n\tthis.startY = me.getY();\n\tthis.dx = null;\n\tthis.dy = null;\n\t\n\tthis.panningTrigger = true;\n};\n\n/**\n * Function: consumePanningTrigger\n * \n * Consumes the given <mxMouseEvent> if it was a panning trigger in\n * <mouseDown>. The default is to invoke <mxMouseEvent.consume>. Note that this\n * will block any further event processing. If you haven't disabled built-in\n * context menus and require immediate selection of the cell on mouseDown in\n * Safari and/or on the Mac, then use the following code:\n * \n * (code)\n * mxPanningHandler.prototype.consumePanningTrigger = function(me)\n * {\n *   if (me.evt.preventDefault)\n *   {\n *     me.evt.preventDefault();\n *   }\n *   \n *   // Stops event processing in IE\n *   me.evt.returnValue = false;\n *   \n *   // Sets local consumed state\n *   if (!mxClient.IS_SF && !mxClient.IS_MAC)\n *   {\n *     me.consumed = true;\n *   }\n * };\n * (end)\n */\nmxPanningHandler.prototype.consumePanningTrigger = function(me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPanningHandler.prototype.mouseMove = function(sender, me)\n{\n\tthis.dx = me.getX() - this.startX;\n\tthis.dy = me.getY() - this.startY;\n\t\n\tif (this.active)\n\t{\n\t\tif (this.previewEnabled)\n\t\t{\n\t\t\t// Applies the grid to the panning steps\n\t\t\tif (this.useGrid)\n\t\t\t{\n\t\t\t\tthis.dx = this.graph.snap(this.dx);\n\t\t\t\tthis.dy = this.graph.snap(this.dy);\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN, 'event', me));\n\t}\n\telse if (this.panningTrigger)\n\t{\n\t\tvar tmp = this.active;\n\n\t\t// Panning is activated only if the mouse is moved\n\t\t// beyond the graph tolerance\n\t\tthis.active = Math.abs(this.dx) > this.graph.tolerance || Math.abs(this.dy) > this.graph.tolerance;\n\n\t\tif (!tmp && this.active)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t}\n\t}\n\t\n\tif (this.active || this.panningTrigger)\n\t{\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tif (this.dx != null && this.dy != null)\n\t\t{\n\t\t\t// Ignores if scrollbars have been used for panning\n\t\t\tif (!this.graph.useScrollbarsForPanning || !mxUtils.hasScrollbars(this.graph.container))\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar t = this.graph.getView().translate;\n\t\t\t\tthis.graph.panGraph(0, 0);\n\t\t\t\tthis.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n\t\t\t}\n\t\t\t\n\t\t\tme.consume();\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_END, 'event', me));\n\t}\n\t\n\tthis.reset();\n};\n\n/**\n * Function: zoomGraph\n * \n * Zooms the graph to the given value and consumed the event if needed.\n */\nmxPanningHandler.prototype.zoomGraph = function(evt)\n{\n\tvar value = Math.round(this.initialScale * evt.scale * 100) / 100;\n\t\n\tif (this.minScale != null)\n\t{\n\t\tvalue = Math.max(this.minScale, value);\n\t}\n\t\n\tif (this.maxScale != null)\n\t{\n\t\tvalue = Math.min(this.maxScale, value);\n\t}\n\n\tif (this.graph.view.scale != value)\n\t{\n\t\tthis.graph.zoomTo(value);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxPanningHandler.prototype.reset = function()\n{\n\tthis.panningTrigger = false;\n\tthis.mouseDownEvent = null;\n\tthis.active = false;\n\tthis.dx = null;\n\tthis.dy = null;\n};\n\n/**\n * Function: panGraph\n * \n * Pans <graph> by the given amount.\n */\nmxPanningHandler.prototype.panGraph = function(dx, dy)\n{\n\tthis.graph.getView().setTranslate(dx, dy);\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPanningHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.forcePanningHandler);\n\tthis.graph.removeListener(this.gestureHandler);\n\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n};\n\n__mxOutput.mxPanningHandler = typeof mxPanningHandler !== 'undefined' ? mxPanningHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenuHandler\n * \n * Event handler that creates popupmenus.\n * \n * Constructor: mxPopupMenuHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>.\n */\nfunction mxPopupMenuHandler(graph, factoryMethod)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.graph.addMouseListener(this);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxPopupMenu.\n */\nmxPopupMenuHandler.prototype = new mxPopupMenu();\nmxPopupMenuHandler.prototype.constructor = mxPopupMenuHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPopupMenuHandler.prototype.graph = null;\n\n/**\n * Variable: selectOnPopup\n * \n * Specifies if cells should be selected if a popupmenu is displayed for\n * them. Default is true.\n */\nmxPopupMenuHandler.prototype.selectOnPopup = true;\n\n/**\n * Variable: clearSelectionOnBackground\n * \n * Specifies if cells should be deselected if a popupmenu is displayed for\n * the diagram background. Default is true.\n */\nmxPopupMenuHandler.prototype.clearSelectionOnBackground = true;\n\n/**\n * Variable: triggerX\n * \n * X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerX = null;\n\n/**\n * Variable: triggerY\n * \n * Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerY = null;\n\n/**\n * Variable: screenX\n * \n * Screen X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenX = null;\n\n/**\n * Variable: screenY\n * \n * Screen Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenY = null;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenuHandler.prototype.init = function()\n{\n\t// Supercall\n\tmxPopupMenu.prototype.init.apply(this);\n\n\t// Hides the tooltip if the mouse is over\n\t// the context menu\n\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.tooltipHandler.hide();\n\t}));\n};\n\n/**\n * Function: isSelectOnPopup\n * \n * Hook for returning if a cell should be selected for a given <mxMouseEvent>.\n * This implementation returns <selectOnPopup>.\n */\nmxPopupMenuHandler.prototype.isSelectOnPopup = function(me)\n{\n\treturn this.selectOnPopup;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPopupMenuHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.isEnabled() && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\t// Hides the popupmenu if is is being displayed\n\t\tthis.hideMenu();\n\t\tthis.triggerX = me.getGraphX();\n\t\tthis.triggerY = me.getGraphY();\n\t\tthis.screenX = mxEvent.getMainEvent(me.getEvent()).screenX;\n\t\tthis.screenY = mxEvent.getMainEvent(me.getEvent()).screenY;\n\t\tthis.popupTrigger = this.isPopupTrigger(me);\n\t\tthis.inTolerance = true;\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPopupMenuHandler.prototype.mouseMove = function(sender, me)\n{\n\t// Popup trigger may change on mouseUp so ignore it\n\tif (this.inTolerance && this.screenX != null && this.screenY != null)\n\t{\n\t\tif (Math.abs(mxEvent.getMainEvent(me.getEvent()).screenX - this.screenX) > this.graph.tolerance ||\n\t\t\tMath.abs(mxEvent.getMainEvent(me.getEvent()).screenY - this.screenY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPopupMenuHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.popupTrigger && this.inTolerance && this.triggerX != null && this.triggerY != null)\n\t{\n\t\tvar cell = this.getCellForPopupEvent(me);\n\n\t\t// Selects the cell for which the context menu is being displayed\n\t\tif (this.graph.isEnabled() && this.isSelectOnPopup(me) &&\n\t\t\tcell != null && !this.graph.isCellSelected(cell))\n\t\t{\n\t\t\tthis.graph.setSelectionCell(cell);\n\t\t}\n\t\telse if (this.clearSelectionOnBackground && cell == null)\n\t\t{\n\t\t\tthis.graph.clearSelection();\n\t\t}\n\t\t\n\t\t// Hides the tooltip if there is one\n\t\tthis.graph.tooltipHandler.hide();\n\n\t\t// Menu is shifted by 1 pixel so that the mouse up event\n\t\t// is routed via the underlying shape instead of the DIV\n\t\tvar origin = mxUtils.getScrollOrigin();\n\t\tthis.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());\n\t\tme.consume();\n\t}\n\t\n\tthis.popupTrigger = false;\n\tthis.inTolerance = false;\n};\n\n/**\n * Function: getCellForPopupEvent\n * \n * Hook to return the cell for the mouse up popup trigger handling.\n */\nmxPopupMenuHandler.prototype.getCellForPopupEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenuHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.gestureHandler);\n\t\n\t// Supercall\n\tmxPopupMenu.prototype.destroy.apply(this);\n};\n\n__mxOutput.mxPopupMenuHandler = typeof mxPopupMenuHandler !== 'undefined' ? mxPopupMenuHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellMarker\n * \n * A helper class to process mouse locations and highlight cells.\n * \n * Helper class to highlight cells. To add a cell marker to an existing graph\n * for highlighting all cells, the following code is used:\n * \n * (code)\n * var marker = new mxCellMarker(graph);\n * graph.addMouseListener({\n *   mouseDown: function() {},\n *   mouseMove: function(sender, me)\n *   {\n *     marker.process(me);\n *   },\n *   mouseUp: function() {}\n * });\n * (end)\n *\n * Event: mxEvent.MARK\n * \n * Fires after a cell has been marked or unmarked. The <code>state</code>\n * property contains the marked <mxCellState> or null if no state is marked.\n * \n * Constructor: mxCellMarker\n * \n * Constructs a new cell marker.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * validColor - Optional marker color for valid states. Default is\n * <mxConstants.DEFAULT_VALID_COLOR>.\n * invalidColor - Optional marker color for invalid states. Default is\n * <mxConstants.DEFAULT_INVALID_COLOR>.\n * hotspot - Portion of the width and hight where a state intersects a\n * given coordinate pair. A value of 0 means always highlight. Default is\n * <mxConstants.DEFAULT_HOTSPOT>.\n */\nfunction mxCellMarker(graph, validColor, invalidColor, hotspot)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.validColor = (validColor != null) ? validColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.invalidColor = (invalidColor != null) ? invalidColor : mxConstants.DEFAULT_INVALID_COLOR;\n\t\tthis.hotspot = (hotspot != null) ? hotspot : mxConstants.DEFAULT_HOTSPOT;\n\t\t\n\t\tthis.highlight = new mxCellHighlight(graph);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxCellMarker, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellMarker.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if the marker is enabled. Default is true.\n */\nmxCellMarker.prototype.enabled = true;\n\n/**\n * Variable: hotspot\n * \n * Specifies the portion of the width and height that should trigger\n * a highlight. The area around the center of the cell to be marked is used\n * as the hotspot. Possible values are between 0 and 1. Default is\n * mxConstants.DEFAULT_HOTSPOT.\n */\nmxCellMarker.prototype.hotspot = mxConstants.DEFAULT_HOTSPOT; \n\n/**\n * Variable: hotspotEnabled\n * \n * Specifies if the hotspot is enabled. Default is false.\n */\nmxCellMarker.prototype.hotspotEnabled = false;\n\n/**\n * Variable: validColor\n * \n * Holds the valid marker color.\n */\nmxCellMarker.prototype.validColor = null;\n\n/**\n * Variable: invalidColor\n * \n * Holds the invalid marker color.\n */\nmxCellMarker.prototype.invalidColor = null;\n\n/**\n * Variable: currentColor\n * \n * Holds the current marker color.\n */\nmxCellMarker.prototype.currentColor = null;\n\n/**\n * Variable: validState\n * \n * Holds the marked <mxCellState> if it is valid.\n */\nmxCellMarker.prototype.validState = null; \n\n/**\n * Variable: markedState\n * \n * Holds the marked <mxCellState>.\n */\nmxCellMarker.prototype.markedState = null;\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxCellMarker.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxCellMarker.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setHotspot\n * \n * Sets the <hotspot>.\n */\nmxCellMarker.prototype.setHotspot = function(hotspot)\n{\n\tthis.hotspot = hotspot;\n};\n\n/**\n * Function: getHotspot\n * \n * Returns the <hotspot>.\n */\nmxCellMarker.prototype.getHotspot = function()\n{\n\treturn this.hotspot;\n};\n\n/**\n * Function: setHotspotEnabled\n * \n * Specifies whether the hotspot should be used in <intersects>.\n */\nmxCellMarker.prototype.setHotspotEnabled = function(enabled)\n{\n\tthis.hotspotEnabled = enabled;\n};\n\n/**\n * Function: isHotspotEnabled\n * \n * Returns true if hotspot is used in <intersects>.\n */\nmxCellMarker.prototype.isHotspotEnabled = function()\n{\n\treturn this.hotspotEnabled;\n};\n\n/**\n * Function: hasValidState\n * \n * Returns true if <validState> is not null.\n */\nmxCellMarker.prototype.hasValidState = function()\n{\n\treturn this.validState != null;\n};\n\n/**\n * Function: getValidState\n * \n * Returns the <validState>.\n */\nmxCellMarker.prototype.getValidState = function()\n{\n\treturn this.validState;\n};\n\n/**\n * Function: getMarkedState\n * \n * Returns the <markedState>.\n */\nmxCellMarker.prototype.getMarkedState = function()\n{\n\treturn this.markedState;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the cell marker.\n */\nmxCellMarker.prototype.reset = function()\n{\n\tthis.validState = null;\n\t\n\tif (this.markedState != null)\n\t{\n\t\tthis.markedState = null;\n\t\tthis.unmark();\n\t}\n};\n\n/**\n * Function: process\n * \n * Processes the given event and cell and marks the state returned by\n * <getState> with the color returned by <getMarkerColor>. If the\n * markerColor is not null, then the state is stored in <markedState>. If\n * <isValidState> returns true, then the state is stored in <validState>\n * regardless of the marker color. The state is returned regardless of the\n * marker color and valid state. \n */\nmxCellMarker.prototype.process = function(me)\n{\n\tvar state = null;\n\t\n\tif (this.isEnabled())\n\t{\n\t\tstate = this.getState(me);\n\t\tthis.setCurrentState(state, me);\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: setCurrentState\n * \n * Sets and marks the current valid state.\n */\nmxCellMarker.prototype.setCurrentState = function(state, me, color)\n{\n\tvar isValid = (state != null) ? this.isValidState(state) : false;\n\tcolor = (color != null) ? color : this.getMarkerColor(me.getEvent(), state, isValid);\n\t\n\tif (isValid)\n\t{\n\t\tthis.validState = state;\n\t}\n\telse\n\t{\n\t\tthis.validState = null;\n\t}\n\t\n\tif (state != this.markedState || color != this.currentColor)\n\t{\n\t\tthis.currentColor = color;\n\t\t\n\t\tif (state != null && this.currentColor != null)\n\t\t{\n\t\t\tthis.markedState = state;\n\t\t\tthis.mark();\t\t\n\t\t}\n\t\telse if (this.markedState != null)\n\t\t{\n\t\t\tthis.markedState = null;\n\t\t\tthis.unmark();\n\t\t}\n\t}\n};\n\n/**\n * Function: markCell\n * \n * Marks the given cell using the given color, or <validColor> if no color is specified.\n */\nmxCellMarker.prototype.markCell = function(cell, color)\n{\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tthis.currentColor = (color != null) ? color : this.validColor;\n\t\tthis.markedState = state;\n\t\tthis.mark();\n\t}\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellMarker.prototype.mark = function()\n{\n\tthis.highlight.setHighlightColor(this.currentColor);\n\tthis.highlight.highlight(this.markedState);\n\tthis.fireEvent(new mxEventObject(mxEvent.MARK, 'state', this.markedState));\n};\n\n/**\n * Function: unmark\n * \n * Hides the marker and fires a <mark> event.\n */\nmxCellMarker.prototype.unmark = function()\n{\n\tthis.mark();\n};\n\n/**\n * Function: isValidState\n * \n * Returns true if the given <mxCellState> is a valid state. If this\n * returns true, then the state is stored in <validState>. The return value\n * of this method is used as the argument for <getMarkerColor>.\n */\nmxCellMarker.prototype.isValidState = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMarkerColor\n * \n * Returns the valid- or invalidColor depending on the value of isValid.\n * The given <mxCellState> is ignored by this implementation.\n */\nmxCellMarker.prototype.getMarkerColor = function(evt, state, isValid)\n{\n\treturn (isValid) ? this.validColor : this.invalidColor;\n};\n\n/**\n * Function: getState\n * \n * Uses <getCell>, <getStateToMark> and <intersects> to return the\n * <mxCellState> for the given <mxMouseEvent>.\n */\nmxCellMarker.prototype.getState = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar cell = this.getCell(me);\n\tvar state = this.getStateToMark(view.getState(cell));\n\n\treturn (state != null && this.intersects(state, me)) ? state : null;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> for the given event and cell. This returns the\n * given cell.\n */\nmxCellMarker.prototype.getCell = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: getStateToMark\n * \n * Returns the <mxCellState> to be marked for the given <mxCellState> under\n * the mouse. This returns the given state.\n */\nmxCellMarker.prototype.getStateToMark = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given coordinate pair intersects the given state.\n * This returns true if the <hotspot> is 0 or the coordinates are inside\n * the hotspot for the given cell state.\n */\nmxCellMarker.prototype.intersects = function(state, me)\n{\n\tif (this.hotspotEnabled)\n\t{\n\t\treturn mxUtils.intersectsHotspot(state, me.getGraphX(), me.getGraphY(),\n\t\t\tthis.hotspot, mxConstants.MIN_HOTSPOT_SIZE,\n\t\t\tmxConstants.MAX_HOTSPOT_SIZE);\n\t}\n\t\n\treturn true;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellMarker.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getModel().removeListener(this.resetHandler);\n\tthis.highlight.destroy();\n};\n\n__mxOutput.mxCellMarker = typeof mxCellMarker !== 'undefined' ? mxCellMarker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSelectionCellsHandler\n * \n * An event handler that manages cell handlers and invokes their mouse event\n * processing functions.\n * \n * Group: Events\n * \n * Event: mxEvent.ADD\n * \n * Fires if a cell has been added to the selection. The <code>state</code>\n * property contains the <mxCellState> that has been added.\n * \n * Event: mxEvent.REMOVE\n * \n * Fires if a cell has been remove from the selection. The <code>state</code>\n * property contains the <mxCellState> that has been removed.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxSelectionCellsHandler(graph)\n{\n\tmxEventSource.call(this);\n\t\n\tthis.graph = graph;\n\tthis.handlers = new mxDictionary();\n\tthis.graph.addMouseListener(this);\n\t\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.refresh();\n\t\t}\n\t});\n\t\n\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.refreshHandler);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxSelectionCellsHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSelectionCellsHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxSelectionCellsHandler.prototype.enabled = true;\n\n/**\n * Variable: refreshHandler\n * \n * Keeps a reference to an event listener for later removal.\n */\nmxSelectionCellsHandler.prototype.refreshHandler = null;\n\n/**\n * Variable: maxHandlers\n * \n * Defines the maximum number of handlers to paint individually. Default is 100.\n */\nmxSelectionCellsHandler.prototype.maxHandlers = 100;\n\n/**\n * Variable: handlers\n * \n * <mxDictionary> that maps from cells to handlers.\n */\nmxSelectionCellsHandler.prototype.handlers = null;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxSelectionCellsHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxSelectionCellsHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getHandler\n * \n * Returns the handler for the given cell.\n */\nmxSelectionCellsHandler.prototype.getHandler = function(cell)\n{\n\treturn this.handlers.get(cell);\n};\n\n/**\n * Function: isHandled\n * \n * Returns true if the given cell has a handler.\n */\nmxSelectionCellsHandler.prototype.isHandled = function(cell)\n{\n\treturn this.getHandler(cell) != null;\n};\n\n/**\n * Function: reset\n * \n * Resets all handlers.\n */\nmxSelectionCellsHandler.prototype.reset = function()\n{\n\tthis.handlers.visit(function(key, handler)\n\t{\n\t\thandler.reset.apply(handler);\n\t});\n};\n\n/**\n * Function: getHandledSelectionCells\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.getHandledSelectionCells = function()\n{\n\treturn this.graph.getSelectionCells();\n};\n\n/**\n * Function: refresh\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.refresh = function()\n{\n\t// Removes all existing handlers\n\tvar oldHandlers = this.handlers;\n\tthis.handlers = new mxDictionary();\n\t\n\t// Creates handles for all selection cells\n\tvar tmp = mxUtils.sortCells(this.getHandledSelectionCells(), false);\n\n\t// Destroys or updates old handlers\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = oldHandlers.remove(tmp[i]);\n\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tif (handler.state != state)\n\t\t\t\t{\n\t\t\t\t\thandler.destroy();\n\t\t\t\t\thandler = null;\n\t\t\t\t}\n\t\t\t\telse if (!this.isHandlerActive(handler))\n\t\t\t\t{\n\t\t\t\t\tif (handler.refresh != null)\n\t\t\t\t\t{\n\t\t\t\t\t\thandler.refresh();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Destroys unused handlers\n\toldHandlers.visit(mxUtils.bind(this, function(key, handler)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE, 'state', handler.state));\n\t\thandler.destroy();\n\t}));\n\t\n\t// Creates new handlers and updates parent highlight on existing handlers\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = this.handlers.get(tmp[i]);\n\n\t\t\tif (handler == null)\n\t\t\t{\n\t\t\t\thandler = this.graph.createHandler(state);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'state', state));\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thandler.updateParentHighlight();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isHandlerActive\n * \n * Returns true if the given handler is active and should not be redrawn.\n */\nmxSelectionCellsHandler.prototype.isHandlerActive = function(handler)\n{\n\treturn handler.index != null;\n};\n\n/**\n * Function: updateHandler\n * \n * Updates the handler for the given shape if one exists.\n */\nmxSelectionCellsHandler.prototype.updateHandler = function(state)\n{\n\tvar handler = this.handlers.remove(state.cell);\n\t\n\tif (handler != null)\n\t{\n\t\t// Transfers the current state to the new handler\n\t\tvar index = handler.index;\n\t\tvar x = handler.startX;\n\t\tvar y = handler.startY;\n\t\t\n\t\thandler.destroy();\n\t\thandler = this.graph.createHandler(state);\n\n\t\tif (handler != null)\n\t\t{\n\t\t\tthis.handlers.put(state.cell, handler);\n\t\t\t\n\t\t\tif (index != null && x != null && y != null)\n\t\t\t{\n\t\t\t\thandler.start(x, y, index);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseDown.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseMove.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseUp.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxSelectionCellsHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getSelectionModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getView().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n};\n\n__mxOutput.mxSelectionCellsHandler = typeof mxSelectionCellsHandler !== 'undefined' ? mxSelectionCellsHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxConnectionHandler\n *\n * Graph event handler that creates new connections. Uses <mxTerminalMarker>\n * for finding and highlighting the source and target vertices and\n * <factoryMethod> to create the edge instance. This handler is built-into\n * <mxGraph.connectionHandler> and enabled using <mxGraph.setConnectable>.\n *\n * Example:\n * \n * (code)\n * new mxConnectionHandler(graph, function(source, target, style)\n * {\n *   edge = new mxCell('', new mxGeometry());\n *   edge.setEdge(true);\n *   edge.setStyle(style);\n *   edge.geometry.relative = true;\n *   return edge;\n * });\n * (end)\n * \n * Here is an alternative solution that just sets a specific user object for\n * new edges by overriding <insertEdge>.\n *\n * (code)\n * mxConnectionHandlerInsertEdge = mxConnectionHandler.prototype.insertEdge;\n * mxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n * {\n *   value = 'Test';\n * \n *   return mxConnectionHandlerInsertEdge.apply(this, arguments);\n * };\n * (end)\n * \n * Using images to trigger connections:\n * \n * This handler uses mxTerminalMarker to find the source and target cell for\n * the new connection and creates a new edge using <connect>. The new edge is\n * created using <createEdge> which in turn uses <factoryMethod> or creates a\n * new default edge.\n * \n * The handler uses a \"highlight-paradigm\" for indicating if a cell is being\n * used as a source or target terminal, as seen in other diagramming products.\n * In order to allow both, moving and connecting cells at the same time,\n * <mxConstants.DEFAULT_HOTSPOT> is used in the handler to determine the hotspot\n * of a cell, that is, the region of the cell which is used to trigger a new\n * connection. The constant is a value between 0 and 1 that specifies the\n * amount of the width and height around the center to be used for the hotspot\n * of a cell and its default value is 0.5. In addition,\n * <mxConstants.MIN_HOTSPOT_SIZE> defines the minimum number of pixels for the\n * width and height of the hotspot.\n * \n * This solution, while standards compliant, may be somewhat confusing because\n * there is no visual indicator for the hotspot and the highlight is seen to\n * switch on and off while the mouse is being moved in and out. Furthermore,\n * this paradigm does not allow to create different connections depending on\n * the highlighted hotspot as there is only one hotspot per cell and it\n * normally does not allow cells to be moved and connected at the same time as\n * there is no clear indication of the connectable area of the cell.\n * \n * To come across these issues, the handle has an additional <createIcons> hook\n * with a default implementation that allows to create one icon to be used to\n * trigger new connections. If this icon is specified, then new connections can\n * only be created if the image is clicked while the cell is being highlighted.\n * The <createIcons> hook may be overridden to create more than one\n * <mxImageShape> for creating new connections, but the default implementation\n * supports one image and is used as follows:\n * \n * In order to display the \"connect image\" whenever the mouse is over the cell,\n * an DEFAULT_HOTSPOT of 1 should be used:\n * \n * (code)\n * mxConstants.DEFAULT_HOTSPOT = 1;\n * (end)\n * \n * In order to avoid confusion with the highlighting, the highlight color\n * should not be used with a connect image:\n * \n * (code)\n * mxConstants.HIGHLIGHT_COLOR = null;\n * (end)\n * \n * To install the image, the connectImage field of the mxConnectionHandler must\n * be assigned a new <mxImage> instance:\n * \n * (code)\n * mxConnectionHandler.prototype.connectImage = new mxImage('images/green-dot.gif', 14, 14);\n * (end)\n * \n * This will use the green-dot.gif with a width and height of 14 pixels as the\n * image to trigger new connections. In createIcons the icon field of the\n * handler will be set in order to remember the icon that has been clicked for\n * creating the new connection. This field will be available under selectedIcon\n * in the connect method, which may be overridden to take the icon that\n * triggered the new connection into account. This is useful if more than one\n * icon may be used to create a connection.\n *\n * Group: Events\n * \n * Event: mxEvent.START\n * \n * Fires when a new connection is being created by the user. The <code>state</code>\n * property contains the state of the source cell.\n * \n * Event: mxEvent.CONNECT\n * \n * Fires between begin- and endUpdate in <connect>. The <code>cell</code>\n * property contains the inserted edge, the <code>event</code> and <code>target</code> \n * properties contain the respective arguments that were passed to <connect> (where\n * target corresponds to the dropTarget argument). Finally, the <code>terminal</code>\n * property corresponds to the target argument in <connect> or the clone of the source\n * terminal if <createTarget> is enabled.\n * \n * Note that the target is the cell under the mouse where the mouse button was released.\n * Depending on the logic in the handler, this doesn't necessarily have to be the target\n * of the inserted edge. To print the source, target or any optional ports IDs that the\n * edge is connected to, the following code can be used. To get more details about the\n * actual connection point, <mxGraph.getConnectionConstraint> can be used. To resolve\n * the port IDs, use <mxGraphModel.getCell>.\n * \n * (code)\n * graph.connectionHandler.addListener(mxEvent.CONNECT, function(sender, evt)\n * {\n *   var edge = evt.getProperty('cell');\n *   var source = graph.getModel().getTerminal(edge, true);\n *   var target = graph.getModel().getTerminal(edge, false);\n *   \n *   var style = graph.getCellStyle(edge);\n *   var sourcePortId = style[mxConstants.STYLE_SOURCE_PORT];\n *   var targetPortId = style[mxConstants.STYLE_TARGET_PORT];\n *   \n *   mxLog.show();\n *   mxLog.debug('connect', edge, source.id, target.id, sourcePortId, targetPortId);\n * });\n * (end)\n *\n * Event: mxEvent.RESET\n * \n * Fires when the <reset> method is invoked.\n *\n * Constructor: mxConnectionHandler\n *\n * Constructs an event handler that connects vertices using the specified\n * factory method to create the new edges. Modify\n * <mxConstants.ACTIVE_REGION> to setup the region on a cell which triggers\n * the creation of a new connection or use connect icons as explained\n * above.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and an\n * optional cell style from the preview as the third argument. It returns\n * the <mxCell> that represents the new edge.\n */\nfunction mxConnectionHandler(graph, factoryMethod)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxConnectionHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConnectionHandler.prototype.graph = null;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used for creating new edges. The function takes the\n * source and target <mxCell> as the first and second argument and returns\n * a new <mxCell> that represents the edge. This is used in <createEdge>.\n */\nmxConnectionHandler.prototype.factoryMethod = true;\n\n/**\n * Variable: moveIconFront\n * \n * Specifies if icons should be displayed inside the graph container instead\n * of the overlay pane. This is used for HTML labels on vertices which hide\n * the connect icon. This has precendence over <moveIconBack> when set\n * to true. Default is false.\n */\nmxConnectionHandler.prototype.moveIconFront = false;\n\n/**\n * Variable: moveIconBack\n * \n * Specifies if icons should be moved to the back of the overlay pane. This can\n * be set to true if the icons of the connection handler conflict with other\n * handles, such as the vertex label move handle. Default is false.\n */\nmxConnectionHandler.prototype.moveIconBack = false;\n\n/**\n * Variable: connectImage\n * \n * <mxImage> that is used to trigger the creation of a new connection. This\n * is used in <createIcons>. Default is null.\n */\nmxConnectionHandler.prototype.connectImage = null;\n\n/**\n * Variable: targetConnectImage\n * \n * Specifies if the connect icon should be centered on the target state\n * while connections are being previewed. Default is false.\n */\nmxConnectionHandler.prototype.targetConnectImage = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConnectionHandler.prototype.enabled = true;\n\n/**\n * Variable: select\n * \n * Specifies if new edges should be selected. Default is true.\n */\nmxConnectionHandler.prototype.select = true;\n\n/**\n * Variable: createTarget\n * \n * Specifies if <createTargetVertex> should be called if no target was under the\n * mouse for the new connection. Setting this to true means the connection\n * will be drawn as valid if no target is under the mouse, and\n * <createTargetVertex> will be called before the connection is created between\n * the source cell and the newly created vertex in <createTargetVertex>, which\n * can be overridden to create a new target. Default is false.\n */\nmxConnectionHandler.prototype.createTarget = false;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> used for finding source and target cells.\n */\nmxConnectionHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxConnectionHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while connections are being created.\n */\nmxConnectionHandler.prototype.error = null;\n\n/**\n * Variable: waypointsEnabled\n * \n * Specifies if single clicks should add waypoints on the new edge. Default is\n * false.\n */\nmxConnectionHandler.prototype.waypointsEnabled = false;\n\n/**\n * Variable: ignoreMouseDown\n * \n * Specifies if the connection handler should ignore the state of the mouse\n * button when highlighting the source. Default is false, that is, the\n * handler only highlights the source if no button is being pressed.\n */\nmxConnectionHandler.prototype.ignoreMouseDown = false;\n\n/**\n * Variable: first\n * \n * Holds the <mxPoint> where the mouseDown took place while the handler is\n * active.\n */\nmxConnectionHandler.prototype.first = null;\n\n/**\n * Variable: connectIconOffset\n * \n * Holds the offset for connect icons during connection preview.\n * Default is mxPoint(0, <mxConstants.TOOLTIP_VERTICAL_OFFSET>).\n * Note that placing the icon under the mouse pointer with an\n * offset of (0,0) will affect hit detection.\n */\nmxConnectionHandler.prototype.connectIconOffset = new mxPoint(0, mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\n/**\n * Variable: edgeState\n * \n * Optional <mxCellState> that represents the preview edge while the\n * handler is active. This is created in <createEdgeState>.\n */\nmxConnectionHandler.prototype.edgeState = null;\n\n/**\n * Variable: changeHandler\n * \n * Holds the change event listener for later removal.\n */\nmxConnectionHandler.prototype.changeHandler = null;\n\n/**\n * Variable: drillHandler\n * \n * Holds the drill event listener for later removal.\n */\nmxConnectionHandler.prototype.drillHandler = null;\n\n/**\n * Variable: mouseDownCounter\n * \n * Counts the number of mouseDown events since the start. The initial mouse\n * down event counts as 1.\n */\nmxConnectionHandler.prototype.mouseDownCounter = 0;\n\n/**\n * Variable: movePreviewAway\n * \n * Switch to enable moving the preview away from the mousepointer. This is required in browsers\n * where the preview cannot be made transparent to events and if the built-in hit detection on\n * the HTML elements in the page should be used. Default is the value of <mxClient.IS_VML>.\n */\nmxConnectionHandler.prototype.movePreviewAway = mxClient.IS_VML;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxConnectionHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: livePreview\n * \n * Specifies if the actual shape of the edge state should be used for the preview.\n * Default is false. (Ignored if no edge state is created in <createEdgeState>.)\n */\nmxConnectionHandler.prototype.livePreview = false;\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used while the handler is active. Default is null.\n */\nmxConnectionHandler.prototype.cursor = null;\n\n/**\n * Variable: insertBeforeSource\n * \n * Specifies if new edges should be inserted before the source vertex in the\n * cell hierarchy. Default is false for backwards compatibility.\n */\nmxConnectionHandler.prototype.insertBeforeSource = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConnectionHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConnectionHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isInsertBefore\n * \n * Returns <insertBeforeSource> for non-loops and false for loops.\n *\n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be inserted.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.isInsertBefore = function(edge, source, target, evt, dropTarget)\n{\n\treturn this.insertBeforeSource && source != target;\n};\n\n/**\n * Function: isCreateTarget\n * \n * Returns <createTarget>.\n *\n * Parameters:\n *\n * evt - Current active native pointer event.\n */\nmxConnectionHandler.prototype.isCreateTarget = function(evt)\n{\n\treturn this.createTarget;\n};\n\n/**\n * Function: setCreateTarget\n * \n * Sets <createTarget>.\n */\nmxConnectionHandler.prototype.setCreateTarget = function(value)\n{\n\tthis.createTarget = value;\n};\n\n/**\n * Function: createShape\n * \n * Creates the preview shape for new connections.\n */\nmxConnectionHandler.prototype.createShape = function()\n{\n\t// Creates the edge preview\n\tvar shape = (this.livePreview && this.edgeState != null) ?\n\t\tthis.graph.cellRenderer.createShape(this.edgeState) :\n\t\tnew mxPolyline([], mxConstants.INVALID_COLOR);\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.scale = this.graph.view.scale;\n\tshape.pointerEvents = false;\n\tshape.isDashed = true;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, null);\n\n\treturn shape;\n};\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this connection handler. This should\n * be invoked if <mxGraph.container> is assigned after the connection\n * handler has been created.\n */\nmxConnectionHandler.prototype.init = function()\n{\n\tthis.graph.addMouseListener(this);\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\n\t// Redraws the icons if the graph changes\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.iconState = this.graph.getView().getState(this.iconState.cell);\n\t\t}\n\t\t\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.redrawIcons(this.icons, this.iconState);\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != null && this.graph.view.getState(this.previous.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.changeHandler);\n\t\n\t// Removes the icon if we step into/up or start editing\n\tthis.drillHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.START_EDITING, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.drillHandler);\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxConnectionHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxConnectionHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tmarker.hotspotEnabled = true;\n\n\t// Overrides to return cell at location only if valid (so that\n\t// there is no highlight for invalid cells)\n\tmarker.getCell = mxUtils.bind(this, function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(marker, arguments);\n\t\tthis.error = null;\n\t\t\n\t\t// Checks for cell at preview point (with grid)\n\t\tif (cell == null && this.currentPoint != null)\n\t\t{\n\t\t\tcell = this.graph.getCellAt(this.currentPoint.x, this.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && this.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, this.currentPoint.x, this.currentPoint.y)) ||\n\t\t\t!this.isConnectableCell(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isConnecting())\n\t\t\t{\n\t\t\t\tif (this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tthis.error = this.validateConnection(this.previous.cell, cell);\n\t\t\t\t\t\n\t\t\t\t\tif (this.error != null && this.error.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell = null;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Enables create target inside groups\n\t\t\t\t\t\tif (this.isCreateTarget(me.getEvent()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.error = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!this.isValidSource(cell, me))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.isConnecting() && !this.isCreateTarget(me.getEvent()) &&\n\t\t\t\t!this.graph.allowDanglingEdges)\n\t\t{\n\t\t\tthis.error = '';\n\t\t}\n\n\t\treturn cell;\n\t});\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = mxUtils.bind(this, function(state)\n\t{\n\t\tif (this.isConnecting())\n\t\t{\n\t\t\treturn this.error == null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxCellMarker.prototype.isValidState.apply(marker, arguments);\n\t\t}\n\t});\n\n\t// Overrides to use marker color only in highlight mode or for\n\t// target selection\n\tmarker.getMarkerColor = mxUtils.bind(this, function(evt, state, isValid)\n\t{\n\t\treturn (this.connectImage == null || this.isConnecting()) ?\n\t\t\tmxCellMarker.prototype.getMarkerColor.apply(marker, arguments) :\n\t\t\tnull;\n\t});\n\n\t// Overrides to use hotspot only for source selection otherwise\n\t// intersects always returns true when over a cell\n\tmarker.intersects = mxUtils.bind(this, function(state, evt)\n\t{\n\t\tif (this.connectImage != null || this.isConnecting())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxCellMarker.prototype.intersects.apply(marker, arguments);\n\t});\n\n\treturn marker;\n};\n\n/**\n * Function: start\n * \n * Starts a new connection for the given state and coordinates.\n */\nmxConnectionHandler.prototype.start = function(state, x, y, edgeState)\n{\n\tthis.previous = state;\n\tthis.first = new mxPoint(x, y);\n\tthis.edgeState = (edgeState != null) ? edgeState : this.createEdgeState(null);\n\t\n\t// Marks the source state\n\tthis.marker.currentColor = this.marker.validColor;\n\tthis.marker.markedState = state;\n\tthis.marker.mark();\n\n\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n};\n\n/**\n * Function: isConnecting\n * \n * Returns true if the source terminal has been clicked and a new\n * connection is currently being previewed.\n */\nmxConnectionHandler.prototype.isConnecting = function()\n{\n\treturn this.first != null && this.shape != null;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns <mxGraph.isValidSource> for the given source terminal.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the source terminal.\n * me - <mxMouseEvent> that is associated with this call.\n */\nmxConnectionHandler.prototype.isValidSource = function(cell, me)\n{\n\treturn this.graph.isValidSource(cell);\n};\n\n/**\n * Function: isValidTarget\n * \n * Returns true. The call to <mxGraph.isValidTarget> is implicit by calling\n * <mxGraph.getEdgeValidationError> in <validateConnection>. This is an\n * additional hook for disabling certain targets in this specific handler.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.isValidTarget = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.validateConnection = function(source, target)\n{\n\tif (!this.isValidTarget(target))\n\t{\n\t\treturn '';\n\t}\n\t\n\treturn this.graph.getEdgeValidationError(null, source, target);\n};\n\n/**\n * Function: getConnectImage\n * \n * Hook to return the <mxImage> used for the connection icon of the given\n * <mxCellState>. This implementation returns <connectImage>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect image should be returned.\n */\nmxConnectionHandler.prototype.getConnectImage = function(state)\n{\n\treturn this.connectImage;\n};\n\n/**\n * Function: isMoveIconToFrontForState\n * \n * Returns true if the state has a HTML label in the graph's container, otherwise\n * it returns <moveIconFront>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.isMoveIconToFrontForState = function(state)\n{\n\tif (state.text != null && state.text.node.parentNode == this.graph.container)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn this.moveIconFront;\n};\n\n/**\n * Function: createIcons\n * \n * Creates the array <mxImageShapes> that represent the connect icons for\n * the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.createIcons = function(state)\n{\n\tvar image = this.getConnectImage(state);\n\t\n\tif (image != null && state != null)\n\t{\n\t\tthis.iconState = state;\n\t\tvar icons = [];\n\n\t\t// Cannot use HTML for the connect icons because the icon receives all\n\t\t// mouse move events in IE, must use VML and SVG instead even if the\n\t\t// connect-icon appears behind the selection border and the selection\n\t\t// border consumes the events before the icon gets a chance\n\t\tvar bounds = new mxRectangle(0, 0, image.width, image.height);\n\t\tvar icon = new mxImageShape(bounds, image.src, null, null, 0);\n\t\ticon.preserveImageAspect = false;\n\t\t\n\t\tif (this.isMoveIconToFrontForState(state))\n\t\t{\n\t\t\ticon.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\ticon.init(this.graph.container);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ticon.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\ticon.init(this.graph.getView().getOverlayPane());\n\n\t\t\t// Move the icon back in the overlay pane\n\t\t\tif (this.moveIconBack && icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\t\t}\n\n\t\ticon.node.style.cursor = mxConstants.CURSOR_CONNECT;\n\n\t\t// Events transparency\n\t\tvar getState = mxUtils.bind(this, function()\n\t\t{\n\t\t\treturn (this.currentState != null) ? this.currentState : state;\n\t\t});\n\t\t\n\t\t// Updates the local icon before firing the mouse down event.\n\t\tvar mouseDown = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tthis.icon = icon;\n\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN,\n\t\t\t\t\tnew mxMouseEvent(evt, getState()));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState, mouseDown);\n\t\t\n\t\ticons.push(icon);\n\t\tthis.redrawIcons(icons, this.iconState);\n\t\t\n\t\treturn icons;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.redrawIcons = function(icons, state)\n{\n\tif (icons != null && icons[0] != null && state != null)\n\t{\n\t\tvar pos = this.getIconPosition(icons[0], state);\n\t\ticons[0].bounds.x = pos.x;\n\t\ticons[0].bounds.y = pos.y;\n\t\ticons[0].redraw();\n\t}\n};\n\n/**\n * Function: getIconPosition\n * \n * Returns the center position of the given icon.\n * \n * Parameters:\n * \n * icon - The connect icon of <mxImageShape> with the mouse.\n * state - <mxCellState> under the mouse.\n */\nmxConnectionHandler.prototype.getIconPosition = function(icon, state)\n{\n\tvar scale = this.graph.getView().scale;\n\tvar cx = state.getCenterX();\n\tvar cy = state.getCenterY();\n\t\n\tif (this.graph.isSwimlane(state.cell))\n\t{\n\t\tvar size = this.graph.getStartSize(state.cell);\n\t\t\n\t\tcx = (size.width != 0) ? state.x + size.width * scale / 2 : cx;\n\t\tcy = (size.height != 0) ? state.y + size.height * scale / 2 : cy;\n\t\t\n\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin, ct);\n\t\t\tcx = pt.x;\n\t\t\tcy = pt.y;\n\t\t}\n\t}\n\n\treturn new mxPoint(cx - icon.bounds.width / 2,\n\t\t\tcy - icon.bounds.height / 2);\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the connect icons and resets the respective state.\n */\nmxConnectionHandler.prototype.destroyIcons = function()\n{\n\tif (this.icons != null)\n\t{\n\t\tfor (var i = 0; i < this.icons.length; i++)\n\t\t{\n\t\t\tthis.icons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.icons = null;\n\t\tthis.icon = null;\n\t\tthis.selectedIcon = null;\n\t\tthis.iconState = null;\n\t}\n};\n\n/**\n * Function: isStartEvent\n * \n * Returns true if the given mouse down event should start this handler. The\n * This implementation returns true if the event does not force marquee\n * selection, and the currentConstraint and currentFocus of the\n * <constraintHandler> are not null, or <previous> and <error> are not null and\n * <icons> is null or <icons> and <icon> are not null.\n */\nmxConnectionHandler.prototype.isStartEvent = function(me)\n{\n\treturn ((this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null) ||\n\t\t(this.previous != null && this.error == null && (this.icons == null || (this.icons != null &&\n\t\tthis.icon != null))));\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a new connection.\n */\nmxConnectionHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownCounter++;\n\t\n\tif (this.isEnabled() && this.graph.isEnabled() && !me.isConsumed() &&\n\t\t!this.isConnecting() && this.isStartEvent(me))\n\t{\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t{\n\t\t\tthis.sourceConstraint = this.constraintHandler.currentConstraint;\n\t\t\tthis.previous = this.constraintHandler.currentFocus;\n\t\t\tthis.first = this.constraintHandler.currentPoint.clone();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Stores the location of the initial mousedown\n\t\t\tthis.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t}\n\t\n\t\tthis.edgeState = this.createEdgeState(me);\n\t\tthis.mouseDownCounter = 1;\n\t\t\n\t\tif (this.waypointsEnabled && this.shape == null)\n\t\t{\n\t\t\tthis.waypoints = null;\n\t\t\tthis.shape = this.createShape();\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t}\n\t\t}\n\n\t\t// Stores the starting point in the geometry of the preview\n\t\tif (this.previous == null && this.edgeState != null)\n\t\t{\n\t\t\tvar pt = this.graph.getPointForEvent(me.getEvent());\n\t\t\tthis.edgeState.cell.geometry.setTerminalPoint(pt, true);\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n\n\t\tme.consume();\n\t}\n\n\tthis.selectedIcon = this.icon;\n\tthis.icon = null;\n};\n\n/**\n * Function: isImmediateConnectSource\n * \n * Returns true if a tap on the given source state should immediately start\n * connecting. This implementation returns true if the state is not movable\n * in the graph. \n */\nmxConnectionHandler.prototype.isImmediateConnectSource = function(state)\n{\n\treturn !this.graph.isCellMovable(state.cell);\n};\n\n/**\n * Function: createEdgeState\n * \n * Hook to return an <mxCellState> which may be used during the preview.\n * This implementation returns null.\n * \n * Use the following code to create a preview for an existing edge style:\n * \n * (code)\n * graph.connectionHandler.createEdgeState = function(me)\n * {\n *   var edge = graph.createEdge(null, null, null, null, null, 'edgeStyle=elbowEdgeStyle');\n *   \n *   return new mxCellState(this.graph.view, edge, this.graph.getCellStyle(edge));\n * };\n * (end)\n */\nmxConnectionHandler.prototype.createEdgeState = function(me)\n{\n\treturn null;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxConnectionHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updateCurrentState\n * \n * Updates the current state for a given mouse move event by using\n * the <marker>.\n */\nmxConnectionHandler.prototype.updateCurrentState = function(me, point)\n{\n\tthis.constraintHandler.update(me, this.first == null, false, (this.first == null ||\n\t\tme.isSource(this.marker.highlight.shape)) ? null : point);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\n\t\t// Updates validation state\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.error = this.validateConnection(this.previous.cell, this.constraintHandler.currentFocus.cell);\n\t\t\t\n\t\t\tif (this.error == null)\n\t\t\t{\n\t\t\t\tthis.currentState = this.constraintHandler.currentFocus;\n\t\t\t}\n\t\t\t\t\t\n\t\t\tif (this.error != null || (this.currentState != null &&\n\t\t\t\t!this.isCellEnabled(this.currentState.cell)))\n\t\t\t{\n\t\t\t\tthis.constraintHandler.reset();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.process(me);\n\t\t\tthis.currentState = this.marker.getValidState();\n\t\t}\n\t\t\t\n\t\tif (this.currentState != null && !this.isCellEnabled(this.currentState.cell))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar outline = this.isOutlineConnectEvent(me);\n\t\t\n\t\tif (this.currentState != null && outline)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tvar constraint = this.graph.getOutlineConstraint(point, this.currentState, me);\n\t\t\tthis.constraintHandler.setFocus(me, this.currentState, false);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\n\t\tif (this.outlineConnect)\n\t\t{\n\t\t\tif (this.marker.highlight != null && this.marker.highlight.shape != null)\n\t\t\t{\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.OUTLINE_HIGHLIGHT_COLOR;\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t} \n\t\t\t\telse if (this.marker.hasValidState())\n\t\t\t\t{\n\t\t\t\t\t// Handles special case where actual end point of edge and current mouse point\n\t\t\t\t\t// are not equal (due to grid snapping) and there is no hit on shape or highlight\n\t\t\t\t\t// but ignores cases where parent is used for non-connectable child cells\n\t\t\t\t\tif (this.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\t\t\tthis.marker.getValidState() != me.getState())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\t\tthis.currentState = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.DEFAULT_VALID_COLOR;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell allows new connections to be created. This implementation\n * always returns true.\n */\nmxConnectionHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: convertWaypoint\n * \n * Converts the given point from screen coordinates to model coordinates.\n */\nmxConnectionHandler.prototype.convertWaypoint = function(point)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\n\tpoint.x = point.x / scale - tr.x;\n\tpoint.y = point.y / scale - tr.y;\n};\n\n/**\n * Function: snapToPreview\n * \n * Called to snap the given point to the current preview. This snaps to the\n * first point of the preview if alt is not pressed.\n */\nmxConnectionHandler.prototype.snapToPreview = function(me, point)\n{\n\tif (!mxEvent.isAltDown(me.getEvent()) && this.previous != null)\n\t{\n\t\tvar tol = this.graph.gridSize * this.graph.view.scale / 2;\t\n\t\tvar tmp = (this.sourceConstraint != null) ? this.first :\n\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\n\t\tif (Math.abs(tmp.x - me.getGraphX()) < tol)\n\t\t{\n\t\t\tpoint.x = tmp.x;\n\t\t}\n\t\t\n\t\tif (Math.abs(tmp.y - me.getGraphY()) < tol)\n\t\t{\n\t\t\tpoint.y = tmp.y;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview edge or by highlighting\n * a possible source or target terminal.\n */\nmxConnectionHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && (this.ignoreMouseDown || this.first != null || !this.graph.isMouseDown))\n\t{\n\t\t// Handles special case when handler is disabled during highlight\n\t\tif (!this.isEnabled() && this.currentState != null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar view = this.graph.getView();\n\t\tvar scale = view.scale;\n\t\tvar tr = view.translate;\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tthis.error = null;\n\n\t\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t\t{\n\t\t\tpoint = new mxPoint((this.graph.snap(point.x / scale - tr.x) + tr.x) * scale,\n\t\t\t\t(this.graph.snap(point.y / scale - tr.y) + tr.y) * scale);\n\t\t}\n\t\t\n\t\tthis.snapToPreview(me, point);\n\t\tthis.currentPoint = point;\n\t\t\n\t\tif ((this.first != null || (this.isEnabled() && this.graph.isEnabled())) &&\n\t\t\t(this.shape != null || this.first == null ||\n\t\t\tMath.abs(me.getGraphX() - this.first.x) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.first.y) > this.graph.tolerance))\n\t\t{\n\t\t\tthis.updateCurrentState(me, point);\n\t\t}\n\n\t\tif (this.first != null)\n\t\t{\n\t\t\tvar constraint = null;\n\t\t\tvar current = point;\n\t\t\t\n\t\t\t// Uses the current point from the constraint handler if available\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tconstraint = this.constraintHandler.currentConstraint;\n\t\t\t\tcurrent = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.previous != null && !this.graph.isIgnoreTerminalEvent(me.getEvent()) &&\n\t\t\t\tmxEvent.isShiftDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(this.previous.getCenterX() - point.x) <\n\t\t\t\t\tMath.abs(this.previous.getCenterY() - point.y))\n\t\t\t\t{\n\t\t\t\t\tpoint.x = this.previous.getCenterX();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpoint.y = this.previous.getCenterY();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pt2 = this.first;\n\t\t\t\n\t\t\t// Moves the connect icon with the mouse\n\t\t\tif (this.selectedIcon != null)\n\t\t\t{\n\t\t\t\tvar w = this.selectedIcon.bounds.width;\n\t\t\t\tvar h = this.selectedIcon.bounds.height;\n\t\t\t\t\n\t\t\t\tif (this.currentState != null && this.targetConnectImage)\n\t\t\t\t{\n\t\t\t\t\tvar pos = this.getIconPosition(this.selectedIcon, this.currentState);\n\t\t\t\t\tthis.selectedIcon.bounds.x = pos.x;\n\t\t\t\t\tthis.selectedIcon.bounds.y = pos.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar bounds = new mxRectangle(me.getGraphX() + this.connectIconOffset.x,\n\t\t\t\t\t\tme.getGraphY() + this.connectIconOffset.y, w, h);\n\t\t\t\t\tthis.selectedIcon.bounds = bounds;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.selectedIcon.redraw();\n\t\t\t}\n\n\t\t\t// Uses edge state to compute the terminal points\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(current, constraint);\n\t\t\t\tcurrent = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 1];\n\t\t\t\tpt2 = this.edgeState.absolutePoints[0];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.currentState != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.constraintHandler.currentConstraint == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = this.getTargetPerimeterPoint(this.currentState, me);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Computes the source perimeter point\n\t\t\t\tif (this.sourceConstraint == null && this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\t\t\t\tthis.waypoints[0] : current;\n\t\t\t\t\tvar tmp = this.getSourcePerimeterPoint(this.previous, next, me);\n\t\t\t\t\t\n\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt2 = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Makes sure the cell under the mousepointer can be detected\n\t\t\t// by moving the preview shape away from the mouse. This\n\t\t\t// makes sure the preview shape does not prevent the detection\n\t\t\t// of the cell under the mousepointer even for slow gestures.\n\t\t\tif (this.currentState == null && this.movePreviewAway)\n\t\t\t{\n\t\t\t\tvar tmp = pt2; \n\t\t\t\t\n\t\t\t\tif (this.edgeState != null && this.edgeState.absolutePoints.length >= 2)\n\t\t\t\t{\n\t\t\t\t\tvar tmp2 = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 2];\n\t\t\t\t\t\n\t\t\t\t\tif (tmp2 != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = tmp2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = current.x - tmp.x;\n\t\t\t\tvar dy = current.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\n\t\t\t\tif (len == 0)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Stores old point to reuse when creating edge\n\t\t\t\tthis.originalPoint = current.clone();\n\t\t\t\tcurrent.x -= dx * 4 / len;\n\t\t\t\tcurrent.y -= dy * 4 / len;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.originalPoint = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the preview shape (lazy)\n\t\t\tif (this.shape == null)\n\t\t\t{\n\t\t\t\tvar dx = Math.abs(me.getGraphX() - this.first.x);\n\t\t\t\tvar dy = Math.abs(me.getGraphY() - this.first.y);\n\n\t\t\t\tif (dx > this.graph.tolerance || dy > this.graph.tolerance)\n\t\t\t\t{\n\t\t\t\t\tthis.shape = this.createShape();\n\n\t\t\t\t\tif (this.edgeState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Revalidates current connection\n\t\t\t\t\tthis.updateCurrentState(me, point);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Updates the points in the preview edge\n\t\t\tif (this.shape != null)\n\t\t\t{\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.points = this.edgeState.absolutePoints;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pts = [pt2];\n\t\t\t\t\t\n\t\t\t\t\tif (this.waypoints != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpts = pts.concat(this.waypoints);\n\t\t\t\t\t}\n\n\t\t\t\t\tpts.push(current);\n\t\t\t\t\tthis.shape.points = pts;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.drawPreview();\n\t\t\t}\n\t\t\t\n\t\t\t// Makes sure endpoint of edge is visible during connect\n\t\t\tif (this.cursor != null)\n\t\t\t{\n\t\t\t\tthis.graph.container.style.cursor = this.cursor;\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(me.getEvent());\n\t\t\tme.consume();\n\t\t}\n\t\telse if (!this.isEnabled() || !this.graph.isEnabled())\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != this.currentState && this.edgeState == null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\t\n\t\t\t// Sets the cursor on the current shape\t\t\t\t\n\t\t\tif (this.currentState != null && this.error == null && this.constraintHandler.currentConstraint == null)\n\t\t\t{\n\t\t\t\tthis.icons = this.createIcons(this.currentState);\n\n\t\t\t\tif (this.icons == null)\n\t\t\t\t{\n\t\t\t\t\tthis.currentState.setCursor(mxConstants.CURSOR_CONNECT);\n\t\t\t\t\tme.consume();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.previous = this.currentState;\n\t\t}\n\t\telse if (this.previous == this.currentState && this.currentState != null && this.icons == null &&\n\t\t\t!this.graph.isMouseDown)\n\t\t{\n\t\t\t// Makes sure that no cursors are changed\n\t\t\tme.consume();\n\t\t}\n\n\t\tif (!this.graph.isMouseDown && this.currentState != null && this.icons != null)\n\t\t{\n\t\t\tvar hitsIcon = false;\n\t\t\tvar target = me.getSource();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.icons.length && !hitsIcon; i++)\n\t\t\t{\n\t\t\t\thitsIcon = target == this.icons[i].node || target.parentNode == this.icons[i].node;\n\t\t\t}\n\n\t\t\tif (!hitsIcon)\n\t\t\t{\n\t\t\t\tthis.updateIcons(this.currentState, this.icons, me);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n};\n\n/**\n * Function: updateEdgeState\n * \n * Updates <edgeState>.\n */\nmxConnectionHandler.prototype.updateEdgeState = function(current, constraint)\n{\n\t// TODO: Use generic method for writing constraint to style\n\tif (this.sourceConstraint != null && this.sourceConstraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_X] = this.sourceConstraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_Y] = this.sourceConstraint.point.y;\n\t}\n\n\tif (constraint != null && constraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t}\n\telse\n\t{\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_X];\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_Y];\n\t}\n\t\n\tthis.edgeState.absolutePoints = [null, (this.currentState != null) ? null : current];\n\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.previous, true, this.sourceConstraint);\n\t\n\tif (this.currentState != null)\n\t{\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = this.graph.getConnectionConstraint(this.edgeState, this.previous, false);\n\t\t}\n\t\t\n\t\tthis.edgeState.setAbsoluteTerminalPoint(null, false);\n\t\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.currentState, false, constraint);\n\t}\n\t\n\t// Scales and translates the waypoints to the model\n\tvar realPoints = null;\n\t\n\tif (this.waypoints != null)\n\t{\n\t\trealPoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t{\n\t\t\tvar pt = this.waypoints[i].clone();\n\t\t\tthis.convertWaypoint(pt);\n\t\t\trealPoints[i] = pt;\n\t\t}\n\t}\n\t\n\tthis.graph.view.updatePoints(this.edgeState, realPoints, this.previous, this.currentState);\n\tthis.graph.view.updateFloatingTerminalPoints(this.edgeState, this.previous, this.currentState);\n};\n\n/**\n * Function: getTargetPerimeterPoint\n * \n * Returns the perimeter point for the given target state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getTargetPerimeterPoint = function(state, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar targetPerimeter = view.getPerimeterFunction(state);\n\t\n\tif (targetPerimeter != null)\n\t{\n\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\tthis.waypoints[this.waypoints.length - 1] :\n\t\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\t\tvar tmp = targetPerimeter(view.getPerimeterBounds(state),\n\t\t\tthis.edgeState, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint(state.getCenterX(), state.getCenterY());\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSourcePerimeterPoint\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * next - <mxPoint> that represents the next point along the previewed edge.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getSourcePerimeterPoint = function(state, next, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar sourcePerimeter = view.getPerimeterFunction(state);\n\tvar c = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\n\tif (sourcePerimeter != null)\n\t{\n\t\tvar theta = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\tvar rad = -theta * (Math.PI / 180);\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\tnext = mxUtils.getRotatedPoint(new mxPoint(next.x, next.y), Math.cos(rad), Math.sin(rad), c);\n\t\t}\n\t\t\n\t\tvar tmp = sourcePerimeter(view.getPerimeterBounds(state), state, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tif (theta != 0)\n\t\t\t{\n\t\t\t\ttmp = mxUtils.getRotatedPoint(new mxPoint(tmp.x, tmp.y), Math.cos(-rad), Math.sin(-rad), c);\n\t\t\t}\n\t\t\t\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = c;\n\t}\n\t\n\treturn result;\n};\n\n\n/**\n * Function: updateIcons\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> under the mouse.\n * icons - Array of currently displayed icons.\n * me - <mxMouseEvent> that contains the mouse event.\n */\nmxConnectionHandler.prototype.updateIcons = function(state, icons, me)\n{\n\t// empty\n};\n\n/**\n * Function: isStopEvent\n * \n * Returns true if the given mouse up event should stop this handler. The\n * connection will be created if <error> is null. Note that this is only\n * called if <waypointsEnabled> is true. This implemtation returns true\n * if there is a cell state in the given event.\n */\nmxConnectionHandler.prototype.isStopEvent = function(me)\n{\n\treturn me.getState() != null;\n};\n\n/**\n * Function: addWaypoint\n * \n * Adds the waypoint for the given event to <waypoints>.\n */\nmxConnectionHandler.prototype.addWaypointForEvent = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar dx = Math.abs(point.x - this.first.x);\n\tvar dy = Math.abs(point.y - this.first.y);\n\tvar addPoint = this.waypoints != null || (this.mouseDownCounter > 1 &&\n\t\t\t(dx > this.graph.tolerance || dy > this.graph.tolerance));\n\n\tif (addPoint)\n\t{\n\t\tif (this.waypoints == null)\n\t\t{\n\t\t\tthis.waypoints = [];\n\t\t}\n\t\t\n\t\tvar scale = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.graph.snap(me.getGraphX() / scale) * scale,\n\t\t\t\tthis.graph.snap(me.getGraphY() / scale) * scale);\n\t\tthis.waypoints.push(point);\n\t}\n};\n\n/**\n * Function: checkConstraints\n * \n * Returns true if the connection for the given constraints is valid. This\n * implementation returns true if the constraints are not pointing to the\n * same fixed connection point.\n */\nmxConnectionHandler.prototype.checkConstraints = function(c1, c2)\n{\n\treturn (c1 == null || c2 == null || c1.point == null || c2.point == null ||\n\t\t!c1.point.equals(c2.point) || c1.dx != c2.dx || c1.dy != c2.dy ||\n\t\tc1.perimeter != c2.perimeter);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by inserting the new connection.\n */\nmxConnectionHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isConnecting())\n\t{\n\t\tif (this.waypointsEnabled && !this.isStopEvent(me))\n\t\t{\n\t\t\tthis.addWaypointForEvent(me);\n\t\t\tme.consume();\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar c1 = this.sourceConstraint;\n\t\tvar c2 = this.constraintHandler.currentConstraint;\n\n\t\tvar source = (this.previous != null) ? this.previous.cell : null;\n\t\tvar target = null;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\ttarget = this.constraintHandler.currentFocus.cell;\n\t\t}\n\t\t\n\t\tif (target == null && this.currentState != null)\n\t\t{\n\t\t\ttarget = this.currentState.cell;\n\t\t}\n\t\t\n\t\t// Inserts the edge if no validation error exists and if constraints differ\n\t\tif (this.error == null && (source == null || target == null ||\n\t\t\tsource != target || this.checkConstraints(c1, c2)))\n\t\t{\n\t\t\tthis.connect(source, target, me.getEvent(), me.getCell());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Selects the source terminal for self-references\n\t\t\tif (this.previous != null && this.marker.validState != null &&\n\t\t\t\tthis.previous.cell == this.marker.validState.cell)\n\t\t\t{\n\t\t\t\tthis.graph.selectCellForEvent(this.marker.source, me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\t// Displays the error message if it is not an empty string,\n\t\t\t// for empty error messages, the event is silently dropped\n\t\t\tif (this.error != null && this.error.length > 0)\n\t\t\t{\n\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Redraws the connect icons and resets the handler state\n\t\tthis.destroyIcons();\n\t\tme.consume();\n\t}\n\n\tif (this.first != null)\n\t{\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConnectionHandler.prototype.reset = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\t// Resets the cursor on the container\n\tif (this.cursor != null && this.graph.container != null)\n\t{\n\t\tthis.graph.container.style.cursor = '';\n\t}\n\t\n\tthis.destroyIcons();\n\tthis.marker.reset();\n\tthis.constraintHandler.reset();\n\tthis.originalPoint = null;\n\tthis.currentPoint = null;\n\tthis.edgeState = null;\n\tthis.previous = null;\n\tthis.error = null;\n\tthis.sourceConstraint = null;\n\tthis.mouseDownCounter = 0;\n\tthis.first = null;\n\n\tthis.fireEvent(new mxEventObject(mxEvent.RESET));\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview edge using the color and width returned by\n * <getEdgeColor> and <getEdgeWidth>.\n */\nmxConnectionHandler.prototype.drawPreview = function()\n{\n\tthis.updatePreview(this.error == null);\n\tthis.shape.redraw();\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.updatePreview = function(valid)\n{\n\tthis.shape.strokewidth = this.getEdgeWidth(valid);\n\tthis.shape.stroke = this.getEdgeColor(valid);\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeColor = function(valid)\n{\n\treturn (valid) ? mxConstants.VALID_COLOR : mxConstants.INVALID_COLOR;\n};\n\t\n/**\n * Function: getEdgeWidth\n * \n * Returns the width used to draw the preview edge. This returns 3 if\n * there is no edge validation error and 1 otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the width for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeWidth = function(valid)\n{\n\treturn (valid) ? 3 : 1;\n};\n\n/**\n * Function: connect\n * \n * Connects the given source and target using a new edge. This\n * implementation uses <createEdge> to create the edge.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.connect = function(source, target, evt, dropTarget)\n{\n\tif (target != null || this.isCreateTarget(evt) || this.graph.allowDanglingEdges)\n\t{\n\t\t// Uses the common parent of source and target or\n\t\t// the default parent to insert the edge\n\t\tvar model = this.graph.getModel();\n\t\tvar terminalInserted = false;\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (source != null && target == null && !this.graph.isIgnoreTerminalEvent(evt) && this.isCreateTarget(evt))\n\t\t\t{\n\t\t\t\ttarget = this.createTargetVertex(evt, source);\n\t\t\t\t\n\t\t\t\tif (target != null)\n\t\t\t\t{\n\t\t\t\t\tdropTarget = this.graph.getDropTarget([target], evt, dropTarget);\n\t\t\t\t\tterminalInserted = true;\n\t\t\t\t\t\n\t\t\t\t\t// Disables edges as drop targets if the target cell was created\n\t\t\t\t\t// FIXME: Should not shift if vertex was aligned (same in Java)\n\t\t\t\t\tif (dropTarget == null || !this.graph.getModel().isEdge(dropTarget))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pstate = this.graph.getView().getState(dropTarget);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = model.getGeometry(target);\n\t\t\t\t\t\t\ttmp.x -= pstate.origin.x;\n\t\t\t\t\t\t\ttmp.y -= pstate.origin.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdropTarget = this.graph.getDefaultParent();\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tthis.graph.addCell(target, dropTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar parent = this.graph.getDefaultParent();\n\n\t\t\tif (source != null && target != null &&\n\t\t\t\tmodel.getParent(source) == model.getParent(target) &&\n\t\t\t\tmodel.getParent(model.getParent(source)) != model.getRoot())\n\t\t\t{\n\t\t\t\tparent = model.getParent(source);\n\n\t\t\t\tif ((source.geometry != null && source.geometry.relative) &&\n\t\t\t\t\t(target.geometry != null && target.geometry.relative))\n\t\t\t\t{\n\t\t\t\t\tparent = model.getParent(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Uses the value of the preview edge state for inserting\n\t\t\t// the new edge into the graph\n\t\t\tvar value = null;\n\t\t\tvar style = null;\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tvalue = this.edgeState.cell.value;\n\t\t\t\tstyle = this.edgeState.cell.style;\n\t\t\t}\n\n\t\t\tedge = this.insertEdge(parent, null, value, source, target, style);\n\t\t\t\n\t\t\tif (edge != null)\n\t\t\t{\n\t\t\t\t// Updates the connection constraints\n\t\t\t\tthis.graph.setConnectionConstraint(edge, source, true, this.sourceConstraint);\n\t\t\t\tthis.graph.setConnectionConstraint(edge, target, false, this.constraintHandler.currentConstraint);\n\t\t\t\t\n\t\t\t\t// Uses geometry of the preview edge state\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmodel.setGeometry(edge, this.edgeState.cell.geometry);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar parent = model.getParent(source);\n\t\t\t\t\n\t\t\t\t// Inserts edge before source\n\t\t\t\tif (this.isInsertBefore(edge, source, target, evt, dropTarget))\n\t\t\t\t{\n\t\t\t\t\tvar index = null;\n\t\t\t\t\tvar tmp = source;\n\n\t\t\t\t\twhile (tmp.parent != null && tmp.geometry != null &&\n\t\t\t\t\t\ttmp.geometry.relative && tmp.parent != edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = this.graph.model.getParent(tmp);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmp != null && tmp.parent != null && tmp.parent == edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.add(parent, edge, tmp.parent.getIndex(tmp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Makes sure the edge has a non-null, relative geometry\n\t\t\t\tvar geo = model.getGeometry(edge);\n\n\t\t\t\tif (geo == null)\n\t\t\t\t{\n\t\t\t\t\tgeo = new mxGeometry();\n\t\t\t\t\tgeo.relative = true;\n\t\t\t\t\t\n\t\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Uses scaled waypoints in geometry\n\t\t\t\tif (this.waypoints != null && this.waypoints.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar tr = this.graph.view.translate;\n\t\t\t\t\tgeo.points = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt = this.waypoints[i];\n\t\t\t\t\t\tgeo.points.push(new mxPoint(pt.x / s - tr.x, pt.y / s - tr.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar t = this.graph.view.translate;\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar pt = (this.originalPoint != null) ?\n\t\t\t\t\t\t\tnew mxPoint(this.originalPoint.x / s - t.x, this.originalPoint.y / s - t.y) :\n\t\t\t\t\t\tnew mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\tgeo.setTerminalPoint(pt, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT, 'cell', edge, 'terminal', target,\n\t\t\t\t\t'event', evt, 'target', dropTarget, 'terminalInserted', terminalInserted));\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxLog.show();\n\t\t\tmxLog.debug(e.message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tif (this.select)\n\t\t{\n\t\t\tthis.selectCells(edge, (terminalInserted) ? target : null);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectCells\n * \n * Selects the given edge after adding a new connection. The target argument\n * contains the target vertex if one has been inserted.\n */\nmxConnectionHandler.prototype.selectCells = function(edge, target)\n{\n\tthis.graph.setSelectionCell(edge);\n};\n\n/**\n * Function: insertEdge\n * \n * Creates, inserts and returns the new edge for the given parameters. This\n * implementation does only use <createEdge> if <factoryMethod> is defined,\n * otherwise <mxGraph.insertEdge> will be used.\n */\nmxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tif (this.factoryMethod == null)\n\t{\n\t\treturn this.graph.insertEdge(parent, id, value, source, target, style);\n\t}\n\telse\n\t{\n\t\tvar edge = this.createEdge(value, source, target, style);\n\t\tedge = this.graph.addEdge(edge, parent, source, target);\n\t\t\n\t\treturn edge;\n\t}\n};\n\n/**\n * Function: createTargetVertex\n * \n * Hook method for creating new vertices on the fly if no target was\n * under the mouse. This is only called if <createTarget> is true and\n * returns null.\n * \n * Parameters:\n * \n * evt - Mousedown event of the connect gesture.\n * source - <mxCell> that represents the source terminal.\n */\nmxConnectionHandler.prototype.createTargetVertex = function(evt, source)\n{\n\t// Uses the first non-relative source\n\tvar geo = this.graph.getCellGeometry(source);\n\t\n\twhile (geo != null && geo.relative)\n\t{\n\t\tsource = this.graph.getModel().getParent(source);\n\t\tgeo = this.graph.getCellGeometry(source);\n\t}\n\t\n\tvar clone = this.graph.cloneCell(source);\n\tvar geo = this.graph.getModel().getGeometry(clone);\n\t\n\tif (geo != null)\n\t{\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\tgeo.x = Math.round(point.x - geo.width / 2 - this.graph.panDx / s);\n\t\tgeo.y = Math.round(point.y - geo.height / 2 - this.graph.panDy / s);\n\n\t\t// Aligns with source if within certain tolerance\n\t\tvar tol = this.getAlignmentTolerance();\n\t\t\n\t\tif (tol > 0)\n\t\t{\n\t\t\tvar sourceState = this.graph.view.getState(source);\n\t\t\t\n\t\t\tif (sourceState != null)\n\t\t\t{\n\t\t\t\tvar x = sourceState.x / s - t.x;\n\t\t\t\tvar y = sourceState.y / s - t.y;\n\t\t\t\t\n\t\t\t\tif (Math.abs(x - geo.x) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.x = Math.round(x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(y - geo.y) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.y = Math.round(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn clone;\t\t\n};\n\n/**\n * Function: getAlignmentTolerance\n * \n * Returns the tolerance for aligning new targets to sources. This returns the grid size / 2.\n */\nmxConnectionHandler.prototype.getAlignmentTolerance = function(evt)\n{\n\treturn (this.graph.isGridEnabled()) ? this.graph.gridSize / 2 : this.graph.tolerance;\n};\n\n/**\n * Function: createEdge\n * \n * Creates and returns a new edge using <factoryMethod> if one exists. If\n * no factory method is defined, then a new default edge is returned. The\n * source and target arguments are informal, the actual connection is\n * setup later by the caller of this function.\n * \n * Parameters:\n * \n * value - Value to be used for creating the edge.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * style - Optional style from the preview edge.\n */\nmxConnectionHandler.prototype.createEdge = function(value, source, target, style)\n{\n\tvar edge = null;\n\t\n\t// Creates a new edge using the factoryMethod\n\tif (this.factoryMethod != null)\n\t{\n\t\tedge = this.factoryMethod(source, target, style);\n\t}\n\t\n\tif (edge == null)\n\t{\n\t\tedge = new mxCell(value || '');\n\t\tedge.setEdge(true);\n\t\tedge.setStyle(style);\n\t\t\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\tedge.setGeometry(geo);\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This should be\n * called on all instances. It is called automatically for the built-in\n * instance created for each <mxGraph>.\n */\nmxConnectionHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.graph.getView().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\t\n\tif (this.drillHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.drillHandler);\n\t\tthis.graph.getView().removeListener(this.drillHandler);\n\t\tthis.drillHandler = null;\n\t}\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n};\n\n__mxOutput.mxConnectionHandler = typeof mxConnectionHandler !== 'undefined' ? mxConnectionHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConstraintHandler\n *\n * Handles constraints on connection targets. This class is in charge of\n * showing fixed points when the mouse is over a vertex and handles constraints\n * to establish new connections.\n *\n * Constructor: mxConstraintHandler\n *\n * Constructs an new constraint handler.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and\n * returns the <mxCell> that represents the new edge.\n */\nfunction mxConstraintHandler(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Adds a graph model listener to update the current focus on changes\n\tthis.resetHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.currentFocus != null && this.graph.view.getState(this.currentFocus.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.redraw();\n\t\t}\n\t});\n\t\n\tthis.graph.model.addListener(mxEvent.CHANGE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE, this.resetHandler);\n\tthis.graph.addListener(mxEvent.ROOT, this.resetHandler);\n};\n\n/**\n * Variable: pointImage\n * \n * <mxImage> to be used as the image for fixed connection points.\n */\nmxConstraintHandler.prototype.pointImage = new mxImage(mxClient.imageBasePath + '/point.gif', 5, 5);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConstraintHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConstraintHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightColor\n * \n * Specifies the color for the highlight. Default is <mxConstants.DEFAULT_VALID_COLOR>.\n */\nmxConstraintHandler.prototype.highlightColor = mxConstants.DEFAULT_VALID_COLOR;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConstraintHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConstraintHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConstraintHandler.prototype.reset = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t}\n\t\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n\t\n\tthis.currentConstraint = null;\n\tthis.currentFocusArea = null;\n\tthis.currentPoint = null;\n\tthis.currentFocus = null;\n\tthis.focusPoints = null;\n};\n\n/**\n * Function: getTolerance\n * \n * Returns the tolerance to be used for intersecting connection points. This\n * implementation returns <mxGraph.tolerance>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose tolerance should be returned.\n */\nmxConstraintHandler.prototype.getTolerance = function(me)\n{\n\treturn this.graph.getTolerance();\n};\n\n/**\n * Function: getImageForConstraint\n * \n * Returns the tolerance to be used for intersecting connection points.\n */\nmxConstraintHandler.prototype.getImageForConstraint = function(state, constraint, point)\n{\n\treturn this.pointImage;\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given <mxMouseEvent> should be ignored in <update>. This\n * implementation always returns false.\n */\nmxConstraintHandler.prototype.isEventIgnored = function(me, source)\n{\n\treturn false;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored. This always returns false.\n */\nmxConstraintHandler.prototype.isStateIgnored = function(state, source)\n{\n\treturn false;\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the <focusIcons> if they exist.\n */\nmxConstraintHandler.prototype.destroyIcons = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t\tthis.focusPoints = null;\n\t}\n};\n\n/**\n * Function: destroyFocusHighlight\n * \n * Destroys the <focusHighlight> if one exists.\n */\nmxConstraintHandler.prototype.destroyFocusHighlight = function()\n{\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n};\n\n/**\n * Function: isKeepFocusEvent\n * \n * Returns true if the current focused state should not be changed for the given event.\n * This returns true if shift and alt are pressed.\n */\nmxConstraintHandler.prototype.isKeepFocusEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent());\n};\n\n/**\n * Function: getCellForEvent\n * \n * Returns the cell for the given event.\n */\nmxConstraintHandler.prototype.getCellForEvent = function(me, point)\n{\n\tvar cell = me.getCell();\n\t\n\t// Gets cell under actual point if different from event location\n\tif (cell == null && point != null && (me.getGraphX() != point.x || me.getGraphY() != point.y))\n\t{\n\t\tcell = this.graph.getCellAt(point.x, point.y);\n\t}\n\t\n\t// Uses connectable parent vertex if one exists\n\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\n\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t{\n\t\t\tcell = parent;\n\t\t}\n\t}\n\t\n\treturn (this.graph.isCellLocked(cell)) ? null : cell;\n};\n\n/**\n * Function: update\n * \n * Updates the state of this handler based on the given <mxMouseEvent>.\n * Source is a boolean indicating if the cell is a source or target.\n */\nmxConstraintHandler.prototype.update = function(me, source, existingEdge, point)\n{\n\tif (this.isEnabled() && !this.isEventIgnored(me))\n\t{\n\t\t// Lazy installation of mouseleave handler\n\t\tif (this.mouseleaveHandler == null && this.graph.container != null)\n\t\t{\n\t\t\tthis.mouseleaveHandler = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t});\n\n\t\t\tmxEvent.addListener(this.graph.container, 'mouseleave', this.resetHandler);\t\n\t\t}\n\t\t\n\t\tvar tol = this.getTolerance(me);\n\t\tvar x = (point != null) ? point.x : me.getGraphX();\n\t\tvar y = (point != null) ? point.y : me.getGraphY();\n\t\tvar grid = new mxRectangle(x - tol, y - tol, 2 * tol, 2 * tol);\n\t\tvar mouse = new mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol);\n\t\tvar state = this.graph.view.getState(this.getCellForEvent(me, point));\n\n\t\t// Keeps focus icons visible while over vertex bounds and no other cell under mouse or shift is pressed\n\t\tif (!this.isKeepFocusEvent(me) && (this.currentFocusArea == null || this.currentFocus == null ||\n\t\t\t(state != null) || !this.graph.getModel().isVertex(this.currentFocus.cell) ||\n\t\t\t!mxUtils.intersects(this.currentFocusArea, mouse)) && (state != this.currentFocus))\n\t\t{\n\t\t\tthis.currentFocusArea = null;\n\t\t\tthis.currentFocus = null;\n\t\t\tthis.setFocus(me, state, source);\n\t\t}\n\n\t\tthis.currentConstraint = null;\n\t\tthis.currentPoint = null;\n\t\tvar minDistSq = null;\n\t\t\n\t\tif (this.focusIcons != null && this.constraints != null &&\n\t\t\t(state == null || this.currentFocus == state))\n\t\t{\n\t\t\tvar cx = mouse.getCenterX();\n\t\t\tvar cy = mouse.getCenterY();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tvar dx = cx - this.focusIcons[i].bounds.getCenterX();\n\t\t\t\tvar dy = cy - this.focusIcons[i].bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\t\n\t\t\t\tif ((this.intersects(this.focusIcons[i], mouse, source, existingEdge) || (point != null &&\n\t\t\t\t\tthis.intersects(this.focusIcons[i], grid, source, existingEdge))) &&\n\t\t\t\t\t(minDistSq == null || tmp < minDistSq))\n\t\t\t\t{\n\t\t\t\t\tthis.currentConstraint = this.constraints[i];\n\t\t\t\t\tthis.currentPoint = this.focusPoints[i];\n\t\t\t\t\tminDistSq = tmp;\n\t\t\t\t\t\n\t\t\t\t\tvar tmp = this.focusIcons[i].bounds.clone();\n\t\t\t\t\ttmp.grow(mxConstants.HIGHLIGHT_SIZE + 1);\n\t\t\t\t\ttmp.width -= 1;\n\t\t\t\t\ttmp.height -= 1;\n\t\t\t\t\t\n\t\t\t\t\tif (this.focusHighlight == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar hl = this.createHighlightShape();\n\t\t\t\t\t\thl.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\t\t\t\thl.pointerEvents = false;\n\n\t\t\t\t\t\thl.init(this.graph.getView().getOverlayPane());\n\t\t\t\t\t\tthis.focusHighlight = hl;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\tmxEvent.redirectMouseEvents(hl.node, this.graph, getState);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.focusHighlight.bounds = tmp;\n\t\t\t\t\tthis.focusHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.currentConstraint == null)\n\t\t{\n\t\t\tthis.destroyFocusHighlight();\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.currentConstraint = null;\n\t\tthis.currentFocus = null;\n\t\tthis.currentPoint = null;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.redraw = function()\n{\n\tif (this.currentFocus != null && this.constraints != null && this.focusIcons != null)\n\t{\n\t\tvar state = this.graph.view.getState(this.currentFocus.cell);\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tthis.focusIcons[i].bounds = bounds;\n\t\t\tthis.focusIcons[i].redraw();\n\t\t\tthis.currentFocusArea.add(this.focusIcons[i].bounds);\n\t\t\tthis.focusPoints[i] = cp;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: setFocus\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.setFocus = function(me, state, source)\n{\n\tthis.constraints = (state != null && !this.isStateIgnored(state, source) &&\n\t\tthis.graph.isCellConnectable(state.cell)) ? ((this.isEnabled()) ?\n\t\t(this.graph.getAllConnectionConstraints(state, source) || []) : []) : null;\n\n\t// Only uses cells which have constraints\n\tif (this.constraints != null)\n\t{\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tif (this.focusIcons != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tthis.focusIcons[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tthis.focusIcons = null;\n\t\t\tthis.focusPoints = null;\n\t\t}\n\t\t\n\t\tthis.focusPoints = [];\n\t\tthis.focusIcons = [];\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar src = img.src;\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tvar icon = new mxImageShape(bounds, src);\n\t\t\ticon.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\ticon.preserveImageAspect = false;\n\t\t\ticon.init(this.graph.getView().getDecoratorPane());\n\t\t\t\n\t\t\t// Fixes lost event tracking for images in quirks / IE8 standards\n\t\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(icon.node, 'dragstart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// Move the icon behind all other overlays\n\t\t\tif (icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\n\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t});\n\t\t\t\n\t\t\ticon.redraw();\n\n\t\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState);\n\t\t\tthis.currentFocusArea.add(icon.bounds);\n\t\t\tthis.focusIcons.push(icon);\n\t\t\tthis.focusPoints.push(cp);\n\t\t}\n\t\t\n\t\tthis.currentFocusArea.grow(this.getTolerance(me));\n\t}\n\telse\n\t{\n\t\tthis.destroyIcons();\n\t\tthis.destroyFocusHighlight();\n\t}\n};\n\n/**\n * Function: createHighlightShape\n * \n * Create the shape used to paint the highlight.\n * \n * Returns true if the given icon intersects the given point.\n */\nmxConstraintHandler.prototype.createHighlightShape = function()\n{\n\tvar hl = new mxRectangleShape(null, this.highlightColor, this.highlightColor, mxConstants.HIGHLIGHT_STROKEWIDTH);\n\thl.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\t\n\treturn hl;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given icon intersects the given rectangle.\n */\nmxConstraintHandler.prototype.intersects = function(icon, mouse, source, existingEdge)\n{\n\treturn mxUtils.intersects(icon.bounds, mouse);\n};\n\n/**\n * Function: destroy\n * \n * Destroy this handler.\n */\nmxConstraintHandler.prototype.destroy = function()\n{\n\tthis.reset();\n\t\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.graph.model.removeListener(this.resetHandler);\n\t\tthis.graph.view.removeListener(this.resetHandler);\n\t\tthis.graph.removeListener(this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.mouseleaveHandler != null && this.graph.container != null)\n\t{\n\t\tmxEvent.removeListener(this.graph.container, 'mouseleave', this.mouseleaveHandler);\n\t\tthis.mouseleaveHandler = null;\n\t}\n};\n\n__mxOutput.mxConstraintHandler = typeof mxConstraintHandler !== 'undefined' ? mxConstraintHandler : undefined;\n\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxRubberband\n * \n * Event handler that selects rectangular regions. This is not built-into\n * <mxGraph>. To enable rubberband selection in a graph, use the following code.\n * \n * Example:\n * \n * (code)\n * var rubberband = new mxRubberband(graph);\n * (end)\n * \n * Constructor: mxRubberband\n * \n * Constructs an event handler that selects rectangular regions in the graph\n * using rubberband selection.\n */\nfunction mxRubberband(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force rubberband event\n\t\tthis.forceRubberbandHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForceRubberbandEvent(me))\n\t\t\t{\n\t\t\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\t\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\t\t\torigin.x -= offset.x;\n\t\t\t\torigin.y -= offset.y;\n\t\t\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\t\t\t\tme.consume(false);\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forceRubberbandHandler);\n\t\t\n\t\t// Repaints the marquee after autoscroll\n\t\tthis.panHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.repaint();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.first != null)\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: defaultOpacity\n * \n * Specifies the default opacity to be used for the rubberband div. Default\n * is 20.\n */\nmxRubberband.prototype.defaultOpacity = 20;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxRubberband.prototype.enabled = true;\n\n/**\n * Variable: div\n * \n * Holds the DIV element which is currently visible.\n */\nmxRubberband.prototype.div = null;\n\n/**\n * Variable: sharedDiv\n * \n * Holds the DIV element which is used to display the rubberband.\n */\nmxRubberband.prototype.sharedDiv = null;\n\n/**\n * Variable: currentX\n * \n * Holds the value of the x argument in the last call to <update>.\n */\nmxRubberband.prototype.currentX = 0;\n\n/**\n * Variable: currentY\n * \n * Holds the value of the y argument in the last call to <update>.\n */\nmxRubberband.prototype.currentY = 0;\n\n/**\n * Variable: fadeOut\n * \n * Optional fade out effect. Default is false.\n */\nmxRubberband.prototype.fadeOut = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxRubberband.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation updates\n * <enabled>.\n */\nmxRubberband.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isForceRubberbandEvent\n * \n * Returns true if the given <mxMouseEvent> should start rubberband selection.\n * This implementation returns true if the alt key is pressed.\n */\nmxRubberband.prototype.isForceRubberbandEvent = function(me)\n{\n\treturn mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxRubberband.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() == null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\n\t\t// Does not prevent the default for this event so that the\n\t\t// event processing chain is still executed even if we start\n\t\t// rubberbanding. This is required eg. in ExtJs to hide the\n\t\t// current context menu. In mouseMove we'll make sure we're\n\t\t// not selecting anything while we're rubberbanding.\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: start\n * \n * Sets the start point for the rubberband selection.\n */\nmxRubberband.prototype.start = function(x, y)\n{\n\tthis.first = new mxPoint(x, y);\n\n\tvar container = this.graph.container;\n\t\n\tfunction createMouseEvent(evt)\n\t{\n\t\tvar me = new mxMouseEvent(evt);\n\t\tvar pt = mxUtils.convertPoint(container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x;\n\t\tme.graphY = pt.y;\n\t\t\n\t\treturn me;\n\t};\n\n\tthis.dragHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseMove(this.graph, createMouseEvent(evt));\n\t});\n\n\tthis.dropHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseUp(this.graph, createMouseEvent(evt));\n\t});\n\n\t// Workaround for rubberband stopping if the mouse leaves the container in Firefox\n\tif (mxClient.IS_FF)\n\t{\n\t\tmxEvent.addGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating therubberband selection.\n */\nmxRubberband.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.first != null)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tvar x = me.getX() + origin.x;\n\t\tvar y = me.getY() + origin.y;\n\t\tvar dx = this.first.x - x;\n\t\tvar dy = this.first.y - y;\n\t\tvar tol = this.graph.tolerance;\n\t\t\n\t\tif (this.div != null || Math.abs(dx) > tol ||  Math.abs(dy) > tol)\n\t\t{\n\t\t\tif (this.div == null)\n\t\t\t{\n\t\t\t\tthis.div = this.createShape();\n\t\t\t}\n\t\t\t\n\t\t\t// Clears selection while rubberbanding. This is required because\n\t\t\t// the event is not consumed in mouseDown.\n\t\t\tmxUtils.clearSelection();\n\t\t\t\n\t\t\tthis.update(x, y);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates the rubberband selection shape.\n */\nmxRubberband.prototype.createShape = function()\n{\n\tif (this.sharedDiv == null)\n\t{\n\t\tthis.sharedDiv = document.createElement('div');\n\t\tthis.sharedDiv.className = 'mxRubberband';\n\t\tmxUtils.setOpacity(this.sharedDiv, this.defaultOpacity);\n\t}\n\n\tthis.graph.container.appendChild(this.sharedDiv);\n\tvar result = this.sharedDiv;\n\t\n\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t{\n\t\tthis.sharedDiv = null;\n\t}\n\t\t\n\treturn result;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this handler is active.\n */\nmxRubberband.prototype.isActive = function(sender, me)\n{\n\treturn this.div != null && this.div.style.display != 'none';\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by selecting the region of the rubberband using\n * <mxGraph.selectRegion>.\n */\nmxRubberband.prototype.mouseUp = function(sender, me)\n{\n\tvar active = this.isActive();\n\tthis.reset();\n\t\n\tif (active)\n\t{\n\t\tthis.execute(me.getEvent());\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: execute\n * \n * Resets the state of this handler and selects the current region\n * for the given event.\n */\nmxRubberband.prototype.execute = function(evt)\n{\n\tvar rect = new mxRectangle(this.x, this.y, this.width, this.height);\n\tthis.graph.selectRegion(rect, evt);\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the rubberband selection.\n */\nmxRubberband.prototype.reset = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t\t{\n\t\t\tvar temp = this.div;\n\t\t\tmxUtils.setPrefixedStyle(temp.style, 'transition', 'all 0.2s linear');\n\t\t\ttemp.style.pointerEvents = 'none';\n\t\t\ttemp.style.opacity = 0;\n\t\t    \n\t\t    window.setTimeout(function()\n\t\t    \t{\n\t\t    \t\ttemp.parentNode.removeChild(temp);\n\t\t    \t}, 200);\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t}\n\n\tmxEvent.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\tthis.dragHandler = null;\n\tthis.dropHandler = null;\n\t\n\tthis.currentX = 0;\n\tthis.currentY = 0;\n\tthis.first = null;\n\tthis.div = null;\n};\n\n/**\n * Function: update\n * \n * Sets <currentX> and <currentY> and calls <repaint>.\n */\nmxRubberband.prototype.update = function(x, y)\n{\n\tthis.currentX = x;\n\tthis.currentY = y;\n\t\n\tthis.repaint();\n};\n\n/**\n * Function: repaint\n * \n * Computes the bounding box and updates the style of the <div>.\n */\nmxRubberband.prototype.repaint = function()\n{\n\tif (this.div != null)\n\t{\n\t\tvar x = this.currentX - this.graph.panDx;\n\t\tvar y = this.currentY - this.graph.panDy;\n\t\t\n\t\tthis.x = Math.min(this.first.x, x);\n\t\tthis.y = Math.min(this.first.y, y);\n\t\tthis.width = Math.max(this.first.x, x) - this.x;\n\t\tthis.height =  Math.max(this.first.y, y) - this.y;\n\n\t\tvar dx = (mxClient.IS_VML) ? this.graph.panDx : 0;\n\t\tvar dy = (mxClient.IS_VML) ? this.graph.panDy : 0;\n\t\t\n\t\tthis.div.style.left = (this.x + dx) + 'px';\n\t\tthis.div.style.top = (this.y + dy) + 'px';\n\t\tthis.div.style.width = Math.max(1, this.width) + 'px';\n\t\tthis.div.style.height = Math.max(1, this.height) + 'px';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called, it is called automatically when the\n * window unloads.\n */\nmxRubberband.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\tthis.graph.removeMouseListener(this);\n\t\tthis.graph.removeListener(this.forceRubberbandHandler);\n\t\tthis.graph.removeListener(this.panHandler);\n\t\tthis.reset();\n\t\t\n\t\tif (this.sharedDiv != null)\n\t\t{\n\t\t\tthis.sharedDiv = null;\n\t\t}\n\t}\n};\n\n__mxOutput.mxRubberband = typeof mxRubberband !== 'undefined' ? mxRubberband : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHandle\n * \n * Implements a single custom handle for vertices.\n * \n * Constructor: mxHandle\n * \n * Constructs a new handle for the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxHandle(state, cursor, image, shape)\n{\n\tthis.graph = state.view.graph;\n\tthis.state = state;\n\tthis.cursor = (cursor != null) ? cursor : this.cursor;\n\tthis.image = (image != null) ? image : this.image;\n\tthis.shape = (shape != null) ? shape : null;\n\tthis.init();\n};\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used for this handle. Default is 'default'.\n */\nmxHandle.prototype.cursor = 'default';\n\n/**\n * Variable: image\n * \n * Specifies the <mxImage> to be used to render the handle. Default is null.\n */\nmxHandle.prototype.image = null;\n\n/**\n * Variable: ignoreGrid\n * \n * Default is false.\n */\nmxHandle.prototype.ignoreGrid = false;\n\n/**\n * Function: getPosition\n * \n * Hook for subclassers to return the current position of the handle.\n */\nmxHandle.prototype.getPosition = function(bounds) { };\n\n/**\n * Function: setPosition\n * \n * Hooks for subclassers to update the style in the <state>.\n */\nmxHandle.prototype.setPosition = function(bounds, pt, me) { };\n\n/**\n * Function: execute\n * \n * Hook for subclassers to execute the handle.\n */\nmxHandle.prototype.execute = function(me) { };\n\n/**\n * Function: copyStyle\n * \n * Sets the cell style with the given name to the corresponding value in <state>.\n */\nmxHandle.prototype.copyStyle = function(key)\n{\n\tthis.graph.setCellStyles(key, this.state.style[key], [this.state.cell]);\n};\n\n/**\n * Function: processEvent\n * \n * Processes the given <mxMouseEvent> and invokes <setPosition>.\n */\nmxHandle.prototype.processEvent = function(me)\n{\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\tvar pt = new mxPoint(me.getGraphX() / scale - tr.x, me.getGraphY() / scale - tr.y);\n\t\n\t// Center shape on mouse cursor\n\tif (this.shape != null && this.shape.bounds != null)\n\t{\n\t\tpt.x -= this.shape.bounds.width / scale / 4;\n\t\tpt.y -= this.shape.bounds.height / scale / 4;\n\t}\n\n\t// Snaps to grid for the rotated position then applies the rotation for the direction after that\n\tvar alpha1 = -mxUtils.toRadians(this.getRotation());\n\tvar alpha2 = -mxUtils.toRadians(this.getTotalRotation()) - alpha1;\n\tpt = this.flipPoint(this.rotatePoint(this.snapPoint(this.rotatePoint(pt, alpha1),\n\t\t\tthis.ignoreGrid || !this.graph.isGridEnabledEvent(me.getEvent())), alpha2));\n\tthis.setPosition(this.state.getPaintBounds(), pt, me);\n\tthis.redraw();\n};\n\n/**\n * Function: positionChanged\n * \n * Should be called after <setPosition> in <processEvent>.\n * This repaints the state using <mxCellRenderer>.\n */\nmxHandle.prototype.positionChanged = function()\n{\n\tif (this.state.text != null)\n\t{\n\t\tthis.state.text.apply(this.state);\n\t}\n\t\n\tif (this.state.shape != null)\n\t{\n\t\tthis.state.shape.apply(this.state);\n\t}\n\t\n\tthis.graph.cellRenderer.redraw(this.state, true);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation defined in the style of the cell.\n */\nmxHandle.prototype.getRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: getTotalRotation\n * \n * Returns the rotation from the style and the rotation from the direction of\n * the cell.\n */\nmxHandle.prototype.getTotalRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getShapeRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: init\n * \n * Creates and initializes the shapes required for this handle.\n */\nmxHandle.prototype.init = function()\n{\n\tvar html = this.isHtmlRequired();\n\t\n\tif (this.image != null)\n\t{\n\t\tthis.shape = new mxImageShape(new mxRectangle(0, 0, this.image.width, this.image.height), this.image.src);\n\t\tthis.shape.preserveImageAspect = false;\n\t}\n\telse if (this.shape == null)\n\t{\n\t\tthis.shape = this.createShape(html);\n\t}\n\t\n\tthis.initShape(html);\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for this handle.\n */\nmxHandle.prototype.createShape = function(html)\n{\n\tvar bounds = new mxRectangle(0, 0, mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE);\n\t\n\treturn new mxRectangleShape(bounds, mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n};\n\n/**\n * Function: initShape\n * \n * Initializes <shape> and sets its cursor.\n */\nmxHandle.prototype.initShape = function(html)\n{\n\tif (html && this.shape.isHtmlAllowed())\n\t{\n\t\tthis.shape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tthis.shape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\n\t\tif (this.cursor != null)\n\t\t{\n\t\t\tthis.shape.init(this.graph.getView().getOverlayPane());\n\t\t}\n\t}\n\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\tthis.shape.node.style.cursor = this.cursor;\n};\n\n/**\n * Function: redraw\n * \n * Renders the shape for this handle.\n */\nmxHandle.prototype.redraw = function()\n{\n\tif (this.shape != null && this.state.shape != null)\n\t{\n\t\tvar pt = this.getPosition(this.state.getPaintBounds());\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(this.getTotalRotation());\n\t\t\tpt = this.rotatePoint(this.flipPoint(pt), alpha);\n\t\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar tr = this.graph.view.translate;\n\t\t\tthis.shape.bounds.x = Math.floor((pt.x + tr.x) * scale - this.shape.bounds.width / 2);\n\t\t\tthis.shape.bounds.y = Math.floor((pt.y + tr.y) * scale - this.shape.bounds.height / 2);\n\t\t\t\n\t\t\t// Needed to force update of text bounds\n\t\t\tthis.shape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHtmlRequired\n * \n * Returns true if this handle should be rendered in HTML. This returns true if\n * the text node is in the graph container.\n */\nmxHandle.prototype.isHtmlRequired = function()\n{\n\treturn this.state.text != null && this.state.text.node.parentNode == this.graph.container;\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the point by the given angle.\n */\nmxHandle.prototype.rotatePoint = function(pt, alpha)\n{\n\tvar bounds = this.state.getCellBounds();\n\tvar cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\tvar cos = Math.cos(alpha);\n\tvar sin = Math.sin(alpha); \n\n\treturn mxUtils.getRotatedPoint(pt, cos, sin, cx);\n};\n\n/**\n * Function: flipPoint\n * \n * Flips the given point vertically and/or horizontally.\n */\nmxHandle.prototype.flipPoint = function(pt)\n{\n\tif (this.state.shape != null)\n\t{\n\t\tvar bounds = this.state.getCellBounds();\n\t\t\n\t\tif (this.state.shape.flipH)\n\t\t{\n\t\t\tpt.x = 2 * bounds.x + bounds.width - pt.x;\n\t\t}\n\t\t\n\t\tif (this.state.shape.flipV)\n\t\t{\n\t\t\tpt.y = 2 * bounds.y + bounds.height - pt.y;\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: snapPoint\n * \n * Snaps the given point to the grid if ignore is false. This modifies\n * the given point in-place and also returns it.\n */\nmxHandle.prototype.snapPoint = function(pt, ignore)\n{\n\tif (!ignore)\n\t{\n\t\tpt.x = this.graph.snap(pt.x);\n\t\tpt.y = this.graph.snap(pt.y);\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides this handle.\n */\nmxHandle.prototype.setVisible = function(visible)\n{\n\tif (this.shape != null && this.shape.node != null)\n\t{\n\t\tthis.shape.node.style.display = (visible) ? '' : 'none';\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handle by setting its visibility to true.\n */\nmxHandle.prototype.reset = function()\n{\n\tthis.setVisible(true);\n\tthis.state.style = this.graph.getCellStyle(this.state.cell);\n\tthis.positionChanged();\n};\n\n/**\n * Function: destroy\n * \n * Destroys this handle.\n */\nmxHandle.prototype.destroy = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxHandle = typeof mxHandle !== 'undefined' ? mxHandle : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxVertexHandler\n * \n * Event handler for resizing cells. This handler is automatically created in\n * <mxGraph.createHandler>.\n * \n * Constructor: mxVertexHandler\n * \n * Constructs an event handler that allows to resize vertices\n * and groups.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be resized.\n */\nfunction mxVertexHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tif (this.livePreview && this.index != null)\n\t\t\t{\n\t\t\t\t// Redraws the live preview\n\t\t\t\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\t\t\t\n\t\t\t\t// Redraws connected edges\n\t\t\t\tthis.state.view.invalidate(this.state.cell);\n\t\t\t\tthis.state.invalid = false;\n\t\t\t\tthis.state.view.validate();\n\t\t\t}\n\t\t\t\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxVertexHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxVertexHandler.prototype.state = null;\n\n/**\n * Variable: singleSizer\n * \n * Specifies if only one sizer handle at the bottom, right corner should be\n * used. Default is false.\n */\nmxVertexHandler.prototype.singleSizer = false;\n\n/**\n * Variable: index\n * \n * Holds the index of the current handle.\n */\nmxVertexHandler.prototype.index = null;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE or\n * if <tolerance> > 0. Default is true.\n */\nmxVertexHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxVertexHandler.prototype.handleImage = null;\n\n/**\n * Variable: handlesVisible\n * \n * If handles are currently visible.\n */\nmxVertexHandler.prototype.handlesVisible = true;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxVertexHandler.prototype.tolerance = 0;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if a rotation handle should be visible. Default is false.\n */\nmxVertexHandler.prototype.rotationEnabled = false;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxVertexHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: rotationRaster\n * \n * Specifies if rotation steps should be \"rasterized\" depening on the distance\n * to the handle. Default is true.\n */\nmxVertexHandler.prototype.rotationRaster = true;\n\n/**\n * Variable: rotationCursor\n * \n * Specifies the cursor for the rotation handle. Default is 'crosshair'.\n */\nmxVertexHandler.prototype.rotationCursor = 'crosshair';\n\n/**\n * Variable: livePreview\n * \n * Specifies if resize should change the cell in-place. This is an experimental\n * feature for non-touch devices. Default is false.\n */\nmxVertexHandler.prototype.livePreview = false;\n\n/**\n * Variable: movePreviewToFront\n * \n * Specifies if the live preview should be moved to the front.\n */\nmxVertexHandler.prototype.movePreviewToFront = false;\n\n/**\n * Variable: manageSizers\n * \n * Specifies if sizers should be hidden and spaced if the vertex is small.\n * Default is false.\n */\nmxVertexHandler.prototype.manageSizers = false;\n\n/**\n * Variable: constrainGroupByChildren\n * \n * Specifies if the size of groups should be constrained by the children.\n * Default is false.\n */\nmxVertexHandler.prototype.constrainGroupByChildren = false;\n\n/**\n * Variable: rotationHandleVSpacing\n * \n * Vertical spacing for rotation icon. Default is -16.\n */\nmxVertexHandler.prototype.rotationHandleVSpacing = -16;\n\n/**\n * Variable: horizontalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset horizontally.\n */\nmxVertexHandler.prototype.horizontalOffset = 0;\n\n/**\n * Variable: verticalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset vertically.\n */\nmxVertexHandler.prototype.verticalOffset = 0;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.selectionBorder = this.createSelectionShape(this.bounds);\n\t// VML dialect required here for event transparency in IE\n\tthis.selectionBorder.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tthis.selectionBorder.pointerEvents = false;\n\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tthis.selectionBorder.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(this.selectionBorder.node, this.graph, this.state);\n\t\n\tif (this.graph.isCellMovable(this.state.cell))\n\t{\n\t\tthis.selectionBorder.setCursor(mxConstants.CURSOR_MOVABLE_VERTEX);\n\t}\n\n\t// Adds the sizer handles\n\tif (mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells)\n\t{\n\t\tvar resizable = this.graph.isCellResizable(this.state.cell);\n\t\tthis.sizers = [];\n\n\t\tif (resizable || (this.graph.isLabelMovable(this.state.cell) &&\n\t\t\tthis.state.width >= 2 && this.state.height >= 2))\n\t\t{\n\t\t\tvar i = 0;\n\n\t\t\tif (resizable)\n\t\t\t{\n\t\t\t\tif (!this.singleSizer)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers.push(this.createSizer('nw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('n-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('ne-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('w-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('e-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('sw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('s-resize', i++));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.sizers.push(this.createSizer('se-resize', i++));\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.model.getGeometry(this.state.cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative && !this.graph.isSwimlane(this.state.cell) &&\n\t\t\t\tthis.graph.isLabelMovable(this.state.cell))\n\t\t\t{\n\t\t\t\t// Marks this as the label handle for getHandleForEvent\n\t\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_LABEL_HANDLE, mxEvent.LABEL_HANDLE,\n\t\t\t\t\tmxConstants.LABEL_HANDLE_SIZE, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\t\tthis.sizers.push(this.labelShape);\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isCellMovable(this.state.cell) && !this.graph.isCellResizable(this.state.cell) &&\n\t\t\tthis.state.width < 2 && this.state.height < 2)\n\t\t{\n\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_MOVABLE_VERTEX,\n\t\t\t\tmxEvent.LABEL_HANDLE, null, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\tthis.sizers.push(this.labelShape);\n\t\t}\n\t}\n\t\n\t// Adds the rotation handler\n\tif (this.isRotationHandleVisible())\n\t{\n\t\tthis.rotationShape = this.createSizer(this.rotationCursor, mxEvent.ROTATION_HANDLE,\n\t\t\tmxConstants.HANDLE_SIZE + 3, mxConstants.HANDLE_FILLCOLOR);\n\t\tthis.sizers.push(this.rotationShape);\n\t}\n\n\tthis.customHandles = this.createCustomHandles();\n\tthis.redraw();\n\t\n\tif (this.constrainGroupByChildren)\n\t{\n\t\tthis.updateMinBounds();\n\t}\n};\n\n/**\n * Function: isRotationHandleVisible\n * \n * Returns true if the rotation handle should be showing.\n */\nmxVertexHandler.prototype.isRotationHandleVisible = function()\n{\n\treturn this.graph.isEnabled() && this.rotationEnabled && this.graph.isCellRotatable(this.state.cell) &&\n\t\t(mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells);\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the aspect ratio if the cell should be maintained.\n */\nmxVertexHandler.prototype.isConstrainedEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent()) || this.state.style[mxConstants.STYLE_ASPECT] == 'fixed';\n};\n\n/**\n * Function: isCenteredEvent\n * \n * Returns true if the center of the vertex should be maintained during the resize.\n */\nmxVertexHandler.prototype.isCenteredEvent = function(state, me)\n{\n\treturn false;\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxVertexHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: updateMinBounds\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.updateMinBounds = function()\n{\n\tvar children = this.graph.getChildCells(this.state.cell);\n\t\n\tif (children.length > 0)\n\t{\n\t\tthis.minBounds = this.graph.view.getBounds(children);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tvar s = this.state.view.scale;\n\t\t\tvar t = this.state.view.translate;\n\n\t\t\tthis.minBounds.x -= this.state.x;\n\t\t\tthis.minBounds.y -= this.state.y;\n\t\t\tthis.minBounds.x /= s;\n\t\t\tthis.minBounds.y /= s;\n\t\t\tthis.minBounds.width /= s;\n\t\t\tthis.minBounds.height /= s;\n\t\t\tthis.x0 = this.state.x / s - t.x;\n\t\t\tthis.y0 = this.state.y / s - t.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: getSelectionBounds\n * \n * Returns the mxRectangle that defines the bounds of the selection\n * border.\n */\nmxVertexHandler.prototype.getSelectionBounds = function(state)\n{\n\treturn new mxRectangle(Math.round(state.x), Math.round(state.y), Math.round(state.width), Math.round(state.height));\n};\n\n/**\n * Function: createParentHighlightShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\treturn this.createSelectionShape(bounds);\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createSelectionShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(\n\t\tmxRectangle.fromRectangle(bounds),\n\t\tnull, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.VERTEX_SELECTION_COLOR>.\n */\nmxVertexHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.VERTEX_SELECTION_STROKEWIDTH>.\n */\nmxVertexHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.VERTEX_SELECTION_DASHED>.\n */\nmxVertexHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_DASHED;\n};\n\n/**\n * Function: createSizer\n * \n * Creates a sizer handle for the specified cursor and index and returns\n * the new <mxRectangleShape> that represents the handle.\n */\nmxVertexHandler.prototype.createSizer = function(cursor, index, size, fillColor)\n{\n\tsize = size || mxConstants.HANDLE_SIZE;\n\t\n\tvar bounds = new mxRectangle(0, 0, size, size);\n\tvar sizer = this.createSizerShape(bounds, index, fillColor);\n\n\tif (sizer.isHtmlAllowed() && this.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t{\n\t\tsizer.bounds.height -= 1;\n\t\tsizer.bounds.width -= 1;\n\t\tsizer.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tsizer.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tsizer.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tsizer.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(sizer.node, this.graph, this.state);\n\t\n\tif (this.graph.isEnabled())\n\t{\n\t\tsizer.setCursor(cursor);\n\t}\n\t\n\tif (!this.isSizerVisible(index))\n\t{\n\t\tsizer.visible = false;\n\t}\n\t\n\treturn sizer;\n};\n\n/**\n * Function: isSizerVisible\n * \n * Returns true if the sizer for the given index is visible.\n * This returns true for all given indices.\n */\nmxVertexHandler.prototype.isSizerVisible = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: createSizerShape\n * \n * Creates the shape used for the sizer handle for the specified bounds an\n * index. Only images and rectangles should be returned if support for HTML\n * labels with not foreign objects is required.\n */\nmxVertexHandler.prototype.createSizerShape = function(bounds, index, fillColor)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tbounds = new mxRectangle(bounds.x, bounds.y, this.handleImage.width, this.handleImage.height);\n\t\tvar shape = new mxImageShape(bounds, this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse if (index == mxEvent.ROTATION_HANDLE)\n\t{\n\t\treturn new mxEllipse(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangleShape(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createBounds\n * \n * Helper method to create an <mxRectangle> around the given centerpoint\n * with a width and height of 2*s or 6, if no s is given.\n */\nmxVertexHandler.prototype.moveSizerTo = function(shape, x, y)\n{\n\tif (shape != null)\n\t{\n\t\tshape.bounds.x = Math.floor(x - shape.bounds.width / 2);\n\t\tshape.bounds.y = Math.floor(y - shape.bounds.height / 2);\n\t\t\n\t\t// Fixes visible inactive handles in VML\n\t\tif (shape.node != null && shape.node.style.display != 'none')\n\t\t{\n\t\t\tshape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event. This returns the index\n * of the sizer from where the event originated or <mxEvent.LABEL_INDEX>.\n */\nmxVertexHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\n\tvar checkShape = mxUtils.bind(this, function(shape)\n\t{\n\t\tvar st = (shape != null && shape.constructor != mxImageShape &&\n\t\t\tthis.allowHandleBoundsCheck) ? shape.strokewidth + shape.svgStrokeTolerance : null;\n\t\tvar real = (st != null) ? new mxRectangle(me.getGraphX() - Math.floor(st / 2),\n\t\t\tme.getGraphY() - Math.floor(st / 2), st, st) : hit;\n\n\t\treturn shape != null && (me.isSource(shape) || (real != null && mxUtils.intersects(shape.bounds, real) &&\n\t\t\tshape.node.style.display != 'none' && shape.node.style.visibility != 'hidden'));\n\t});\n\t\n\tif (checkShape(this.rotationShape))\n\t{\n\t\treturn mxEvent.ROTATION_HANDLE;\n\t}\n\telse if (checkShape(this.labelShape))\n\t{\n\t\treturn mxEvent.LABEL_HANDLE;\n\t}\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.sizers[i]))\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxVertexHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event if a handle has been clicked. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxVertexHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tvar handle = this.getHandleForEvent(me);\n\n\t\tif (handle != null)\n\t\t{\n\t\t\tthis.start(me.getGraphX(), me.getGraphY(), handle);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: isLivePreviewBorder\n * \n * Called if <livePreview> is enabled to check if a border should be painted.\n * This implementation returns true if the shape is transparent.\n */\nmxVertexHandler.prototype.isLivePreviewBorder = function()\n{\n\treturn this.state.shape != null && this.state.shape.fill == null && this.state.shape.stroke == null;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.start = function(x, y, index)\n{\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.livePreviewActive = this.livePreview && this.graph.model.getChildCount(this.state.cell) == 0;\n\t\tthis.inTolerance = true;\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t\tthis.index = index;\n\t\tthis.startX = x;\n\t\tthis.startY = y;\n\t\t\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.isGhostPreview())\n\t\t{\n\t\t\tthis.ghostPreview = this.createGhostPreview();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Saves reference to parent state\n\t\t\tvar model = this.state.view.graph.model;\n\t\t\tvar parent = model.getParent(this.state.cell);\n\t\t\t\n\t\t\tif (this.state.view.currentRoot != parent && (model.isVertex(parent) || model.isEdge(parent)))\n\t\t\t{\n\t\t\t\tthis.parentState = this.state.view.graph.view.getState(parent);\n\t\t\t}\n\t\t\t\n\t\t\t// Creates a preview that can be on top of any HTML label\n\t\t\tthis.selectionBorder.node.style.display = (index == mxEvent.ROTATION_HANDLE) ? 'inline' : 'none';\n\t\t\t\n\t\t\t// Creates the border that represents the new bounds\n\t\t\tif (!this.livePreviewActive || this.isLivePreviewBorder())\n\t\t\t{\n\t\t\t\tthis.preview = this.createSelectionShape(this.bounds);\n\t\t\t\t\n\t\t\t\tif (!(mxClient.IS_SVG && Number(this.state.style[mxConstants.STYLE_ROTATION] || '0') != 0) &&\n\t\t\t\t\tthis.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t\t\t\t{\n\t\t\t\t\tthis.preview.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\t\t\tthis.preview.init(this.graph.container);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.preview.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.preview.init(this.graph.view.getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\t// With the rotation handle in a corner, need the angle and distance\n\t\t\t\tvar pos = this.getRotationHandlePosition();\n\t\t\t\t\n\t\t\t\tvar dx = pos.x - this.state.getCenterX();\n\t\t\t\tvar dy = pos.y - this.state.getCenterY();\n\t\t\t\t\n\t\t\t\tthis.startAngle = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : 0;\n\t\t\t\tthis.startDist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t}\n\t\n\t\t\t// Prepares the handles for live preview\n\t\t\tif (this.livePreviewActive)\n\t\t\t{\n\t\t\t\tthis.hideSizers();\n\t\t\t\t\n\t\t\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t\t\t{\n\t\t\t\t\tthis.rotationShape.node.style.display = '';\n\t\t\t\t}\n\t\t\t\telse if (index == mxEvent.LABEL_HANDLE)\n\t\t\t\t{\n\t\t\t\t\tthis.labelShape.node.style.display = '';\n\t\t\t\t}\n\t\t\t\telse if (this.sizers != null && this.sizers[index] != null)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[index].node.style.display = '';\n\t\t\t\t}\n\t\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Gets the array of connected edge handlers for redrawing\n\t\t\t\tvar edges = this.graph.getEdges(this.state.cell);\n\t\t\t\tthis.edgeHandlers = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(edges[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (handler != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.edgeHandlers.push(handler);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: createGhostPreview\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.createGhostPreview = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\tshape.init(this.graph.view.getOverlayPane());\n\tshape.scale = this.state.view.scale;\n\tshape.bounds = this.bounds;\n\tshape.outline = true;\n\t\n\treturn shape;\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxVertexHandler.prototype.setHandlesVisible = function(visible)\n{\n\tthis.handlesVisible = visible;\n\t\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: hideSizers\n * \n * Hides all sizers except.\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.hideSizers = function()\n{\n\tthis.setHandlesVisible(false);\n};\n\n/**\n * Function: checkTolerance\n * \n * Checks if the coordinates for the given event are within the\n * <mxGraph.tolerance>. If the event is a mouse event then the tolerance is\n * ignored.\n */\nmxVertexHandler.prototype.checkTolerance = function(me)\n{\n\tif (this.inTolerance && this.startX != null && this.startY != null)\n\t{\n\t\tif (mxEvent.isMouseEvent(me.getEvent()) ||\n\t\t\tMath.abs(me.getGraphX() - this.startX) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.startY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxVertexHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxVertexHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundAngle\n * \n * Hook for rounding the angle. This uses Math.round.\n */\nmxVertexHandler.prototype.roundAngle = function(angle)\n{\n\treturn Math.round(angle * 10) / 10;\n};\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxVertexHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 100) / 100;\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxVertexHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.index != null)\n\t{\n\t\t// Checks tolerance for ignoring single clicks\n\t\tthis.checkTolerance(me);\n\n\t\tif (!this.inTolerance)\n\t\t{\n\t\t\tif (this.index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].active = true;\n\t\t\t\t\t\n\t\t\t\t\tif (this.ghostPreview != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.ghostPreview.apply(this.state);\n\t\t\t\t\t\tthis.ghostPreview.strokewidth = this.getSelectionStrokeWidth() /\n\t\t\t\t\t\t\tthis.ghostPreview.scale / this.ghostPreview.scale;\n\t\t\t\t\t\tthis.ghostPreview.isDashed = this.isSelectionDashed();\n\t\t\t\t\t\tthis.ghostPreview.stroke = this.getSelectionColor();\n\t\t\t\t\t\tthis.ghostPreview.redraw();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.selectionBounds != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.selectionBorder.node.style.display = 'none';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.movePreviewToFront)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.moveToFront();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].positionChanged();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.moveLabel(me);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.index == mxEvent.ROTATION_HANDLE)\n\t\t\t\t{\n\t\t\t\t\tthis.rotateVertex(me);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.resizeVertex(me);\n\t\t\t\t}\n\n\t\t\t\tthis.updateHint(me);\n\t\t\t}\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (!this.graph.isMouseDown && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: isGhostPreview\n * \n * Returns true if a ghost preview should be used for custom handles.\n */\nmxVertexHandler.prototype.isGhostPreview = function()\n{\n\treturn this.state.view.graph.model.getChildCount(this.state.cell) > 0;\n};\n\n/**\n * Function: moveLabel\n * \n * Moves the label.\n */\nmxVertexHandler.prototype.moveLabel = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\t\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t}\n\n\tvar index = (this.rotationShape != null) ? this.sizers.length - 2 : this.sizers.length - 1;\n\tthis.moveSizerTo(this.sizers[index], point.x, point.y);\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.rotateVertex = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar dx = this.state.x + this.state.width / 2 - point.x;\n\tvar dy = this.state.y + this.state.height / 2 - point.y;\n\tthis.currentAlpha = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : ((dy < 0) ? 180 : 0);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.currentAlpha -= 180;\n\t}\n\t\n\tthis.currentAlpha -= this.startAngle;\n\t\n\t// Rotation raster\n\tif (this.rotationRaster && this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar dx = point.x - this.state.getCenterX();\n\t\tvar dy = point.y - this.state.getCenterY();\n\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (dist - this.startDist < 2)\n\t\t{\n\t\t\traster = 15;\n\t\t}\n\t\telse if (dist - this.startDist < 25)\n\t\t{\n\t\t\traster = 5;\n\t\t}\n\t\telse\n\t\t{\n\t\t\traster = 1;\n\t\t}\n\t\t\n\t\tthis.currentAlpha = Math.round(this.currentAlpha / raster) * raster;\n\t}\n\telse\n\t{\n\t\tthis.currentAlpha = this.roundAngle(this.currentAlpha);\n\t}\n\n\tthis.selectionBorder.rotation = this.currentAlpha;\n\tthis.selectionBorder.redraw();\n\t\t\t\t\t\n\tif (this.livePreviewActive)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: resizeVertex\n * \n * Risizes the vertex.\n */\nmxVertexHandler.prototype.resizeVertex = function(me)\n{\n\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\tvar cos = Math.cos(-alpha);\n\tvar sin = Math.sin(-alpha);\n\t\n\tvar dx = point.x - this.startX;\n\tvar dy = point.y - this.startY;\n\n\t// Rotates vector for mouse gesture\n\tvar tx = cos * dx - sin * dy;\n\tvar ty = sin * dx + cos * dy;\n\t\n\tdx = tx;\n\tdy = ty;\n\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tthis.unscaledBounds = this.union(geo, dx / scale, dy / scale, this.index,\n\t\tthis.graph.isGridEnabledEvent(me.getEvent()), 1,\n\t\tnew mxPoint(0, 0), this.isConstrainedEvent(me),\n\t\tthis.isCenteredEvent(this.state, me));\n\t\n\t// Keeps vertex within maximum graph or parent bounds\n\tif (!geo.relative)\n\t{\n\t\tvar max = this.graph.getMaximumGraphBounds();\n\t\t\n\t\t// Handles child cells\n\t\tif (max != null && this.parentState != null)\n\t\t{\n\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\n\t\t\tmax.x -= (this.parentState.x - tr.x * scale) / scale;\n\t\t\tmax.y -= (this.parentState.y - tr.y * scale) / scale;\n\t\t}\n\t\t\n\t\tif (this.graph.isConstrainChild(this.state.cell))\n\t\t{\n\t\t\tvar tmp = this.graph.getCellContainmentArea(this.state.cell);\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar overlap = this.graph.getOverlap(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (overlap > 0)\n\t\t\t\t{\n\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\n\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (max == null)\n\t\t\t\t{\n\t\t\t\t\tmax = tmp;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (max != null)\n\t\t{\n\t\t\tif (this.unscaledBounds.x < max.x)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= max.x - this.unscaledBounds.x;\n\t\t\t\tthis.unscaledBounds.x = max.x;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y < max.y)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= max.y - this.unscaledBounds.y;\n\t\t\t\tthis.unscaledBounds.y = max.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.x + this.unscaledBounds.width > max.x + max.width)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= this.unscaledBounds.x +\n\t\t\t\t\tthis.unscaledBounds.width - max.x - max.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y + this.unscaledBounds.height > max.y + max.height)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= this.unscaledBounds.y +\n\t\t\t\t\tthis.unscaledBounds.height - max.y - max.height;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar old = this.bounds;\n\tthis.bounds = new mxRectangle(((this.parentState != null) ? this.parentState.x : tr.x * scale) +\n\t\t(this.unscaledBounds.x) * scale, ((this.parentState != null) ? this.parentState.y : tr.y * scale) +\n\t\t(this.unscaledBounds.y) * scale, this.unscaledBounds.width * scale, this.unscaledBounds.height * scale);\n\n\tif (geo.relative && this.parentState != null)\n\t{\n\t\tthis.bounds.x += this.state.x - this.parentState.x;\n\t\tthis.bounds.y += this.state.y - this.parentState.y;\n\t}\n\n\tcos = Math.cos(alpha);\n\tsin = Math.sin(alpha);\n\t\n\tvar c2 = new mxPoint(this.bounds.getCenterX(), this.bounds.getCenterY());\n\n\tvar dx = c2.x - ct.x;\n\tvar dy = c2.y - ct.y;\n\t\n\tvar dx2 = cos * dx - sin * dy;\n\tvar dy2 = sin * dx + cos * dy;\n\t\n\tvar dx3 = dx2 - dx;\n\tvar dy3 = dy2 - dy;\n\t\n\tvar dx4 = this.bounds.x - this.state.x;\n\tvar dy4 = this.bounds.y - this.state.y;\n\t\n\tvar dx5 = cos * dx4 - sin * dy4;\n\tvar dy5 = sin * dx4 + cos * dy4;\n\t\n\tthis.bounds.x += dx3;\n\tthis.bounds.y += dy3;\n\t\n\t// Rounds unscaled bounds to int\n\tthis.unscaledBounds.x = this.roundLength(this.unscaledBounds.x + dx3 / scale);\n\tthis.unscaledBounds.y = this.roundLength(this.unscaledBounds.y + dy3 / scale);\n\tthis.unscaledBounds.width = this.roundLength(this.unscaledBounds.width);\n\tthis.unscaledBounds.height = this.roundLength(this.unscaledBounds.height);\n\t\n\t// Shifts the children according to parent offset\n\tif (!this.graph.isCellCollapsed(this.state.cell) && (dx3 != 0 || dy3 != 0))\n\t{\n\t\tthis.childOffsetX = this.state.x - this.bounds.x + dx5;\n\t\tthis.childOffsetY = this.state.y - this.bounds.y + dy5;\n\t}\n\telse\n\t{\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t}\n\t\t\t\n\tif (!old.equals(this.bounds))\n\t{\t\n\t\tif (this.livePreviewActive)\n\t\t{\n\t\t\tthis.updateLivePreview(me);\n\t\t}\n\t\t\n\t\tif (this.preview != null)\n\t\t{\n\t\t\tthis.drawPreview();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateParentHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Repaints the live preview.\n */\nmxVertexHandler.prototype.updateLivePreview = function(me)\n{\n\t// TODO: Apply child offset to children in live preview\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\t\n\t// Saves current state\n\tvar tempState = this.state.clone();\n\n\t// Temporarily changes size and origin\n\tthis.state.x = this.bounds.x;\n\tthis.state.y = this.bounds.y;\n\tthis.state.origin = new mxPoint(this.state.x / scale - tr.x, this.state.y / scale - tr.y);\n\tthis.state.width = this.bounds.width;\n\tthis.state.height = this.bounds.height;\n\t\n\t// Redraws cell and handles\n\tvar off = this.state.absoluteOffset;\n\toff = new mxPoint(off.x, off.y);\n\n\t// Required to store and reset absolute offset for updating label position\n\tthis.state.absoluteOffset.x = 0;\n\tthis.state.absoluteOffset.y = 0;\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\t\t\t\t\n\n\tif (geo != null)\n\t{\n\t\tvar offset = geo.offset || this.EMPTY_POINT;\n\n\t\tif (offset != null && !geo.relative)\n\t\t{\n\t\t\tthis.state.absoluteOffset.x = this.state.view.scale * offset.x;\n\t\t\tthis.state.absoluteOffset.y = this.state.view.scale * offset.y;\n\t\t}\n\t\t\n\t\tthis.state.view.updateVertexLabelOffset(this.state);\n\t}\n\t\n\t// Draws the live preview\n\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\n\t// Redraws connected edges TODO: Include child edges\n\tthis.state.view.invalidate(this.state.cell);\n\tthis.state.invalid = false;\n\tthis.state.view.validate();\n\tthis.redrawHandles();\n\t\n\t// Moves live preview to front\n\tif (this.movePreviewToFront)\n\t{\n\t\tthis.moveToFront();\n\t}\n\t\n\t// Hides folding icon\n\tif (this.state.control != null && this.state.control.node != null)\n\t{\n\t\tthis.state.control.node.style.visibility = 'hidden';\n\t}\n\t\n\t// Restores current state\n\tthis.state.setState(tempState);\n};\n\n/**\n * Function: moveToFront\n * \n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.moveToFront = function()\n{\n\tif ((this.state.text != null && this.state.text.node != null &&\n\t\tthis.state.text.node.nextSibling != null) ||\n\t\t(this.state.shape != null && this.state.shape.node != null &&\n\t\tthis.state.shape.node.nextSibling != null && (this.state.text == null ||\n\t\tthis.state.shape.node.nextSibling != this.state.text.node)))\n\t{\n\t\tif (this.state.shape != null && this.state.shape.node != null)\n\t\t{\n\t\t\tthis.state.shape.node.parentNode.appendChild(this.state.shape.node);\n\t\t}\n\t\t\n\t\tif (this.state.text != null && this.state.text.node != null)\n\t\t{\n\t\t\tthis.state.text.node.parentNode.appendChild(this.state.text.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.index != null && this.state != null)\n\t{\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\t\n\t\tif (this.ghostPreview == null)\n\t\t{\n\t\t\t// Required to restore order in case of no change\n\t\t\tthis.state.view.invalidate(this.state.cell, false, false);\n\t\t\tthis.state.view.validate();\n\t\t}\n\t\t\n\t\tthis.graph.getModel().beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\t// Creates style before changing cell state\n\t\t\t\t\tvar style = this.state.view.graph.getCellStyle(this.state.cell);\n\t\t\t\t\t\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].active = false;\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute(me);\n\t\t\t\t\t\n\t\t\t\t\t// Sets style and apply on shape to force repaint and\n\t\t\t\t\t// check if execute has removed custom handles\n\t\t\t\t\tif (this.customHandles != null &&\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.style = style;\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].positionChanged();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.currentAlpha != null)\n\t\t\t\t{\n\t\t\t\t\tvar delta = this.currentAlpha - (this.state.style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\t\t\n\t\t\t\t\tif (delta != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(this.state.cell, delta);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.rotateClick();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gridEnabled = this.graph.isGridEnabledEvent(me.getEvent());\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\t\n\t\t\t\tvar dx = point.x - this.startX;\n\t\t\t\tvar dy = point.y - this.startY;\n\t\t\t\t\n\t\t\t\t// Rotates vector for mouse gesture\n\t\t\t\tvar tx = cos * dx - sin * dy;\n\t\t\t\tvar ty = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tdx = tx;\n\t\t\t\tdy = ty;\n\t\t\t\t\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\tvar recurse = this.isRecursiveResize(this.state, me);\n\t\t\t\tthis.resizeCell(this.state.cell, this.roundLength(dx / s), this.roundLength(dy / s),\n\t\t\t\t\tindex, gridEnabled, this.isConstrainedEvent(me), recurse);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.graph.getModel().endUpdate();\n\t\t}\n\n\t\tme.consume();\n\t\tthis.reset();\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: isRecursiveResize\n * \n * Returns the recursiveResize of the give state.\n * \n * Parameters:\n * \n * state - the given <mxCellState>. This implementation takes \n * the value of this state.\n * me - the mouse event.\n */\nmxVertexHandler.prototype.isRecursiveResize = function(state, me)\n{\n\treturn this.graph.isRecursiveResize(this.state);\n};\n\n/**\n * Function: rotateClick\n * \n * Hook for subclassers to implement a single click on the rotation handle.\n * This code is executed as part of the model transaction. This implementation\n * is empty.\n */\nmxVertexHandler.prototype.rotateClick = function() { };\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell and its children by the given angle in degrees.\n * \n * Parameters:\n * \n * cell - <mxCell> to be rotated.\n * angle - Angle in degrees.\n */\nmxVertexHandler.prototype.rotateCell = function(cell, angle, parent)\n{\n\tif (angle != 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isVertex(cell) || model.isEdge(cell))\n\t\t{\n\t\t\tif (!model.isEdge(cell))\n\t\t\t{\n\t\t\t\tvar style = this.graph.getCurrentCellStyle(cell);\n\t\t\t\tvar total = (style[mxConstants.STYLE_ROTATION] || 0) + angle;\n\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ROTATION, total, [cell]);\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null && !model.isEdge(parent))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.rotate(angle, new mxPoint(pgeo.width / 2, pgeo.height / 2));\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((model.isVertex(cell) && !geo.relative) || model.isEdge(cell))\n\t\t\t\t{\n\t\t\t\t\t// Recursive rotation\n\t\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(model.getChildAt(cell, i), angle, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxVertexHandler.prototype.reset = function()\n{\n\tif (this.sizers != null && this.index != null && this.sizers[this.index] != null &&\n\t\tthis.sizers[this.index].node.style.display == 'none')\n\t{\n\t\tthis.sizers[this.index].node.style.display = '';\n\t}\n\n\tthis.currentAlpha = null;\n\tthis.inTolerance = null;\n\tthis.index = null;\n\n\t// TODO: Reset and redraw cell states for live preview\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\t\n\tif (this.ghostPreview != null)\n\t{\n\t\tthis.ghostPreview.destroy();\n\t\tthis.ghostPreview = null;\n\t}\n\n\tif (this.livePreviewActive && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Shows folding icon\n\t\tif (this.state.control != null && this.state.control.node != null)\n\t\t{\n\t\t\tthis.state.control.node.style.visibility = '';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tif (this.customHandles[i].active)\n\t\t\t{\n\t\t\t\tthis.customHandles[i].active = false;\n\t\t\t\tthis.customHandles[i].reset();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.customHandles[i].setVisible(true);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Checks if handler has been destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.node.style.display = 'inline';\n\t\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\t\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y,\n\t\t\tthis.selectionBounds.width, this.selectionBounds.height);\n\t\tthis.drawPreview();\n\t}\n\n\tthis.removeHint();\n\tthis.redrawHandles();\n\tthis.edgeHandlers = null;\n\tthis.handlesVisible = true;\n\tthis.unscaledBounds = null;\n\tthis.livePreviewActive = null;\n};\n\n/**\n * Function: resizeCell\n * \n * Uses the given vector to change the bounds of the given cell\n * in the graph using <mxGraph.resizeCell>.\n */\nmxVertexHandler.prototype.resizeCell = function(cell, dx, dy, index, gridEnabled, constrained, recurse)\n{\n\tvar geo = this.graph.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (index == mxEvent.LABEL_HANDLE)\n\t\t{\n\t\t\tvar alpha = -mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(\n\t\t\t\tMath.round((this.labelShape.bounds.getCenterX() - this.startX) / scale),\n\t\t\t\tMath.round((this.labelShape.bounds.getCenterY() - this.startY) / scale)),\n\t\t\t\tcos, sin);\n\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = pt;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x += pt.x;\n\t\t\t\tgeo.offset.y += pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(cell, geo);\n\t\t}\n\t\telse if (this.unscaledBounds != null)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\n\t\t\tif (this.childOffsetX != 0 || this.childOffsetY != 0)\n\t\t\t{\n\t\t\t\tthis.moveChildren(cell, Math.round(this.childOffsetX / scale), Math.round(this.childOffsetY / scale));\n\t\t\t}\n\n\t\t\tthis.graph.resizeCell(cell, this.unscaledBounds, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: moveChildren\n * \n * Moves the children of the given cell by the given vector.\n */\nmxVertexHandler.prototype.moveChildren = function(cell, dx, dy)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\t\tvar geo = this.graph.getCellGeometry(child);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.translate(dx, dy);\n\t\t\tmodel.setGeometry(child, geo);\n\t\t}\n\t}\n};\n/**\n * Function: union\n * \n * Returns the union of the given bounds and location for the specified\n * handle index.\n * \n * To override this to limit the size of vertex via a minWidth/-Height style,\n * the following code can be used.\n * \n * (code)\n * var vertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = vertexHandlerUnion.apply(this, arguments);\n *   \n *   result.width = Math.max(result.width, mxUtils.getNumber(this.state.style, 'minWidth', 0));\n *   result.height = Math.max(result.height, mxUtils.getNumber(this.state.style, 'minHeight', 0));\n *   \n *   return result;\n * };\n * (end)\n * \n * The minWidth/-Height style can then be used as follows:\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'minWidth=100;minHeight=100;');\n * (end)\n * \n * To override this to update the height for a wrapped text if the width of a vertex is\n * changed, the following can be used.\n * \n * (code)\n * var mxVertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = mxVertexHandlerUnion.apply(this, arguments);\n *   var s = this.state;\n *   \n *   if (this.graph.isHtmlLabel(s.cell) && (index == 3 || index == 4) &&\n *       s.text != null && s.style[mxConstants.STYLE_WHITE_SPACE] == 'wrap')\n *   {\n *     var label = this.graph.getLabel(s.cell);\n *     var fontSize = mxUtils.getNumber(s.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n *     var ww = result.width / s.view.scale - s.text.spacingRight - s.text.spacingLeft\n *     \n *     result.height = mxUtils.getSizeForString(label, fontSize, s.style[mxConstants.STYLE_FONTFAMILY], ww).height;\n *   }\n *   \n *   return result;\n * };\n * (end)\n */\nmxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained, centered)\n{\n\tgridEnabled = (gridEnabled != null) ? gridEnabled && this.graph.gridEnabled : this.graph.gridEnabled;\n\t\n\tif (this.singleSizer)\n\t{\n\t\tvar x = bounds.x + bounds.width + dx;\n\t\tvar y = bounds.y + bounds.height + dy;\n\t\t\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tx = this.graph.snap(x / scale) * scale;\n\t\t\ty = this.graph.snap(y / scale) * scale;\n\t\t}\n\t\t\n\t\tvar rect = new mxRectangle(bounds.x, bounds.y, 0, 0);\n\t\trect.add(new mxRectangle(x, y, 0, 0));\n\t\t\n\t\treturn rect;\n\t}\n\telse\n\t{\n\t\tvar w0 = bounds.width;\n\t\tvar h0 = bounds.height;\n\t\tvar left = bounds.x - tr.x * scale;\n\t\tvar right = left + w0;\n\t\tvar top = bounds.y - tr.y * scale;\n\t\tvar bottom = top + h0;\n\t\t\n\t\tvar cx = left + w0 / 2;\n\t\tvar cy = top + h0 / 2;\n\t\t\n\t\tif (index > 4 /* Bottom Row */)\n\t\t{\n\t\t\tbottom = bottom + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tbottom = this.graph.snap(bottom / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbottom = Math.round(bottom / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index < 3 /* Top Row */)\n\t\t{\n\t\t\ttop = top + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\ttop = this.graph.snap(top / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttop = Math.round(top / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (index == 0 || index == 3 || index == 5 /* Left */)\n\t\t{\n\t\t\tleft += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tleft = this.graph.snap(left / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tleft = Math.round(left / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index == 2 || index == 4 || index == 7 /* Right */)\n\t\t{\n\t\t\tright += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tright = this.graph.snap(right / scale) * scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tright = Math.round(right / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar width = right - left;\n\t\tvar height = bottom - top;\n\n\t\tif (constrained)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar aspect = geo.width / geo.height;\n\t\t\t\t\n\t\t\t\tif (index== 1 || index== 2 || index == 7 || index == 6)\n\t\t\t\t{\n\t\t\t\t\twidth = height * aspect;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\theight = width / aspect;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (index == 0)\n\t\t\t\t{\n\t\t\t\t\tleft = right - width;\n\t\t\t\t\ttop = bottom - height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (centered)\n\t\t{\n\t\t\twidth += (width - w0);\n\t\t\theight += (height - h0);\n\t\t\t\n\t\t\tvar cdx = cx - (left + width / 2);\n\t\t\tvar cdy = cy - (top + height / 2);\n\n\t\t\tleft += cdx;\n\t\t\ttop += cdy;\n\t\t\tright += cdx;\n\t\t\tbottom += cdy;\n\t\t}\n\n\t\t// Flips over left side\n\t\tif (width < 0)\n\t\t{\n\t\t\tleft += width;\n\t\t\twidth = Math.abs(width);\n\t\t}\n\t\t\n\t\t// Flips over top side\n\t\tif (height < 0)\n\t\t{\n\t\t\ttop += height;\n\t\t\theight = Math.abs(height);\n\t\t}\n\n\t\tvar result = new mxRectangle(left + tr.x * scale, top + tr.y * scale, width, height);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tresult.width = Math.max(result.width, this.minBounds.x * scale + this.minBounds.width * scale +\n\t\t\t\tMath.max(0, this.x0 * scale - result.x));\n\t\t\tresult.height = Math.max(result.height, this.minBounds.y * scale + this.minBounds.height * scale +\n\t\t\t\tMath.max(0, this.y0 * scale - result.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Redraws the handles and the preview.\n */\nmxVertexHandler.prototype.redraw = function(ignoreHandles)\n{\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y,\n\t\tthis.selectionBounds.width, this.selectionBounds.height);\n\tthis.drawPreview();\n\n\tif (!ignoreHandles)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Returns the padding to be used for drawing handles for the current <bounds>.\n */\nmxVertexHandler.prototype.getHandlePadding = function()\n{\n\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\tvar result = new mxPoint(0, 0);\n\tvar tol = this.tolerance;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null &&\n\t\t(this.bounds.width < 2 * this.sizers[0].bounds.width + 2 * tol ||\n\t\tthis.bounds.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t{\n\t\ttol /= 2;\n\t\t\n\t\tresult.x = this.sizers[0].bounds.width + tol;\n\t\tresult.y = this.sizers[0].bounds.height + tol;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSizerBounds\n * \n * Returns the bounds used to paint the resize handles.\n */\nmxVertexHandler.prototype.getSizerBounds = function()\n{\n\treturn this.bounds;\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles. To hide certain handles the following code can be used.\n * \n * (code)\n * mxVertexHandler.prototype.redrawHandles = function()\n * {\n *   mxVertexHandlerRedrawHandles.apply(this, arguments);\n *   \n *   if (this.sizers != null && this.sizers.length > 7)\n *   {\n *     this.sizers[1].node.style.display = 'none';\n *     this.sizers[6].node.style.display = 'none';\n *   }\n * };\n * (end)\n */\nmxVertexHandler.prototype.redrawHandles = function()\n{\n\tvar s = this.getSizerBounds();\n\tvar tol = this.tolerance;\n\tthis.horizontalOffset = 0;\n\tthis.verticalOffset = 0;\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility =\n\t\t\t\t(this.handlesVisible && this.isCustomHandleVisible(\n\t\t\t\t\tthis.customHandles[i])) ? '' : 'hidden';\n\t\t}\n\t}\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null)\n\t{\n\t\tif (this.index == null && this.manageSizers && this.sizers.length >= 8)\n\t\t{\n\t\t\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\t\t\tvar padding = this.getHandlePadding();\n\t\t\tthis.horizontalOffset = padding.x;\n\t\t\tthis.verticalOffset = padding.y;\n\t\t\t\n\t\t\tif (this.horizontalOffset != 0 || this.verticalOffset != 0)\n\t\t\t{\n\t\t\t\ts = new mxRectangle(s.x, s.y, s.width, s.height);\n\n\t\t\t\ts.x -= this.horizontalOffset / 2;\n\t\t\t\ts.width += this.horizontalOffset;\n\t\t\t\ts.y -= this.verticalOffset / 2;\n\t\t\t\ts.height += this.verticalOffset;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tif ((s.width < 2 * this.sizers[0].bounds.width + 2 * tol) ||\n\t\t\t\t\t(s.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[2].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[5].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[7].node.style.display = 'none';\n\t\t\t\t}\n\t\t\t\telse if (this.handlesVisible)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = '';\n\t\t\t\t\tthis.sizers[2].node.style.display = '';\n\t\t\t\t\tthis.sizers[5].node.style.display = '';\n\t\t\t\t\tthis.sizers[7].node.style.display = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar r = s.x + s.width;\n\t\tvar b = s.y + s.height;\n\t\t\n\t\tif (this.singleSizer)\n\t\t{\n\t\t\tthis.moveSizerTo(this.sizers[0], r, b);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cx = s.x + s.width / 2;\n\t\t\tvar cy = s.y + s.height / 2;\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tvar crs = ['nw-resize', 'n-resize', 'ne-resize', 'e-resize', 'se-resize', 's-resize', 'sw-resize', 'w-resize'];\n\t\t\t\t\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\t\t\t\n\t\t\t\tvar da = Math.round(alpha * 4 / Math.PI);\n\t\t\t\t\n\t\t\t\tvar ct = new mxPoint(s.getCenterX(), s.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(s.x, s.y), cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[0], pt.x, pt.y);\n\t\t\t\tthis.sizers[0].setCursor(crs[mxUtils.mod(0 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[1], pt.x, pt.y);\n\t\t\t\tthis.sizers[1].setCursor(crs[mxUtils.mod(1 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[2], pt.x, pt.y);\n\t\t\t\tthis.sizers[2].setCursor(crs[mxUtils.mod(2 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[3], pt.x, pt.y);\n\t\t\t\tthis.sizers[3].setCursor(crs[mxUtils.mod(7 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[4], pt.x, pt.y);\n\t\t\t\tthis.sizers[4].setCursor(crs[mxUtils.mod(3 + da, crs.length)]);\n\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[5], pt.x, pt.y);\n\t\t\t\tthis.sizers[5].setCursor(crs[mxUtils.mod(6 + da, crs.length)]);\n\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[6], pt.x, pt.y);\n\t\t\t\tthis.sizers[6].setCursor(crs[mxUtils.mod(5 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[7], pt.x, pt.y);\n\t\t\t\tthis.sizers[7].setCursor(crs[mxUtils.mod(4 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx + this.state.absoluteOffset.x;\n\t\t\t\tpt.y = cy + this.state.absoluteOffset.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\tthis.moveSizerTo(this.sizers[8], pt.x, pt.y);\n\t\t\t}\n\t\t\telse if (this.state.width >= 2 && this.state.height >= 2)\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], this.state.x, this.state.y);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.rotationShape != null)\n\t{\n\t\tvar alpha = mxUtils.toRadians((this.currentAlpha != null) ? this.currentAlpha : this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\t\n\t\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(this.getRotationHandlePosition(), cos, sin, ct);\n\n\t\tif (this.rotationShape.node != null)\n\t\t{\n\t\t\tthis.moveSizerTo(this.rotationShape, pt.x, pt.y);\n\n\t\t\t// Hides rotation handle during text editing\n\t\t\tthis.rotationShape.node.style.visibility = (this.state.view.graph.isEditing() ||\n\t\t\t\t!this.handlesVisible) ? 'hidden' : '';\n\t\t}\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t}\n\t\n\tif (this.edgeHandlers != null)\n\t{\t\t\n\t\tfor (var i = 0; i < this.edgeHandlers.length; i++)\n\t\t{\n\t\t\tthis.edgeHandlers[i].redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isCustomHandleVisible\n * \n * Returns true if the given custom handle is visible.\n */\nmxVertexHandler.prototype.isCustomHandleVisible = function(handle)\n{\n\treturn !this.graph.isEditing() && this.state.view.graph.getSelectionCount() == 1;\n};\n\n/**\n * Function: getRotationHandlePosition\n * \n * Returns an <mxPoint> that defines the rotation handle position.\n */\nmxVertexHandler.prototype.getRotationHandlePosition = function()\n{\n\treturn new mxPoint(this.bounds.x + this.bounds.width / 2, this.bounds.y + this.rotationHandleVSpacing)\n};\n\n/**\n * Function: isParentHighlightVisible\n * \n * Returns true if the parent highlight should be visible. This implementation\n * always returns true.\n */\nmxVertexHandler.prototype.isParentHighlightVisible = function()\n{\n\treturn !this.graph.isCellSelected(this.graph.model.getParent(this.state.cell));\n};\n\n/**\n * Function: updateParentHighlight\n * \n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxVertexHandler.prototype.updateParentHighlight = function()\n{\n\tif (!this.isDestroyed())\n\t{\n\t\tvar visible = this.isParentHighlightVisible();\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\tif (this.parentHighlight != null)\n\t\t{\n\t\t\tif (this.graph.model.isVertex(parent) && visible)\n\t\t\t{\n\t\t\t\tvar b = this.parentHighlight.bounds;\n\t\t\t\t\n\t\t\t\tif (pstate != null && (b.x != pstate.x || b.y != pstate.y ||\n\t\t\t\t\tb.width != pstate.width || b.height != pstate.height))\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight.bounds = mxRectangle.fromRectangle(pstate);\n\t\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (pstate != null && pstate.parentHighlight == this.parentHighlight)\n\t\t\t\t{\n\t\t\t\t\tpstate.parentHighlight = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.parentHighlight.destroy();\n\t\t\t\tthis.parentHighlight = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.parentHighlightEnabled && visible)\n\t\t{\n\t\t\tif (this.graph.model.isVertex(parent) && pstate != null &&\n\t\t\t\tpstate.parentHighlight == null)\n\t\t\t{\n\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t\n\t\t\t\t// Shows highlight once per parent\n\t\t\t\tpstate.parentHighlight = this.parentHighlight;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxVertexHandler.prototype.drawPreview = function()\n{\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.bounds = this.bounds;\n\t\t\n\t\tif (this.preview.node.parentNode == this.graph.container)\n\t\t{\n\t\t\tthis.preview.bounds.width = Math.max(0, this.preview.bounds.width - 1);\n\t\t\tthis.preview.bounds.height = Math.max(0, this.preview.bounds.height - 1);\n\t\t}\n\t\n\t\tthis.preview.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tthis.preview.redraw();\n\t}\n\t\n\tthis.selectionBorder.bounds = this.getSelectionBorderBounds();\n\tthis.selectionBorder.redraw();\n\tthis.updateParentHighlight();\n};\n\n/**\n * Function: getSelectionBorderBounds\n * \n * Returns the bounds for the selection border.\n */\nmxVertexHandler.prototype.getSelectionBorderBounds = function()\n{\n\treturn this.bounds;\n};\n\n/**\n * Function: isDestroyed\n * \n * Returns true if this handler was destroyed or not initialized.\n */\nmxVertexHandler.prototype.isDestroyed = function()\n{\n\treturn this.selectionBorder == null;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxVertexHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\tif (pstate != null && pstate.parentHighlight == this.parentHighlight)\n\t\t{\n\t\t\tpstate.parentHighlight = null;\n\t\t}\n\t\t\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.ghostPreview != null)\n\t{\n\t\tthis.ghostPreview.destroy();\n\t\tthis.ghostPreview = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tthis.labelShape = null;\n\tthis.removeHint();\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].destroy();\n\t\t}\n\t\t\n\t\tthis.sizers = null;\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].destroy();\n\t\t}\n\t\t\n\t\tthis.customHandles = null;\n\t}\n};\n\n__mxOutput.mxVertexHandler = typeof mxVertexHandler !== 'undefined' ? mxVertexHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler> for each selected edge.\n * \n * To enable adding/removing control points, the following code can be used:\n * \n * (code)\n * mxEdgeHandler.prototype.addEnabled = true;\n * mxEdgeHandler.prototype.removeEnabled = true;\n * (end)\n * \n * Note: This experimental feature is not recommended for production use.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxEdgeHandler(state)\n{\n\tif (state != null && state.shape != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar dirty = this.index != null;\n\t\t\tthis.reset();\n\t\t\t\n\t\t\tif (dirty)\n\t\t\t{\n\t\t\t\tthis.graph.cellRenderer.redraw(this.state, false, state.view.isRendering());\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxEdgeHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxEdgeHandler.prototype.state = null;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> which is used for highlighting terminals.\n */\nmxEdgeHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxEdgeHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while a connection is being changed.\n */\nmxEdgeHandler.prototype.error = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the preview edge.\n */\nmxEdgeHandler.prototype.shape = null;\n\n/**\n * Variable: bends\n * \n * Holds the <mxShapes> that represent the points.\n */\nmxEdgeHandler.prototype.bends = null;\n\n/**\n * Variable: labelShape\n * \n * Holds the <mxShape> that represents the label position.\n */\nmxEdgeHandler.prototype.labelShape = null;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxEdgeHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if adding bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.addEnabled = false;\n\n/**\n * Variable: removeEnabled\n * \n * Specifies if removing bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.removeEnabled = false;\n\n/**\n * Variable: dblClickRemoveEnabled\n * \n * Specifies if removing bends by double click is enabled. Default is false.\n */\nmxEdgeHandler.prototype.dblClickRemoveEnabled = false;\n\n/**\n * Variable: mergeRemoveEnabled\n * \n * Specifies if removing bends by dropping them on other bends is enabled.\n * Default is false.\n */\nmxEdgeHandler.prototype.mergeRemoveEnabled = false;\n\n/**\n * Variable: straightRemoveEnabled\n * \n * Specifies if removing bends by creating straight segments should be enabled.\n * If enabled, this can be overridden by holding down the alt key while moving.\n * Default is false.\n */\nmxEdgeHandler.prototype.straightRemoveEnabled = false;\n\n/**\n * Variable: virtualBendsEnabled\n * \n * Specifies if virtual bends should be added in the center of each\n * segments. These bends can then be used to add new waypoints.\n * Default is false.\n */\nmxEdgeHandler.prototype.virtualBendsEnabled = false;\n\n/**\n * Variable: virtualBendOpacity\n * \n * Opacity to be used for virtual bends (see <virtualBendsEnabled>).\n * Default is 20.\n */\nmxEdgeHandler.prototype.virtualBendOpacity = 20;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxEdgeHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: preferHtml\n * \n * Specifies if bends should be added to the graph container. This is updated\n * in <init> based on whether the edge or one of its terminals has an HTML\n * label in the container.\n */\nmxEdgeHandler.prototype.preferHtml = false;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE\n * Default is true.\n */\nmxEdgeHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: snapToTerminals\n * \n * Specifies if waypoints should snap to the routing centers of terminals.\n * Default is false.\n */\nmxEdgeHandler.prototype.snapToTerminals = false;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxEdgeHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxEdgeHandler.prototype.tolerance = 0;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxEdgeHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: manageLabelHandle\n * \n * Specifies if the label handle should be moved if it intersects with another\n * handle. Uses <checkLabelHandle> for checking and moving. Default is false.\n */\nmxEdgeHandler.prototype.manageLabelHandle = false;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this edge handler.\n */\nmxEdgeHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\t\n\t// Clones the original points from the cell\n\t// and makes sure at least one point exists\n\tthis.points = [];\n\t\n\t// Uses the absolute points of the state\n\t// for the initial configuration and preview\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.shape = this.createSelectionShape(this.abspoints);\n\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\tthis.shape.init(this.graph.getView().getOverlayPane());\n\tthis.shape.pointerEvents = false;\n\tthis.shape.setCursor(mxConstants.CURSOR_MOVABLE_EDGE);\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\n\t// Updates preferHtml\n\tthis.preferHtml = this.state.text != null &&\n\t\tthis.state.text.node.parentNode == this.graph.container;\n\t\n\tif (!this.preferHtml)\n\t{\n\t\t// Checks source terminal\n\t\tvar sourceState = this.state.getVisibleTerminalState(true);\n\t\t\n\t\tif (sourceState != null)\n\t\t{\n\t\t\tthis.preferHtml = sourceState.text != null &&\n\t\t\t\tsourceState.text.node.parentNode == this.graph.container;\n\t\t}\n\t\t\n\t\tif (!this.preferHtml)\n\t\t{\n\t\t\t// Checks target terminal\n\t\t\tvar targetState = this.state.getVisibleTerminalState(false);\n\t\t\t\n\t\t\tif (targetState != null)\n\t\t\t{\n\t\t\t\tthis.preferHtml = targetState.text != null &&\n\t\t\t\ttargetState.text.node.parentNode == this.graph.container;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Creates bends for the non-routed absolute points\n\t// or bends that don't correspond to points\n\tif (this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells ||\n\t\tmxGraphHandler.prototype.maxCells <= 0)\n\t{\n\t\tthis.bends = this.createBends();\n\n\t\tif (this.isVirtualBendsEnabled())\n\t\t{\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t}\n\n\t// Adds a rectangular handle for the label position\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape = this.createLabelHandleShape();\n\tthis.initBend(this.labelShape);\n\tthis.labelShape.setCursor(mxConstants.CURSOR_LABEL_HANDLE);\n\t\n\tthis.customHandles = this.createCustomHandles();\n\t\n\tthis.updateParentHighlight();\n\tthis.redraw();\n};\n\n\n/**\n * Function: isParentHighlightVisible\n * \n * Returns true if the parent highlight should be visible. This implementation\n * always returns true.\n */\nmxEdgeHandler.prototype.isParentHighlightVisible = mxVertexHandler.prototype.isParentHighlightVisible;\n\n/**\n * Function: updateParentHighlight\n * \n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxEdgeHandler.prototype.updateParentHighlight = mxVertexHandler.prototype.updateParentHighlight;\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxEdgeHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: isVirtualBendsEnabled\n * \n * Returns true if virtual bends should be added. This returns true if\n * <virtualBendsEnabled> is true and the current style allows and\n * renders custom waypoints.\n */\nmxEdgeHandler.prototype.isVirtualBendsEnabled = function(evt)\n{\n\treturn this.virtualBendsEnabled && (this.state.style[mxConstants.STYLE_EDGE] == null ||\n\t\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.NONE ||\n\t\t\tthis.state.style[mxConstants.STYLE_NOEDGESTYLE] == 1)  &&\n\t\t\tmxUtils.getValue(this.state.style, mxConstants.STYLE_SHAPE, null) != 'arrow';\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell allows new connections to be created. This implementation\n * always returns true.\n */\nmxEdgeHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: isAddPointEvent\n * \n * Returns true if the given event is a trigger to add a new point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isAddPointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isRemovePointEvent\n * \n * Returns true if the given event is a trigger to remove a point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isRemovePointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: getSelectionPoints\n * \n * Returns the list of points that defines the selection stroke.\n */\nmxEdgeHandler.prototype.getSelectionPoints = function(state)\n{\n\treturn state.absolutePoints;\n};\n\n/**\n * Function: createParentHighlightShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(mxRectangle.fromRectangle(bounds),\n\t\tnull, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createSelectionShape = function(points)\n{\n\tvar shape = new this.state.shape.constructor();\n\tshape.outline = true;\n\tshape.apply(this.state);\n\t\n\tshape.isDashed = this.isSelectionDashed();\n\tshape.stroke = this.getSelectionColor();\n\tshape.isShadow = false;\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.EDGE_SELECTION_COLOR>.\n */\nmxEdgeHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.EDGE_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.EDGE_SELECTION_STROKEWIDTH>.\n */\nmxEdgeHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.EDGE_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.EDGE_SELECTION_DASHED>.\n */\nmxEdgeHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.EDGE_SELECTION_DASHED;\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxEdgeHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: getCellAt\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.getCellAt = function(x, y)\n{\n\treturn (!this.outlineConnect) ? this.graph.getCellAt(x, y) : null;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tvar self = this; // closure\n\n\t// Only returns edges if they are connectable and never returns\n\t// the edge that is currently being modified\n\tmarker.getCell = function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(this, arguments);\n\n\t\t// Checks for cell at preview point (with grid)\n\t\tif ((cell == self.state.cell || cell == null) && self.currentPoint != null)\n\t\t{\n\t\t\tcell = self.graph.getCellAt(self.currentPoint.x, self.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar model = self.graph.getModel();\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && self.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, self.currentPoint.x, self.currentPoint.y)) ||\n\t\t\t(!self.isConnectableCell(cell)) || (cell == self.state.cell ||\n\t\t\t(cell != null && !self.graph.connectableEdges && model.isEdge(cell))) ||\n\t\t\tmodel.isAncestor(self.state.cell, cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (!this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\treturn cell;\n\t};\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = function(state)\n\t{\n\t\tvar model = self.graph.getModel();\n\t\tvar other = self.graph.view.getTerminalPort(state,\n\t\t\tself.graph.view.getState(model.getTerminal(self.state.cell,\n\t\t\t!self.isSource)), !self.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (self.isSource) ? state.cell : otherCell;\n\t\tvar target = (self.isSource) ? otherCell : state.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tself.error = self.validateConnection(source, target);\n\n\t\treturn self.error == null;\n\t};\n\t\n\treturn marker;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source, target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxEdgeHandler.prototype.validateConnection = function(source, target)\n{\n\treturn this.graph.getEdgeValidationError(this.state.cell, source, target);\n};\n\n/**\n * Function: createBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar bends = [];\n\n\tfor (var i = 0; i < this.abspoints.length; i++)\n\t{\n\t\tif (this.isHandleVisible(i))\n\t\t{\n\t\t\tvar source = i == 0;\n\t\t\tvar target = i == this.abspoints.length - 1;\n\t\t\tvar terminal = source || target;\n\n\t\t\tif (terminal || this.graph.isCellBendable(cell))\n\t\t\t{\n\t\t\t\t(mxUtils.bind(this, function(index)\n\t\t\t\t{\n\t\t\t\t\tvar bend = this.createHandleShape(index);\n\t\t\t\t\tthis.initBend(bend, mxUtils.bind(this, mxUtils.bind(this, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.dblClickRemoveEnabled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.removePoint(this.state, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t})));\n\t\n\t\t\t\t\tif (this.isHandleEnabled(i))\n\t\t\t\t\t{\n\t\t\t\t\t\tbend.setCursor((terminal) ? mxConstants.CURSOR_TERMINAL_HANDLE : mxConstants.CURSOR_BEND_HANDLE);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbends.push(bend);\n\t\t\t\t\n\t\t\t\t\tif (!terminal)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t\t\t\t\tbend.node.style.visibility = 'hidden';\n\t\t\t\t\t}\n\t\t\t\t}))(i);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: createVirtualBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createVirtualBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar last = this.abspoints[0];\n\tvar bends = [];\n\n\tif (this.graph.isCellBendable(cell))\n\t{\n\t\tfor (var i = 1; i < this.abspoints.length; i++)\n\t\t{\n\t\t\t(mxUtils.bind(this, function(bend)\n\t\t\t{\n\t\t\t\tthis.initBend(bend);\n\t\t\t\tbend.setCursor(mxConstants.CURSOR_VIRTUAL_BEND_HANDLE);\n\t\t\t\tbends.push(bend);\n\t\t\t}))(this.createHandleShape());\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: isHandleEnabled\n * \n * Creates the shape used to display the given bend.\n */\nmxEdgeHandler.prototype.isHandleEnabled = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: isHandleVisible\n * \n * Returns true if the handle at the given index is visible.\n */\nmxEdgeHandler.prototype.isHandleVisible = function(index)\n{\n\tvar source = this.state.getVisibleTerminalState(true);\n\tvar target = this.state.getVisibleTerminalState(false);\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tvar edgeStyle = (geo != null) ? this.graph.view.getEdgeStyle(this.state, geo.points, source, target) : null;\n\n\treturn edgeStyle != mxEdgeStyle.EntityRelation || index == 0 || index == this.abspoints.length - 1;\n};\n\n/**\n * Function: createHandleShape\n * \n * Creates the shape used to display the given bend. Note that the index may be\n * null for special cases, such as when called from\n * <mxElbowEdgeHandler.createVirtualBend>. Only images and rectangles should be\n * returned if support for HTML labels with not foreign objects is required.\n * Index if null for virtual handles.\n */\nmxEdgeHandler.prototype.createHandleShape = function(index)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.handleImage.width, this.handleImage.height), this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.HANDLE_SIZE;\n\t\t\n\t\tif (this.preferHtml)\n\t\t{\n\t\t\ts -= 1;\n\t\t}\n\t\t\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createLabelHandleShape\n * \n * Creates the shape used to display the the label handle.\n */\nmxEdgeHandler.prototype.createLabelHandleShape = function()\n{\n\tif (this.labelHandleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.labelHandleImage.width, this.labelHandleImage.height), this.labelHandleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.LABEL_HANDLE_SIZE;\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.LABEL_HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: initBend\n * \n * Helper method to initialize the given bend.\n * \n * Parameters:\n * \n * bend - <mxShape> that represents the bend to be initialized.\n */\nmxEdgeHandler.prototype.initBend = function(bend, dblClick)\n{\n\tif (this.preferHtml)\n\t{\n\t\tbend.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tbend.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tbend.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tbend.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(bend.node, this.graph, this.state,\n\t\t\tnull, null, null, dblClick);\n\t\n\t// Fixes lost event tracking for images in quirks / IE8 standards\n\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t{\n\t\tmxEvent.addListener(bend.node, 'dragstart', function(evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t}\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tbend.node.setAttribute('pointer-events', 'none');\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event.\n */\nmxEdgeHandler.prototype.getHandleForEvent = function(me)\n{\n\tvar result = null;\n\t\n\tif (this.state != null)\n\t{\n\t\t// Connection highlight may consume events before they reach sizer handle\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\t\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tvar minDistSq = null;\n\t\n\t\tfunction checkShape(shape)\n\t\t{\n\t\t\tif (shape != null && shape.node != null && shape.node.style.display != 'none' &&\n\t\t\t\tshape.node.style.visibility != 'hidden' &&\n\t\t\t\t(me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit))))\n\t\t\t{\n\t\t\t\tvar dx = me.getGraphX() - shape.bounds.getCenterX();\n\t\t\t\tvar dy = me.getGraphY() - shape.bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\t\n\t\t\t\tif (minDistSq == null || tmp <= minDistSq)\n\t\t\t\t{\n\t\t\t\t\tminDistSq = tmp;\n\t\t\t\t\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t\t{\n\t\t\t// Inverse loop order to match display order\n\t\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t\t{\n\t\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t\t{\n\t\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (me.isSource(this.state.text) || checkShape(this.labelShape))\n\t\t{\n\t\t\tresult = mxEvent.LABEL_HANDLE;\n\t\t}\n\t\t\n\t\tif (this.bends != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t{\n\t\t\t\tif (checkShape(this.bends[i]))\n\t\t\t\t{\n\t\t\t\t\tresult = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.virtualBends != null && this.isAddVirtualBendEvent(me))\n\t\t{\n\t\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t\t{\n\t\t\t\tif (checkShape(this.virtualBends[i]))\n\t\t\t\t{\n\t\t\t\t\tresult = mxEvent.VIRTUAL_HANDLE - i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isAddVirtualBendEvent\n * \n * Returns true if the given event allows virtual bends to be added. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isAddVirtualBendEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by checking if a special element of the handler\n * was clicked, in which case the index parameter is non-null. The\n * indices may be one of <LABEL_HANDLE> or the number of the respective\n * control point. The source and target points are used for reconnecting\n * the edge.\n */\nmxEdgeHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar handle = this.getHandleForEvent(me);\n\t\n\tif (this.bends != null && this.bends[handle] != null)\n\t{\n\t\tvar b = this.bends[handle].bounds;\n\t\tthis.snapPoint = new mxPoint(b.getCenterX(), b.getCenterY());\n\t}\n\t\n\tif (this.addEnabled && handle == null && this.isAddPointEvent(me.getEvent()))\n\t{\n\t\tthis.addPoint(this.state, me.getEvent());\n\t\tme.consume();\n\t}\n\telse if (handle != null && !me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tif (this.removeEnabled && this.isRemovePointEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.removePoint(this.state, handle);\n\t\t}\n\t\telse if (handle != mxEvent.LABEL_HANDLE || this.graph.isLabelMovable(me.getCell()))\n\t\t{\n\t\t\tif (handle <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.virtualBends[mxEvent.VIRTUAL_HANDLE - handle].node, 100);\n\t\t\t}\n\t\t\t\n\t\t\tthis.start(me.getX(), me.getY(), handle);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxEdgeHandler.prototype.start = function(x, y, index)\n{\n\tthis.startX = x;\n\tthis.startY = y;\n\n\tthis.isSource = (this.bends == null) ? false : index == 0;\n\tthis.isTarget = (this.bends == null) ? false : index == this.bends.length - 1;\n\tthis.isLabel = index == mxEvent.LABEL_HANDLE;\n\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tvar cell = this.state.cell;\n\t\tvar terminal = this.graph.model.getTerminal(cell, this.isSource);\n\n\t\tif ((terminal == null && this.graph.isTerminalPointMovable(cell, this.isSource)) ||\n\t\t\t(terminal != null && this.graph.isCellDisconnectable(cell, terminal, this.isSource)))\n\t\t{\n\t\t\tthis.index = index;\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.index = index;\n\t}\n\t\n\t// Hides other custom handles\n\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t{\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t\t{\n\t\t\t\tif (i != mxEvent.CUSTOM_HANDLE - this.index)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[i].setVisible(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: clonePreviewState\n * \n * Returns a clone of the current preview state for the given point and terminal.\n */\nmxEdgeHandler.prototype.clonePreviewState = function(point, terminal)\n{\n\treturn this.state.clone();\n};\n\n/**\n * Function: getSnapToTerminalTolerance\n * \n * Returns the tolerance for the guides. Default value is\n * gridSize * scale / 2.\n */\nmxEdgeHandler.prototype.getSnapToTerminalTolerance = function()\n{\n\treturn this.graph.gridSize * this.graph.view.scale / 2;\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxEdgeHandler.prototype.updateHint = function(me, point) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxEdgeHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxEdgeHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: isSnapToTerminalsEvent\n * \n * Returns true if <snapToTerminals> is true and if alt is not pressed.\n */\nmxEdgeHandler.prototype.isSnapToTerminalsEvent = function(me)\n{\n\treturn this.snapToTerminals && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns the point for the given event.\n */\nmxEdgeHandler.prototype.getPointForEvent = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar scale = view.scale;\n\tvar point = new mxPoint(this.roundLength(me.getGraphX() / scale) * scale,\n\t\tthis.roundLength(me.getGraphY() / scale) * scale);\n\t\n\tvar tt = this.getSnapToTerminalTolerance();\n\tvar overrideX = false;\n\tvar overrideY = false;\t\t\n\t\n\tif (tt > 0 && this.isSnapToTerminalsEvent(me))\n\t{\n\t\tfunction snapToPoint(pt)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar x = pt.x;\n\n\t\t\t\tif (Math.abs(point.x - x) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = x;\n\t\t\t\t\toverrideX = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar y = pt.y;\n\n\t\t\t\tif (Math.abs(point.y - y) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = y;\n\t\t\t\t\toverrideY = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Temporary function\n\t\tfunction snapToTerminal(terminal)\n\t\t{\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, new mxPoint(view.getRoutingCenterX(terminal),\n\t\t\t\t\t\tview.getRoutingCenterY(terminal)));\n\t\t\t}\n\t\t};\n\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(true));\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(false));\n\n\t\tif (this.state.absolutePoints != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, this.state.absolutePoints[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar tr = view.translate;\n\t\t\n\t\tif (!overrideX)\n\t\t{\n\t\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\t}\n\t\t\n\t\tif (!overrideY)\n\t\t{\n\t\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getPreviewTerminalState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.getPreviewTerminalState = function(me)\n{\n\tthis.constraintHandler.update(me, this.isSource, true, me.isSource(this.marker.highlight.shape) ? null : this.currentPoint);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\t\t\n\t\tvar model = this.graph.getModel();\n\t\tvar other = this.graph.view.getTerminalPort(this.state,\n\t\t\t\tthis.graph.view.getState(model.getTerminal(this.state.cell,\n\t\t\t!this.isSource)), !this.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (this.isSource) ? this.constraintHandler.currentFocus.cell : otherCell;\n\t\tvar target = (this.isSource) ? otherCell : this.constraintHandler.currentFocus.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tthis.error = this.validateConnection(source, target);\n\t\tvar result = null;\n\t\t\n\t\tif (this.error == null)\n\t\t{\n\t\t\tresult = this.constraintHandler.currentFocus;\n\t\t}\n\t\t\n\t\tif (this.error != null || (result != null &&\n\t\t\t!this.isCellEnabled(result.cell)))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\telse if (!this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t{\n\t\tthis.marker.process(me);\n\t\tvar state = this.marker.getValidState();\n\t\t\n\t\tif (state != null && !this.isCellEnabled(state.cell))\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t\tthis.marker.reset();\n\t\t}\n\t\t\n\t\treturn this.marker.getValidState();\n\t}\n\telse\n\t{\n\t\tthis.marker.reset();\n\t\t\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n * \n * Parameters:\n * \n * pt - <mxPoint> that contains the current pointer position.\n * me - Optional <mxMouseEvent> that contains the current event.\n */\nmxEdgeHandler.prototype.getPreviewPoints = function(pt, me)\n{\n\tvar geometry = this.graph.getCellGeometry(this.state.cell);\n\tvar points = (geometry.points != null) ? geometry.points.slice() : null;\n\tvar point = new mxPoint(pt.x, pt.y);\n\tvar result = null;\n\t\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tthis.convertPoint(point, false);\n\t\t\n\t\tif (points == null)\n\t\t{\n\t\t\tpoints = [point];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adds point from virtual bend\n\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 0, point);\n\t\t\t}\n\n\t\t\t// Removes point if dragged on terminal point\n\t\t\tif (!this.isSource && !this.isTarget)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (i != this.index)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar bend = this.bends[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bend != null && mxUtils.contains(bend.bounds, pt.x, pt.y))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(this.index - 1, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Removes point if user tries to straighten a segment\n\t\t\t\tif (result == null && this.straightRemoveEnabled && (me == null || !mxEvent.isAltDown(me.getEvent())))\n\t\t\t\t{\n\t\t\t\t\tvar tol = this.graph.tolerance * this.graph.tolerance;\n\t\t\t\t\tvar abs = this.state.absolutePoints.slice();\n\t\t\t\t\tabs[this.index] = pt;\n\t\t\t\t\t\n\t\t\t\t\t// Handes special case where removing waypoint affects tolerance (flickering)\n\t\t\t\t\tvar src = this.state.getVisibleTerminalState(true);\n\t\t\t\t\t\n\t\t\t\t\tif (src != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, src, true);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(src, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[0] = new mxPoint(src.view.getRoutingCenterX(src), src.view.getRoutingCenterY(src));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar trg = this.state.getVisibleTerminalState(false);\n\t\t\t\t\t\n\t\t\t\t\tif (trg != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, trg, false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(trg, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[abs.length - 1] = new mxPoint(trg.view.getRoutingCenterX(trg), trg.view.getRoutingCenterY(trg));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction checkRemove(idx, tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (idx > 0 && idx < abs.length - 1 &&\n\t\t\t\t\t\t\tmxUtils.ptSegDistSq(abs[idx - 1].x, abs[idx - 1].y,\n\t\t\t\t\t\t\t\tabs[idx + 1].x, abs[idx + 1].y, tmp.x, tmp.y) < tol)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpoints.splice(idx - 1, 1);\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// LATER: Check if other points can be removed if a segment is made straight\n\t\t\t\t\tcheckRemove(this.index, pt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Updates existing point\n\t\t\tif (result == null && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints[this.index - 1] = point;\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.graph.resetEdgesOnConnect)\n\t{\n\t\tpoints = null;\n\t}\n\t\n\treturn (result != null) ? result : points;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxEdgeHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updatePreviewState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.updatePreviewState = function(edge, point, terminalState, me, outline)\n{\n\t// Computes the points for the edge style and terminals\n\tvar sourceState = (this.isSource) ? terminalState : this.state.getVisibleTerminalState(true);\n\tvar targetState = (this.isTarget) ? terminalState : this.state.getVisibleTerminalState(false);\n\t\n\tvar sourceConstraint = this.graph.getConnectionConstraint(edge, sourceState, true);\n\tvar targetConstraint = this.graph.getConnectionConstraint(edge, targetState, false);\n\n\tvar constraint = this.constraintHandler.currentConstraint;\n\n\tif (constraint == null && outline)\n\t{\n\t\tif (terminalState != null)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tconstraint = this.graph.getOutlineConstraint(point, terminalState, me);\n\t\t\tthis.constraintHandler.setFocus(me, terminalState, this.isSource);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\t}\n\t\n\tif (this.outlineConnect && this.marker.highlight != null && this.marker.highlight.shape != null)\n\t{\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (outline) ? mxConstants.OUTLINE_HIGHLIGHT_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t\telse if (this.marker.hasValidState())\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (this.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\tthis.marker.getValidState() != me.getState()) ?\n\t\t\t\t'transparent' : mxConstants.DEFAULT_VALID_COLOR;\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t}\n\t\n\tif (this.isSource)\n\t{\n\t\tsourceConstraint = constraint;\n\t}\n\telse if (this.isTarget)\n\t{\n\t\ttargetConstraint = constraint;\n\t}\n\t\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tif (constraint != null && constraint.point != null)\n\t\t{\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t}\n\t}\n\t\n\tedge.setVisibleTerminalState(sourceState, true);\n\tedge.setVisibleTerminalState(targetState, false);\n\t\n\tif (!this.isSource || sourceState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, sourceState, true, sourceConstraint);\n\t}\n\t\n\tif (!this.isTarget || targetState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, targetState, false, targetConstraint);\n\t}\n\t\n\tif ((this.isSource || this.isTarget) && terminalState == null)\n\t{\n\t\tedge.setAbsoluteTerminalPoint(point, this.isSource);\n\n\t\tif (this.marker.getMarkedState() == null)\n\t\t{\n\t\t\tthis.error = (this.graph.allowDanglingEdges) ? null : '';\n\t\t}\n\t}\n\t\n\tedge.view.updatePoints(edge, this.points, sourceState, targetState);\n\tedge.view.updateFloatingTerminalPoints(edge, sourceState, targetState);\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxEdgeHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tthis.currentPoint = this.getPointForEvent(me);\n\t\tthis.error = null;\n\t\t\n\t\t// Uses the current point from the constraint handler if available\n\t\tif (!this.graph.isIgnoreTerminalEvent(me.getEvent()) && mxEvent.isShiftDown(me.getEvent()) && this.snapPoint != null)\n\t\t{\n\t\t\tif (Math.abs(this.snapPoint.x - this.currentPoint.x) < Math.abs(this.snapPoint.y - this.currentPoint.y))\n\t\t\t{\n\t\t\t\tthis.currentPoint.x = this.snapPoint.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.currentPoint.y = this.snapPoint.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t{\n\t\t\tif (this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].positionChanged();\n\t\t\t\t\n\t\t\t\tif (this.shape != null && this.shape.node != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.node.style.display = 'none';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isLabel)\n\t\t{\n\t\t\tthis.label.x = this.currentPoint.x;\n\t\t\tthis.label.y = this.currentPoint.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.points = this.getPreviewPoints(this.currentPoint, me);\n\t\t\tvar terminalState = (this.isSource || this.isTarget) ? this.getPreviewTerminalState(me) : null;\n\t\t\t\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tthis.currentPoint = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.outlineConnect)\n\t\t\t{\n\t\t\t\t// Need to check outline before cloning terminal state\n\t\t\t\tvar outline = (this.isSource || this.isTarget) ? this.isOutlineConnectEvent(me) : false\n\t\t\t\t\t\t\n\t\t\t\tif (outline)\n\t\t\t\t{\n\t\t\t\t\tterminalState = this.marker.highlight.state;\n\t\t\t\t}\n\t\t\t\telse if (terminalState != null && terminalState != me.getState() &&\n\t\t\t\t\tthis.graph.isCellConnectable(me.getCell()) &&\n\t\t\t\t\tthis.marker.highlight.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t\tterminalState = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (terminalState != null && !this.isCellEnabled(terminalState.cell))\n\t\t\t{\n\t\t\t\tterminalState = null;\n\t\t\t\tthis.marker.reset();\n\t\t\t}\n\t\t\t\n\t\t\tvar clone = this.clonePreviewState(this.currentPoint, (terminalState != null) ? terminalState.cell : null);\n\t\t\tthis.updatePreviewState(clone, this.currentPoint, terminalState, me, outline);\n\n\t\t\t// Sets the color of the preview to valid or invalid, updates the\n\t\t\t// points of the preview and redraws\n\t\t\tvar color = (this.error == null) ? this.marker.validColor : this.marker.invalidColor;\n\t\t\tthis.setPreviewColor(color);\n\t\t\tthis.abspoints = clone.absolutePoints;\n\t\t\tthis.active = true;\n\t\t\tthis.updateHint(me, this.currentPoint);\n\t\t}\n\n\t\t// This should go before calling isOutlineConnectEvent above. As a workaround\n\t\t// we add an offset of gridSize to the hint to avoid problem with hit detection\n\t\t// in highlight.isHighlightAt (which uses comonentFromPoint)\n\t\tthis.drawPreview();\n\t\tmxEvent.consume(me.getEvent());\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (mxClient.IS_IE && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event to applying the previewed changes on the edge by\n * using <moveLabel>, <connect> or <changePoints>.\n */\nmxEdgeHandler.prototype.mouseUp = function(sender, me)\n{\n\t// Workaround for wrong event source in Webkit\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tif (this.shape != null && this.shape.node != null)\n\t\t{\n\t\t\tthis.shape.node.style.display = '';\n\t\t}\n\t\t\n\t\tvar edge = this.state.cell;\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\n\t\t// Ignores event if mouse has not been moved\n\t\tif (me.getX() != this.startX || me.getY() != this.startY)\n\t\t{\n\t\t\tvar clone = !this.graph.isIgnoreTerminalEvent(me.getEvent()) && this.graph.isCloneEvent(me.getEvent()) &&\n\t\t\t\tthis.cloneEnabled && this.graph.isCellsCloneable();\n\t\t\t\n\t\t\t// Displays the reason for not carriying out the change\n\t\t\t// if there is an error message with non-zero length\n\t\t\tif (this.error != null)\n\t\t\t{\n\t\t\t\tif (this.error.length > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute(me);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.shape != null && this.shape.node != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.shape.apply(this.state);\n\t\t\t\t\t\t\tthis.shape.redraw();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.isLabel)\n\t\t\t{\n\t\t\t\tthis.moveLabel(this.state, this.label.x, this.label.y);\n\t\t\t}\n\t\t\telse if (this.isSource || this.isTarget)\n\t\t\t{\n\t\t\t\tvar terminal = null;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tterminal = this.constraintHandler.currentFocus.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal == null && this.marker.hasValidState() && this.marker.highlight != null &&\n\t\t\t\t\tthis.marker.highlight.shape != null &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'transparent' &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'white')\n\t\t\t\t{\n\t\t\t\t\tterminal = this.marker.validState.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\tvar parent = model.getParent(edge);\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// Clones and adds the cell\n\t\t\t\t\t\tif (clone)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\t\t\t\tvar clone = this.graph.cloneCell(edge);\n\t\t\t\t\t\t\tmodel.add(parent, clone, model.getChildCount(parent));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\tmodel.setGeometry(clone, geo);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar other = model.getTerminal(edge, !this.isSource);\n\t\t\t\t\t\t\tthis.graph.connectCell(clone, other, !this.isSource);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tedge = clone;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tedge = this.connect(edge, terminal, this.isSource, clone, me);\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.graph.isAllowDanglingEdges())\n\t\t\t\t{\n\t\t\t\t\tvar pt = this.abspoints[(this.isSource) ? 0 : this.abspoints.length - 1];\n\t\t\t\t\tpt.x = this.roundLength(pt.x / this.graph.view.scale - this.graph.view.translate.x);\n\t\t\t\t\tpt.y = this.roundLength(pt.y / this.graph.view.scale - this.graph.view.translate.y);\n\n\t\t\t\t\tvar pstate = this.graph.getView().getState(\n\t\t\t\t\t\t\tthis.graph.getModel().getParent(edge));\n\t\t\t\t\t\t\t\n\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt.x -= pstate.origin.x;\n\t\t\t\t\t\tpt.y -= pstate.origin.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t// Destroys and recreates this handler\n\t\t\t\t\tedge = this.changeTerminalPoint(edge, pt, this.isSource, clone);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.active)\n\t\t\t{\n\t\t\t\tedge = this.changePoints(edge, this.points, clone);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.graph.getView().invalidate(this.state.cell);\n\t\t\t\tthis.graph.getView().validate(this.state.cell);\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isToggleEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(this.state.cell, me.getEvent());\n\t\t}\n\n\t\t// Resets the preview color the state of the handler if this\n\t\t// handler has not been recreated\n\t\tif (this.marker != null)\n\t\t{\n\t\t\tthis.reset();\n\n\t\t\t// Updates the selection if the edge has been cloned\n\t\t\tif (edge != this.state.cell)\n\t\t\t{\n\t\t\t\tthis.graph.setSelectionCell(edge);\n\t\t\t}\n\t\t}\n\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxEdgeHandler.prototype.reset = function()\n{\n\tif (this.active)\n\t{\n\t\tthis.refresh();\n\t}\n\t\n\tthis.error = null;\n\tthis.index = null;\n\tthis.label = null;\n\tthis.points = null;\n\tthis.snapPoint = null;\n\tthis.isLabel = false;\n\tthis.isSource = false;\n\tthis.isTarget = false;\n\tthis.active = false;\n\t\n\tif (this.livePreview && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.reset();\n\t}\n\t\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].reset();\n\t\t}\n\t}\n\n\tthis.setPreviewColor(mxConstants.EDGE_SELECTION_COLOR);\n\tthis.removeHint();\n\tthis.redraw();\n};\n\n/**\n * Function: setPreviewColor\n * \n * Sets the color of the preview to the given value.\n */\nmxEdgeHandler.prototype.setPreviewColor = function(color)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid. Returns the given, modified\n * point instance.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x);\n\tpoint.y = Math.round(point.y / scale - tr.y);\n\n\tvar pstate = this.graph.getView().getState(\n\t\tthis.graph.getModel().getParent(this.state.cell));\n\n\tif (pstate != null)\n\t{\n\t\tpoint.x -= pstate.origin.x;\n\t\tpoint.y -= pstate.origin.y;\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: moveLabel\n * \n * Changes the coordinates for the label of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * x - Integer that specifies the x-coordinate of the new location.\n * y - Integer that specifies the y-coordinate of the new location.\n */\nmxEdgeHandler.prototype.moveLabel = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tgeometry = geometry.clone();\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\t// Resets the relative location stored inside the geometry\n\t\t\tvar pt = this.graph.getView().getRelativePoint(edgeState, x, y);\n\t\t\tgeometry.x = Math.round(pt.x * 10000) / 10000;\n\t\t\tgeometry.y = Math.round(pt.y);\n\t\t\t\n\t\t\t// Resets the offset inside the geometry to find the offset\n\t\t\t// from the resulting point\n\t\t\tgeometry.offset = new mxPoint(0, 0);\n\t\t\tvar pt = this.graph.view.getPoint(edgeState, geometry);\n\t\t\tgeometry.offset = new mxPoint(Math.round((x - pt.x) / scale), Math.round((y - pt.y) / scale));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar points = edgeState.absolutePoints;\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar cx = p0.x + (pe.x - p0.x) / 2;\n\t\t\t\tvar cy = p0.y + (pe.y - p0.y) / 2;\n\t\t\t\t\n\t\t\t\tgeometry.offset = new mxPoint(Math.round((x - cx) / scale), Math.round((y - cy) / scale));\n\t\t\t\tgeometry.x = 0;\n\t\t\t\tgeometry.y = 0;\n\t\t\t}\n\t\t}\n\n\t\tmodel.setGeometry(edgeState.cell, geometry);\n\t}\n};\n\n/**\n * Function: connect\n * \n * Changes the terminal or terminal point of the given edge in the graph\n * model.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be reconnected.\n * terminal - <mxCell> that represents the new terminal.\n * isSource - Boolean indicating if the new terminal is the source or\n * target terminal.\n * isClone - Boolean indicating if the new connection should be a clone of\n * the old edge.\n * me - <mxMouseEvent> that contains the mouse up event.\n */\nmxEdgeHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(edge);\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar constraint = this.constraintHandler.currentConstraint;\n\t\t\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\n\t\tthis.graph.connectCell(edge, terminal, isSource, constraint);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changeTerminalPoint\n * \n * Changes the terminal point of the given edge.\n */\nmxEdgeHandler.prototype.changeTerminalPoint = function(edge, point, isSource, clone)\n{\n\tvar model = this.graph.getModel();\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar terminal = model.getTerminal(edge, !isSource);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, terminal, !isSource);\n\t\t}\n\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.setTerminalPoint(point, isSource);\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t\tthis.graph.connectCell(edge, null, isSource, new mxConnectionConstraint());\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changePoints\n * \n * Changes the control points of the given edge in the graph model.\n */\nmxEdgeHandler.prototype.changePoints = function(edge, points, clone)\n{\n\tvar model = this.graph.getModel();\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar source = model.getTerminal(edge, true);\n\t\t\tvar target = model.getTerminal(edge, false);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, source, true);\n\t\t\tmodel.setTerminal(edge, target, false);\n\t\t}\n\t\t\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points = points;\n\t\t\t\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: addPoint\n * \n * Adds a control point for the given state and event.\n */\nmxEdgeHandler.prototype.addPoint = function(state, evt)\n{\n\tvar pt = mxUtils.convertPoint(this.graph.container, mxEvent.getClientX(evt),\n\t\t\tmxEvent.getClientY(evt));\n\tvar gridEnabled = this.graph.isGridEnabledEvent(evt);\n\tthis.convertPoint(pt, gridEnabled);\n\tthis.addPointAt(state, pt.x, pt.y);\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: addPointAt\n * \n * Adds a control point at the given point.\n */\nmxEdgeHandler.prototype.addPointAt = function(state, x, y)\n{\n\tvar geo = this.graph.getCellGeometry(state.cell);\n\tvar pt = new mxPoint(x, y);\n\t\n\tif (geo != null)\n\t{\n\t\tgeo = geo.clone();\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar offset = new mxPoint(t.x * s, t.y * s);\n\t\t\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pState = this.graph.view.getState(parent);\n\t\t\toffset = new mxPoint(pState.x, pState.y);\n\t\t}\n\t\t\n\t\tvar index = mxUtils.findNearestSegment(state, pt.x * s + offset.x, pt.y * s + offset.y);\n\n\t\tif (geo.points == null)\n\t\t{\n\t\t\tgeo.points = [pt];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.points.splice(index, 0, pt);\n\t\t}\n\t\t\n\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\tthis.refresh();\t\n\t\tthis.redraw();\n\t}\n};\n\n/**\n * Function: removePoint\n * \n * Removes the control point at the given index from the given state.\n */\nmxEdgeHandler.prototype.removePoint = function(state, index)\n{\n\tif (index > 0 && index < this.abspoints.length - 1)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\t\t\n\t\tif (geo != null && geo.points != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points.splice(index - 1, 1);\n\t\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\t\tthis.refresh();\n\t\t\tthis.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleFillColor\n * \n * Returns the fillcolor for the handle at the given index.\n */\nmxEdgeHandler.prototype.getHandleFillColor = function(index)\n{\n\tvar isSource = index == 0;\n\tvar cell = this.state.cell;\n\tvar terminal = this.graph.getModel().getTerminal(cell, isSource);\n\tvar color = mxConstants.HANDLE_FILLCOLOR;\n\t\n\tif ((terminal != null && !this.graph.isCellDisconnectable(cell, terminal, isSource)) ||\n\t\t(terminal == null && !this.graph.isTerminalPointMovable(cell, isSource)))\n\t{\n\t\tcolor = mxConstants.LOCKED_HANDLE_FILLCOLOR;\n\t}\n\telse if (terminal != null && this.graph.isCellDisconnectable(cell, terminal, isSource))\n\t{\n\t\tcolor = mxConstants.CONNECT_HANDLE_FILLCOLOR;\n\t}\n\t\n\treturn color;\n};\n\n/**\n * Function: redraw\n * \n * Redraws the preview, and the bends- and label control points.\n */\nmxEdgeHandler.prototype.redraw = function(ignoreHandles)\n{\n\tif (this.state != null)\n\t{\n\t\tthis.abspoints = this.state.absolutePoints.slice();\n\t\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\t\t\n\t\tif (g != null)\n\t\t{\n\t\t\tvar pts = g.points;\n\t\t\n\t\t\tif (this.bends != null && this.bends.length > 0)\n\t\t\t{\n\t\t\t\tif (pts != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.points == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points = [];\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.bends[i] != null && this.abspoints[i] != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.points[i - 1] = pts[i - 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.drawPreview();\n\t\t\n\t\tif (!ignoreHandles)\n\t\t{\n\t\t\tthis.redrawHandles();\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles.\n */\nmxEdgeHandler.prototype.redrawHandles = function()\n{\n\tvar cell = this.state.cell;\n\n\t// Updates the handle for the label position\n\tvar b = this.labelShape.bounds;\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape.bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\n\t// Shows or hides the label handle depending on the label\n\tvar lab = this.graph.getLabel(cell);\n\tthis.labelShape.visible = (lab != null && lab.length > 0 && this.graph.isLabelMovable(cell));\n\t\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tvar n = this.abspoints.length - 1;\n\t\t\n\t\tvar p0 = this.abspoints[0];\n\t\tvar x0 = p0.x;\n\t\tvar y0 = p0.y;\n\t\t\n\t\tb = this.bends[0].bounds;\n\t\tthis.bends[0].bounds = new mxRectangle(Math.floor(x0 - b.width / 2),\n\t\t\t\tMath.floor(y0 - b.height / 2), b.width, b.height);\n\t\tthis.bends[0].fill = this.getHandleFillColor(0);\n\t\tthis.bends[0].redraw();\n\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[0].bounds);\n\t\t}\n\t\t\t\t\n\t\tvar pe = this.abspoints[n];\n\t\tvar xn = pe.x;\n\t\tvar yn = pe.y;\n\t\t\n\t\tvar bn = this.bends.length - 1;\n\t\tb = this.bends[bn].bounds;\n\t\tthis.bends[bn].bounds = new mxRectangle(Math.floor(xn - b.width / 2),\n\t\t\t\tMath.floor(yn - b.height / 2), b.width, b.height);\n\t\tthis.bends[bn].fill = this.getHandleFillColor(bn);\n\t\tthis.bends[bn].redraw();\n\t\t\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[bn].bounds);\n\t\t}\n\t\t\n\t\tthis.redrawInnerBends(p0, pe);\n\t}\n\n\tif (this.abspoints != null && this.virtualBends != null && this.virtualBends.length > 0)\n\t{\n\t\tvar last = this.abspoints[0];\n\t\t\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (this.virtualBends[i] != null && this.abspoints[i + 1] != null)\n\t\t\t{\n\t\t\t\tvar pt = this.abspoints[i + 1];\n\t\t\t\tvar b = this.virtualBends[i];\n\t\t\t\tvar x = last.x + (pt.x - last.x) / 2;\n\t\t\t\tvar y = last.y + (pt.y - last.y) / 2;\n\t\t\t\tb.bounds = new mxRectangle(Math.floor(x - b.bounds.width / 2),\n\t\t\t\t\t\tMath.floor(y - b.bounds.height / 2), b.bounds.width, b.bounds.height);\n\t\t\t\tb.redraw();\n\t\t\t\tmxUtils.setOpacity(b.node, this.virtualBendOpacity);\n\t\t\t\tlast = pt;\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(b.bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.redraw();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility =\n\t\t\t\t(this.isCustomHandleVisible(this.customHandles[i])) ?\n\t\t\t\t'' : 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: isCustomHandleVisible\n * \n * Returns true if the given custom handle is visible.\n */\nmxEdgeHandler.prototype.isCustomHandleVisible = function(handle)\n{\n\treturn !this.graph.isEditing() && this.state.view.graph.getSelectionCount() == 1;\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxEdgeHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tthis.bends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tthis.virtualBends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.node.style.display = (visible) ? '' : 'none';\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t{\n\t\tif (this.bends[i] != null)\n\t\t{\n\t\t\tif (this.abspoints[i] != null)\n\t\t\t{\n\t\t\t\tvar x = this.abspoints[i].x;\n\t\t\t\tvar y = this.abspoints[i].y;\n\t\t\t\t\n\t\t\t\tvar b = this.bends[i].bounds;\n\t\t\t\tthis.bends[i].node.style.visibility = 'visible';\n\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - b.width / 2),\n\t\t\t\t\t\tMath.round(y - b.height / 2), b.width, b.height);\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(this.bends[i].bounds);\n\t\t\t\t}\n\t\t\t\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(this.bends[i].bounds, this.labelShape.bounds))\n\t\t\t\t{\n\t\t\t\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - w / 2), Math.round(y - h / 2), w, h);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.bends[i].redraw();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.bends[i].destroy();\n\t\t\t\tthis.bends[i] = null;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: checkLabelHandle\n * \n * Checks if the label handle intersects the given bounds and moves it if it\n * intersects.\n */\nmxEdgeHandler.prototype.checkLabelHandle = function(b)\n{\n\tif (this.labelShape != null)\n\t{\n\t\tvar b2 = this.labelShape.bounds;\n\t\t\n\t\tif (mxUtils.intersects(b, b2))\n\t\t{\n\t\t\tif (b.getCenterY() < b2.getCenterY())\n\t\t\t{\n\t\t\t\tb2.y = b.y + b.height;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb2.y = b.y - b2.height;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxEdgeHandler.prototype.drawPreview = function()\n{\n\ttry\n\t{\n\t\tif (this.isLabel)\n\t\t{\n\t\t\tvar b = this.labelShape.bounds;\n\t\t\tvar bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\t\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\t\t\t\n\t\t\tif (!this.labelShape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tthis.labelShape.bounds = bounds;\n\t\t\t\tthis.labelShape.redraw();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.shape != null && !mxUtils.equalPoints(this.shape.points, this.abspoints))\n\t\t{\n\t\t\tthis.shape.apply(this.state);\n\t\t\tthis.shape.points = this.abspoints.slice();\n\t\t\tthis.shape.scale = this.state.view.scale;\n\t\t\tthis.shape.isDashed = this.isSelectionDashed();\n\t\t\tthis.shape.stroke = this.getSelectionColor();\n\t\t\tthis.shape.strokewidth = this.getSelectionStrokeWidth() / this.shape.scale / this.shape.scale;\n\t\t\tthis.shape.isShadow = false;\n\t\t\tthis.shape.redraw();\n\t\t}\n\t\t\n\t\tthis.updateParentHighlight();\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore\n\t}\n};\n\n/**\n * Function: refresh\n * \n * Refreshes the bends of this handler.\n */\nmxEdgeHandler.prototype.refresh = function()\n{\n\tif (this.state != null)\n\t{\n\t\tthis.abspoints = this.getSelectionPoints(this.state);\n\t\tthis.points = [];\n\t\n\t\tif (this.bends != null)\n\t\t{\n\t\t\tthis.destroyBends(this.bends);\n\t\t\tthis.bends = this.createBends();\n\t\t}\n\t\t\n\t\tif (this.virtualBends != null)\n\t\t{\n\t\t\tthis.destroyBends(this.virtualBends);\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t\t\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tthis.destroyBends(this.customHandles);\n\t\t\tthis.customHandles = this.createCustomHandles();\n\t\t}\n\t\t\n\t\t// Puts label node on top of bends\n\t\tif (this.labelShape != null && this.labelShape.node != null && this.labelShape.node.parentNode != null)\n\t\t{\n\t\t\tthis.labelShape.node.parentNode.appendChild(this.labelShape.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isDestroyed\n * \n * Returns true if <destroy> was called.\n */\nmxEdgeHandler.prototype.isDestroyed = function()\n{\n\treturn this.shape == null;\n};\n\n/**\n * Function: destroyBends\n * \n * Destroys all elements in <bends>.\n */\nmxEdgeHandler.prototype.destroyBends = function(bends)\n{\n\tif (bends != null)\n\t{\n\t\tfor (var i = 0; i < bends.length; i++)\n\t\t{\n\t\t\tif (bends[i] != null)\n\t\t\t{\n\t\t\t\tbends[i].destroy();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called as handlers are destroyed automatically\n * when the corresponding cell is deselected.\n */\nmxEdgeHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\tvar pstate = this.graph.view.getState(parent);\n\n\t\tif (pstate != null && pstate.parentHighlight == this.parentHighlight)\n\t\t{\n\t\t\tpstate.parentHighlight = null;\n\t\t}\n\t\t\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.destroy();\n\t\tthis.labelShape = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\t\n\tthis.destroyBends(this.virtualBends);\n\tthis.virtualBends = null;\n\t\n\tthis.destroyBends(this.customHandles);\n\tthis.customHandles = null;\n\n\tthis.destroyBends(this.bends);\n\tthis.bends = null;\n\t\n\tthis.removeHint();\n};\n\n__mxOutput.mxEdgeHandler = typeof mxEdgeHandler !== 'undefined' ? mxEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxElbowEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler>. It extends <mxEdgeHandler>.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be modified.\n */\nfunction mxElbowEdgeHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxElbowEdgeHandler, mxEdgeHandler);\n\n/**\n * Specifies if a double click on the middle handle should call\n * <mxGraph.flipEdge>. Default is true.\n */\nmxElbowEdgeHandler.prototype.flipEnabled = true;\n\n/**\n * Variable: doubleClickOrientationResource\n * \n * Specifies the resource key for the tooltip to be displayed on the single\n * control point for routed edges. If the resource for this key does not\n * exist then the value is used as the error message. Default is\n * 'doubleClickOrientation'.\n */\nmxElbowEdgeHandler.prototype.doubleClickOrientationResource =\n\t(mxClient.language != 'none') ? 'doubleClickOrientation' : '';\n\n/**\n * Function: createBends\n * \n * Overrides <mxEdgeHandler.createBends> to create custom bends.\n */\n mxElbowEdgeHandler.prototype.createBends = function()\n {\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\t// Virtual\n\tbends.push(this.createVirtualBend(mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt) && this.flipEnabled)\n\t\t{\n\t\t\tthis.graph.flipEdge(this.state.cell, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t})));\n\t\n\tthis.points.push(new mxPoint(0,0));\n\n\t// Target\n\tbend = this.createHandleShape(2);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\t\n\treturn bends;\n };\n\n/**\n * Function: createVirtualBend\n * \n * Creates a virtual bend that supports double clicking and calls\n * <mxGraph.flipEdge>.\n */\nmxElbowEdgeHandler.prototype.createVirtualBend = function(dblClickHandler)\n{\n\tvar bend = this.createHandleShape();\n\tthis.initBend(bend, dblClickHandler);\n\n\tbend.setCursor(this.getCursorForBend());\n\n\tif (!this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tbend.node.style.display = 'none';\n\t}\n\n\treturn bend;\n};\n\n/**\n * Function: getCursorForBend\n * \n * Returns the cursor to be used for the bend.\n */\nmxElbowEdgeHandler.prototype.getCursorForBend = function()\n{\n\treturn (this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.TopToBottom ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_TOPTOBOTTOM ||\n\t\t((this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.ElbowConnector ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_ELBOW)&&\n\t\tthis.state.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL)) ? \n\t\t'row-resize' : 'col-resize';\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns the tooltip for the given node.\n */\nmxElbowEdgeHandler.prototype.getTooltipForNode = function(node)\n{\n\tvar tip = null;\n\t\n\tif (this.bends != null && this.bends[1] != null && (node == this.bends[1].node ||\n\t\tnode.parentNode == this.bends[1].node))\n\t{\n\t\ttip = this.doubleClickOrientationResource;\n\t\ttip = mxResources.get(tip) || tip; // translate\n\t}\n\n\treturn tip;\n};\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxElbowEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\tvar origin = this.state.origin;\n\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x - origin.x);\n\tpoint.y = Math.round(point.y / scale - tr.y - origin.y);\n\t\n\treturn point;\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxElbowEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = this.state.absolutePoints;\n\tvar pt = null;\n\n\t// Keeps the virtual bend on the edge shape\n\tif (pts.length > 1)\n\t{\n\t\tp0 = pts[1];\n\t\tpe = pts[pts.length - 2];\n\t}\n\telse if (g.points != null && g.points.length > 0)\n\t{\n\t\tpt = pts[0];\n\t}\n\t\n\tif (pt == null)\n\t{\n\t\tpt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint(this.graph.getView().scale * (pt.x + this.graph.getView().translate.x + this.state.origin.x),\n\t\t\t\tthis.graph.getView().scale * (pt.y + this.graph.getView().translate.y + this.state.origin.y));\n\t}\n\n\t// Makes handle slightly bigger if the yellow  label handle\n\t// exists and intersects this green handle\n\tvar b = this.bends[1].bounds;\n\tvar w = b.width;\n\tvar h = b.height;\n\tvar bounds = new mxRectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);\n\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(bounds);\n\t}\n\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(bounds, this.labelShape.bounds))\n\t{\n\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\tbounds = new mxRectangle(Math.floor(pt.x - w / 2), Math.floor(pt.y - h / 2), w, h);\n\t}\n\n\tthis.bends[1].bounds = bounds;\n\tthis.bends[1].redraw();\n\t\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(this.bends[1].bounds);\n\t}\n};\n\n__mxOutput.mxElbowEdgeHandler = typeof mxElbowEdgeHandler !== 'undefined' ? mxElbowEdgeHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nfunction mxEdgeSegmentHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxEdgeSegmentHandler, mxElbowEdgeHandler);\n\n/**\n * Function: getCurrentPoints\n * \n * Returns the current absolute points.\n */\nmxEdgeSegmentHandler.prototype.getCurrentPoints = function()\n{\n\tvar pts = this.state.absolutePoints;\n\t\n\tif (pts != null)\n\t{\n\t\t// Special case for straight edges where we add a virtual middle handle for moving the edge\n\t\tvar tol = Math.max(1, this.graph.view.scale);\n\t\t\n\t\tif (pts.length == 2 || (pts.length == 3 &&\n\t\t\t(Math.abs(pts[0].x - pts[1].x) < tol && Math.abs(pts[1].x - pts[2].x) < tol ||\n\t\t\tMath.abs(pts[0].y - pts[1].y) < tol && Math.abs(pts[1].y - pts[2].y) < tol)))\n\t\t{\n\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\n\t\t\tpts = [pts[0], new mxPoint(cx, cy), new mxPoint(cx, cy), pts[pts.length - 1]];\t\n\t\t}\n\t}\n\n\treturn pts;\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeSegmentHandler.prototype.getPreviewPoints = function(point)\n{\n\tif (this.isSource || this.isTarget)\n\t{\n\t\treturn mxElbowEdgeHandler.prototype.getPreviewPoints.apply(this, arguments);\n\t}\n\telse\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\tvar last = this.convertPoint(pts[0].clone(), false);\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar result = [];\n\n\t\tfor (var i = 1; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt = this.convertPoint(pts[i].clone(), false);\n\t\t\t\n\t\t\tif (i == this.index)\n\t\t\t{\n\t\t\t\tif (Math.round(last.x - pt.x) == 0)\n\t\t \t\t{\n\t\t\t\t\tlast.x = point.x;\n\t\t\t\t\tpt.x = point.x;\n\t\t \t\t}\n\t\t \t\t\n\t\t\t\tif (Math.round(last.y - pt.y) == 0)\n\t\t \t\t{\n\t\t \t\t\tlast.y = point.y;\n\t\t \t\t\tpt.y = point.y;\n\t\t \t\t}\n\t\t\t}\n\n\t\t\tif (i < pts.length - 1)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t}\n\n\t\t\tlast = pt;\n\t\t}\n\t\t\n\t\t// Replaces single point that intersects with source or target\n\t\tif (result.length == 1)\n\t\t{\n\t\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\t\tvar scale = this.state.view.getScale();\n\t\t\tvar tr = this.state.view.getTranslate();\n\t\t\t\n\t\t\tvar x = result[0].x * scale + tr.x;\n\t\t\tvar y = result[0].y * scale + tr.y;\n\t\t\t\n\t\t\tif ((source != null && mxUtils.contains(source, x, y)) ||\n\t\t\t\t(target != null && mxUtils.contains(target, x, y)))\n\t\t\t{\n\t\t\t\tresult = [point, point];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: updatePreviewState\n * \n * Overridden to perform optimization of the edge style result.\n */\nmxEdgeSegmentHandler.prototype.updatePreviewState = function(edge, point, terminalState, me)\n{\n\tmxEdgeHandler.prototype.updatePreviewState.apply(this, arguments);\n\n\t// Checks and corrects preview by running edge style again\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar pts = edge.absolutePoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t\t\n\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\tvar rpts = this.state.absolutePoints;\n\t\t\n\t\t// A straight line is represented by 3 handles\n\t\tif (result.length == 0 && (Math.round(pts[0].x - pts[pts.length - 1].x) == 0 ||\n\t\t\tMath.round(pts[0].y - pts[pts.length - 1].y) == 0))\n\t\t{\n\t\t\tresult = [point, point];\n\t\t}\n\t\t// Handles special case of transitions from straight vertical to routed\n\t\telse if (pts.length == 5 && result.length == 2 && source != null && target != null &&\n\t\t\t\trpts != null && Math.round(rpts[0].x - rpts[rpts.length - 1].x) == 0)\n\t\t{\n\t\t\tvar view = this.graph.getView();\n\t\t\tvar scale = view.getScale();\n\t\t\tvar tr = view.getTranslate();\n\t\t\t\n\t\t\tvar y0 = view.getRoutingCenterY(source) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\t\t\t\n\t\t\tif (sc != null)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(source, sc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\ty0 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar ye = view.getRoutingCenterY(target) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\t\t\n\t\t\tif (tc)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(target, tc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\tye = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult = [new mxPoint(point.x, y0), new mxPoint(point.x, ye)];\n\t\t}\n\n\t\tthis.points = result;\n\n\t\t// LATER: Check if points and result are different\n\t\tedge.view.updateFixedTerminalPoints(edge, source, target);\n\t\tedge.view.updatePoints(edge, this.points, source, target);\n\t\tedge.view.updateFloatingTerminalPoints(edge, source, target);\n\t}\n};\n\n/**\n * Overriden to merge edge segments.\n */\nmxEdgeSegmentHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar geo = model.getGeometry(edge);\n\tvar result = null;\n\t\n\t// Merges adjacent edge segments\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tvar pts = this.abspoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\t\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (result != null)\n\t\t{\n\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.points = result;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge = mxEdgeHandler.prototype.connect.apply(this, arguments);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns no tooltips.\n */\nmxEdgeSegmentHandler.prototype.getTooltipForNode = function(node)\n{\n\treturn null;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxEdgeSegmentHandler.prototype.start = function(x, y, index)\n{\n\tmxEdgeHandler.prototype.start.apply(this, arguments);\n\t\n\tif (this.bends != null && this.bends[index] != null &&\n\t\t!this.isSource && !this.isTarget)\n\t{\n\t\tmxUtils.setOpacity(this.bends[index].node, 100);\n\t}\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.createBends = function()\n{\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\tvar pts = this.getCurrentPoints();\n\n\t// Waypoints (segment handles)\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tif (this.points == null)\n\t\t{\n\t\t\tthis.points = [];\n\t\t}\n\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tbend = this.createVirtualBend();\n\t\t\tbends.push(bend);\n\t\t\tvar horizontal = Math.round(pts[i].x - pts[i + 1].x) == 0;\n\t\t\t\n\t\t\t// Special case where dy is 0 as well\n\t\t\tif (Math.round(pts[i].y - pts[i + 1].y) == 0 && i < pts.length - 2)\n\t\t\t{\n\t\t\t\thorizontal = Math.round(pts[i].x - pts[i + 2].x) == 0;\n\t\t\t}\n\t\t\t\n\t\t\tbend.setCursor((horizontal) ? 'col-resize' : 'row-resize');\n\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t}\n\t}\n\n\t// Target\n\tvar bend = this.createHandleShape(pts.length);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\treturn bends;\n};\n\n/**\n * Function: redraw\n * \n * Overridden to invoke <refresh> before the redraw.\n */\nmxEdgeSegmentHandler.prototype.redraw = function()\n{\n\tthis.refresh();\n\tmxEdgeHandler.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates the position of the custom bends.\n */\nmxEdgeSegmentHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\t\n\t\tif (pts != null && pts.length > 1)\n\t\t{\n\t\t\tvar straight = false;\n\t\t\t\n\t\t\t// Puts handle in the center of straight edges\n\t\t\tif (pts.length == 4 && Math.round(pts[1].x - pts[2].x) == 0 && Math.round(pts[1].y - pts[2].y) == 0)\n\t\t\t{\n\t\t\t\tstraight = true;\n\t\t\t\t\n\t\t\t\tif (Math.round(pts[0].y - pts[pts.length - 1].y) == 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(cx, pts[1].y);\n\t\t\t\t\tpts[2] = new mxPoint(cx, pts[2].y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(pts[1].x, cy);\n\t\t\t\t\tpts[2] = new mxPoint(pts[2].x, cy);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i + 1] != null)\n\t\t\t\t{\n\t\t \t\t\tvar p0 = pts[i];\n\t \t\t\t\tvar pe = pts[i + 1];\n\t\t\t \t\tvar pt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t\t\t \t\tvar b = this.bends[i + 1].bounds;\n\t\t\t \t\tthis.bends[i + 1].bounds = new mxRectangle(Math.floor(pt.x - b.width / 2),\n\t\t\t \t\t\t\tMath.floor(pt.y - b.height / 2), b.width, b.height);\n\t\t\t\t \tthis.bends[i + 1].redraw();\n\t\t\t\t \t\n\t\t\t\t \tif (this.manageLabelHandle)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.checkLabelHandle(this.bends[i + 1].bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (straight)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.bends[1].node, this.virtualBendOpacity);\n\t\t\t\tmxUtils.setOpacity(this.bends[3].node, this.virtualBendOpacity);\n\t\t\t}\n\t\t}\n\t}\n};\n\n__mxOutput.mxEdgeSegmentHandler = typeof mxEdgeSegmentHandler !== 'undefined' ? mxEdgeSegmentHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxKeyHandler\n *\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n * \n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descandants of <mxGraph.container>\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the <graph>.\n * \n * Example:\n * \n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n * \n * (code)\n * var keyHandler = new mxKeyHandler(graph);\n * keyHandler.bindKey(46, function(evt)\n * {\n *   if (graph.isEnabled())\n *   {\n *     graph.removeCells();\n *   }\n * });\n * (end)\n * \n * Keycodes:\n * \n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n * \n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * (code)\n * keyHandler.getFunction = function(evt)\n * {\n *   if (evt != null)\n *   {\n *     return (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *   \n *   return null;\n * };\n * (end)\n * \n * Constructor: mxKeyHandler\n *\n * Constructs an event handler that executes functions bound to specific\n * keystrokes.\n * \n * Parameters:\n * \n * graph - Reference to the associated <mxGraph>.\n * target - Optional reference to the event target. If null, the document\n * element is used as the event target, that is, the object where the key\n * event listener is installed.\n */\nfunction mxKeyHandler(graph, target)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.target = target || document.documentElement;\n\t\t\n\t\t// Creates the arrays to map from keycodes to functions\n\t\tthis.normalKeys = [];\n\t\tthis.shiftKeys = [];\n\t\tthis.controlKeys = [];\n\t\tthis.controlShiftKeys = [];\n\t\t\n\t\tthis.keydownHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.keyDown(evt);\n\t\t});\n\n\t\t// Installs the keystroke listener in the target\n\t\tmxEvent.addListener(this.target, 'keydown', this.keydownHandler);\n\t\t\n\t\t// Automatically deallocates memory in IE\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> associated with this handler.\n */\nmxKeyHandler.prototype.graph = null;\n\n/**\n * Variable: target\n * \n * Reference to the target DOM, that is, the DOM node where the key event\n * listeners are installed.\n */\nmxKeyHandler.prototype.target = null;\n\n/**\n * Variable: normalKeys\n * \n * Maps from keycodes to functions for non-pressed control keys.\n */\nmxKeyHandler.prototype.normalKeys = null;\n\n/**\n * Variable: shiftKeys\n * \n * Maps from keycodes to functions for pressed shift keys.\n */\nmxKeyHandler.prototype.shiftKeys = null;\n\n/**\n * Variable: controlKeys\n * \n * Maps from keycodes to functions for pressed control keys.\n */\nmxKeyHandler.prototype.controlKeys = null;\n\n/**\n * Variable: controlShiftKeys\n * \n * Maps from keycodes to functions for pressed control and shift keys.\n */\nmxKeyHandler.prototype.controlShiftKeys = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxKeyHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxKeyHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling by updating <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxKeyHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: bindKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is not pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindKey = function(code, funct)\n{\n\tthis.normalKeys[code] = funct;\n};\n\n/**\n * Function: bindShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the shift key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindShiftKey = function(code, funct)\n{\n\tthis.shiftKeys[code] = funct;\n};\n\n/**\n * Function: bindControlKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlKey = function(code, funct)\n{\n\tthis.controlKeys[code] = funct;\n};\n\n/**\n * Function: bindControlShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control and shift key are pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlShiftKey = function(code, funct)\n{\n\tthis.controlShiftKeys[code] = funct;\n};\n\n/**\n * Function: isControlDown\n * \n * Returns true if the control key is pressed. This uses <mxEvent.isControlDown>.\n * \n * Parameters:\n * \n * evt - Key event whose control key pressed state should be returned.\n */\nmxKeyHandler.prototype.isControlDown = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: getFunction\n * \n * Returns the function associated with the given key event or null if no\n * function is associated with the given event.\n * \n * Parameters:\n * \n * evt - Key event whose associated function should be returned.\n */\nmxKeyHandler.prototype.getFunction = function(evt)\n{\n\tif (evt != null && !mxEvent.isAltDown(evt))\n\t{\n\t\tif (this.isControlDown(evt))\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.controlShiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.controlKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.shiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.normalKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\t\n/**\n * Function: isGraphEvent\n * \n * Returns true if the event should be processed by this handler, that is,\n * if the event source is either the target, one of its direct children, a\n * descendant of the <mxGraph.container>, or the <mxGraph.cellEditor> of the\n * <graph>.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isGraphEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\t\n\t// Accepts events from the target object or\n\t// in-place editing inside graph\n\tif ((source == this.target || source.parentNode == this.target) ||\n\t\t(this.graph.cellEditor != null && this.graph.cellEditor.isEventSource(evt)))\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Accepts events from inside the container\n\treturn mxUtils.isAncestorNode(this.graph.container, source);\n};\n\n/**\n * Function: keyDown\n * \n * Handles the event by invoking the function bound to the respective keystroke\n * if <isEnabledForEvent> returns true for the given event and if\n * <isEventIgnored> returns false, except for escape for which\n * <isEventIgnored> is not invoked.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.keyDown = function(evt)\n{\n\tif (this.isEnabledForEvent(evt))\n\t{\n\t\t// Cancels the editing if escape is pressed\n\t\tif (evt.keyCode == 27 /* Escape */)\n\t\t{\n\t\t\tthis.escape(evt);\n\t\t}\n\t\t\n\t\t// Invokes the function for the keystroke\n\t\telse if (!this.isEventIgnored(evt))\n\t\t{\n\t\t\tvar boundFunction = this.getFunction(evt);\n\t\t\t\n\t\t\tif (boundFunction != null)\n\t\t\t{\n\t\t\t\tboundFunction(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the given event should be handled. <isEventIgnored> is\n * called later if the event is not an escape key stroke, in which case\n * <escape> is called. This implementation returns true if <isEnabled>\n * returns true for both, this handler and <graph>, if the event is not\n * consumed and if <isGraphEvent> returns true.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEnabledForEvent = function(evt)\n{\n\treturn (this.graph.isEnabled() && !mxEvent.isConsumed(evt) &&\n\t\tthis.isGraphEvent(evt) && this.isEnabled());\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given keystroke should be ignored. This returns\n * graph.isEditing().\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEventIgnored = function(evt)\n{\n\treturn this.graph.isEditing();\n};\n\n/**\n * Function: escape\n * \n * Hook to process ESCAPE keystrokes. This implementation invokes\n * <mxGraph.stopEditing> to cancel the current editing, connecting\n * and/or other ongoing modifications.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke. Possible keycode in this\n * case is 27 (ESCAPE).\n */\nmxKeyHandler.prototype.escape = function(evt)\n{\n\tif (this.graph.isEscapeEnabled())\n\t{\n\t\tthis.graph.escape(evt);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its references into the DOM. This does\n * normally not need to be called, it is called automatically when the\n * window unloads (in IE).\n */\nmxKeyHandler.prototype.destroy = function()\n{\n\tif (this.target != null && this.keydownHandler != null)\n\t{\n\t\tmxEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n\t\tthis.keydownHandler = null;\n\t}\n\t\n\tthis.target = null;\n};\n\n__mxOutput.mxKeyHandler = typeof mxKeyHandler !== 'undefined' ? mxKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTooltipHandler\n * \n * Graph event handler that displays tooltips. <mxGraph.getTooltip> is used to\n * get the tooltip for a cell or handle. This handler is built-into\n * <mxGraph.tooltipHandler> and enabled using <mxGraph.setTooltips>.\n *\n * Example:\n * \n * (code>\n * new mxTooltipHandler(graph);\n * (end)\n * \n * Constructor: mxTooltipHandler\n * \n * Constructs an event handler that displays tooltips with the specified\n * delay (in milliseconds). If no delay is specified then a default delay\n * of 500 ms (0.5 sec) is used.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * delay - Optional delay in milliseconds.\n */\nfunction mxTooltipHandler(graph, delay)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.delay = delay || 500;\n\t\tthis.graph.addMouseListener(this);\n\t}\n};\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the tooltip and its shadow. Default is 10005.\n */\nmxTooltipHandler.prototype.zIndex = 10005;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxTooltipHandler.prototype.graph = null;\n\n/**\n * Variable: delay\n * \n * Delay to show the tooltip in milliseconds. Default is 500.\n */\nmxTooltipHandler.prototype.delay = null;\n\n/**\n * Variable: ignoreTouchEvents\n * \n * Specifies if touch and pen events should be ignored. Default is true.\n */\nmxTooltipHandler.prototype.ignoreTouchEvents = true;\n\n/**\n * Variable: hideOnHover\n * \n * Specifies if the tooltip should be hidden if the mouse is moved over the\n * current cell. Default is false.\n */\nmxTooltipHandler.prototype.hideOnHover = false;\n\n/**\n * Variable: destroyed\n * \n * True if this handler was destroyed using <destroy>.\n */\nmxTooltipHandler.prototype.destroyed = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxTooltipHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxTooltipHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxTooltipHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isHideOnHover\n * \n * Returns <hideOnHover>.\n */\nmxTooltipHandler.prototype.isHideOnHover = function()\n{\n\treturn this.hideOnHover;\n};\n\n/**\n * Function: setHideOnHover\n * \n * Sets <hideOnHover>.\n */\nmxTooltipHandler.prototype.setHideOnHover = function(value)\n{\n\tthis.hideOnHover = value;\n};\n\n/**\n * Function: init\n * \n * Initializes the DOM nodes required for this tooltip handler.\n */\nmxTooltipHandler.prototype.init = function()\n{\n\tif (document.body != null)\n\t{\n\t\tthis.div = document.createElement('div');\n\t\tthis.div.className = 'mxTooltip';\n\t\tthis.div.style.visibility = 'hidden';\n\n\t\tdocument.body.appendChild(this.div);\n\n\t\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar source = mxEvent.getSource(evt);\n\t\t\t\n\t\t\tif (source.nodeName != 'A')\n\t\t\t{\n\t\t\t\tthis.hideTooltip();\n\t\t\t}\n\t\t}));\n\t}\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the <mxCellState> to be used for showing a tooltip for this event.\n */\nmxTooltipHandler.prototype.getStateForEvent = function(me)\n{\n\treturn me.getState();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxTooltipHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.reset(me, false);\n\tthis.hideTooltip();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the rubberband selection.\n */\nmxTooltipHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (me.getX() != this.lastX || me.getY() != this.lastY)\n\t{\n\t\tthis.reset(me, true);\n\t\tvar state = this.getStateForEvent(me);\n\t\t\n\t\tif (this.isHideOnHover() || state != this.state || (me.getSource() != this.node &&\n\t\t\t(!this.stateSource || (state != null && this.stateSource ==\n\t\t\t(me.isSource(state.shape) || !me.isSource(state.text))))))\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}\n\t}\n\t\n\tthis.lastX = me.getX();\n\tthis.lastY = me.getY();\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by resetting the tooltip timer or hiding the existing\n * tooltip.\n */\nmxTooltipHandler.prototype.mouseUp = function(sender, me)\n{\n\tthis.reset(me, true);\n\tthis.hideTooltip();\n};\n\n\n/**\n * Function: resetTimer\n * \n * Resets the timer.\n */\nmxTooltipHandler.prototype.resetTimer = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearTimeout(this.thread);\n\t\tthis.thread = null;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets and/or restarts the timer to trigger the display of the tooltip.\n */\nmxTooltipHandler.prototype.reset = function(me, restart, state)\n{\n\tif (!this.ignoreTouchEvents || mxEvent.isMouseEvent(me.getEvent()))\n\t{\n\t\tthis.resetTimer();\n\t\tstate = (state != null) ? state : this.getStateForEvent(me);\n\t\t\n\t\tif (restart && this.isEnabled() && state != null && (this.div == null ||\n\t\t\tthis.div.style.visibility == 'hidden'))\n\t\t{\n\t\t\tvar node = me.getSource();\n\t\t\tvar x = me.getX();\n\t\t\tvar y = me.getY();\n\t\t\tvar stateSource = me.isSource(state.shape) || me.isSource(state.text);\n\t\n\t\t\tthis.thread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (!this.graph.isEditing() && !this.graph.popupMenuHandler.isMenuShowing() && !this.graph.isMouseDown)\n\t\t\t\t{\n\t\t\t\t\t// Uses information from inside event cause using the event at\n\t\t\t\t\t// this (delayed) point in time is not possible in IE as it no\n\t\t\t\t\t// longer contains the required information (member not found)\n\t\t\t\t\tvar tip = this.graph.getTooltip(state, node, x, y);\n\t\t\t\t\tthis.show(tip, x, y);\n\t\t\t\t\tthis.state = state;\n\t\t\t\t\tthis.node = node;\n\t\t\t\t\tthis.stateSource = stateSource;\n\t\t\t\t}\n\t\t\t}), this.delay);\n\t\t}\n\t}\n};\n\n/**\n * Function: hide\n * \n * Hides the tooltip and resets the timer.\n */\nmxTooltipHandler.prototype.hide = function()\n{\n\tthis.resetTimer();\n\tthis.hideTooltip();\n};\n\n/**\n * Function: hideTooltip\n * \n * Hides the tooltip.\n */\nmxTooltipHandler.prototype.hideTooltip = function()\n{\n\tif (this.div != null)\n\t{\n\t\tthis.div.style.visibility = 'hidden';\n\t\tthis.div.innerHTML = '';\n\t}\n};\n\n/**\n * Function: show\n * \n * Shows the tooltip for the specified cell and optional index at the\n * specified location (with a vertical offset of 10 pixels).\n */\nmxTooltipHandler.prototype.show = function(tip, x, y)\n{\n\tif (!this.destroyed && tip != null && tip.length > 0)\n\t{\n\t\t// Initializes the DOM nodes if required\n\t\tif (this.div == null)\n\t\t{\n\t\t\tthis.init();\n\t\t}\n\t\t\n\t\tvar origin = mxUtils.getScrollOrigin();\n\n\t\tthis.div.style.zIndex = this.zIndex;\n\t\tthis.div.style.left = (x + origin.x) + 'px';\n\t\tthis.div.style.top = (y + mxConstants.TOOLTIP_VERTICAL_OFFSET +\n\t\t\torigin.y) + 'px';\n\n\t\tif (!mxUtils.isNode(tip))\n\t\t{\t\n\t\t\tthis.div.innerHTML = tip.replace(/\\n/g, '<br>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.innerHTML = '';\n\t\t\tthis.div.appendChild(tip);\n\t\t}\n\t\t\n\t\tthis.div.style.visibility = '';\n\t\tmxUtils.fit(this.div);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxTooltipHandler.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div != null && this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.destroyed = true;\n\t\tthis.div = null;\n\t}\n};\n\n__mxOutput.mxTooltipHandler = typeof mxTooltipHandler !== 'undefined' ? mxTooltipHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellTracker\n * \n * Event handler that highlights cells. Inherits from <mxCellMarker>.\n * \n * Example:\n * \n * (code)\n * new mxCellTracker(graph, '#00FF00');\n * (end)\n * \n * For detecting dragEnter, dragOver and dragLeave on cells, the following\n * code can be used:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *     \n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *       \n *       this.cell = tmp;\n *       \n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *     \n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     mxLog.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     mxLog.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     mxLog.debug('dragLeave', cell.value);\n *   }\n * });\n * (end)\n * \n * Constructor: mxCellTracker\n * \n * Constructs an event handler that highlights cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * color - Color of the highlight. Default is blue.\n * funct - Optional JavaScript function that is used to override\n * <mxCellMarker.getCell>.\n */\nfunction mxCellTracker(graph, color, funct)\n{\n\tmxCellMarker.call(this, graph, color);\n\n\tthis.graph.addMouseListener(this);\n\t\n\tif (funct != null)\n\t{\n\t\tthis.getCell = funct;\n\t}\n\t\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t}\n};\n\n/**\n * Extends mxCellMarker.\n */\nmxUtils.extend(mxCellTracker, mxCellMarker);\n\n/**\n * Function: mouseDown\n * \n * Ignores the event. The event is not consumed.\n */\nmxCellTracker.prototype.mouseDown = function(sender, me) { };\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting the cell under the mousepointer if it\n * is over the hotspot region of the cell.\n */\nmxCellTracker.prototype.mouseMove = function(sender, me)\n{\n\tif (this.isEnabled())\n\t{\n\t\tthis.process(me);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by reseting the highlight.\n */\nmxCellTracker.prototype.mouseUp = function(sender, me) { };\n\n/**\n * Function: destroy\n * \n * Destroys the object and all its resources and DOM nodes. This doesn't\n * normally need to be called. It is called automatically when the window\n * unloads.\n */\nmxCellTracker.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxCellMarker.prototype.destroy.apply(this);\n\t}\n};\n\n__mxOutput.mxCellTracker = typeof mxCellTracker !== 'undefined' ? mxCellTracker : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellHighlight\n * \n * A helper class to highlight cells. Here is an example for a given cell.\n * \n * (code)\n * var highlight = new mxCellHighlight(graph, '#ff0000', 2);\n * highlight.highlight(graph.view.getState(cell)));\n * (end)\n * \n * Constructor: mxCellHighlight\n * \n * Constructs a cell highlight.\n */\nfunction mxCellHighlight(graph, highlightColor, strokeWidth, dashed)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.highlightColor = (highlightColor != null) ? highlightColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.strokeWidth = (strokeWidth != null) ? strokeWidth : mxConstants.HIGHLIGHT_STROKEWIDTH;\n\t\tthis.dashed = (dashed != null) ? dashed : false;\n\t\tthis.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\n\t\t// Updates the marker if the graph changes\n\t\tthis.repaintHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Updates reference to state\n\t\t\tif (this.state != null)\n\t\t\t{\n\t\t\t\tvar tmp = this.graph.view.getState(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (tmp == null)\n\t\t\t\t{\n\t\t\t\t\tthis.hide();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.state = tmp;\n\t\t\t\t\tthis.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.SCALE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.repaintHandler);\n\t\t\n\t\t// Hides the marker if the current root changes\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.hide();\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.DOWN, this.resetHandler);\n\t\tthis.graph.getView().addListener(mxEvent.UP, this.resetHandler);\n\t}\n};\n\n/**\n * Variable: keepOnTop\n * \n * Specifies if the highlights should appear on top of everything\n * else in the overlay pane. Default is false.\n */\nmxCellHighlight.prototype.keepOnTop = false;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellHighlight.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState>.\n */\nmxCellHighlight.prototype.state = null;\n\n/**\n * Variable: spacing\n * \n * Specifies the spacing between the highlight for vertices and the vertex.\n * Default is 2.\n */\nmxCellHighlight.prototype.spacing = 2;\n\n/**\n * Variable: resetHandler\n * \n * Holds the handler that automatically invokes reset if the highlight\n * should be hidden.\n */\nmxCellHighlight.prototype.resetHandler = null;\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxCellHighlight.prototype.setHighlightColor = function(color)\n{\n\tthis.highlightColor = color;\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n/**\n * Function: drawHighlight\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.drawHighlight = function()\n{\n\tthis.shape = this.createShape();\n\tthis.repaint();\n\n\tif (!this.keepOnTop && this.shape.node.parentNode.firstChild != this.shape.node)\n\t{\n\t\tthis.shape.node.parentNode.insertBefore(this.shape.node, this.shape.node.parentNode.firstChild);\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.createShape = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\t\n\tshape.svgStrokeTolerance = this.graph.tolerance;\n\tshape.points = this.state.absolutePoints;\n\tshape.apply(this.state);\n\tshape.stroke = this.highlightColor;\n\tshape.opacity = this.opacity;\n\tshape.isDashed = this.dashed;\n\tshape.isShadow = false;\n\t\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n\t\n\tif (this.graph.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.pointerEvents = false;\n\t}\n\telse\n\t{\n\t\tshape.svgPointerEvents = 'stroke';\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: getStrokeWidth\n * \n * Returns the stroke width.\n */\nmxCellHighlight.prototype.getStrokeWidth = function(state)\n{\n\treturn this.strokeWidth;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.repaint = function()\n{\n\tif (this.state != null && this.shape != null)\n\t{\n\t\tthis.shape.scale = this.state.view.scale;\n\t\t\n\t\tif (this.graph.model.isEdge(this.state.cell))\n\t\t{\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth();\n\t\t\tthis.shape.points = this.state.absolutePoints;\n\t\t\tthis.shape.outline = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.shape.bounds = new mxRectangle(this.state.x - this.spacing, this.state.y - this.spacing,\n\t\t\t\t\tthis.state.width + 2 * this.spacing, this.state.height + 2 * this.spacing);\n\t\t\tthis.shape.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth() / this.state.view.scale;\n\t\t\tthis.shape.outline = true;\n\t\t}\n\n\t\t// Uses cursor from shape in highlight\n\t\tif (this.state.shape != null)\n\t\t{\n\t\t\tthis.shape.setCursor(this.state.shape.getCursor());\n\t\t}\n\t\t\n\t\t// Workaround for event transparency in VML with transparent color\n\t\t// is to use a non-transparent color with near zero opacity\n\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t{\n\t\t\tif (this.shape.stroke == 'transparent')\n\t\t\t{\n\t\t\t\t// KNOWN: Quirks mode does not seem to catch events if\n\t\t\t\t// we do not force an update of the DOM via a change such\n\t\t\t\t// as mxLog.debug. Since IE6 is EOL we do not add a fix.\n\t\t\t\tthis.shape.stroke = 'white';\n\t\t\t\tthis.shape.opacity = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.shape.opacity = this.opacity;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: hide\n * \n * Resets the state of the cell marker.\n */\nmxCellHighlight.prototype.hide = function()\n{\n\tthis.highlight(null);\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellHighlight.prototype.highlight = function(state)\n{\n\tif (this.state != state)\n\t{\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.destroy();\n\t\t\tthis.shape = null;\n\t\t}\n\n\t\tthis.state = state;\n\t\t\n\t\tif (this.state != null)\n\t\t{\n\t\t\tthis.drawHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHighlightAt\n * \n * Returns true if this highlight is at the given position.\n */\nmxCellHighlight.prototype.isHighlightAt = function(x, y)\n{\n\tvar hit = false;\n\t\n\t// Quirks mode is currently not supported as it used a different coordinate system\n\tif (this.shape != null && document.elementFromPoint != null && !mxClient.IS_QUIRKS)\n\t{\n\t\tvar elt = document.elementFromPoint(x, y);\n\n\t\twhile (elt != null)\n\t\t{\n\t\t\tif (elt == this.shape.node)\n\t\t\t{\n\t\t\t\thit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\t\n\treturn hit;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellHighlight.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getView().removeListener(this.repaintHandler);\n\tthis.graph.getModel().removeListener(this.repaintHandler);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n\n__mxOutput.mxCellHighlight = typeof mxCellHighlight !== 'undefined' ? mxCellHighlight : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultKeyHandler\n *\n * Binds keycodes to actionnames in an editor. This aggregates an internal\n * <handler> and extends the implementation of <mxKeyHandler.escape> to not\n * only cancel the editing, but also hide the properties dialog and fire an\n * <mxEditor.escape> event via <editor>. An instance of this class is created\n * by <mxEditor> and stored in <mxEditor.keyHandler>.\n * \n * Example:\n * \n * Bind the delete key to the delete action in an existing editor.\n * \n * (code)\n * var keyHandler = new mxDefaultKeyHandler(editor);\n * keyHandler.bindAction(46, 'delete');\n * (end)\n *\n * Codec:\n * \n * This class uses the <mxDefaultKeyHandlerCodec> to read configuration\n * data into an existing instance. See <mxDefaultKeyHandlerCodec> for a\n * description of the configuration format.\n * \n * Keycodes:\n * \n * See <mxKeyHandler>.\n * \n * An <mxEvent.ESCAPE> event is fired via the editor if the escape key is\n * pressed.\n * \n * Constructor: mxDefaultKeyHandler\n *\n * Constructs a new default key handler for the <mxEditor.graph> in the\n * given <mxEditor>. (The editor may be null if a prototypical instance for\n * a <mxDefaultKeyHandlerCodec> is created.)\n * \n * Parameters:\n * \n * editor - Reference to the enclosing <mxEditor>.\n */\nfunction mxDefaultKeyHandler(editor)\n{\n\tif (editor != null)\n\t{\n\t\tthis.editor = editor;\n\t\tthis.handler = new mxKeyHandler(editor.graph);\n\t\t\n\t\t// Extends the escape function of the internal key\n\t\t// handle to hide the properties dialog and fire\n\t\t// the escape event via the editor instance\n\t\tvar old = this.handler.escape;\n\t\t\n\t\tthis.handler.escape = function(evt)\n\t\t{\n\t\t\told.apply(this, arguments);\n\t\t\teditor.hideProperties();\n\t\t\teditor.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n\t\t};\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.editor = null;\n\n/**\n * Variable: handler\n *\n * Holds the <mxKeyHandler> for key event handling.\n */\nmxDefaultKeyHandler.prototype.handler = null;\n\n/**\n * Function: bindAction\n *\n * Binds the specified keycode to the given action in <editor>. The\n * optional control flag specifies if the control key must be pressed\n * to trigger the action.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * action - Name of the action to execute in <editor>.\n * control - Optional boolean that specifies if control must be pressed.\n * Default is false.\n */\nmxDefaultKeyHandler.prototype.bindAction = function (code, action, control)\n{\n\tvar keyHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\n\t// Binds the function to control-down keycode\n\tif (control)\n\t{\n\t\tthis.handler.bindControlKey(code, keyHandler);\n\t}\n\n\t// Binds the function to the normal keycode\n\telse\n\t{\n\t\tthis.handler.bindKey(code, keyHandler);\t\t\t\t\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the <handler> associated with this object. This does normally\n * not need to be called, the <handler> is destroyed automatically when the\n * window unloads (in IE) by <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.destroy = function ()\n{\n\tthis.handler.destroy();\n\tthis.handler = null;\n};\n\n__mxOutput.mxDefaultKeyHandler = typeof mxDefaultKeyHandler !== 'undefined' ? mxDefaultKeyHandler : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultPopupMenu\n *\n * Creates popupmenus for mouse events. This object holds an XML node\n * which is a description of the popup menu to be created. In\n * <createMenu>, the configuration is applied to the context and\n * the resulting menu items are added to the menu dynamically. See\n * <createMenu> for a description of the configuration format.\n * \n * This class does not create the DOM nodes required for the popup menu, it\n * only parses an XML description to invoke the respective methods on an\n * <mxPopupMenu> each time the menu is displayed.\n *\n * Codec:\n * \n * This class uses the <mxDefaultPopupMenuCodec> to read configuration\n * data into an existing instance, however, the actual parsing is done\n * by this class during program execution, so the format is described\n * below.\n * \n * Constructor: mxDefaultPopupMenu\n *\n * Constructs a new popupmenu-factory based on given configuration.\n *\n * Paramaters:\n *\n * config - XML node that contains the configuration data.\n */\nfunction mxDefaultPopupMenu(config)\n{\n\tthis.config = config;\n};\n\n/**\n * Variable: imageBasePath\n *\n * Base path for all icon attributes in the config. Default is null.\n */\nmxDefaultPopupMenu.prototype.imageBasePath = null;\n\n/**\n * Variable: config\n *\n * XML node used as the description of new menu items. This node is\n * used in <createMenu> to dynamically create the menu items if their\n * respective conditions evaluate to true for the given arguments.\n */\nmxDefaultPopupMenu.prototype.config = null;\n\n/**\n * Function: createMenu\n *\n * This function is called from <mxEditor> to add items to the\n * given menu based on <config>. The config is a sequence of\n * the following nodes and attributes.\n *\n * Child Nodes: \n *\n * add - Adds a new menu item. See below for attributes.\n * separator - Adds a separator. No attributes.\n * condition - Adds a custom condition. Name attribute.\n * \n * The add-node may have a child node that defines a function to be invoked\n * before the action is executed (or instead of an action to be executed).\n *\n * Attributes:\n *\n * as - Resource key for the label (needs entry in property file).\n * action - Name of the action to execute in enclosing editor.\n * icon - Optional icon (relative/absolute URL).\n * iconCls - Optional CSS class for the icon.\n * if - Optional name of condition that must be true (see below).\n * enabled-if - Optional name of condition that specifies if the menu item\n * should be enabled.\n * name - Name of custom condition. Only for condition nodes.\n *\n * Conditions:\n *\n * nocell - No cell under the mouse.\n * ncells - More than one cell selected.\n * notRoot - Drilling position is other than home.\n * cell - Cell under the mouse.\n * notEmpty - Exactly one cell with children under mouse.\n * expandable - Exactly one expandable cell under mouse.\n * collapsable - Exactly one collapsable cell under mouse.\n * validRoot - Exactly one cell which is a possible root under mouse.\n * swimlane - Exactly one cell which is a swimlane under mouse.\n *\n * Example:\n *\n * To add a new item for a given action to the popupmenu:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"delete\" action=\"delete\" icon=\"images/delete.gif\" if=\"cell\"/>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * To add a new item for a custom function:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"action1\"><![CDATA[\n *\t\tfunction (editor, cell, evt)\n *\t\t{\n *\t\t\teditor.execute('action1', cell, 'myArg');\n *\t\t}\n *   ]]></add>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * The above example invokes action1 with an additional third argument via\n * the editor instance. The third argument is passed to the function that\n * defines action1. If the add-node has no action-attribute, then only the\n * function defined in the text content is executed, otherwise first the\n * function and then the action defined in the action-attribute is\n * executed. The function in the text content has 3 arguments, namely the\n * <mxEditor> instance, the <mxCell> instance under the mouse, and the\n * native mouse event.\n *\n * Custom Conditions:\n *\n * To add a new condition for popupmenu items:\n *  \n * (code)\n * <condition name=\"condition1\"><![CDATA[\n *   function (editor, cell, evt)\n *   {\n *     return cell != null;\n *   }\n * ]]></condition>\n * (end)\n * \n * The new condition can then be used in any item as follows:\n * \n * (code)\n * <add as=\"action1\" action=\"action1\" icon=\"action1.gif\" if=\"condition1\"/>\n * (end)\n * \n * The order in which the items and conditions appear is not significant as\n * all connditions are evaluated before any items are created.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu. \n */\nmxDefaultPopupMenu.prototype.createMenu = function(editor, menu, cell, evt)\n{\n\tif (this.config != null)\n\t{\n\t\tvar conditions = this.createConditions(editor, cell, evt);\n\t\tvar item = this.config.firstChild;\n\n\t\tthis.addItems(editor, menu, cell, evt, conditions, item, null);\n\t}\n};\n\n/**\n * Function: addItems\n * \n * Recursively adds the given items and all of its children into the given menu.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu.\n * conditions - Array of names boolean conditions.\n * item - XML node that represents the current menu item.\n * parent - DOM node that represents the parent menu item.\n */\nmxDefaultPopupMenu.prototype.addItems = function(editor, menu, cell, evt, conditions, item, parent)\n{\n\tvar addSeparator = false;\n\t\n\twhile (item != null)\n\t{\n\t\tif (item.nodeName == 'add')\n\t\t{\n\t\t\tvar condition = item.getAttribute('if');\n\t\t\t\n\t\t\tif (condition == null || conditions[condition])\n\t\t\t{\n\t\t\t\tvar as = item.getAttribute('as');\n\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(item));\n\t\t\t\tvar action = item.getAttribute('action');\n\t\t\t\tvar icon = item.getAttribute('icon');\n\t\t\t\tvar iconCls = item.getAttribute('iconCls');\n\t\t\t\tvar enabledCond = item.getAttribute('enabled-if');\n\t\t\t\tvar enabled = enabledCond == null || conditions[enabledCond];\n\t\t\t\t\n\t\t\t\tif (addSeparator)\n\t\t\t\t{\n\t\t\t\t\tmenu.addSeparator(parent);\n\t\t\t\t\taddSeparator = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (icon != null && this.imageBasePath)\n\t\t\t\t{\n\t\t\t\t\ticon = this.imageBasePath + icon;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar row = this.addAction(menu, editor, as, icon, funct, action, cell, parent, iconCls, enabled);\n\t\t\t\tthis.addItems(editor, menu, cell, evt, conditions, item.firstChild, row);\n\t\t\t}\n\t\t}\n\t\telse if (item.nodeName == 'separator')\n\t\t{\n\t\t\taddSeparator = true;\n\t\t}\n\t\t\n\t\titem = item.nextSibling;\n\t}\n};\n\n/**\n * Function: addAction\n *\n * Helper method to bind an action to a new menu item.\n * \n * Parameters:\n *\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * editor - Enclosing <mxEditor> instance.\n * lab - String that represents the label of the menu item.\n * icon - Optional URL that represents the icon of the menu item.\n * action - Optional name of the action to execute in the given editor.\n * funct - Optional function to execute before the optional action. The\n * function takes an <mxEditor>, the <mxCell> under the mouse and the\n * mouse event that triggered the call.\n * cell - Optional <mxCell> to use as an argument for the action.\n * parent - DOM node that represents the parent menu item.\n * iconCls - Optional CSS class for the menu icon.\n * enabled - Optional boolean that specifies if the menu item is enabled.\n * Default is true.\n */\nmxDefaultPopupMenu.prototype.addAction = function(menu, editor, lab, icon, funct, action, cell, parent, iconCls, enabled)\n{\n\tvar clickHandler = function(evt)\n\t{\n\t\tif (typeof(funct) == 'function')\n\t\t{\n\t\t\tfunct.call(editor, editor, cell, evt);\n\t\t}\n\t\t\n\t\tif (action != null)\n\t\t{\n\t\t\teditor.execute(action, cell, evt);\n\t\t}\n\t};\n\t\n\treturn menu.addItem(lab, icon, clickHandler, parent, iconCls, enabled);\n};\n\n/**\n * Function: createConditions\n * \n * Evaluates the default conditions for the given context.\n */\nmxDefaultPopupMenu.prototype.createConditions = function(editor, cell, evt)\n{\n\t// Creates array with conditions\n\tvar model = editor.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\t// Adds some frequently used conditions\n\tvar conditions = [];\n\tconditions['nocell'] = cell == null;\n\tconditions['ncells'] = editor.graph.getSelectionCount() > 1;\n\tconditions['notRoot'] = model.getRoot() !=\n\t\tmodel.getParent(editor.graph.getDefaultParent());\n\tconditions['cell'] = cell != null;\n\t\n\tvar isCell = cell != null && editor.graph.getSelectionCount() == 1;\n\tconditions['nonEmpty'] = isCell && childCount > 0;\n\tconditions['expandable'] = isCell && editor.graph.isCellFoldable(cell, false);\n\tconditions['collapsable'] = isCell && editor.graph.isCellFoldable(cell, true);\n\tconditions['validRoot'] = isCell && editor.graph.isValidRoot(cell);\n\tconditions['emptyValidRoot'] = conditions['validRoot'] && childCount == 0;\n\tconditions['swimlane'] = isCell && editor.graph.isSwimlane(cell);\n\n\t// Evaluates dynamic conditions from config file\n\tvar condNodes = this.config.getElementsByTagName('condition');\n\t\n\tfor (var i=0; i<condNodes.length; i++)\n\t{\n\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(condNodes[i]));\n\t\tvar name = condNodes[i].getAttribute('name');\n\t\t\n\t\tif (name != null && typeof(funct) == 'function')\n\t\t{\n\t\t\tconditions[name] = funct(editor, cell, evt);\n\t\t}\n\t}\n\t\n\treturn conditions;\n};\n\n__mxOutput.mxDefaultPopupMenu = typeof mxDefaultPopupMenu !== 'undefined' ? mxDefaultPopupMenu : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbar\n *\n * Toolbar for the editor. This modifies the state of the graph\n * or inserts new cells upon mouse clicks.\n * \n * Example:\n * \n * Create a toolbar with a button to copy the selection into the clipboard,\n * and a combo box with one action to paste the selection from the clipboard\n * into the graph.\n * \n * (code)\n * var toolbar = new mxDefaultToolbar(container, editor);\n * toolbar.addItem('Copy', null, 'copy');\n * \n * var combo = toolbar.addActionCombo('More actions...');\n * toolbar.addActionOption(combo, 'Paste', 'paste');\n * (end) \n *\n * Codec:\n * \n * This class uses the <mxDefaultToolbarCodec> to read configuration\n * data into an existing instance. See <mxDefaultToolbarCodec> for a\n * description of the configuration format.\n * \n * Constructor: mxDefaultToolbar\n *\n * Constructs a new toolbar for the given container and editor. The\n * container and editor may be null if a prototypical instance for a\n * <mxDefaultKeyHandlerCodec> is created.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n * editor - Reference to the enclosing <mxEditor>. \n */\nfunction mxDefaultToolbar(container, editor)\n{\n\tthis.editor = editor;\n\n\tif (container != null && editor != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultToolbar.prototype.editor = null;\n\n/**\n * Variable: toolbar\n *\n * Holds the internal <mxToolbar>.\n */\nmxDefaultToolbar.prototype.toolbar = null;\n\n/**\n * Variable: resetHandler\n *\n * Reference to the function used to reset the <toolbar>.\n */\nmxDefaultToolbar.prototype.resetHandler = null;\n\n/**\n * Variable: spacing\n *\n * Defines the spacing between existing and new vertices in\n * gridSize units when a new vertex is dropped on an existing\n * cell. Default is 4 (40 pixels).\n */\nmxDefaultToolbar.prototype.spacing = 4;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if elements should be connected if new cells are dropped onto\n * connectable elements. Default is false.\n */\nmxDefaultToolbar.prototype.connectOnDrop = false;\n\n/**\n * Function: init\n * \n * Constructs the <toolbar> for the given container and installs a listener\n * that updates the <mxEditor.insertFunction> on <editor> if an item is\n * selected in the toolbar. This assumes that <editor> is not null.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nmxDefaultToolbar.prototype.init = function(container)\n{\n\tif (container != null)\n\t{\n\t\tthis.toolbar = new mxToolbar(container);\n\t\t\n\t\t// Installs the insert function in the editor if an item is\n\t\t// selected in the toolbar\n\t\tthis.toolbar.addListener(mxEvent.SELECT, mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar funct = evt.getProperty('function');\n\t\t\t\n\t\t\tif (funct != null)\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = mxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tfunct.apply(this, arguments);\n\t\t\t\t\tthis.toolbar.resetMode();\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = null;\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Resets the selected tool after a doubleclick or escape keystroke\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.toolbar != null)\n\t\t\t{\n\t\t\t\tthis.toolbar.resetMode(true);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.graph.addListener(mxEvent.DOUBLE_CLICK, this.resetHandler);\n\t\tthis.editor.addListener(mxEvent.ESCAPE, this.resetHandler);\n\t}\n};\n\n/**\n * Function: addItem\n *\n * Adds a new item that executes the given action in <editor>. The title,\n * icon and pressedIcon are used to display the toolbar item.\n * \n * Parameters:\n *\n * title - String that represents the title (tooltip) for the item.\n * icon - URL of the icon to be used for displaying the item.\n * action - Name of the action to execute when the item is clicked.\n * pressed - Optional URL of the icon for the pressed state.\n */\nmxDefaultToolbar.prototype.addItem = function(title, icon, action, pressed)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (action != null && action.length > 0)\n\t\t{\n\t\t\tthis.editor.execute(action);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addItem(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addSeparator\n *\n * Adds a vertical separator using the optional icon.\n * \n * Parameters:\n * \n * icon - Optional URL of the icon that represents the vertical separator.\n * Default is <mxClient.imageBasePath> + '/separator.gif'.\n */\nmxDefaultToolbar.prototype.addSeparator = function(icon)\n{\n\ticon = icon || mxClient.imageBasePath + '/separator.gif';\n\tthis.toolbar.addSeparator(icon);\n};\n\t\n/**\n * Function: addCombo\n *\n * Helper method to invoke <mxToolbar.addCombo> on <toolbar> and return the\n * resulting DOM node.\n */\nmxDefaultToolbar.prototype.addCombo = function()\n{\n\treturn this.toolbar.addCombo();\n};\n\t\t\n/**\n * Function: addActionCombo\n *\n * Helper method to invoke <mxToolbar.addActionCombo> on <toolbar> using\n * the given title and return the resulting DOM node.\n * \n * Parameters:\n * \n * title - String that represents the title of the combo.\n */\nmxDefaultToolbar.prototype.addActionCombo = function(title)\n{\n\treturn this.toolbar.addActionCombo(title);\n};\n\n/**\n * Function: addActionOption\n *\n * Binds the given action to a option with the specified label in the\n * given combo. Combo is an object returned from an earlier call to\n * <addCombo> or <addActionCombo>.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * action - Name of the action to execute in <editor>.\n */\nmxDefaultToolbar.prototype.addActionOption = function(combo, title, action)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\t\n\tthis.addOption(combo, title, clickHandler);\n};\n\n/**\n * Function: addOption\n *\n * Helper method to invoke <mxToolbar.addOption> on <toolbar> and return\n * the resulting DOM node that represents the option.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * value - Object that represents the value of the option.\n */\nmxDefaultToolbar.prototype.addOption = function(combo, title, value)\n{\n\treturn this.toolbar.addOption(combo, title, value);\n};\n\t\n/**\n * Function: addMode\n *\n * Creates an item for selecting the given mode in the <editor>'s graph.\n * Supported modenames are select, connect and pan.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * mode - String that represents the mode name to be used in\n * <mxEditor.setMode>.\n * pressed - Optional URL of the icon that represents the pressed state.\n * funct - Optional JavaScript function that takes the <mxEditor> as the\n * first and only argument that is executed after the mode has been\n * selected.\n */\nmxDefaultToolbar.prototype.addMode = function(title, icon, mode, pressed, funct)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.setMode(mode);\n\t\t\n\t\tif (funct != null)\n\t\t{\n\t\t\tfunct(this.editor);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addSwitchMode(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addPrototype\n *\n * Creates an item for inserting a clone of the specified prototype cell into\n * the <editor>'s graph. The ptype may either be a cell or a function that\n * returns a cell.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * ptype - Function or object that represents the prototype cell. If ptype\n * is a function then it is invoked with no arguments to create new\n * instances.\n * pressed - Optional URL of the icon that represents the pressed state.\n * insert - Optional JavaScript function that handles an insert of the new\n * cell. This function takes the <mxEditor>, new cell to be inserted, mouse\n * event and optional <mxCell> under the mouse pointer as arguments.\n * toggle - Optional boolean that specifies if the item can be toggled.\n * Default is true.\n */\nmxDefaultToolbar.prototype.addPrototype = function(title, icon, ptype, pressed, insert, toggle)\n{\n\t// Creates a wrapper function that is in charge of constructing\n\t// the new cell instance to be inserted into the graph\n\tvar factory = mxUtils.bind(this, function()\n\t{\n\t\tif (typeof(ptype) == 'function')\n\t\t{\n\t\t\treturn ptype();\n\t\t}\n\t\telse if (ptype != null)\n\t\t{\n\t\t\treturn this.editor.graph.cloneCell(ptype);\n\t\t}\n\t\t\n\t\treturn null;\n\t});\n\t\n\t// Defines the function for a click event on the graph\n\t// after this item has been selected in the toolbar\n\tvar clickHandler = mxUtils.bind(this, function(evt, cell)\n\t{\n\t\tif (typeof(insert) == 'function')\n\t\t{\n\t\t\tinsert(this.editor, factory(), evt, cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.drop(factory(), evt, cell);\n\t\t}\n\t\t\n\t\tthis.toolbar.resetMode();\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tvar img = this.toolbar.addMode(title, icon, clickHandler, pressed, null, toggle);\n\t\t\t\t\n\t// Creates a wrapper function that calls the click handler without\n\t// the graph argument\n\tvar dropHandler = function(graph, evt, cell)\n\t{\n\t\tclickHandler(evt, cell);\n\t};\n\t\n\tthis.installDropHandler(img, dropHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: drop\n * \n * Handles a drop from a toolbar item to the graph. The given vertex\n * represents the new cell to be inserted. This invokes <insert> or\n * <connect> depending on the given target cell.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * target - Optional <mxCell> that represents the drop target.\n */\nmxDefaultToolbar.prototype.drop = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (target == null ||\n\t\tmodel.isEdge(target) ||\n\t\t!this.connectOnDrop ||\n\t\t!graph.isCellConnectable(target))\n\t{\n\t\twhile (target != null &&\n\t\t\t!graph.isValidDropTarget(target, [vertex], evt))\n\t\t{\n\t\t\ttarget = model.getParent(target);\n\t\t}\n\t\t\n\t\tthis.insert(vertex, evt, target);\n\t}\n\telse\n\t{\n\t\tthis.connect(vertex, evt, target);\n\t}\n};\n\n/**\n * Function: insert\n *\n * Handles a drop by inserting the given vertex into the given parent cell\n * or the default parent if no parent is specified.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * parent - Optional <mxCell> that represents the parent.\n */\nmxDefaultToolbar.prototype.insert = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\t\n\tif (graph.canImportCell(vertex))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\n\t\t// Splits the target edge or inserts into target group\n\t\tif (graph.isSplitEnabled() &&\n\t\t\tgraph.isSplitTarget(target, [vertex], evt))\n\t\t{\n\t\t\treturn graph.splitEdge(target, [vertex], null, pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.editor.addVertex(target, vertex, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: connect\n * \n * Handles a drop by connecting the given vertex to the given source cell.\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * source - Optional <mxCell> that represents the source terminal.\n */\nmxDefaultToolbar.prototype.connect = function(vertex, evt, source)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (source != null &&\n\t\tgraph.isCellConnectable(vertex) &&\n\t\tgraph.isEdgeValid(null, source, vertex))\n\t{\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar geo = model.getGeometry(source);\n\t\t\tvar g = model.getGeometry(vertex).clone();\n\t\t\t\n\t\t\t// Moves the vertex away from the drop target that will\n\t\t\t// be used as the source for the new connection\n\t\t\tg.x = geo.x + (geo.width - g.width) / 2;\n\t\t\tg.y = geo.y + (geo.height - g.height) / 2;\n\t\t\t\n\t\t\tvar step = this.spacing * graph.gridSize;\n\t\t\tvar dist = model.getDirectedEdgeCount(source, true) * 20;\n\t\t\t\n\t\t\tif (this.editor.horizontalFlow)\n\t\t\t{\n\t\t\t\tg.x += (g.width + geo.width) / 2 + step + dist;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.y += (g.height + geo.height) / 2 + step + dist;\n\t\t\t}\n\t\t\t\n\t\t\tvertex.setGeometry(g);\n\t\t\t\n\t\t\t// Fires two add-events with the code below - should be fixed\n\t\t\t// to only fire one add event for both inserts\n\t\t\tvar parent = model.getParent(source);\n\t\t\tgraph.addCell(vertex, parent);\n\t\t\tgraph.constrainChild(vertex);\n\n\t\t\t// Creates the edge using the editor instance and calls\n\t\t\t// the second function that fires an add event\n\t\t\tedge = this.editor.createEdge(source, vertex);\n\t\t\t\n\t\t\tif (model.getGeometry(edge) == null)\n\t\t\t{\n\t\t\t\tvar edgeGeometry = new mxGeometry();\n\t\t\t\tedgeGeometry.relative = true;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, edgeGeometry);\n\t\t\t}\n\t\t\t\n\t\t\tgraph.addEdge(edge, parent, source, vertex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tgraph.setSelectionCells([vertex, edge]);\n\t\tgraph.scrollCellToVisible(vertex);\n\t}\n};\n\n/**\n * Function: installDropHandler\n * \n * Makes the given img draggable using the given function for handling a\n * drop event.\n * \n * Parameters:\n * \n * img - DOM node that represents the image.\n * dropHandler - Function that handles a drop of the image.\n */\nmxDefaultToolbar.prototype.installDropHandler = function (img, dropHandler)\n{\n\tvar sprite = document.createElement('img');\n\tsprite.setAttribute('src', img.getAttribute('src'));\n\n\t// Handles delayed loading of the images\n\tvar loader = mxUtils.bind(this, function(evt)\n\t{\n\t\t// Preview uses the image node with double size. Later this can be\n\t\t// changed to use a separate preview and guides, but for this the\n\t\t// dropHandler must use the additional x- and y-arguments and the\n\t\t// dragsource which makeDraggable returns much be configured to\n\t\t// use guides via mxDragSource.isGuidesEnabled.\n\t\tsprite.style.width = (2 * img.offsetWidth) + 'px';\n\t\tsprite.style.height = (2 * img.offsetHeight) + 'px';\n\n\t\tmxUtils.makeDraggable(img, this.editor.graph, dropHandler,\n\t\t\tsprite);\n\t\tmxEvent.removeListener(sprite, 'load', loader);\n\t});\n\n\tif (mxClient.IS_IE)\n\t{\n\t\tloader();\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(sprite, 'load', loader);\n\t}\t\n};\n\n/**\n * Function: destroy\n * \n * Destroys the <toolbar> associated with this object and removes all\n * installed listeners. This does normally not need to be called, the\n * <toolbar> is destroyed automatically when the window unloads (in IE) by\n * <mxEditor>.\n */\nmxDefaultToolbar.prototype.destroy = function ()\n{\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.editor.graph.removeListener('dblclick', this.resetHandler);\n\t\tthis.editor.removeListener('escape', this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.toolbar != null)\n\t{\n\t\tthis.toolbar.destroy();\n\t\tthis.toolbar = null;\n\t}\n};\n\n__mxOutput.mxDefaultToolbar = typeof mxDefaultToolbar !== 'undefined' ? mxDefaultToolbar : undefined;\n\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2019, draw.io AG\n */\n/**\n * Class: mxEditor\n *\n * Extends <mxEventSource> to implement an application wrapper for a graph that\n * adds <actions>, I/O using <mxCodec>, auto-layout using <mxLayoutManager>,\n * command history using <undoManager>, and standard dialogs and widgets, eg.\n * properties, help, outline, toolbar, and popupmenu. It also adds <templates>\n * to be used as cells in toolbars, auto-validation using the <validation>\n * flag, attribute cycling using <cycleAttributeValues>, higher-level events\n * such as <root>, and backend integration using <urlPost> and <urlImage>.\n *\n * Actions:\n *\n * Actions are functions stored in the <actions> array under their names. The\n * functions take the <mxEditor> as the first, and an optional <mxCell> as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n *\n * A list of built-in actions is available in the <addActions> description.\n *\n * Read/write Diagrams:\n *\n * To read a diagram from an XML string, for example from a textfield within the\n * page, the following code is used:\n *\n * (code)\n * var doc = mxUtils.parseXML(xmlString);\n * var node = doc.documentElement;\n * editor.readGraphModel(node);\n * (end)\n *\n * For reading a diagram from a remote location, use the <open> method.\n *\n * To save diagrams in XML on a server, you can set the <urlPost> variable.\n * This variable will be used in <getUrlPost> to construct a URL for the post\n * request that is issued in the <save> method. The post request contains the\n * XML representation of the diagram as returned by <writeGraphModel> in the\n * xml parameter.\n *\n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n *\n * Here are some examples of processing a post request in various languages.\n *\n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\")\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n *\n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n *\n * Creating images:\n *\n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n *\n * Special characters:\n *\n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n *\n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n *\n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to a HTML user agent.\n *\n * If you are having problems with special characters on the server-side then\n * you may want to try the <escapePostData> flag.\n *\n * For converting decimal escape sequences inside strings, a user has provided\n * us with the following function:\n *\n * (code)\n * function html2js(text)\n * {\n *   var entitySearch = /&#[0-9]+;/;\n *   var entity;\n *\n *   while (entity = entitySearch.exec(text))\n *   {\n *     var charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *\n *   return text;\n * }\n * (end)\n *\n * Otherwise try using hex escape sequences and the built-in unescape function\n * for converting such strings.\n *\n * Local Files:\n *\n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n *\n * For example, in PHP the code that does this looks as follows.\n *\n * (code)\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * (end)\n *\n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n *\n * Cell Properties:\n *\n * The properties displayed in the properties dialog are the attributes and\n * values of the cell's user object, which is an XML node. The XML node is\n * defined in the templates section of the config file.\n *\n * The templates are stored in <mxEditor.templates> and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n *\n * In the following example, the task node is a business object and only the\n * mxCell node and its mxGeometry child contain graph information:\n *\n * (code)\n * <Task label=\"Task\" description=\"\">\n *   <mxCell vertex=\"true\">\n *     <mxGeometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </mxCell>\n * </Task>\n * (end)\n *\n * The idea is that the XML representation is inverse from the in-memory\n * representation: The outer XML node is the user object and the inner node is\n * the cell. This means the user object of the cell is the Task node with no\n * children for the above example:\n *\n * (code)\n * <Task label=\"Task\" description=\"\"/>\n * (end)\n *\n * The Task node can have any tag name, attributes and child nodes. The\n * <mxCodec> will use the XML hierarchy as the user object, while removing the\n * \"known annotations\", such as the mxCell node. At save-time the cell data\n * will be \"merged\" back into the user object. The user object is only modified\n * via the properties dialog during the lifecycle of the cell.\n *\n * In the default implementation of <createProperties>, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the <mxCellAttributeChange> action in the model. The dialog can be replaced\n * by overriding the <createProperties> hook or by replacing the showProperties\n * action in <actions>. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n *\n * If you want to displey the properties dialog on a doubleclick, you can set\n * <mxEditor.dblClickAction> to showProperties as follows:\n *\n * (code)\n * editor.dblClickAction = 'showProperties';\n * (end)\n *\n * Popupmenu and Toolbar:\n *\n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * (end)\n *\n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the <mxDefaultPopupMenuCodec>, the format of the\n * configuration is explained in <mxDefaultPopupMenu.decode>.\n *\n * The toolbar is defined in the mxDefaultToolbar section. Items can be added\n * and removed in this section.\n *\n * (code)\n * <mxEditor>\n *   <mxDefaultToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * (end)\n *\n * The format of the configuration is described in\n * <mxDefaultToolbarCodec.decode>.\n *\n * Ids:\n *\n * For the IDs, there is an implicit behaviour in <mxCodec>: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the <mxCell.id> of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the <mxGraphModel.getCell> function. If there is a collision, a new\n * Id will be created for the cell using <mxGraphModel.createId>. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n *\n * See <mxEditorCodec>, <mxDefaultToolbarCodec> and <mxDefaultPopupMenuCodec>\n * for information about configuring the editor and user interface.\n *\n * Programmatically inserting cells:\n *\n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n *\n * (code)\n * var userObject = new Object();\n * var parent = editor.graph.getDefaultParent();\n * var model = editor.graph.model;\n * model.beginUpdate();\n * try\n * {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n *\n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n *\n * (code)\n * var template = editor.templates['task'];\n * var clone = editor.graph.model.cloneCell(template);\n * (end)\n *\n * Resources:\n *\n * resources/editor - Language resources for mxEditor\n *\n * Callback: onInit\n *\n * Called from within the constructor. In the callback,\n * \"this\" refers to the editor instance.\n *\n * Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * <resetFirstTime> to reset this cookie. This cookie\n * only exists if <onInit> is implemented.\n *\n * Event: mxEvent.OPEN\n *\n * Fires after a file was opened in <open>. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * <filename>.\n *\n * Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in <save>. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * Event: mxEvent.POST\n *\n * Fires if a successful response was received in <postDiagram>. The\n * <code>request</code> property contains the <mxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request.\n *\n * Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * Event: mxEvent.BEFORE_ADD_VERTEX\n *\n * Fires before a vertex is added in <addVertex>. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n *\n * Event: mxEvent.ADD_VERTEX\n *\n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n *\n * Event: mxEvent.AFTER_ADD_VERTEX\n *\n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n *\n * Example:\n *\n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n *\n * (code)\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt)\n * {\n *   var vertex = evt.getProperty('vertex');\n *\n *   if (editor.graph.isCellEditable(vertex))\n *   {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * (end)\n *\n * Event: mxEvent.ESCAPE\n *\n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n *\n * Constructor: mxEditor\n *\n * Constructs a new editor. This function invokes the <onInit> callback\n * upon completion.\n *\n * Example:\n *\n * (code)\n * var config = mxUtils.load('config/diagrameditor.xml').getDocumentElement();\n * var editor = new mxEditor(config);\n * (end)\n *\n * Parameters:\n *\n * config - Optional XML node that contains the configuration.\n */\nfunction mxEditor(config)\n{\n\tthis.actions = [];\n\tthis.addActions();\n\n\t// Executes the following only if a document has been instanciated.\n\t// That is, don't execute when the editorcodec is setup.\n\tif (document.body != null)\n\t{\n\t\t// Defines instance fields\n\t\tthis.cycleAttributeValues = [];\n\t\tthis.popupHandler = new mxDefaultPopupMenu();\n\t\tthis.undoManager = new mxUndoManager();\n\n\t\t// Creates the graph and toolbar without the containers\n\t\tthis.graph = this.createGraph();\n\t\tthis.toolbar = this.createToolbar();\n\n\t\t// Creates the global keyhandler (requires graph instance)\n\t\tthis.keyHandler = new mxDefaultKeyHandler(this);\n\n\t\t// Configures the editor using the URI\n\t\t// which was passed to the ctor\n\t\tthis.configure(config);\n\n\t\t// Assigns the swimlaneIndicatorColorAttribute on the graph\n\t\tthis.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n\n\t\t// Checks if the <onInit> hook has been set\n\t\tif (this.onInit != null)\n\t\t{\n\t\t\t// Invokes the <onInit> hook\n\t\t\tthis.onInit();\n\t\t}\n\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/editor');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/editor');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxEditor.prototype = new mxEventSource();\nmxEditor.prototype.constructor = mxEditor;\n\n/**\n * Group: Controls and Handlers\n */\n\n/**\n * Variable: askZoomResource\n *\n * Specifies the resource key for the zoom dialog. If the resource for this\n * key does not exist then the value is used as the error message. Default\n * is 'askZoom'.\n */\nmxEditor.prototype.askZoomResource = (mxClient.language != 'none') ? 'askZoom' : '';\n\n/**\n * Variable: lastSavedResource\n *\n * Specifies the resource key for the last saved info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.lastSavedResource = (mxClient.language != 'none') ? 'lastSaved' : '';\n\n/**\n * Variable: currentFileResource\n *\n * Specifies the resource key for the current file info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'currentFile'.\n */\nmxEditor.prototype.currentFileResource = (mxClient.language != 'none') ? 'currentFile' : '';\n\n/**\n * Variable: propertiesResource\n *\n * Specifies the resource key for the properties window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'properties'.\n */\nmxEditor.prototype.propertiesResource = (mxClient.language != 'none') ? 'properties' : '';\n\n/**\n * Variable: tasksResource\n *\n * Specifies the resource key for the tasks window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'tasks'.\n */\nmxEditor.prototype.tasksResource = (mxClient.language != 'none') ? 'tasks' : '';\n\n/**\n * Variable: helpResource\n *\n * Specifies the resource key for the help window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'help'.\n */\nmxEditor.prototype.helpResource = (mxClient.language != 'none') ? 'help' : '';\n\n/**\n * Variable: outlineResource\n *\n * Specifies the resource key for the outline window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'outline'.\n */\nmxEditor.prototype.outlineResource = (mxClient.language != 'none') ? 'outline' : '';\n\n/**\n * Variable: outline\n *\n * Reference to the <mxWindow> that contains the outline. The <mxOutline>\n * is stored in outline.outline.\n */\nmxEditor.prototype.outline = null;\n\n/**\n * Variable: graph\n *\n * Holds a <mxGraph> for displaying the diagram. The graph\n * is created in <setGraphContainer>.\n */\nmxEditor.prototype.graph = null;\n\n/**\n * Variable: graphRenderHint\n *\n * Holds the render hint used for creating the\n * graph in <setGraphContainer>. See <mxGraph>.\n * Default is null.\n */\nmxEditor.prototype.graphRenderHint = null;\n\n/**\n * Variable: toolbar\n *\n * Holds a <mxDefaultToolbar> for displaying the toolbar. The\n * toolbar is created in <setToolbarContainer>.\n */\nmxEditor.prototype.toolbar = null;\n\n/**\n * Variable: status\n *\n * DOM container that holds the statusbar. Default is null.\n * Use <setStatusContainer> to set this value.\n */\nmxEditor.prototype.status = null;\n\n/**\n * Variable: popupHandler\n *\n * Holds a <mxDefaultPopupMenu> for displaying\n * popupmenus.\n */\nmxEditor.prototype.popupHandler = null;\n\n/**\n * Variable: undoManager\n *\n * Holds an <mxUndoManager> for the command history.\n */\nmxEditor.prototype.undoManager = null;\n\n/**\n * Variable: keyHandler\n *\n * Holds a <mxDefaultKeyHandler> for handling keyboard events.\n * The handler is created in <setGraphContainer>.\n */\nmxEditor.prototype.keyHandler = null;\n\n/**\n * Group: Actions and Options\n */\n\n/**\n * Variable: actions\n *\n * Maps from actionnames to actions, which are functions taking\n * the editor and the cell as arguments. Use <addAction>\n * to add or replace an action and <execute> to execute an action\n * by name, passing the cell to be operated upon as the second\n * argument.\n */\nmxEditor.prototype.actions = null;\n\n/**\n * Variable: dblClickAction\n *\n * Specifies the name of the action to be executed\n * when a cell is double clicked. Default is 'edit'.\n *\n * To handle a singleclick, use the following code.\n *\n * (code)\n * editor.graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event');\n *   var cell = evt.getProperty('cell');\n *\n *   if (cell != null && !e.isConsumed())\n *   {\n *     // Do something useful with cell...\n *     e.consume();\n *   }\n * });\n * (end)\n */\nmxEditor.prototype.dblClickAction = 'edit';\n\n/**\n * Variable: swimlaneRequired\n *\n * Specifies if new cells must be inserted\n * into an existing swimlane. Otherwise, cells\n * that are not swimlanes can be inserted as\n * top-level cells. Default is false.\n */\nmxEditor.prototype.swimlaneRequired = false;\n\n/**\n * Variable: disableContextMenu\n *\n * Specifies if the context menu should be disabled in the graph container.\n * Default is true.\n */\nmxEditor.prototype.disableContextMenu = true;\n\n/**\n * Group: Templates\n */\n\n/**\n * Variable: insertFunction\n *\n * Specifies the function to be used for inserting new\n * cells into the graph. This is assigned from the\n * <mxDefaultToolbar> if a vertex-tool is clicked.\n */\nmxEditor.prototype.insertFunction = null;\n\n/**\n * Variable: forcedInserting\n *\n * Specifies if a new cell should be inserted on a single\n * click even using <insertFunction> if there is a cell\n * under the mousepointer, otherwise the cell under the\n * mousepointer is selected. Default is false.\n */\nmxEditor.prototype.forcedInserting = false;\n\n/**\n * Variable: templates\n *\n * Maps from names to protoype cells to be used\n * in the toolbar for inserting new cells into\n * the diagram.\n */\nmxEditor.prototype.templates = null;\n\n/**\n * Variable: defaultEdge\n *\n * Prototype edge cell that is used for creating\n * new edges.\n */\nmxEditor.prototype.defaultEdge = null;\n\n/**\n * Variable: defaultEdgeStyle\n *\n * Specifies the edge style to be returned in <getEdgeStyle>.\n * Default is null.\n */\nmxEditor.prototype.defaultEdgeStyle = null;\n\n/**\n * Variable: defaultGroup\n *\n * Prototype group cell that is used for creating\n * new groups.\n */\nmxEditor.prototype.defaultGroup = null;\n\n/**\n * Variable: groupBorderSize\n *\n * Default size for the border of new groups. If null,\n * then then <mxGraph.gridSize> is used. Default is\n * null.\n */\nmxEditor.prototype.groupBorderSize = null;\n\n/**\n * Group: Backend Integration\n */\n\n/**\n * Variable: filename\n *\n * Contains the URL of the last opened file as a string.\n * Default is null.\n */\nmxEditor.prototype.filename = null;\n\n/**\n * Variable: lineFeed\n *\n * Character to be used for encoding linefeeds in <save>. Default is '&#xa;'.\n */\nmxEditor.prototype.linefeed = '&#xa;';\n\n/**\n * Variable: postParameterName\n *\n * Specifies if the name of the post parameter that contains the diagram\n * data in a post request to the server. Default is 'xml'.\n */\nmxEditor.prototype.postParameterName = 'xml';\n\n/**\n * Variable: escapePostData\n *\n * Specifies if the data in the post request for saving a diagram\n * should be converted using encodeURIComponent. Default is true.\n */\nmxEditor.prototype.escapePostData = true;\n\n/**\n * Variable: urlPost\n *\n * Specifies the URL to be used for posting the diagram\n * to a backend in <save>.\n */\nmxEditor.prototype.urlPost = null;\n\n/**\n * Variable: urlImage\n *\n * Specifies the URL to be used for creating a bitmap of\n * the graph in the image action.\n */\nmxEditor.prototype.urlImage = null;\n\n/**\n * Group: Autolayout\n */\n\n/**\n * Variable: horizontalFlow\n *\n * Specifies the direction of the flow\n * in the diagram. This is used in the\n * layout algorithms. Default is false,\n * ie. vertical flow.\n */\nmxEditor.prototype.horizontalFlow = false;\n\n/**\n * Variable: layoutDiagram\n *\n * Specifies if the top-level elements in the\n * diagram should be layed out using a vertical\n * or horizontal stack depending on the setting\n * of <horizontalFlow>. The spacing between the\n * swimlanes is specified by <swimlaneSpacing>.\n * Default is false.\n *\n * If the top-level elements are swimlanes, then\n * the intra-swimlane layout is activated by\n * the <layoutSwimlanes> switch.\n */\nmxEditor.prototype.layoutDiagram = false;\n\n/**\n * Variable: swimlaneSpacing\n *\n * Specifies the spacing between swimlanes if\n * automatic layout is turned on in\n * <layoutDiagram>. Default is 0.\n */\nmxEditor.prototype.swimlaneSpacing = 0;\n\n/**\n * Variable: maintainSwimlanes\n *\n * Specifies if the swimlanes should be kept at the same\n * width or height depending on the setting of\n * <horizontalFlow>.  Default is false.\n *\n * For horizontal flows, all swimlanes\n * have the same height and for vertical flows, all swimlanes\n * have the same width. Furthermore, the swimlanes are\n * automatically \"stacked\" if <layoutDiagram> is true.\n */\nmxEditor.prototype.maintainSwimlanes = false;\n\n/**\n * Variable: layoutSwimlanes\n *\n * Specifies if the children of swimlanes should\n * be layed out, either vertically or horizontally\n * depending on <horizontalFlow>.\n * Default is false.\n */\nmxEditor.prototype.layoutSwimlanes = false;\n\n/**\n * Group: Attribute Cycling\n */\n\n/**\n * Variable: cycleAttributeValues\n *\n * Specifies the attribute values to be cycled when\n * inserting new swimlanes. Default is an empty\n * array.\n */\nmxEditor.prototype.cycleAttributeValues = null;\n\n/**\n * Variable: cycleAttributeIndex\n *\n * Index of the last consumed attribute index. If a new\n * swimlane is inserted, then the <cycleAttributeValues>\n * at this index will be used as the value for\n * <cycleAttributeName>. Default is 0.\n */\nmxEditor.prototype.cycleAttributeIndex = 0;\n\n/**\n * Variable: cycleAttributeName\n *\n * Name of the attribute to be assigned a <cycleAttributeValues>\n * when inserting new swimlanes. Default is 'fillColor'.\n */\nmxEditor.prototype.cycleAttributeName = 'fillColor';\n\n/**\n * Group: Windows\n */\n\n/**\n * Variable: tasks\n *\n * Holds the <mxWindow> created in <showTasks>.\n */\nmxEditor.prototype.tasks = null;\n\n/**\n * Variable: tasksWindowImage\n *\n * Icon for the tasks window.\n */\nmxEditor.prototype.tasksWindowImage = null;\n\n/**\n * Variable: tasksTop\n *\n * Specifies the top coordinate of the tasks window in pixels.\n * Default is 20.\n */\nmxEditor.prototype.tasksTop = 20;\n\n/**\n * Variable: help\n *\n * Holds the <mxWindow> created in <showHelp>.\n */\nmxEditor.prototype.help = null;\n\n/**\n * Variable: helpWindowImage\n *\n * Icon for the help window.\n */\nmxEditor.prototype.helpWindowImage = null;\n\n/**\n * Variable: urlHelp\n *\n * Specifies the URL to be used for the contents of the\n * Online Help window. This is usually specified in the\n * resources file under urlHelp for language-specific\n * online help support.\n */\nmxEditor.prototype.urlHelp = null;\n\n/**\n * Variable: helpWidth\n *\n * Specifies the width of the help window in pixels.\n * Default is 300.\n */\nmxEditor.prototype.helpWidth = 300;\n\n/**\n * Variable: helpHeight\n *\n * Specifies the height of the help window in pixels.\n * Default is 260.\n */\nmxEditor.prototype.helpHeight = 260;\n\n/**\n * Variable: propertiesWidth\n *\n * Specifies the width of the properties window in pixels.\n * Default is 240.\n */\nmxEditor.prototype.propertiesWidth = 240;\n\n/**\n * Variable: propertiesHeight\n *\n * Specifies the height of the properties window in pixels.\n * If no height is specified then the window will be automatically\n * sized to fit its contents. Default is null.\n */\nmxEditor.prototype.propertiesHeight = null;\n\n/**\n * Variable: movePropertiesDialog\n *\n * Specifies if the properties dialog should be automatically\n * moved near the cell it is displayed for, otherwise the\n * dialog is not moved. This value is only taken into\n * account if the dialog is already visible. Default is false.\n */\nmxEditor.prototype.movePropertiesDialog = false;\n\n/**\n * Variable: validating\n *\n * Specifies if <mxGraph.validateGraph> should automatically be invoked after\n * each change. Default is false.\n */\nmxEditor.prototype.validating = false;\n\n/**\n * Variable: modified\n *\n * True if the graph has been modified since it was last saved.\n */\nmxEditor.prototype.modified = false;\n\n/**\n * Function: isModified\n *\n * Returns <modified>.\n */\nmxEditor.prototype.isModified = function ()\n{\n\treturn this.modified;\n};\n\n/**\n * Function: setModified\n *\n * Sets <modified> to the specified boolean value.\n */\nmxEditor.prototype.setModified = function (value)\n{\n\tthis.modified = value;\n};\n\n/**\n * Function: addActions\n *\n * Adds the built-in actions to the editor instance.\n *\n * save - Saves the graph using <urlPost>.\n * print - Shows the graph in a new print preview window.\n * show - Shows the graph in a new window.\n * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n * refresh - Refreshes the graph's display.\n * cut - Copies the current selection into the clipboard\n * and removes it from the graph.\n * copy - Copies the current selection into the clipboard.\n * paste - Pastes the clipboard into the graph.\n * delete - Removes the current selection from the graph.\n * group - Puts the current selection into a new group.\n * ungroup - Removes the selected groups and selects the children.\n * undo - Undoes the last change on the graph model.\n * redo - Redoes the last change on the graph model.\n * zoom - Sets the zoom via a dialog.\n * zoomIn - Zooms into the graph.\n * zoomOut - Zooms out of the graph\n * actualSize - Resets the scale and translation on the graph.\n * fit - Changes the scale so that the graph fits into the window.\n * showProperties - Shows the properties dialog.\n * selectAll - Selects all cells.\n * selectNone - Clears the selection.\n * selectVertices - Selects all vertices.\n * selectEdges = Selects all edges.\n * edit - Starts editing the current selection cell.\n * enterGroup - Drills down into the current selection cell.\n * exitGroup - Moves up in the drilling hierachy\n * home - Moves to the topmost parent in the drilling hierarchy\n * selectPrevious - Selects the previous cell.\n * selectNext - Selects the next cell.\n * selectParent - Selects the parent of the selection cell.\n * selectChild - Selects the first child of the selection cell.\n * collapse - Collapses the currently selected cells.\n * expand - Expands the currently selected cells.\n * bold - Toggle bold text style.\n * italic - Toggle italic text style.\n * underline - Toggle underline text style.\n * alignCellsLeft - Aligns the selection cells at the left.\n * alignCellsCenter - Aligns the selection cells in the center.\n * alignCellsRight - Aligns the selection cells at the right.\n * alignCellsTop - Aligns the selection cells at the top.\n * alignCellsMiddle - Aligns the selection cells in the middle.\n * alignCellsBottom - Aligns the selection cells at the bottom.\n * alignFontLeft - Sets the horizontal text alignment to left.\n * alignFontCenter - Sets the horizontal text alignment to center.\n * alignFontRight - Sets the horizontal text alignment to right.\n * alignFontTop - Sets the vertical text alignment to top.\n * alignFontMiddle - Sets the vertical text alignment to middle.\n * alignFontBottom - Sets the vertical text alignment to bottom.\n * toggleTasks - Shows or hides the tasks window.\n * toggleHelp - Shows or hides the help window.\n * toggleOutline - Shows or hides the outline window.\n * toggleConsole - Shows or hides the console window.\n */\nmxEditor.prototype.addActions = function ()\n{\n\tthis.addAction('save', function(editor)\n\t{\n\t\teditor.save();\n\t});\n\n\tthis.addAction('print', function(editor)\n\t{\n\t\tvar preview = new mxPrintPreview(editor.graph, 1);\n\t\tpreview.open();\n\t});\n\n\tthis.addAction('show', function(editor)\n\t{\n\t\tmxUtils.show(editor.graph, null, 10, 10);\n\t});\n\n\tthis.addAction('exportImage', function(editor)\n\t{\n\t\tvar url = editor.getUrlImage();\n\n\t\tif (url == null || mxClient.IS_LOCAL)\n\t\t{\n\t\t\teditor.execute('show');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar node = mxUtils.getViewXml(editor.graph, 1);\n\t\t\tvar xml = mxUtils.getXml(node, '\\n');\n\n\t\t\tmxUtils.submit(url, editor.postParameterName + '=' +\n\t\t\t\tencodeURIComponent(xml), document, '_blank');\n\t\t}\n\t});\n\n\tthis.addAction('refresh', function(editor)\n\t{\n\t\teditor.graph.refresh();\n\t});\n\n\tthis.addAction('cut', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.cut(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('copy', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.copy(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('paste', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.paste(editor.graph);\n\t\t}\n\t});\n\n\tthis.addAction('delete', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCells();\n\t\t}\n\t});\n\n\tthis.addAction('group', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCell(editor.groupCells());\n\t\t}\n\t});\n\n\tthis.addAction('ungroup', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCells(editor.graph.ungroupCells());\n\t\t}\n\t});\n\n\tthis.addAction('removeFromParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCellsFromParent();\n\t\t}\n\t});\n\n\tthis.addAction('undo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.undo();\n\t\t}\n\t});\n\n\tthis.addAction('redo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.redo();\n\t\t}\n\t});\n\n\tthis.addAction('zoomIn', function(editor)\n\t{\n\t\teditor.graph.zoomIn();\n\t});\n\n\tthis.addAction('zoomOut', function(editor)\n\t{\n\t\teditor.graph.zoomOut();\n\t});\n\n\tthis.addAction('actualSize', function(editor)\n\t{\n\t\teditor.graph.zoomActual();\n\t});\n\n\tthis.addAction('fit', function(editor)\n\t{\n\t\teditor.graph.fit();\n\t});\n\n\tthis.addAction('showProperties', function(editor, cell)\n\t{\n\t\teditor.showProperties(cell);\n\t});\n\n\tthis.addAction('selectAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectAll();\n\t\t}\n\t});\n\n\tthis.addAction('selectNone', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.clearSelection();\n\t\t}\n\t});\n\n\tthis.addAction('selectVertices', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectVertices();\n\t\t}\n\t});\n\n\tthis.addAction('selectEdges', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectEdges();\n\t\t}\n\t});\n\n\tthis.addAction('edit', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled() &&\n\t\t\teditor.graph.isCellEditable(cell))\n\t\t{\n\t\t\teditor.graph.startEditingAtCell(cell);\n\t\t}\n\t});\n\n\tthis.addAction('toBack', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('toFront', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('enterGroup', function(editor, cell)\n\t{\n\t\teditor.graph.enterGroup(cell);\n\t});\n\n\tthis.addAction('exitGroup', function(editor)\n\t{\n\t\teditor.graph.exitGroup();\n\t});\n\n\tthis.addAction('home', function(editor)\n\t{\n\t\teditor.graph.home();\n\t});\n\n\tthis.addAction('selectPrevious', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectPreviousCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectNext', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectNextCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectParentCell();\n\t\t}\n\t});\n\n\tthis.addAction('selectChild', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectChildCell();\n\t\t}\n\t});\n\n\tthis.addAction('collapse', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(true);\n\t\t}\n\t});\n\n\tthis.addAction('collapseAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(true, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('expand', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(false);\n\t\t}\n\t});\n\n\tthis.addAction('expandAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(false, false, cells);\n\t\t}\n\t});\n\n\tthis.addAction('bold', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_BOLD);\n\t\t}\n\t});\n\n\tthis.addAction('italic', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_ITALIC);\n\t\t}\n\t});\n\n\tthis.addAction('underline', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_UNDERLINE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsLeft', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_LEFT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontLeft', function(editor)\n\t{\n\n\t\teditor.graph.setCellStyles(\n\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\tmxConstants.ALIGN_LEFT);\n\t});\n\n\tthis.addAction('alignFontCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\n\tthis.addAction('alignFontBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\n\tthis.addAction('zoom', function(editor)\n\t{\n\t\tvar current = editor.graph.getView().scale*100;\n\t\tvar scale = parseFloat(mxUtils.prompt(\n\t\t\tmxResources.get(editor.askZoomResource) ||\n\t\t\teditor.askZoomResource,\n\t\t\tcurrent))/100;\n\n\t\tif (!isNaN(scale))\n\t\t{\n\t\t\teditor.graph.getView().setScale(scale);\n\t\t}\n\t});\n\n\tthis.addAction('toggleTasks', function(editor)\n\t{\n\t\tif (editor.tasks != null)\n\t\t{\n\t\t\teditor.tasks.setVisible(!editor.tasks.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showTasks();\n\t\t}\n\t});\n\n\tthis.addAction('toggleHelp', function(editor)\n\t{\n\t\tif (editor.help != null)\n\t\t{\n\t\t\teditor.help.setVisible(!editor.help.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showHelp();\n\t\t}\n\t});\n\n\tthis.addAction('toggleOutline', function(editor)\n\t{\n\t\tif (editor.outline == null)\n\t\t{\n\t\t\teditor.showOutline();\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.outline.setVisible(!editor.outline.isVisible());\n\t\t}\n\t});\n\n\tthis.addAction('toggleConsole', function(editor)\n\t{\n\t\tmxLog.setVisible(!mxLog.isVisible());\n\t});\n};\n\n/**\n * Function: configure\n *\n * Configures the editor using the specified node. To load the\n * configuration from a given URL the following code can be used to obtain\n * the XML node.\n *\n * (code)\n * var node = mxUtils.load(url).getDocumentElement();\n * (end)\n *\n * Parameters:\n *\n * node - XML node that contains the configuration.\n */\nmxEditor.prototype.configure = function (node)\n{\n\tif (node != null)\n\t{\n\t\t// Creates a decoder for the XML data\n\t\t// and uses it to configure the editor\n\t\tvar dec = new mxCodec(node.ownerDocument);\n\t\tdec.decode(node, this);\n\n\t\t// Resets the counters, modified state and\n\t\t// command history\n\t\tthis.resetHistory();\n\t}\n};\n\n/**\n * Function: resetFirstTime\n *\n * Resets the cookie that is used to remember if the editor has already\n * been used.\n */\nmxEditor.prototype.resetFirstTime = function ()\n{\n\tdocument.cookie =\n\t\t'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n};\n\n/**\n * Function: resetHistory\n *\n * Resets the command history, modified state and counters.\n */\nmxEditor.prototype.resetHistory = function ()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.undoManager.clear();\n\tthis.ignoredChanges = 0;\n\tthis.setModified(false);\n};\n\n/**\n * Function: addAction\n *\n * Binds the specified actionname to the specified function.\n *\n * Parameters:\n *\n * actionname - String that specifies the name of the action\n * to be added.\n * funct - Function that implements the new action. The first\n * argument of the function is the editor it is used\n * with, the second argument is the cell it operates\n * upon.\n *\n * Example:\n * (code)\n * editor.addAction('test', function(editor, cell)\n * {\n * \t\tmxUtils.alert(\"test \"+cell);\n * });\n * (end)\n */\nmxEditor.prototype.addAction = function (actionname, funct)\n{\n\tthis.actions[actionname] = funct;\n};\n\n/**\n * Function: execute\n *\n * Executes the function with the given name in <actions> passing the\n * editor instance and given cell as the first and second argument. All\n * additional arguments are passed to the action as well. This method\n * contains a try-catch block and displays an error message if an action\n * causes an exception. The exception is re-thrown after the error\n * message was displayed.\n *\n * Example:\n *\n * (code)\n * editor.execute(\"showProperties\", cell);\n * (end)\n */\nmxEditor.prototype.execute = function (actionname, cell, evt)\n{\n\tvar action = this.actions[actionname];\n\n\tif (action != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Creates the array of arguments by replacing the actionname\n\t\t\t// with the editor instance in the args of this function\n\t\t\tvar args = arguments;\n\t\t\targs[0] = this;\n\n\t\t\t// Invokes the function on the editor using the args\n\t\t\taction.apply(this, args);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxUtils.error('Cannot execute ' + actionname +\n\t\t\t\t': ' + e.message, 280, true);\n\n\t\t\tthrow e;\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxUtils.error('Cannot find action '+actionname, 280, true);\n\t}\n};\n\n/**\n * Function: addTemplate\n *\n * Adds the specified template under the given name in <templates>.\n */\nmxEditor.prototype.addTemplate = function (name, template)\n{\n\tthis.templates[name] = template;\n};\n\n/**\n * Function: getTemplate\n *\n * Returns the template for the given name.\n */\nmxEditor.prototype.getTemplate = function (name)\n{\n\treturn this.templates[name];\n};\n\n/**\n * Function: createGraph\n *\n * Creates the <graph> for the editor. The graph is created with no\n * container and is initialized from <setGraphContainer>.\n */\nmxEditor.prototype.createGraph = function ()\n{\n\tvar graph = new mxGraph(null, null, this.graphRenderHint);\n\n\t// Enables rubberband, tooltips, panning\n\tgraph.setTooltips(true);\n\tgraph.setPanning(true);\n\n\t// Overrides the dblclick method on the graph to\n\t// invoke the dblClickAction for a cell and reset\n\t// the selection tool in the toolbar\n\tthis.installDblClickHandler(graph);\n\n\t// Installs the command history\n\tthis.installUndoHandler(graph);\n\n\t// Installs the handlers for the root event\n\tthis.installDrillHandler(graph);\n\n\t// Installs the handler for validation\n\tthis.installChangeHandler(graph);\n\n\t// Installs the handler for calling the\n\t// insert function and consume the\n\t// event if an insert function is defined\n\tthis.installInsertHandler(graph);\n\n\t// Redirects the function for creating the\n\t// popupmenu items\n\tgraph.popupMenuHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(menu, cell, evt)\n\t\t{\n\t\t\treturn this.createPopupMenu(menu, cell, evt);\n\t\t});\n\n\t// Redirects the function for creating\n\t// new connections in the diagram\n\tgraph.connectionHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(source, target)\n\t\t{\n\t\t\treturn this.createEdge(source, target);\n\t\t});\n\n\t// Maintains swimlanes and installs autolayout\n\tthis.createSwimlaneManager(graph);\n\tthis.createLayoutManager(graph);\n\n\treturn graph;\n};\n\n/**\n * Function: createSwimlaneManager\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.createSwimlaneManager = function (graph)\n{\n\tvar swimlaneMgr = new mxSwimlaneManager(graph, false);\n\n\tswimlaneMgr.isHorizontal = mxUtils.bind(this, function()\n\t{\n\t\treturn this.horizontalFlow;\n\t});\n\n\tswimlaneMgr.isEnabled = mxUtils.bind(this, function()\n\t{\n\t\treturn this.maintainSwimlanes;\n\t});\n\n\treturn swimlaneMgr;\n};\n\n/**\n * Function: createLayoutManager\n *\n * Creates a layout manager for the swimlane and diagram layouts, that\n * is, the locally defined inter- and intraswimlane layouts.\n */\nmxEditor.prototype.createLayoutManager = function (graph)\n{\n\tvar layoutMgr = new mxLayoutManager(graph);\n\n\tvar self = this; // closure\n\tlayoutMgr.getLayout = function(cell)\n\t{\n\t\tvar layout = null;\n\t\tvar model = self.graph.getModel();\n\n\t\tif (model.getParent(cell) != null)\n\t\t{\n\t\t\t// Executes the swimlane layout if a child of\n\t\t\t// a swimlane has been changed. The layout is\n\t\t\t// lazy created in createSwimlaneLayout.\n\t\t\tif (self.layoutSwimlanes &&\n\t\t\t\tgraph.isSwimlane(cell))\n\t\t\t{\n\t\t\t\tif (self.swimlaneLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.swimlaneLayout = self.createSwimlaneLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.swimlaneLayout;\n\t\t\t}\n\n\t\t\t// Executes the diagram layout if the modified\n\t\t\t// cell is a top-level cell. The layout is\n\t\t\t// lazy created in createDiagramLayout.\n\t\t\telse if (self.layoutDiagram &&\n\t\t\t\t(graph.isValidRoot(cell) ||\n\t\t\t\tmodel.getParent(model.getParent(cell)) == null))\n\t\t\t{\n\t\t\t\tif (self.diagramLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.diagramLayout = self.createDiagramLayout();\n\t\t\t\t}\n\n\t\t\t\tlayout = self.diagramLayout;\n\t\t\t}\n\t\t}\n\n\t\treturn layout;\n\t};\n\n\treturn layoutMgr;\n};\n\n/**\n * Function: setGraphContainer\n *\n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.setGraphContainer = function (container)\n{\n\tif (this.graph.container == null)\n\t{\n\t\t// Creates the graph instance inside the given container and render hint\n\t\t//this.graph = new mxGraph(container, null, this.graphRenderHint);\n\t\tthis.graph.init(container);\n\n\t\t// Install rubberband selection as the last\n\t\t// action handler in the chain\n\t\tthis.rubberband = new mxRubberband(this.graph);\n\n\t\t// Disables the context menu\n\t\tif (this.disableContextMenu)\n\t\t{\n\t\t\tmxEvent.disableContextMenu(container);\n\t\t}\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: installDblClickHandler\n *\n * Overrides <mxGraph.dblClick> to invoke <dblClickAction>\n * on a cell and reset the selection tool in the toolbar.\n */\nmxEditor.prototype.installDblClickHandler = function (graph)\n{\n\t// Installs a listener for double click events\n\tgraph.addListener(mxEvent.DOUBLE_CLICK,\n\t\tmxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar cell = evt.getProperty('cell');\n\n\t\t\tif (cell != null &&\n\t\t\t\tgraph.isEnabled() &&\n\t\t\t\tthis.dblClickAction != null)\n\t\t\t{\n\t\t\t\tthis.execute(this.dblClickAction, cell);\n\t\t\t\tevt.consume();\n\t\t\t}\n\t\t})\n\t);\n};\n\n/**\n * Function: installUndoHandler\n *\n * Adds the <undoManager> to the graph model and the view.\n */\nmxEditor.prototype.installUndoHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tvar edit = evt.getProperty('edit');\n\t\tthis.undoManager.undoableEditHappened(edit);\n\t});\n\n\tgraph.getModel().addListener(mxEvent.UNDO, listener);\n\tgraph.getView().addListener(mxEvent.UNDO, listener);\n\n\t// Keeps the selection state in sync\n\tvar undoHandler = function(sender, evt)\n\t{\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\tgraph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n\t};\n\n\tthis.undoManager.addListener(mxEvent.UNDO, undoHandler);\n\tthis.undoManager.addListener(mxEvent.REDO, undoHandler);\n};\n\n/**\n * Function: installDrillHandler\n *\n * Installs listeners for dispatching the <root> event.\n */\nmxEditor.prototype.installDrillHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t});\n\n\tgraph.getView().addListener(mxEvent.DOWN, listener);\n\tgraph.getView().addListener(mxEvent.UP, listener);\n};\n\n/**\n * Function: installChangeHandler\n *\n * Installs the listeners required to automatically validate\n * the graph. On each change of the root, this implementation\n * fires a <root> event.\n */\nmxEditor.prototype.installChangeHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Updates the modified state\n\t\tthis.setModified(true);\n\n\t\t// Automatically validates the graph\n\t\t// after each change\n\t\tif (this.validating == true)\n\t\t{\n\t\t\tgraph.validateGraph();\n\t\t}\n\n\t\t// Checks if the root has been changed\n\t\tvar changes = evt.getProperty('edit').changes;\n\n\t\tfor (var i = 0; i < changes.length; i++)\n\t\t{\n\t\t\tvar change = changes[i];\n\n\t\t\tif (change instanceof mxRootChange ||\n\t\t\t\t(change instanceof mxValueChange &&\n\t\t\t\tchange.cell == this.graph.model.root) ||\n\t\t\t\t(change instanceof mxCellAttributeChange &&\n\t\t\t\tchange.cell == this.graph.model.root))\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\tgraph.getModel().addListener(mxEvent.CHANGE, listener);\n};\n\n/**\n * Function: installInsertHandler\n *\n * Installs the handler for invoking <insertFunction> if\n * one is defined.\n */\nmxEditor.prototype.installInsertHandler = function (graph)\n{\n\tvar self = this; // closure\n\tvar insertHandler =\n\t{\n\t\tmouseDown: function(sender, me)\n\t\t{\n\t\t\tif (self.insertFunction != null &&\n\t\t\t\t!me.isPopupTrigger() &&\n\t\t\t\t(self.forcedInserting ||\n\t\t\t\tme.getState() == null))\n\t\t\t{\n\t\t\t\tself.graph.clearSelection();\n\t\t\t\tself.insertFunction(me.getEvent(), me.getCell());\n\n\t\t\t\t// Consumes the rest of the events\n\t\t\t\t// for this gesture (down, move, up)\n\t\t\t\tthis.isActive = true;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseMove: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\n\t\tmouseUp: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tthis.isActive = false;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t}\n\t};\n\n\tgraph.addMouseListener(insertHandler);\n};\n\n/**\n * Function: createDiagramLayout\n *\n * Creates the layout instance used to layout the\n * swimlanes in the diagram.\n */\nmxEditor.prototype.createDiagramLayout = function ()\n{\n\tvar gs = this.graph.gridSize;\n\tvar layout = new mxStackLayout(this.graph, !this.horizontalFlow,\n\t\t this.swimlaneSpacing, 2*gs, 2*gs);\n\n\t// Overrides isIgnored to only take into account swimlanes\n\tlayout.isVertexIgnored = function(cell)\n\t{\n\t\treturn !layout.graph.isSwimlane(cell);\n\t};\n\n\treturn layout;\n};\n\n/**\n * Function: createSwimlaneLayout\n *\n * Creates the layout instance used to layout the\n * children of each swimlane.\n */\nmxEditor.prototype.createSwimlaneLayout = function ()\n{\n\treturn new mxCompactTreeLayout(this.graph, this.horizontalFlow);\n};\n\n/**\n * Function: createToolbar\n *\n * Creates the <toolbar> with no container.\n */\nmxEditor.prototype.createToolbar = function ()\n{\n\treturn new mxDefaultToolbar(null, this);\n};\n\n/**\n * Function: setToolbarContainer\n *\n * Initializes the toolbar for the given container.\n */\nmxEditor.prototype.setToolbarContainer = function (container)\n{\n\tthis.toolbar.init(container);\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: setStatusContainer\n *\n * Creates the <status> using the specified container.\n *\n * This implementation adds listeners in the editor to\n * display the last saved time and the current filename\n * in the status bar.\n *\n * Parameters:\n *\n * container - DOM node that will contain the statusbar.\n */\nmxEditor.prototype.setStatusContainer = function (container)\n{\n\tif (this.status == null)\n\t{\n\t\tthis.status = container;\n\n\t\t// Prints the last saved time in the status bar\n\t\t// when files are saved\n\t\tthis.addListener(mxEvent.SAVE, mxUtils.bind(this, function()\n\t\t{\n\t\t\tvar tstamp = new Date().toLocaleString();\n\t\t\tthis.setStatus((mxResources.get(this.lastSavedResource) ||\n\t\t\t\tthis.lastSavedResource)+': '+tstamp);\n\t\t}));\n\n\t\t// Updates the statusbar to display the filename\n\t\t// when new files are opened\n\t\tthis.addListener(mxEvent.OPEN, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.setStatus((mxResources.get(this.currentFileResource) ||\n\t\t\t\tthis.currentFileResource)+': '+this.filename);\n\t\t}));\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: setStatus\n *\n * Display the specified message in the status bar.\n *\n * Parameters:\n *\n * message - String the specified the message to\n * be displayed.\n */\nmxEditor.prototype.setStatus = function (message)\n{\n\tif (this.status != null && message != null)\n\t{\n\t\tthis.status.innerHTML = message;\n\t}\n};\n\n/**\n * Function: setTitleContainer\n *\n * Creates a listener to update the inner HTML of the\n * specified DOM node with the value of <getTitle>.\n *\n * Parameters:\n *\n * container - DOM node that will contain the title.\n */\nmxEditor.prototype.setTitleContainer = function (container)\n{\n\tthis.addListener(mxEvent.ROOT, mxUtils.bind(this, function(sender)\n\t{\n\t\tcontainer.innerHTML = this.getTitle();\n\t}));\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: treeLayout\n *\n * Executes a vertical or horizontal compact tree layout\n * using the specified cell as an argument. The cell may\n * either be a group or the root of a tree.\n *\n * Parameters:\n *\n * cell - <mxCell> to use in the compact tree layout.\n * horizontal - Optional boolean to specify the tree's\n * orientation. Default is true.\n */\nmxEditor.prototype.treeLayout = function (cell, horizontal)\n{\n\tif (cell != null)\n\t{\n\t\tvar layout = new mxCompactTreeLayout(this.graph, horizontal);\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: getTitle\n *\n * Returns the string value for the current root of the\n * diagram.\n */\nmxEditor.prototype.getTitle = function ()\n{\n\tvar title = '';\n\tvar graph = this.graph;\n\tvar cell = graph.getCurrentRoot();\n\n\twhile (cell != null &&\n\t\t   graph.getModel().getParent(\n\t\t\t\tgraph.getModel().getParent(cell)) != null)\n\t{\n\t\t// Append each label of a valid root\n\t\tif (graph.isValidRoot(cell))\n\t\t{\n\t\t\ttitle = ' > ' +\n\t\t\tgraph.convertValueToString(cell) + title;\n\t\t}\n\n\t\tcell = graph.getModel().getParent(cell);\n\t}\n\n\tvar prefix = this.getRootTitle();\n\n\treturn prefix + title;\n};\n\n/**\n * Function: getRootTitle\n *\n * Returns the string value of the root cell in\n * <mxGraph.model>.\n */\nmxEditor.prototype.getRootTitle = function ()\n{\n\tvar root = this.graph.getModel().getRoot();\n\treturn this.graph.convertValueToString(root);\n};\n\n/**\n * Function: undo\n *\n * Undo the last change in <graph>.\n */\nmxEditor.prototype.undo = function ()\n{\n\tthis.undoManager.undo();\n};\n\n/**\n * Function: redo\n *\n * Redo the last change in <graph>.\n */\nmxEditor.prototype.redo = function ()\n{\n\tthis.undoManager.redo();\n};\n\n/**\n * Function: groupCells\n *\n * Invokes <createGroup> to create a new group cell and the invokes\n * <mxGraph.groupCells>, using the grid size of the graph as the spacing\n * in the group's content area.\n */\nmxEditor.prototype.groupCells = function ()\n{\n\tvar border = (this.groupBorderSize != null) ?\n\t\tthis.groupBorderSize :\n\t\tthis.graph.gridSize;\n\treturn this.graph.groupCells(this.createGroup(), border);\n};\n\n/**\n * Function: createGroup\n *\n * Creates and returns a clone of <defaultGroup> to be used\n * as a new group cell in <group>.\n */\nmxEditor.prototype.createGroup = function ()\n{\n\tvar model = this.graph.getModel();\n\n\treturn model.cloneCell(this.defaultGroup);\n};\n\n/**\n * Function: open\n *\n * Opens the specified file synchronously and parses it using\n * <readGraphModel>. It updates <filename> and fires an <open>-event after\n * the file has been opened. Exceptions should be handled as follows:\n *\n * (code)\n * try\n * {\n *   editor.open(filename);\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot open ' + filename +\n *     ': ' + e.message, 280, true);\n * }\n * (end)\n *\n * Parameters:\n *\n * filename - URL of the file to be opened.\n */\nmxEditor.prototype.open = function (filename)\n{\n\tif (filename != null)\n\t{\n\t\tvar xml = mxUtils.load(filename).getXml();\n\t\tthis.readGraphModel(xml.documentElement);\n\t\tthis.filename = filename;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.OPEN, 'filename', filename));\n\t}\n};\n\n/**\n * Function: readGraphModel\n *\n * Reads the specified XML node into the existing graph model and resets\n * the command history and modified state.\n */\nmxEditor.prototype.readGraphModel = function (node)\n{\n\tvar dec = new mxCodec(node.ownerDocument);\n\tdec.decode(node, this.graph.getModel());\n\tthis.resetHistory();\n};\n\n/**\n * Function: save\n *\n * Posts the string returned by <writeGraphModel> to the given URL or the\n * URL returned by <getUrlPost>. The actual posting is carried out by\n * <postDiagram>. If the URL is null then the resulting XML will be\n * displayed using <mxUtils.popup>. Exceptions should be handled as\n * follows:\n *\n * (code)\n * try\n * {\n *   editor.save();\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot save : ' + e.message, 280, true);\n * }\n * (end)\n */\nmxEditor.prototype.save = function (url, linefeed)\n{\n\t// Gets the URL to post the data to\n\turl = url || this.getUrlPost();\n\n\t// Posts the data if the URL is not empty\n\tif (url != null && url.length > 0)\n\t{\n\t\tvar data = this.writeGraphModel(linefeed);\n\t\tthis.postDiagram(url, data);\n\n\t\t// Resets the modified flag\n\t\tthis.setModified(false);\n\t}\n\n\t// Dispatches a save event\n\tthis.fireEvent(new mxEventObject(mxEvent.SAVE, 'url', url));\n};\n\n/**\n * Function: postDiagram\n *\n * Hook for subclassers to override the posting of a diagram\n * represented by the given node to the given URL. This fires\n * an asynchronous <post> event if the diagram has been posted.\n *\n * Example:\n *\n * To replace the diagram with the diagram in the response, use the\n * following code.\n *\n * (code)\n * editor.addListener(mxEvent.POST, function(sender, evt)\n * {\n *   // Process response (replace diagram)\n *   var req = evt.getProperty('request');\n *   var root = req.getDocumentElement();\n *   editor.graph.readGraphModel(root)\n * });\n * (end)\n */\nmxEditor.prototype.postDiagram = function (url, data)\n{\n\tif (this.escapePostData)\n\t{\n\t\tdata = encodeURIComponent(data);\n\t}\n\n\tmxUtils.post(url, this.postParameterName+'='+data,\n\t\tmxUtils.bind(this, function(req)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.POST,\n\t\t\t\t'request', req, 'url', url, 'data', data));\n\t\t})\n\t);\n};\n\n/**\n * Function: writeGraphModel\n *\n * Hook to create the string representation of the diagram. The default\n * implementation uses an <mxCodec> to encode the graph model as\n * follows:\n *\n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(this.graph.getModel());\n * return mxUtils.getXml(node, this.linefeed);\n * (end)\n *\n * Parameters:\n *\n * linefeed - Optional character to be used as the linefeed. Default is\n * <linefeed>.\n */\nmxEditor.prototype.writeGraphModel = function (linefeed)\n{\n\tlinefeed = (linefeed != null) ? linefeed : this.linefeed;\n\tvar enc = new mxCodec();\n\tvar node = enc.encode(this.graph.getModel());\n\n\treturn mxUtils.getXml(node, linefeed);\n};\n\n/**\n * Function: getUrlPost\n *\n * Returns the URL to post the diagram to. This is used\n * in <save>. The default implementation returns <urlPost>,\n * adding <code>?draft=true</code>.\n */\nmxEditor.prototype.getUrlPost = function ()\n{\n\treturn this.urlPost;\n};\n\n/**\n * Function: getUrlImage\n *\n * Returns the URL to create the image with. This is typically\n * the URL of a backend which accepts an XML representation\n * of a graph view to create an image. The function is used\n * in the image action to create an image. This implementation\n * returns <urlImage>.\n */\nmxEditor.prototype.getUrlImage = function ()\n{\n\treturn this.urlImage;\n};\n\n/**\n * Function: swapStyles\n *\n * Swaps the styles for the given names in the graph's\n * stylesheet and refreshes the graph.\n */\nmxEditor.prototype.swapStyles = function (first, second)\n{\n\tvar style = this.graph.getStylesheet().styles[second];\n\tthis.graph.getView().getStylesheet().putCellStyle(\n\t\tsecond, this.graph.getStylesheet().styles[first]);\n\tthis.graph.getStylesheet().putCellStyle(first, style);\n\tthis.graph.refresh();\n};\n\n/**\n * Function: showProperties\n *\n * Creates and shows the properties dialog for the given\n * cell. The content area of the dialog is created using\n * <createProperties>.\n */\nmxEditor.prototype.showProperties = function (cell)\n{\n\tcell = cell || this.graph.getSelectionCell();\n\n\t// Uses the root node for the properties dialog\n\t// if not cell was passed in and no cell is\n\t// selected\n\tif (cell == null)\n\t{\n\t\tcell = this.graph.getCurrentRoot();\n\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.graph.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (cell != null)\n\t{\n\t\t// Makes sure there is no in-place editor in the\n\t\t// graph and computes the location of the dialog\n\t\tthis.graph.stopEditing(true);\n\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar x = offset.x+10;\n\t\tvar y = offset.y;\n\n\t\t// Avoids moving the dialog if it is alredy open\n\t\tif (this.properties != null && !this.movePropertiesDialog)\n\t\t{\n\t\t\tx = this.properties.getX();\n\t\t\ty = this.properties.getY();\n\t\t}\n\n\t\t// Places the dialog near the cell for which it\n\t\t// displays the properties\n\t\telse\n\t\t{\n\t\t\tvar bounds = this.graph.getCellBounds(cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tx += bounds.x+Math.min(200, bounds.width);\n\t\t\t\ty += bounds.y;\n\t\t\t}\n\t\t}\n\n\t\t// Hides the existing properties dialog and creates a new one with the\n\t\t// contents created in the hook method\n\t\tthis.hideProperties();\n\t\tvar node = this.createProperties(cell);\n\n\t\tif (node != null)\n\t\t{\n\t\t\t// Displays the contents in a window and stores a reference to the\n\t\t\t// window for later hiding of the window\n\t\t\tthis.properties = new mxWindow(mxResources.get(this.propertiesResource) ||\n\t\t\t\tthis.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n\t\t\tthis.properties.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: isPropertiesVisible\n *\n * Returns true if the properties dialog is currently visible.\n */\nmxEditor.prototype.isPropertiesVisible = function ()\n{\n\treturn this.properties != null;\n};\n\n/**\n * Function: createProperties\n *\n * Creates and returns the DOM node that represents the contents\n * of the properties dialog for the given cell. This implementation\n * works for user objects that are XML nodes and display all the\n * node attributes in a form.\n */\nmxEditor.prototype.createProperties = function (cell)\n{\n\tvar model = this.graph.getModel();\n\tvar value = model.getValue(cell);\n\n\tif (mxUtils.isNode(value))\n\t{\n\t\t// Creates a form for the user object inside\n\t\t// the cell\n\t\tvar form = new mxForm('properties');\n\n\t\t// Adds a readonly field for the cell id\n\t\tvar id = form.addText('ID', cell.getId());\n\t\tid.setAttribute('readonly', 'true');\n\n\t\tvar geo = null;\n\t\tvar yField = null;\n\t\tvar xField = null;\n\t\tvar widthField = null;\n\t\tvar heightField = null;\n\n\t\t// Adds fields for the location and size\n\t\tif (model.isVertex(cell))\n\t\t{\n\t\t\tgeo = model.getGeometry(cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tyField = form.addText('top', geo.y);\n\t\t\t\txField = form.addText('left', geo.x);\n\t\t\t\twidthField = form.addText('width', geo.width);\n\t\t\t\theightField = form.addText('height', geo.height);\n\t\t\t}\n\t\t}\n\n\t\t// Adds a field for the cell style\n\t\tvar tmp = model.getStyle(cell);\n\t\tvar style = form.addText('Style', tmp || '');\n\n\t\t// Creates textareas for each attribute of the\n\t\t// user object within the cell\n\t\tvar attrs = value.attributes;\n\t\tvar texts = [];\n\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\t// Creates a textarea with more lines for\n\t\t\t// the cell label\n\t\t\tvar val = attrs[i].value;\n\t\t\ttexts[i] = form.addTextarea(attrs[i].nodeName, val,\n\t\t\t\t(attrs[i].nodeName == 'label') ? 4 : 2);\n\t\t}\n\n\t\t// Adds an OK and Cancel button to the dialog\n\t\t// contents and implements the respective\n\t\t// actions below\n\n\t\t// Defines the function to be executed when the\n\t\t// OK button is pressed in the dialog\n\t\tvar okFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\n\t\t\t// Supports undo for the changes on the underlying\n\t\t\t// XML structure / XML node attribute changes.\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\n\t\t\t\t\tgeo.x = parseFloat(xField.value);\n\t\t\t\t\tgeo.y = parseFloat(yField.value);\n\t\t\t\t\tgeo.width = parseFloat(widthField.value);\n\t\t\t\t\tgeo.height = parseFloat(heightField.value);\n\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\n\t\t\t\t// Applies the style\n\t\t\t\tif (style.value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, style.value);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, null);\n\t\t\t\t}\n\n\t\t\t\t// Creates an undoable change for each\n\t\t\t\t// attribute and executes it using the\n\t\t\t\t// model, which will also make the change\n\t\t\t\t// part of the current transaction\n\t\t\t\tfor (var i=0; i<attrs.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar edit = new mxCellAttributeChange(\n\t\t\t\t\t\tcell, attrs[i].nodeName,\n\t\t\t\t\t\ttexts[i].value);\n\t\t\t\t\tmodel.execute(edit);\n\t\t\t\t}\n\n\t\t\t\t// Checks if the graph wants cells to\n\t\t\t\t// be automatically sized and updates\n\t\t\t\t// the size as an undoable step if\n\t\t\t\t// the feature is enabled\n\t\t\t\tif (this.graph.isAutoSizeCell(cell))\n\t\t\t\t{\n\t\t\t\t\tthis.graph.updateCellSize(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t});\n\n\t\t// Defines the function to be executed when the\n\t\t// Cancel button is pressed in the dialog\n\t\tvar cancelFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t});\n\n\t\tform.addButtons(okFunction, cancelFunction);\n\n\t\treturn form.table;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: hideProperties\n *\n * Hides the properties dialog.\n */\nmxEditor.prototype.hideProperties = function ()\n{\n\tif (this.properties != null)\n\t{\n\t\tthis.properties.destroy();\n\t\tthis.properties = null;\n\t}\n};\n\n/**\n * Function: showTasks\n *\n * Shows the tasks window. The tasks window is created using <createTasks>. The\n * default width of the window is 200 pixels, the y-coordinate of the location\n * can be specifies in <tasksTop> and the x-coordinate is right aligned with a\n * 20 pixel offset from the right border. To change the location of the tasks\n * window, the following code can be used:\n *\n * (code)\n * var oldShowTasks = mxEditor.prototype.showTasks;\n * mxEditor.prototype.showTasks = function()\n * {\n *   oldShowTasks.apply(this, arguments); // \"supercall\"\n *\n *   if (this.tasks != null)\n *   {\n *     this.tasks.setLocation(10, 10);\n *   }\n * };\n * (end)\n */\nmxEditor.prototype.showTasks = function ()\n{\n\tif (this.tasks == null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '4px';\n\t\tdiv.style.paddingLeft = '20px';\n\t\tvar w = document.body.clientWidth;\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.tasksResource) ||\n\t\t\tthis.tasksResource,\n\t\t\tdiv, w - 220, this.tasksTop, 200);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\t// Installs a function to update the contents\n\t\t// of the tasks window on every change of the\n\t\t// model, selection or root.\n\t\tvar funct = mxUtils.bind(this, function(sender)\n\t\t{\n\t\t\tmxEvent.release(div);\n\t\t\tdiv.innerHTML = '';\n\t\t\tthis.createTasks(div);\n\t\t});\n\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.addListener(mxEvent.ROOT, funct);\n\n\t\t// Assigns the icon to the tasks window\n\t\tif (this.tasksWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.tasksWindowImage);\n\t\t}\n\n\t\tthis.tasks = wnd;\n\t\tthis.createTasks(div);\n\t}\n\n\tthis.tasks.setVisible(true);\n};\n\n/**\n * Function: refreshTasks\n *\n * Updates the contents of the tasks window using <createTasks>.\n */\nmxEditor.prototype.refreshTasks = function (div)\n{\n\tif (this.tasks != null)\n\t{\n\t\tvar div = this.tasks.content;\n\t\tmxEvent.release(div);\n\t\tdiv.innerHTML = '';\n\t\tthis.createTasks(div);\n\t}\n};\n\n/**\n * Function: createTasks\n *\n * Updates the contents of the given DOM node to\n * display the tasks associated with the current\n * editor state. This is invoked whenever there\n * is a possible change of state in the editor.\n * Default implementation is empty.\n */\nmxEditor.prototype.createTasks = function (div)\n{\n\t// override\n};\n\n/**\n * Function: showHelp\n *\n * Shows the help window. If the help window does not exist\n * then it is created using an iframe pointing to the resource\n * for the <code>urlHelp</code> key or <urlHelp> if the resource\n * is undefined.\n */\nmxEditor.prototype.showHelp = function (tasks)\n{\n\tif (this.help == null)\n\t{\n\t\tvar frame = document.createElement('iframe');\n\t\tframe.setAttribute('src', mxResources.get('urlHelp') || this.urlHelp);\n\t\tframe.setAttribute('height', '100%');\n\t\tframe.setAttribute('width', '100%');\n\t\tframe.setAttribute('frameBorder', '0');\n\t\tframe.style.backgroundColor = 'white';\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\n\t\tvar wnd = new mxWindow(mxResources.get(this.helpResource) || this.helpResource,\n\t\t\tframe, (w-this.helpWidth)/2, (h-this.helpHeight)/3, this.helpWidth, this.helpHeight);\n\t\twnd.setMaximizable(true);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\twnd.setResizable(true);\n\n\t\t// Assigns the icon to the help window\n\t\tif (this.helpWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.helpWindowImage);\n\t\t}\n\n\t\t// Workaround for ignored iframe height 100% in FF\n\t\tif (mxClient.IS_NS)\n\t\t{\n\t\t\tvar handler = function(sender)\n\t\t\t{\n\t\t\t\tvar h = wnd.div.offsetHeight;\n\t\t\t\tframe.setAttribute('height', (h-26)+'px');\n\t\t\t};\n\n\t\t\twnd.addListener(mxEvent.RESIZE_END, handler);\n\t\t\twnd.addListener(mxEvent.MAXIMIZE, handler);\n\t\t\twnd.addListener(mxEvent.NORMALIZE, handler);\n\t\t\twnd.addListener(mxEvent.SHOW, handler);\n\t\t}\n\n\t\tthis.help = wnd;\n\t}\n\n\tthis.help.setVisible(true);\n};\n\n/**\n * Function: showOutline\n *\n * Shows the outline window. If the window does not exist, then it is\n * created using an <mxOutline>.\n */\nmxEditor.prototype.showOutline = function ()\n{\n\tvar create = this.outline == null;\n\n\tif (create)\n\t{\n\t\tvar div = document.createElement('div');\n\n\t\tdiv.style.overflow = 'hidden';\n\t\tdiv.style.position = 'relative';\n\t\tdiv.style.width = '100%';\n\t\tdiv.style.height = '100%';\n\t\tdiv.style.background = 'white';\n\t\tdiv.style.cursor = 'move';\n\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdiv.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n\t\t}\n\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.outlineResource) ||\n\t\t\tthis.outlineResource,\n\t\t\tdiv, 600, 480, 200, 200, false);\n\n\t\t// Creates the outline in the specified div\n\t\t// and links it to the existing graph\n\t\tvar outline = new mxOutline(this.graph, div);\n\t\twnd.setClosable(true);\n\t\twnd.setResizable(true);\n\t\twnd.destroyOnClose = false;\n\n\t\twnd.addListener(mxEvent.RESIZE_END, function()\n\t\t{\n\t\t\toutline.update();\n\t\t});\n\n\t\tthis.outline = wnd;\n\t\tthis.outline.outline = outline;\n\t}\n\n\t// Finally shows the outline\n\tthis.outline.setVisible(true);\n\tthis.outline.outline.update(true);\n};\n\n/**\n * Function: setMode\n *\n * Puts the graph into the specified mode. The following modenames are\n * supported:\n *\n * select - Selects using the left mouse button, new connections\n * are disabled.\n * connect - Selects using the left mouse button or creates new\n * connections if mouse over cell hotspot. See <mxConnectionHandler>.\n * pan - Pans using the left mouse button, new connections are disabled.\n */\nmxEditor.prototype.setMode = function(modename)\n{\n\tif (modename == 'select')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(false);\n\t}\n\telse if (modename == 'connect')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(true);\n\t}\n\telse if (modename == 'pan')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = true;\n\t\tthis.graph.setConnectable(false);\n\t}\n};\n\n/**\n * Function: createPopupMenu\n *\n * Uses <popupHandler> to create the menu in the graph's\n * panning handler. The redirection is setup in\n * <setToolbarContainer>.\n */\nmxEditor.prototype.createPopupMenu = function (menu, cell, evt)\n{\n\tthis.popupHandler.createMenu(this, menu, cell, evt);\n};\n\n/**\n * Function: createEdge\n *\n * Uses <defaultEdge> as the prototype for creating new edges\n * in the connection handler of the graph. The style of the\n * edge will be overridden with the value returned by\n * <getEdgeStyle>.\n */\nmxEditor.prototype.createEdge = function (source, target)\n{\n\t// Clones the defaultedge prototype\n\tvar e = null;\n\n\tif (this.defaultEdge != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\te = model.cloneCell(this.defaultEdge);\n\t}\n\telse\n\t{\n\t\te = new mxCell('');\n\t\te.setEdge(true);\n\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\te.setGeometry(geo);\n\t}\n\n\t// Overrides the edge style\n\tvar style = this.getEdgeStyle();\n\n\tif (style != null)\n\t{\n\t\te.setStyle(style);\n\t}\n\n\treturn e;\n};\n\n/**\n * Function: getEdgeStyle\n *\n * Returns a string identifying the style of new edges.\n * The function is used in <createEdge> when new edges\n * are created in the graph.\n */\nmxEditor.prototype.getEdgeStyle = function ()\n{\n\treturn this.defaultEdgeStyle;\n};\n\n/**\n * Function: consumeCycleAttribute\n *\n * Returns the next attribute in <cycleAttributeValues>\n * or null, if not attribute should be used in the\n * specified cell.\n */\nmxEditor.prototype.consumeCycleAttribute = function (cell)\n{\n\treturn (this.cycleAttributeValues != null &&\n\t\tthis.cycleAttributeValues.length > 0 &&\n\t\tthis.graph.isSwimlane(cell)) ?\n\t\tthis.cycleAttributeValues[this.cycleAttributeIndex++ %\n\t\t\tthis.cycleAttributeValues.length] : null;\n};\n\n/**\n * Function: cycleAttribute\n *\n * Uses the returned value from <consumeCycleAttribute>\n * as the value for the <cycleAttributeName> key in\n * the given cell's style.\n */\nmxEditor.prototype.cycleAttribute = function (cell)\n{\n\tif (this.cycleAttributeName != null)\n\t{\n\t\tvar value = this.consumeCycleAttribute(cell);\n\n\t\tif (value != null)\n\t\t{\n\t\t\tcell.setStyle(cell.getStyle()+';'+\n\t\t\t\tthis.cycleAttributeName+'='+value);\n\t\t}\n\t}\n};\n\n/**\n * Function: addVertex\n *\n * Adds the given vertex as a child of parent at the specified\n * x and y coordinate and fires an <addVertex> event.\n */\nmxEditor.prototype.addVertex = function (parent, vertex, x, y)\n{\n\tvar model = this.graph.getModel();\n\n\twhile (parent != null && !this.graph.isValidDropTarget(parent))\n\t{\n\t\tparent = model.getParent(parent);\n\t}\n\n\tparent = (parent != null) ? parent : this.graph.getSwimlaneAt(x, y);\n\tvar scale = this.graph.getView().scale;\n\n\tvar geo = model.getGeometry(vertex);\n\tvar pgeo = model.getGeometry(parent);\n\n\tif (this.graph.isSwimlane(vertex) &&\n\t\t!this.graph.swimlaneNesting)\n\t{\n\t\tparent = null;\n\t}\n\telse if (parent == null && this.swimlaneRequired)\n\t{\n\t\treturn null;\n\t}\n\telse if (parent != null && pgeo != null)\n\t{\n\t\t// Keeps vertex inside parent\n\t\tvar state = this.graph.getView().getState(parent);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tx -= state.origin.x * scale;\n\t\t\ty -= state.origin.y * scale;\n\n\t\t\tif (this.graph.isConstrainedMoving)\n\t\t\t{\n\t\t\t\tvar width = geo.width;\n\t\t\t\tvar height = geo.height;\n\t\t\t\tvar tmp = state.x+state.width;\n\n\t\t\t\tif (x+width > tmp)\n\t\t\t\t{\n\t\t\t\t\tx -= x+width - tmp;\n\t\t\t\t}\n\n\t\t\t\ttmp = state.y+state.height;\n\n\t\t\t\tif (y+height > tmp)\n\t\t\t\t{\n\t\t\t\t\ty -= y+height - tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (pgeo != null)\n\t\t{\n\t\t\tx -= pgeo.x*scale;\n\t\t\ty -= pgeo.y*scale;\n\t\t}\n\t}\n\n\tgeo = geo.clone();\n\tgeo.x = this.graph.snap(x / scale -\n\t\tthis.graph.getView().translate.x -\n\t\tthis.graph.gridSize/2);\n\tgeo.y = this.graph.snap(y / scale -\n\t\tthis.graph.getView().translate.y -\n\t\tthis.graph.gridSize/2);\n\tvertex.setGeometry(geo);\n\n\tif (parent == null)\n\t{\n\t\tparent = this.graph.getDefaultParent();\n\t}\n\n\tthis.cycleAttribute(vertex);\n\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_ADD_VERTEX,\n\t\t\t'vertex', vertex, 'parent', parent));\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvertex = this.graph.addCell(vertex, parent);\n\n\t\tif (vertex != null)\n\t\t{\n\t\t\tthis.graph.constrainChild(vertex);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_VERTEX, 'vertex', vertex));\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\n\tif (vertex != null)\n\t{\n\t\tthis.graph.setSelectionCell(vertex);\n\t\tthis.graph.scrollCellToVisible(vertex);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.AFTER_ADD_VERTEX, 'vertex', vertex));\n\t}\n\n\treturn vertex;\n};\n\n/**\n * Function: destroy\n *\n * Removes the editor and all its associated resources. This does not\n * normally need to be called, it is called automatically when the window\n * unloads.\n */\nmxEditor.prototype.destroy = function ()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tif (this.tasks != null)\n\t\t{\n\t\t\tthis.tasks.destroy();\n\t\t}\n\n\t\tif (this.outline != null)\n\t\t{\n\t\t\tthis.outline.destroy();\n\t\t}\n\n\t\tif (this.properties != null)\n\t\t{\n\t\t\tthis.properties.destroy();\n\t\t}\n\n\t\tif (this.keyHandler != null)\n\t\t{\n\t\t\tthis.keyHandler.destroy();\n\t\t}\n\n\t\tif (this.rubberband != null)\n\t\t{\n\t\t\tthis.rubberband.destroy();\n\t\t}\n\n\t\tif (this.toolbar != null)\n\t\t{\n\t\t\tthis.toolbar.destroy();\n\t\t}\n\n\t\tif (this.graph != null)\n\t\t{\n\t\t\tthis.graph.destroy();\n\t\t}\n\n\t\tthis.status = null;\n\t\tthis.templates = null;\n\t}\n};\n\n__mxOutput.mxEditor = typeof mxEditor !== 'undefined' ? mxEditor : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCodecRegistry =\n{\n\t/**\n\t * Class: mxCodecRegistry\n\t *\n\t * Singleton class that acts as a global registry for codecs.\n\t *\n\t * Adding an <mxCodec>:\n\t *\n\t * 1. Define a default codec with a new instance of the \n\t * object to be handled.\n\t *\n\t * (code)\n\t * var codec = new mxObjectCodec(new mxGraphModel());\n\t * (end)\n\t *\n\t * 2. Define the functions required for encoding and decoding\n\t * objects.\n\t *\n\t * (code)\n\t * codec.encode = function(enc, obj) { ... }\n\t * codec.decode = function(dec, node, into) { ... }\n\t * (end)\n\t *\n\t * 3. Register the codec in the <mxCodecRegistry>.\n\t *\n\t * (code)\n\t * mxCodecRegistry.register(codec);\n\t * (end)\n\t *\n\t * <mxObjectCodec.decode> may be used to either create a new \n\t * instance of an object or to configure an existing instance, \n\t * in which case the into argument points to the existing\n\t * object. In this case, we say the codec \"configures\" the\n\t * object.\n\t * \n\t * Variable: codecs\n\t *\n\t * Maps from constructor names to codecs.\n\t */\n\tcodecs: [],\n\t\n\t/**\n\t * Variable: aliases\n\t *\n\t * Maps from classnames to codecnames.\n\t */\n\taliases: [],\n\n\t/**\n\t * Function: register\n\t *\n\t * Registers a new codec and associates the name of the template\n\t * constructor in the codec with the codec object.\n\t *\n\t * Parameters:\n\t *\n\t * codec - <mxObjectCodec> to be registered.\n\t */\n\tregister: function(codec)\n\t{\n\t\tif (codec != null)\n\t\t{\n\t\t\tvar name = codec.getName();\n\t\t\tmxCodecRegistry.codecs[name] = codec;\n\t\t\t\n\t\t\tvar classname = mxUtils.getFunctionName(codec.template.constructor);\n\n\t\t\tif (classname != name)\n\t\t\t{\n\t\t\t\tmxCodecRegistry.addAlias(classname, name);\n\t\t\t}\n\t\t}\n\n\t\treturn codec;\n\t},\n\n\t/**\n\t * Function: addAlias\n\t *\n\t * Adds an alias for mapping a classname to a codecname.\n\t */\n\taddAlias: function(classname, codecname)\n\t{\n\t\tmxCodecRegistry.aliases[classname] = codecname;\n\t},\n\n\t/**\n\t * Function: getCodec\n\t *\n\t * Returns a codec that handles objects that are constructed\n\t * using the given constructor.\n\t *\n\t * Parameters:\n\t *\n\t * ctor - JavaScript constructor function. \n\t */\n\tgetCodec: function(ctor)\n\t{\n\t\tvar codec = null;\n\t\t\n\t\tif (ctor != null)\n\t\t{\n\t\t\tvar name = mxUtils.getFunctionName(ctor);\n\t\t\tvar tmp = mxCodecRegistry.aliases[name];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tname = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tcodec = mxCodecRegistry.codecs[name];\n\t\t\t\n\t\t\t// Registers a new default codec for the given constructor\n\t\t\t// if no codec has been previously defined.\n\t\t\tif (codec == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tcodec = new mxObjectCodec(new ctor());\n\t\t\t\t\tmxCodecRegistry.register(codec);\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn codec;\n\t}\n\n};\n\n__mxOutput.mxCodecRegistry = typeof mxCodecRegistry !== 'undefined' ? mxCodecRegistry : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCodec\n *\n * XML codec for JavaScript object graphs. See <mxObjectCodec> for a\n * description of the general encoding/decoding scheme. This class uses the\n * codecs registered in <mxCodecRegistry> for encoding/decoding each object.\n * \n * References:\n * \n * In order to resolve references, especially forward references, the mxCodec\n * constructor must be given the document that contains the referenced\n * elements.\n *\n * Examples:\n *\n * The following code is used to encode a graph model.\n *\n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = mxUtils.getXml(result);\n * (end)\n * \n * Example:\n * \n * Using the code below, an XML document is decoded into an existing model. The\n * document may be obtained using one of the functions in mxUtils for loading\n * an XML file, eg. <mxUtils.get>, or using <mxUtils.parseXml> for parsing an\n * XML string.\n * \n * (code)\n * var doc = mxUtils.parseXml(xmlString);\n * var codec = new mxCodec(doc);\n * codec.decode(doc.documentElement, graph.getModel());\n * (end)\n * \n * Example:\n * \n * This example demonstrates parsing a list of isolated cells into an existing\n * graph model. Note that the cells do not have a parent reference so they can\n * be added anywhere in the cell hierarchy after parsing.\n * \n * (code)\n * var xml = '<root><mxCell id=\"2\" value=\"Hello,\" vertex=\"1\"><mxGeometry x=\"20\" y=\"20\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"3\" value=\"World!\" vertex=\"1\"><mxGeometry x=\"200\" y=\"150\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"4\" value=\"\" edge=\"1\" source=\"2\" target=\"3\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root>';\n * var doc = mxUtils.parseXml(xml);\n * var codec = new mxCodec(doc);\n * var elt = doc.documentElement.firstChild;\n * var cells = [];\n * \n * while (elt != null)\n * {\n *   cells.push(codec.decode(elt));\n *   elt = elt.nextSibling;\n * }\n * \n * graph.addCells(cells);\n * (end)\n * \n * Example:\n * \n * Using the following code, the selection cells of a graph are encoded and the\n * output is displayed in a dialog box.\n * \n * (code)\n * var enc = new mxCodec();\n * var cells = graph.getSelectionCells();\n * mxUtils.alert(mxUtils.getPrettyXml(enc.encode(cells)));\n * (end)\n * \n * Newlines in the XML can be converted to <br>, in which case a '<br>' argument\n * must be passed to <mxUtils.getXml> as the second argument.\n * \n * Debugging:\n * \n * For debugging I/O you can use the following code to get the sequence of\n * encoded objects:\n * \n * (code)\n * var oldEncode = mxCodec.prototype.encode;\n * mxCodec.prototype.encode = function(obj)\n * {\n *   mxLog.show();\n *   mxLog.debug('mxCodec.encode: obj='+mxUtils.getFunctionName(obj.constructor));\n *   \n *   return oldEncode.apply(this, arguments);\n * };\n * (end)\n * \n * Note that the I/O system adds object codecs for new object automatically. For\n * decoding those objects, the constructor should be written as follows:\n * \n * (code)\n * var MyObj = function(name)\n * {\n *   // ...\n * };\n * (end)\n * \n * Constructor: mxCodec\n *\n * Constructs an XML encoder/decoder for the specified\n * owner document.\n *\n * Parameters:\n *\n * document - Optional XML document that contains the data.\n * If no document is specified then a new document is created\n * using <mxUtils.createXmlDocument>.\n */\nfunction mxCodec(document)\n{\n\tthis.document = document || mxUtils.createXmlDocument();\n\tthis.objects = [];\n};\n\n/**\n * Variable: document\n *\n * The owner document of the codec.\n */\nmxCodec.prototype.document = null;\n\n/**\n * Variable: objects\n *\n * Maps from IDs to objects.\n */\nmxCodec.prototype.objects = null;\n\n/**\n * Variable: elements\n * \n * Lookup table for resolving IDs to elements.\n */\nmxCodec.prototype.elements = null;\n\n/**\n * Variable: encodeDefaults\n *\n * Specifies if default values should be encoded. Default is false.\n */\nmxCodec.prototype.encodeDefaults = false;\n\n\n/**\n * Function: putObject\n * \n * Assoiates the given object with the given ID and returns the given object.\n * \n * Parameters\n * \n * id - ID for the object to be associated with.\n * obj - Object to be associated with the ID.\n */\nmxCodec.prototype.putObject = function(id, obj)\n{\n\tthis.objects[id] = obj;\n\t\n\treturn obj;\n};\n\n/**\n * Function: getObject\n *\n * Returns the decoded object for the element with the specified ID in\n * <document>. If the object is not known then <lookup> is used to find an\n * object. If no object is found, then the element with the respective ID\n * from the document is parsed using <decode>.\n */\nmxCodec.prototype.getObject = function(id)\n{\n\tvar obj = null;\n\n\tif (id != null)\n\t{\n\t\tobj = this.objects[id];\n\t\t\n\t\tif (obj == null)\n\t\t{\n\t\t\tobj = this.lookup(id);\n\t\t\t\n\t\t\tif (obj == null)\n\t\t\t{\n\t\t\t\tvar node = this.getElementById(id);\n\t\t\t\t\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tobj = this.decode(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: lookup\n *\n * Hook for subclassers to implement a custom lookup mechanism for cell IDs.\n * This implementation always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * };\n * (end)\n *\n * Parameters:\n *\n * id - ID of the object to be returned.\n */\nmxCodec.prototype.lookup = function(id)\n{\n\treturn null;\n};\n\n/**\n * Function: getElementById\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.getElementById = function(id)\n{\n\tthis.updateElements();\n\t\n\treturn this.elements[id];\n};\n\n/**\n * Function: updateElements\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.updateElements = function()\n{\n\tif (this.elements == null)\n\t{\n\t\tthis.elements = new Object();\n\t\t\n\t\tif (this.document.documentElement != null)\n\t\t{\n\t\t\tthis.addElement(this.document.documentElement);\n\t\t}\n\t}\n};\n\n/**\n * Function: addElement\n *\n * Adds the given element to <elements> if it has an ID.\n */\nmxCodec.prototype.addElement = function(node)\n{\n\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tif (this.elements[id] == null)\n\t\t\t{\n\t\t\t\tthis.elements[id] = node;\n\t\t\t}\n\t\t\telse if (this.elements[id] != node)\n\t\t\t{\n\t\t\t\tthrow new Error(id + ': Duplicate ID');\n\t\t\t}\n\t\t}\n\t}\n\t\n\tnode = node.firstChild;\n\t\n\twhile (node != null)\n\t{\n\t\tthis.addElement(node);\n\t\tnode = node.nextSibling;\n\t}\n};\n\n/**\n * Function: getId\n *\n * Returns the ID of the specified object. This implementation\n * calls <reference> first and if that returns null handles\n * the object as an <mxCell> by returning their IDs using\n * <mxCell.getId>. If no ID exists for the given cell, then\n * an on-the-fly ID is generated using <mxCellPath.create>.\n *\n * Parameters:\n *\n * obj - Object to return the ID for.\n */\nmxCodec.prototype.getId = function(obj)\n{\n\tvar id = null;\n\t\n\tif (obj != null)\n\t{\n\t\tid = this.reference(obj);\n\t\t\n\t\tif (id == null && obj instanceof mxCell)\n\t\t{\n\t\t\tid = obj.getId();\n\t\t\t\n\t\t\tif (id == null)\n\t\t\t{\n\t\t\t\t// Uses an on-the-fly Id\n\t\t\t\tid = mxCellPath.create(obj);\n\t\t\t\t\n\t\t\t\tif (id.length == 0)\n\t\t\t\t{\n\t\t\t\t\tid = 'root';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn id;\n};\n\n/**\n * Function: reference\n *\n * Hook for subclassers to implement a custom method\n * for retrieving IDs from objects. This implementation\n * always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.reference = function(obj)\n * {\n *   return obj.getCustomId();\n * };\n * (end)\n *\n * Parameters:\n *\n * obj - Object whose ID should be returned.\n */\nmxCodec.prototype.reference = function(obj)\n{\n\treturn null;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns the resulting\n * XML node.\n *\n * Parameters:\n *\n * obj - Object to be encoded. \n */\nmxCodec.prototype.encode = function(obj)\n{\n\tvar node = null;\n\t\n\tif (obj != null && obj.constructor != null)\n\t{\n\t\tvar enc = mxCodecRegistry.getCodec(obj.constructor);\n\t\t\n\t\tif (enc != null)\n\t\t{\n\t\t\tnode = enc.encode(this, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxUtils.isNode(obj))\n\t\t\t{\n\t\t\t\tnode = mxUtils.importNode(this.document, obj, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t    \t\tmxLog.warn('mxCodec.encode: No codec for ' + mxUtils.getFunctionName(obj.constructor));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Decodes the given XML node. The optional \"into\"\n * argument specifies an existing object to be\n * used. If no object is given, then a new instance\n * is created using the constructor from the codec.\n *\n * The function returns the passed in object or\n * the new instance if no object was given.\n *\n * Parameters:\n *\n * node - XML node to be decoded.\n * into - Optional object to be decodec into.\n */\nmxCodec.prototype.decode = function(node, into)\n{\n\tthis.updateElements();\n\tvar obj = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar ctor = null;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tctor = window[node.nodeName];\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t\t\n\t\tvar dec = mxCodecRegistry.getCodec(ctor);\n\t\t\n\t\tif (dec != null)\n\t\t{\n\t\t\tobj = dec.decode(this, node, into);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj = node.cloneNode(true);\n\t\t\tobj.removeAttribute('as');\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: encodeCell\n *\n * Encoding of cell hierarchies is built-into the core, but\n * is a higher-level function that needs to be explicitely\n * used by the respective object encoders (eg. <mxModelCodec>,\n * <mxChildChangeCodec> and <mxRootChangeCodec>). This\n * implementation writes the given cell and its children as a\n * (flat) sequence into the given node. The children are not\n * encoded if the optional includeChildren is false. The\n * function is in charge of adding the result into the\n * given node and has no return value.\n *\n * Parameters:\n *\n * cell - <mxCell> to be encoded.\n * node - Parent XML node to add the encoded cell into.\n * includeChildren - Optional boolean indicating if the\n * function should include all descendents. Default is true. \n */\nmxCodec.prototype.encodeCell = function(cell, node, includeChildren)\n{\n\tnode.appendChild(this.encode(cell));\n\t\n\tif (includeChildren == null || includeChildren)\n\t{\n\t\tvar childCount = cell.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.encodeCell(cell.getChildAt(i), node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellCodec\n * \n * Returns true if the given codec is a cell codec. This uses\n * <mxCellCodec.isCellCodec> to check if the codec is of the\n * given type.\n */\nmxCodec.prototype.isCellCodec = function(codec)\n{\n\tif (codec != null && typeof(codec.isCellCodec) == 'function')\n\t{\n\t\treturn codec.isCellCodec();\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: decodeCell\n *\n * Decodes cells that have been encoded using inversion, ie.\n * where the user object is the enclosing node in the XML,\n * and restores the group and graph structure in the cells.\n * Returns a new <mxCell> instance that represents the\n * given node.\n *\n * Parameters:\n *\n * node - XML node that contains the cell data.\n * restoreStructures - Optional boolean indicating whether\n * the graph structure should be restored by calling insert\n * and insertEdge on the parent and terminals, respectively.\n * Default is true.\n */\nmxCodec.prototype.decodeCell = function(node, restoreStructures)\n{\n\trestoreStructures = (restoreStructures != null) ? restoreStructures : true;\n\tvar cell = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\t// Tries to find a codec for the given node name. If that does\n\t\t// not return a codec then the node is the user object (an XML node\n\t\t// that contains the mxCell, aka inversion).\n\t\tvar decoder = mxCodecRegistry.getCodec(node.nodeName);\n\t\t\n\t\t// Tries to find the codec for the cell inside the user object.\n\t\t// This assumes all node names inside the user object are either\n\t\t// not registered or they correspond to a class for cells.\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tvar child = node.firstChild;\n\t\t\t\n\t\t\twhile (child != null && !this.isCellCodec(decoder))\n\t\t\t{\n\t\t\t\tdecoder = mxCodecRegistry.getCodec(child.nodeName);\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tdecoder = mxCodecRegistry.getCodec(mxCell);\n\t\t}\n\n\t\tcell = decoder.decode(this, node);\n\t\t\n\t\tif (restoreStructures)\n\t\t{\n\t\t\tthis.insertIntoGraph(cell);\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: insertIntoGraph\n *\n * Inserts the given cell into its parent and terminal cells.\n */\nmxCodec.prototype.insertIntoGraph = function(cell)\n{\n\tvar parent = cell.parent;\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\n\t// Fixes possible inconsistencies during insert into graph\n\tcell.setTerminal(null, false);\n\tcell.setTerminal(null, true);\n\tcell.parent = null;\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent == cell)\n\t\t{\n\t\t\tthrow new Error(parent.id + ': Self Reference');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent.insert(cell);\n\t\t}\n\t}\n\n\tif (source != null)\n\t{\n\t\tsource.insertEdge(cell, true);\n\t}\n\n\tif (target != null)\n\t{\n\t\ttarget.insertEdge(cell, false);\n\t}\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the attribute on the specified node to value. This is a\n * helper method that makes sure the attribute and value arguments\n * are not null.\n *\n * Parameters:\n *\n * node - XML node to set the attribute for.\n * attributes - Attributename to be set.\n * value - New value of the attribute.\n */\nmxCodec.prototype.setAttribute = function(node, attribute, value)\n{\n\tif (attribute != null && value != null)\n\t{\n\t\tnode.setAttribute(attribute, value);\n\t}\n};\n\n__mxOutput.mxCodec = typeof mxCodec !== 'undefined' ? mxCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxObjectCodec\n *\n * Generic codec for JavaScript objects that implements a mapping between\n * JavaScript objects and XML nodes that maps each field or element to an\n * attribute or child node, and vice versa.\n * \n * Atomic Values:\n * \n * Consider the following example.\n * \n * (code)\n * var obj = new Object();\n * obj.foo = \"Foo\";\n * obj.bar = \"Bar\";\n * (end)\n * \n * This object is encoded into an XML node using the following.\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(obj);\n * (end)\n * \n * The output of the encoding may be viewed using <mxLog> as follows.\n * \n * (code)\n * mxLog.show();\n * mxLog.debug(mxUtils.getPrettyXml(node));\n * (end)\n * \n * Finally, the result of the encoding looks as follows.\n * \n * (code)\n * <Object foo=\"Foo\" bar=\"Bar\"/>\n * (end)\n * \n * In the above output, the foo and bar fields have been mapped to attributes\n * with the same names, and the name of the constructor was used for the\n * nodename.\n * \n * Booleans:\n *\n * Since booleans are numbers in JavaScript, all boolean values are encoded\n * into 1 for true and 0 for false. The decoder also accepts the string true\n * and false for boolean values.\n * \n * Objects:\n * \n * The above scheme is applied to all atomic fields, that is, to all non-object\n * fields of an object. For object fields, a child node is created with a\n * special attribute that contains the fieldname. This special attribute is\n * called \"as\" and hence, as is a reserved word that should not be used for a\n * fieldname.\n * \n * Consider the following example where foo is an object and bar is an atomic\n * property of foo.\n * \n * (code)\n * var obj = {foo: {bar: \"Bar\"}};\n * (end)\n * \n * This will be mapped to the following XML structure by mxObjectCodec.\n * \n * (code)\n * <Object>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Object>\n * (end)\n * \n * In the above output, the inner Object node contains the as-attribute that\n * specifies the fieldname in the enclosing object. That is, the field foo was\n * mapped to a child node with an as-attribute that has the value foo.\n * \n * Arrays:\n * \n * Arrays are special objects that are either associative, in which case each\n * key, value pair is treated like a field where the key is the fieldname, or\n * they are a sequence of atomic values and objects, which is mapped to a\n * sequence of child nodes. For object elements, the above scheme is applied\n * without the use of the special as-attribute for creating each child. For\n * atomic elements, a special add-node is created with the value stored in the\n * value-attribute.\n * \n * For example, the following array contains one atomic value and one object\n * with a field called bar. Furthermore it contains two associative entries\n * called bar with an atomic value, and foo with an object value.\n * \n * (code)\n * var obj = [\"Bar\", {bar: \"Bar\"}];\n * obj[\"bar\"] = \"Bar\";\n * obj[\"foo\"] = {bar: \"Bar\"};\n * (end)\n * \n * This array is represented by the following XML nodes.\n * \n * (code)\n * <Array bar=\"Bar\">\n *   <add value=\"Bar\"/>\n *   <Object bar=\"Bar\"/>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Array>\n * (end)\n * \n * The Array node name is the name of the constructor. The additional\n * as-attribute in the last child contains the key of the associative entry,\n * whereas the second last child is part of the array sequence and does not\n * have an as-attribute.\n * \n * References:\n * \n * Objects may be represented as child nodes or attributes with ID values,\n * which are used to lookup the object in a table within <mxCodec>. The\n * <isReference> function is in charge of deciding if a specific field should\n * be encoded as a reference or not. Its default implementation returns true if\n * the fieldname is in <idrefs>, an array of strings that is used to configure\n * the <mxObjectCodec>.\n * \n * Using this approach, the mapping does not guarantee that the referenced\n * object itself exists in the document. The fields that are encoded as\n * references must be carefully chosen to make sure all referenced objects\n * exist in the document, or may be resolved by some other means if necessary.\n * \n * For example, in the case of the graph model all cells are stored in a tree\n * whose root is referenced by the model's root field. A tree is a structure\n * that is well suited for an XML representation, however, the additional edges\n * in the graph model have a reference to a source and target cell, which are\n * also contained in the tree. To handle this case, the source and target cell\n * of an edge are treated as references, whereas the children are treated as\n * objects. Since all cells are contained in the tree and no edge references a\n * source or target outside the tree, this setup makes sure all referenced\n * objects are contained in the document.\n * \n * In the case of a tree structure we must further avoid infinite recursion by\n * ignoring the parent reference of each child. This is done by returning true\n * in <isExcluded>, whose default implementation uses the array of excluded\n * fieldnames passed to the mxObjectCodec constructor.\n * \n * References are only used for cells in mxGraph. For defining other\n * referencable object types, the codec must be able to work out the ID of an\n * object. This is done by implementing <mxCodec.reference>. For decoding a\n * reference, the XML node with the respective id-attribute is fetched from the\n * document, decoded, and stored in a lookup table for later reference. For\n * looking up external objects, <mxCodec.lookup> may be implemented.\n * \n * Expressions:\n * \n * For decoding JavaScript expressions, the add-node may be used with a text\n * content that contains the JavaScript expression. For example, the following\n * creates a field called foo in the enclosing object and assigns it the value\n * of <mxConstants.ALIGN_LEFT>.\n * \n * (code)\n * <Object>\n *   <add as=\"foo\">mxConstants.ALIGN_LEFT</add>\n * </Object>\n * (end)\n * \n * The resulting object has a field called foo with the value \"left\". Its XML\n * representation looks as follows.\n * \n * (code)\n * <Object foo=\"left\"/>\n * (end)\n * \n * This means the expression is evaluated at decoding time and the result of\n * the evaluation is stored in the respective field. Valid expressions are all\n * JavaScript expressions, including function definitions, which are mapped to\n * functions on the resulting object.\n * \n * Expressions are only evaluated if <allowEval> is true.\n * \n * Constructor: mxObjectCodec\n *\n * Constructs a new codec for the specified template object.\n * The variables in the optional exclude array are ignored by\n * the codec. Variables in the optional idrefs array are\n * turned into references in the XML. The optional mapping\n * may be used to map from variable names to XML attributes.\n * The argument is created as follows:\n *\n * (code)\n * var mapping = new Object();\n * mapping['variableName'] = 'attribute-name';\n * (end)\n *\n * Parameters:\n *\n * template - Prototypical instance of the object to be\n * encoded/decoded.\n * exclude - Optional array of fieldnames to be ignored.\n * idrefs - Optional array of fieldnames to be converted to/from\n * references.\n * mapping - Optional mapping from field- to attributenames.\n */\nfunction mxObjectCodec(template, exclude, idrefs, mapping)\n{\n\tthis.template = template;\n\t\n\tthis.exclude = (exclude != null) ? exclude : [];\n\tthis.idrefs = (idrefs != null) ? idrefs : [];\n\tthis.mapping = (mapping != null) ? mapping : [];\n\t\n\tthis.reverse = new Object();\n\t\n\tfor (var i in this.mapping)\n\t{\n\t\tthis.reverse[this.mapping[i]] = i;\n\t}\n};\n\n/**\n * Variable: allowEval\n *\n * Static global switch that specifies if expressions in arrays are allowed.\n * Default is false. NOTE: Enabling this carries a possible security risk.\n */\nmxObjectCodec.allowEval = false;\n\n/**\n * Variable: template\n *\n * Holds the template object associated with this codec.\n */\nmxObjectCodec.prototype.template = null;\n\n/**\n * Variable: exclude\n *\n * Array containing the variable names that should be\n * ignored by the codec.\n */\nmxObjectCodec.prototype.exclude = null;\n\n/**\n * Variable: idrefs\n *\n * Array containing the variable names that should be\n * turned into or converted from references. See\n * <mxCodec.getId> and <mxCodec.getObject>.\n */\nmxObjectCodec.prototype.idrefs = null;\n\n/**\n * Variable: mapping\n *\n * Maps from from fieldnames to XML attribute names.\n */\nmxObjectCodec.prototype.mapping = null;\n\n/**\n * Variable: reverse\n *\n * Maps from from XML attribute names to fieldnames.\n */\nmxObjectCodec.prototype.reverse = null;\n\n/**\n * Function: getName\n * \n * Returns the name used for the nodenames and lookup of the codec when\n * classes are encoded and nodes are decoded. For classes to work with\n * this the codec registry automatically adds an alias for the classname\n * if that is different than what this returns. The default implementation\n * returns the classname of the template class.\n */\nmxObjectCodec.prototype.getName = function()\n{\n\treturn mxUtils.getFunctionName(this.template.constructor);\n};\n\n/**\n * Function: cloneTemplate\n * \n * Returns a new instance of the template for this codec.\n */\nmxObjectCodec.prototype.cloneTemplate = function()\n{\n\treturn new this.template.constructor();\n};\n\n/**\n * Function: getFieldName\n * \n * Returns the fieldname for the given attributename.\n * Looks up the value in the <reverse> mapping or returns\n * the input if there is no reverse mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getFieldName = function(attributename)\n{\n\tif (attributename != null)\n\t{\n\t\tvar mapped = this.reverse[attributename];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tattributename = mapped;\n\t\t}\n\t}\n\t\n\treturn attributename;\n};\n\n/**\n * Function: getAttributeName\n * \n * Returns the attributename for the given fieldname.\n * Looks up the value in the <mapping> or returns\n * the input if there is no mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getAttributeName = function(fieldname)\n{\n\tif (fieldname != null)\n\t{\n\t\tvar mapped = this.mapping[fieldname];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tfieldname = mapped;\n\t\t}\n\t}\n\t\n\treturn fieldname;\n};\n\n/**\n * Function: isExcluded\n *\n * Returns true if the given attribute is to be ignored by the codec. This\n * implementation returns true if the given fieldname is in <exclude> or\n * if the fieldname equals <mxObjectIdentity.FIELD_NAME>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field.\n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isExcluded = function(obj, attr, value, write)\n{\n\treturn attr == mxObjectIdentity.FIELD_NAME ||\n\t\tmxUtils.indexOf(this.exclude, attr) >= 0;\n};\n\n/**\n * Function: isReference\n *\n * Returns true if the given fieldname is to be treated\n * as a textual reference (ID). This implementation returns\n * true if the given fieldname is in <idrefs>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field. \n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isReference = function(obj, attr, value, write)\n{\n\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns a node\n * representing then given object. Calls <beforeEncode>\n * after creating the node and <afterEncode> with the \n * resulting node after processing.\n *\n * Enc is a reference to the calling encoder. It is used\n * to encode complex objects and create references.\n *\n * This implementation encodes all variables of an\n * object according to the following rules:\n *\n * - If the variable name is in <exclude> then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getId>\n * is used to replace the object with its ID.\n * - The variable name is mapped using <mapping>.\n * - If obj is an array and the variable name is numeric\n * (ie. an index) then it is not encoded.\n * - If the value is an object, then the codec is used to\n * create a child node with the variable name encoded into\n * the \"as\" attribute.\n * - Else, if <encodeDefaults> is true or the value differs\n * from the template value, then ...\n * - ... if obj is not an array, then the value is mapped to\n * an attribute.\n * - ... else if obj is an array, the value is mapped to an\n * add child with a value attribute or a text child node,\n * if the value is a function.\n *\n * If no ID exists for a variable in <idrefs> or if an object\n * cannot be encoded, a warning is issued using <mxLog.warn>.\n *\n * Returns the resulting XML node that represents the given\n * object.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n */\nmxObjectCodec.prototype.encode = function(enc, obj)\n{\n\tvar node = enc.document.createElement(this.getName());\n\t\n\tobj = this.beforeEncode(enc, obj, node);\n\tthis.encodeObject(enc, obj, node);\n\t\n\treturn this.afterEncode(enc, obj, node);\n};\n\t\n/**\n * Function: encodeObject\n *\n * Encodes the value of each member in then given obj into the given node using\n * <encodeValue>.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeObject = function(enc, obj, node)\n{\n\tenc.setAttribute(node, 'id', enc.getId(obj));\n\t\n    for (var i in obj)\n    {\n\t\tvar name = i;\n\t\tvar value = obj[name];\n\t\t\n    \tif (value != null && !this.isExcluded(obj, name, value, true))\n    \t{\n    \t\tif (mxUtils.isInteger(name))\n    \t\t{\n    \t\t\tname = null;\n    \t\t}\n    \t\t\n    \t\tthis.encodeValue(enc, obj, name, value, node);\n    \t}\n    }\n};\n\n/**\n * Function: encodeValue\n * \n * Converts the given value according to the mappings\n * and id-refs in this codec and uses <writeAttribute>\n * to write the attribute into the given node.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object whose property is going to be encoded.\n * name - XML node that contains the encoded object.\n * value - Value of the property to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeValue = function(enc, obj, name, value, node)\n{\n\tif (value != null)\n\t{\n\t\tif (this.isReference(obj, name, value, true))\n\t\t{\n\t\t\tvar tmp = enc.getId(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.encode: No ID for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tvar defaultValue = this.template[name];\n\t\t\n\t\t// Checks if the value is a default value and\n\t\t// the name is correct\n\t\tif (name == null || enc.encodeDefaults || defaultValue != value)\n\t\t{\n\t\t\tname = this.getAttributeName(name);\n\t\t\tthis.writeAttribute(enc, obj, name, value, node);\t\n\t\t}\n\t}\n};\n\n/**\n * Function: writeAttribute\n * \n * Writes the given value into node using <writePrimitiveAttribute>\n * or <writeComplexAttribute> depending on the type of the value.\n */\nmxObjectCodec.prototype.writeAttribute = function(enc, obj, name, value, node)\n{\n\tif (typeof(value) != 'object' /* primitive type */)\n\t{\n\t\tthis.writePrimitiveAttribute(enc, obj, name, value, node);\n\t}\n\telse /* complex type */\n\t{\n\t\tthis.writeComplexAttribute(enc, obj, name, value, node);\n\t}\n};\n\n/**\n * Function: writePrimitiveAttribute\n * \n * Writes the given value as an attribute of the given node.\n */\nmxObjectCodec.prototype.writePrimitiveAttribute = function(enc, obj, name, value, node)\n{\n\tvalue = this.convertAttributeToXml(enc, obj, name, value, node);\n\t\n\tif (name == null)\n\t{\n\t\tvar child = enc.document.createElement('add');\n\t\t\n\t\tif (typeof(value) == 'function')\n\t\t{\n    \t\tchild.appendChild(enc.document.createTextNode(value));\n    \t}\n    \telse\n    \t{\n    \t\tenc.setAttribute(child, 'value', value);\n    \t}\n    \t\n\t\tnode.appendChild(child);\n\t}\n\telse if (typeof(value) != 'function')\n\t{\n    \tenc.setAttribute(node, name, value);\n\t}\t\t\n};\n\t\n/**\n * Function: writeComplexAttribute\n * \n * Writes the given value as a child node of the given node.\n */\nmxObjectCodec.prototype.writeComplexAttribute = function(enc, obj, name, value, node)\n{\n\tvar child = enc.encode(value);\n\t\n\tif (child != null)\n\t{\n\t\tif (name != null)\n\t\t{\n    \t\tchild.setAttribute('as', name);\n    \t}\n    \t\n    \tnode.appendChild(child);\n\t}\n\telse\n\t{\n\t\tmxLog.warn('mxObjectCodec.encode: No node for ' + this.getName() + '.' + name + ': ' + value);\n\t}\n};\n\n/**\n * Function: convertAttributeToXml\n * \n * Converts true to \"1\" and false to \"0\" is <isBooleanAttribute> returns true.\n * All other values are not converted.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value to be converted.\n */\nmxObjectCodec.prototype.convertAttributeToXml = function(enc, obj, name, value)\n{\n\t// Makes sure to encode boolean values as numeric values\n\tif (this.isBooleanAttribute(enc, obj, name, value))\n\t{\t\n\t\t// Checks if the value is true (do not use the value as is, because\n\t\t// this would check if the value is not null, so 0 would be true)\n\t\tvalue = (value == true) ? '1' : '0';\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isBooleanAttribute\n * \n * Returns true if the given object attribute is a boolean value.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value of the attribute to be converted.\n */\nmxObjectCodec.prototype.isBooleanAttribute = function(enc, obj, name, value)\n{\n\treturn (typeof(value.length) == 'undefined' && (value == true || value == false));\n};\n\n/**\n * Function: convertAttributeFromXml\n * \n * Converts booleans and numeric values to the respective types. Values are\n * numeric if <isNumericAttribute> returns true.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.convertAttributeFromXml = function(dec, attr, obj)\n{\n\tvar value = attr.value;\n\t\n\tif (this.isNumericAttribute(dec, attr, obj))\n\t{\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value) || !isFinite(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isNumericAttribute\n * \n * Returns true if the given XML attribute is or should be a numeric value.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.isNumericAttribute = function(dec, attr, obj)\n{\n\t// Handles known numeric attributes for generic objects\n\tvar result = (obj.constructor == mxGeometry &&\n\t\t(attr.name == 'x' || attr.name == 'y' ||\n\t\tattr.name == 'width' || attr.name == 'height')) ||\n\t\t(obj.constructor == mxPoint &&\n\t\t(attr.name == 'x' || attr.name == 'y')) ||\n\t\tmxUtils.isNumeric(attr.value);\n\t\n\treturn result;\n};\n\n/**\n * Function: beforeEncode\n *\n * Hook for subclassers to pre-process the object before\n * encoding. This returns the input object. The return\n * value of this function is used in <encode> to perform\n * the default encoding into the given node.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node to encode the object into.\n */\nmxObjectCodec.prototype.beforeEncode = function(enc, obj, node)\n{\n\treturn obj;\n};\n\n/**\n * Function: afterEncode\n *\n * Hook for subclassers to post-process the node\n * for the given object after encoding and return the\n * post-processed node. This implementation returns \n * the input node. The return value of this method\n * is returned to the encoder from <encode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that represents the default encoding.\n */\nmxObjectCodec.prototype.afterEncode = function(enc, obj, node)\n{\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Parses the given node into the object or returns a new object\n * representing the given node.\n *\n * Dec is a reference to the calling decoder. It is used to decode\n * complex objects and resolve references.\n *\n * If a node has an id attribute then the object cache is checked for the\n * object. If the object is not yet in the cache then it is constructed\n * using the constructor of <template> and cached in <mxCodec.objects>.\n *\n * This implementation decodes all attributes and childs of a node\n * according to the following rules:\n *\n * - If the variable name is in <exclude> or if the attribute name is \"id\"\n * or \"as\" then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getObject> is used\n * to replace the reference with an object.\n * - The variable name is mapped using a reverse <mapping>.\n * - If the value has a child node, then the codec is used to create a\n * child object with the variable name taken from the \"as\" attribute.\n * - If the object is an array and the variable name is empty then the\n * value or child object is appended to the array.\n * - If an add child has no value or the object is not an array then\n * the child text content is evaluated using <mxUtils.eval>.\n *\n * For add nodes where the object is not an array and the variable name\n * is defined, the default mechanism is used, allowing to override/add\n * methods as follows:\n *\n * (code)\n * <Object>\n *   <add as=\"hello\"><![CDATA[\n *     function(arg1) {\n *       mxUtils.alert('Hello '+arg1);\n *     }\n *   ]]></add>\n * </Object>\n * (end) \n *\n * If no object exists for an ID in <idrefs> a warning is issued\n * using <mxLog.warn>.\n *\n * Returns the resulting object that represents the given XML node\n * or the object given to the method as the into parameter.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * into - Optional objec to encode the node into.\n */\nmxObjectCodec.prototype.decode = function(dec, node, into)\n{\n\tvar id = node.getAttribute('id');\n\tvar obj = dec.objects[id];\n\t\n\tif (obj == null)\n\t{\n\t\tobj = into || this.cloneTemplate();\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.putObject(id, obj);\n\t\t}\n\t}\n\t\n\tnode = this.beforeDecode(dec, node, obj);\n\tthis.decodeNode(dec, node, obj);\n\t\n    return this.afterDecode(dec, node, obj);\n};\t\n\n/**\n * Function: decodeNode\n * \n * Calls <decodeAttributes> and <decodeChildren> for the given node.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeNode = function(dec, node, obj)\n{\n\tif (node != null)\n\t{\n\t\tthis.decodeAttributes(dec, node, obj);\n\t\tthis.decodeChildren(dec, node, obj);\n\t}\n};\n\n/**\n * Function: decodeAttributes\n * \n * Decodes all attributes of the given node using <decodeAttribute>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeAttributes = function(dec, node, obj)\n{\n\tvar attrs = node.attributes;\n\t\n\tif (attrs != null)\n\t{\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\tthis.decodeAttribute(dec, attrs[i], obj);\n\t\t}\n\t}\n};\n\n/**\n * Function: isIgnoredAttribute\n * \n * Returns true if the given attribute should be ignored. This implementation\n * returns true if the attribute name is \"as\" or \"id\".\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.isIgnoredAttribute = function(dec, attr, obj)\n{\n\treturn attr.nodeName == 'as' || attr.nodeName == 'id';\n};\n\n/**\n * Function: decodeAttribute\n * \n * Reads the given attribute into the specified object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.decodeAttribute = function(dec, attr, obj)\n{\n\tif (!this.isIgnoredAttribute(dec, attr, obj))\n\t{\n\t\tvar name = attr.nodeName;\n\t\t\n\t\t// Converts the string true and false to their boolean values.\n\t\t// This may require an additional check on the obj to see if\n\t\t// the existing field is a boolean value or uninitialized, in\n\t\t// which case we may want to convert true and false to a string.\n\t\tvar value = this.convertAttributeFromXml(dec, attr, obj);\n\t\tvar fieldname = this.getFieldName(name);\n\t\t\n\t\tif (this.isReference(obj, fieldname, value, false))\n\t\t{\n\t\t\tvar tmp = dec.getObject(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.decode: No object for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tif (!this.isExcluded(obj, name, value, false))\n\t\t{\n\t\t\t//mxLog.debug(mxUtils.getFunctionName(obj.constructor)+'.'+name+'='+value);\n\t\t\tobj[name] = value;\n\t\t}\n\t}\n};\n\n/**\n * Function: decodeChildren\n * \n * Decodes all children of the given node using <decodeChild>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChildren = function(dec, node, obj)\n{\n\tvar child = node.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar tmp = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_ELEMENT &&\n\t\t\t!this.processInclude(dec, child, obj))\n\t\t{\n\t\t\tthis.decodeChild(dec, child, obj);\n\t\t}\n\t\t\n\t\tchild = tmp;\n\t}\n};\n\n/**\n * Function: decodeChild\n * \n * Reads the specified child into the given object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * child - XML child element to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChild = function(dec, child, obj)\n{\n\tvar fieldname = this.getFieldName(child.getAttribute('as'));\n\t\n\tif (fieldname == null || !this.isExcluded(obj, fieldname, child, false))\n\t{\n\t\tvar template = this.getFieldTemplate(obj, fieldname, child);\n\t\tvar value = null;\n\t\t\n\t\tif (child.nodeName == 'add')\n\t\t{\n\t\t\tvalue = child.getAttribute('value');\n\t\t\t\n\t\t\tif (value == null && mxObjectCodec.allowEval)\n\t\t\t{\n\t\t\t\tvalue = mxUtils.eval(mxUtils.getTextContent(child));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvalue = dec.decode(child, template);\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tthis.addObjectValue(obj, fieldname, value, template);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tthrow new Error(e.message + ' for ' + child.nodeName);\n\t\t}\n\t}\n};\n\n/**\n * Function: getFieldTemplate\n * \n * Returns the template instance for the given field. This returns the\n * value of the field, null if the value is an array or an empty collection\n * if the value is a collection. The value is then used to populate the\n * field for a new instance. For strongly typed languages it may be\n * required to override this to return the correct collection instance\n * based on the encoded child.\n */\t\nmxObjectCodec.prototype.getFieldTemplate = function(obj, fieldname, child)\n{\n\tvar template = obj[fieldname];\n\t\n\t// Non-empty arrays are replaced completely\n    if (template instanceof Array && template.length > 0)\n    {\n        template = null;\n    }\n    \n    return template;\n};\n\n/**\n * Function: addObjectValue\n * \n * Sets the decoded child node as a value of the given object. If the\n * object is a map, then the value is added with the given fieldname as a\n * key. If the fieldname is not empty, then setFieldValue is called or\n * else, if the object is a collection, the value is added to the\n * collection. For strongly typed languages it may be required to\n * override this with the correct code to add an entry to an object.\n */\t\nmxObjectCodec.prototype.addObjectValue = function(obj, fieldname, value, template)\n{\n\tif (value != null && value != template)\n\t{\n\t\tif (fieldname != null && fieldname.length > 0)\n\t\t{\n\t\t\tobj[fieldname] = value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj.push(value);\n\t\t}\n\t\t//mxLog.debug('Decoded '+mxUtils.getFunctionName(obj.constructor)+'.'+fieldname+': '+value);\n\t}\n};\n\n/**\n * Function: processInclude\n *\n * Returns true if the given node is an include directive and\n * executes the include by decoding the XML document. Returns\n * false if the given node is not an include directive.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the encoding/decoding process.\n * node - XML node to be checked.\n * into - Optional object to pass-thru to the codec.\n */\nmxObjectCodec.prototype.processInclude = function(dec, node, into)\n{\n\tif (node.nodeName == 'include')\n\t{\n\t\tvar name = node.getAttribute('name');\n\t\t\n\t\tif (name != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar xml = mxUtils.load(name).getDocumentElement();\n\t\t\t\t\n\t\t\t\tif (xml != null)\n\t\t\t\t{\n\t\t\t\t\tdec.decode(xml, into);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: beforeDecode\n *\n * Hook for subclassers to pre-process the node for\n * the specified object and return the node to be\n * used for further processing by <decode>.\n * The object is created based on the template in the \n * calling method and is never null. This implementation\n * returns the input node. The return value of this\n * function is used in <decode> to perform\n * the default decoding into the given object.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Object to encode the node into.\n */\nmxObjectCodec.prototype.beforeDecode = function(dec, node, obj)\n{\n\treturn node;\n};\n\n/**\n * Function: afterDecode\n *\n * Hook for subclassers to post-process the object after\n * decoding. This implementation returns the given object\n * without any changes. The return value of this method\n * is returned to the decoder from <decode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * node - XML node to be decoded.\n * obj - Object that represents the default decoding.\n */\nmxObjectCodec.prototype.afterDecode = function(dec, node, obj)\n{\n\treturn obj;\n};\n\n__mxOutput.mxObjectCodec = typeof mxObjectCodec !== 'undefined' ? mxObjectCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxCellCodec\n\t *\n\t * Codec for <mxCell>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - children\n\t * - edges\n\t * - overlays\n\t * - mxTransient\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t * - source\n\t * - target\n\t * \n\t * Transient fields can be added using the following code:\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).exclude.push('name_of_field');\n\t * \n\t * To subclass <mxCell>, replace the template and add an alias as\n\t * follows.\n\t * \n\t * (code)\n\t * function CustomCell(value, geometry, style)\n\t * {\n\t *   mxCell.apply(this, arguments);\n\t * }\n\t * \n\t * mxUtils.extend(CustomCell, mxCell);\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).template = new CustomCell();\n\t * mxCodecRegistry.addAlias('CustomCell', 'mxCell');\n\t * (end)\n\t */\n\tvar codec = new mxObjectCodec(new mxCell(),\n\t\t['children', 'edges', 'overlays', 'mxTransient'],\n\t\t['parent', 'source', 'target']);\n\n\t/**\n\t * Function: isCellCodec\n\t *\n\t * Returns true since this is a cell codec.\n\t */\n\tcodec.isCellCodec = function()\n\t{\n\t\treturn true;\n\t};\n\n\t/**\n\t * Overidden to disable conversion of value to number.\n\t */\n\tcodec.isNumericAttribute = function(dec, attr, obj)\n\t{\n\t\treturn attr.nodeName !== 'value' && mxObjectCodec.prototype.isNumericAttribute.apply(this, arguments);\n\t};\n\t\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes user objects that are XML nodes.\n\t */ \n\tcodec.isExcluded = function(obj, attr, value, isWrite)\n\t{\n\t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n\t\t\t(isWrite && attr == 'value' &&\n\t\t\tvalue.nodeType == mxConstants.NODETYPE_ELEMENT);\n\t};\n\t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes an <mxCell> and wraps the XML up inside the\n\t * XML of the user object (inversion).\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (obj.value != null && obj.value.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Wraps the graphical annotation up in the user object (inversion)\n\t\t\t// by putting the result of the default encoding into a clone of the\n\t\t\t// user object (node type 1) and returning this cloned user object.\n\t\t\tvar tmp = node;\n\t\t\tnode = mxUtils.importNode(enc.document, obj.value, true);\n\t\t\tnode.appendChild(tmp);\n\t\t\t\n\t\t\t// Moves the id attribute to the outermost XML node, namely the\n\t\t\t// node which denotes the object boundaries in the file.\n\t\t\tvar id = tmp.getAttribute('id');\n\t\t\tnode.setAttribute('id', id);\n\t\t\ttmp.removeAttribute('id');\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes an <mxCell> and uses the enclosing XML node as\n\t * the user object for the cell (inversion).\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tvar inner = node.cloneNode(true);\n\t\tvar classname = this.getName();\n\t\t\n\t\tif (node.nodeName != classname)\n\t\t{\n\t\t\t// Passes the inner graphical annotation node to the\n\t\t\t// object codec for further processing of the cell.\n\t\t\tvar tmp = node.getElementsByTagName(classname)[0];\n\t\t\t\n\t\t\tif (tmp != null && tmp.parentNode == node)\n\t\t\t{\n\t\t\t\tmxUtils.removeWhitespace(tmp, true);\n\t\t\t\tmxUtils.removeWhitespace(tmp, false);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\tinner = tmp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinner = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the user object out of the XML node\n\t\t\tobj.value = node.cloneNode(true);\n\t\t\tvar id = obj.value.getAttribute('id');\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tobj.setId(id);\n\t\t\t\tobj.value.removeAttribute('id');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses ID from XML file as ID for cell in model\n\t\t\tobj.setId(node.getAttribute('id'));\n\t\t}\n\t\t\t\n\t\t// Preprocesses and removes all Id-references in order to use the\n\t\t// correct encoder (this) for the known references to cells (all).\n\t\tif (inner != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.idrefs.length; i++)\n\t\t\t{\n\t\t\t\tvar attr = this.idrefs[i];\n\t\t\t\tvar ref = inner.getAttribute(attr);\n\t\t\t\t\n\t\t\t\tif (ref != null)\n\t\t\t\t{\n\t\t\t\t\tinner.removeAttribute(attr);\n\t\t\t\t\tvar object = dec.objects[ref] || dec.lookup(ref);\n\t\t\t\t\t\n\t\t\t\t\tif (object == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Needs to decode forward reference\n\t\t\t\t\t\tvar element = dec.getElementById(ref);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (element != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar decoder = mxCodecRegistry.codecs[element.nodeName] || this;\n\t\t\t\t\t\t\tobject = decoder.decode(dec, element);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj[attr] = object;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn inner;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxCellCodec = typeof mxCellCodec !== 'undefined' ? mxCellCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxModelCodec\n\t *\n\t * Codec for <mxGraphModel>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphModel());\n\n\t/**\n\t * Function: encodeObject\n\t *\n\t * Encodes the given <mxGraphModel> by writing a (flat) XML sequence of\n\t * cell nodes as produced by the <mxCellCodec>. The sequence is\n\t * wrapped-up in a node with the name root.\n\t */\n\tcodec.encodeObject = function(enc, obj, node)\n\t{\n\t\tvar rootNode = enc.document.createElement('root');\n\t\tenc.encodeCell(obj.getRoot(), rootNode);\n\t\tnode.appendChild(rootNode);\n\t};\n\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'root')\n\t\t{\n\t\t\tthis.decodeRoot(dec, child, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t\t}\n\t};\n\n\t/**\n\t * Function: decodeRoot\n\t *\n\t * Reads the cells into the graph model. All cells\n\t * are children of the root element in the node.\n\t */\n\tcodec.decodeRoot = function(dec, root, model)\n\t{\n\t\tvar rootCell = null;\n\t\tvar tmp = root.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tvar cell = dec.decodeCell(tmp);\n\t\t\t\n\t\t\tif (cell != null && cell.getParent() == null)\n\t\t\t{\n\t\t\t\trootCell = cell;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\n\t\t// Sets the root on the model if one has been decoded\n\t\tif (rootCell != null)\n\t\t{\n\t\t\tmodel.setRoot(rootCell);\n\t\t}\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxModelCodec = typeof mxModelCodec !== 'undefined' ? mxModelCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxRootChangeCodec\n\t *\n\t * Codec for <mxRootChange>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - root\n\t */\n\tvar codec = new mxObjectCodec(new mxRootChange(),\n\t\t['model', 'previous', 'root']);\n\n\t/**\n\t * Function: onEncode\n\t *\n\t * Encodes the child recursively.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tenc.encodeCell(obj.root, node);\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the optional children as cells\n\t * using the respective decoder.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.root = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.root;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxRootChangeCodec = typeof mxRootChangeCodec !== 'undefined' ? mxRootChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxChildChangeCodec\n\t *\n\t * Codec for <mxChildChange>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - previousIndex\n\t * - child\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t */\n\tvar codec = new mxObjectCodec(new mxChildChange(),\n\t\t['model', 'child', 'previousIndex'],\n\t\t['parent', 'previous']);\n\n\t/**\n\t * Function: isReference\n\t *\n\t * Returns true for the child attribute if the child\n\t * cell had a previous parent or if we're reading the\n\t * child as an attribute rather than a child node, in\n\t * which case it's always a reference.\n\t */\n\tcodec.isReference = function(obj, attr, value, isWrite)\n\t{\n\t\tif (attr == 'child' && (!isWrite || obj.model.contains(obj.previous)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n\t};\n\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes references to parent or previous if not in the model.\n\t */\n  \tcodec.isExcluded = function(obj, attr, value, write)\n  \t{\n  \t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n  \t\t\t(write && value != null && (attr == 'previous' ||\n  \t\t\tattr == 'parent') && !obj.model.contains(value));\n  \t};\n  \t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes the child recusively and adds the result\n\t * to the given node.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (this.isReference(obj, 'child', obj.child, true))\n\t\t{\n\t\t\t// Encodes as reference (id)\n\t\t\tnode.setAttribute('child', enc.getId(obj.child));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// At this point, the encoder is no longer able to know which cells\n\t\t\t// are new, so we have to encode the complete cell hierarchy and\n\t\t\t// ignore the ones that are already there at decoding time. Note:\n\t\t\t// This can only be resolved by moving the notify event into the\n\t\t\t// execute of the edit.\n\t\t\tenc.encodeCell(obj.child, node);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the any child nodes as using the respective\n\t * codec from the registry.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.child = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\t\n\t\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\t// Ignores all existing cells because those do not need to\n\t\t\t\t\t// be re-inserted into the model. Since the encoded version\n\t\t\t\t\t// of these cells contains the new parent, this would leave\n\t\t\t\t\t// to an inconsistent state on the model (ie. a parent\n\t\t\t\t\t// change without a call to parentForCellChanged).\n\t\t\t\t\tvar id = tmp.getAttribute('id');\n\t\t\t\t\t\n\t\t\t\t\tif (dec.lookup(id) == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar childRef = node.getAttribute('child');\n\t\t\tobj.child = dec.getObject(childRef);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores object state in the child change.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Cells are decoded here after a complete transaction so the previous\n\t\t// parent must be restored on the cell for the case where the cell was\n\t\t// added. This is needed for the local model to identify the cell as a\n\t\t// new cell and register the ID.\n        if (obj.child != null)\n        {\n            if (obj.child.parent != null && obj.previous != null &&\n                obj.child.parent != obj.previous)\n            {\n                obj.previous = obj.child.parent;\n            }\n\n            obj.child.parent = obj.previous;\n            obj.previous = obj.parent;\n            obj.previousIndex = obj.index;\n        }\n\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxChildChangeCodec = typeof mxChildChangeCodec !== 'undefined' ? mxChildChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxTerminalChangeCodec\n\t *\n\t * Codec for <mxTerminalChange>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t *\n\t * Reference Fields:\n\t *\n\t * - cell\n\t * - terminal\n\t */\n\tvar codec = new mxObjectCodec(new mxTerminalChange(),\n\t\t['model', 'previous'], ['cell', 'terminal']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.terminal;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxTerminalChangeCodec = typeof mxTerminalChangeCodec !== 'undefined' ? mxTerminalChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGenericChangeCodec\n *\n * Codec for <mxValueChange>s, <mxStyleChange>s, <mxGeometryChange>s,\n * <mxCollapseChange>s and <mxVisibleChange>s. This class is created\n * and registered dynamically at load time and used implicitly\n * via <mxCodec> and the <mxCodecRegistry>.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n *\n * Reference Fields:\n *\n * - cell\n * \n * Constructor: mxGenericChangeCodec\n *\n * Factory function that creates a <mxObjectCodec> for\n * the specified change and fieldname.\n *\n * Parameters:\n *\n * obj - An instance of the change object.\n * variable - The fieldname for the change data.\n */\nvar mxGenericChangeCodec = function(obj, variable)\n{\n\tvar codec = new mxObjectCodec(obj,  ['model', 'previous'], ['cell']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Allows forward references in sessions. This is a workaround\n\t\t// for the sequence of edits in mxGraph.moveCells and cellsAdded.\n\t\tif (mxUtils.isNode(obj.cell))\n\t\t{\n\t\t\tobj.cell = dec.decodeCell(obj.cell, false);\n\t\t}\n\n\t\tobj.previous = obj[variable];\n\n\t\treturn obj;\n\t};\n\t\n\treturn codec;\n};\n\n// Registers the codecs\nmxCodecRegistry.register(mxGenericChangeCodec(new mxValueChange(), 'value'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxStyleChange(), 'style'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxGeometryChange(), 'geometry'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCollapseChange(), 'collapsed'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxVisibleChange(), 'visible'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCellAttributeChange(), 'value'));\n\n__mxOutput.mxGenericChangeCodec = typeof mxGenericChangeCodec !== 'undefined' ? mxGenericChangeCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphCodec\n\t *\n\t * Codec for <mxGraph>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - graphListeners\n\t * - eventListeners\n\t * - view\n\t * - container\n\t * - cellRenderer\n\t * - editor\n\t * - selection\n\t */\n\treturn new mxObjectCodec(new mxGraph(),\n\t\t['graphListeners', 'eventListeners', 'view', 'container',\n\t\t'cellRenderer', 'editor', 'selection']);\n\n}());\n\n__mxOutput.mxGraphCodec = typeof mxGraphCodec !== 'undefined' ? mxGraphCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphViewCodec\n\t *\n\t * Custom encoder for <mxGraphView>s. This class is created\n\t * and registered dynamically at load time and used implicitly via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only writes views\n\t * into a XML format that can be used to create an image for\n\t * the graph, that is, it contains absolute coordinates with\n\t * computed perimeters, edge styles and cell styles.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphView());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes the given <mxGraphView> using <encodeCell>\n\t * starting at the model's root. This returns the\n\t * top-level graph node of the recursive encoding.\n\t */\n\tcodec.encode = function(enc, view)\n\t{\n\t\treturn this.encodeCell(enc, view,\n\t\t\tview.graph.getModel().getRoot());\n\t};\n\n\t/**\n\t * Function: encodeCell\n\t *\n\t * Recursively encodes the specifed cell. Uses layer\n\t * as the default nodename. If the cell's parent is\n\t * null, then graph is used for the nodename. If\n\t * <mxGraphModel.isEdge> returns true for the cell,\n\t * then edge is used for the nodename, else if\n\t * <mxGraphModel.isVertex> returns true for the cell,\n\t * then vertex is used for the nodename.\n\t *\n\t * <mxGraph.getLabel> is used to create the label\n\t * attribute for the cell. For graph nodes and vertices\n\t * the bounds are encoded into x, y, width and height.\n\t * For edges the points are encoded into a points\n\t * attribute as a space-separated list of comma-separated\n\t * coordinate pairs (eg. x0,y0 x1,y1 ... xn,yn). All\n\t * values from the cell style are added as attribute\n\t * values to the node. \n\t */\n\tcodec.encodeCell = function(enc, view, cell)\n\t{\n\t\tvar model = view.graph.getModel();\n\t\tvar state = view.getState(cell);\n\t\tvar parent = model.getParent(cell);\n\t\t\n\t\tif (parent == null || state != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\tvar geo = view.graph.getCellGeometry(cell);\n\t\t\tvar name = null;\n\t\t\t\n\t\t\tif (parent == model.getRoot())\n\t\t\t{\n\t\t\t\tname = 'layer';\n\t\t\t}\n\t\t\telse if (parent == null)\n\t\t\t{\n\t\t\t\tname = 'graph';\n\t\t\t}\n\t\t\telse if (model.isEdge(cell))\n\t\t\t{\n\t\t\t\tname = 'edge';\n\t\t\t}\n\t\t\telse if (childCount > 0 && geo != null)\n\t\t\t{\n\t\t\t\tname = 'group';\n\t\t\t}\n\t\t\telse if (model.isVertex(cell))\n\t\t\t{\n\t\t\t\tname = 'vertex';\n\t\t\t}\n\t\t\t\n\t\t\tif (name != null)\n\t\t\t{\n\t\t\t\tvar node = enc.document.createElement(name);\n\t\t\t\tvar lab = view.graph.getLabel(cell);\n\t\t\t\t\n\t\t\t\tif (lab != null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('label', view.graph.getLabel(cell));\n\t\t\t\t\t\n\t\t\t\t\tif (view.graph.isHtmlLabel(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('html', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tif (parent == null)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = view.getGraphBounds();\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(bounds.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(bounds.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(bounds.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(bounds.height));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tnode.setAttribute('scale', view.scale);\n\t\t\t\t}\n\t\t\t\telse if (state != null && geo != null)\n\t\t\t\t{\n\t\t\t\t\t// Writes each key, value in the style pair to an attribute\n\t\t\t\t    for (var i in state.style)\n\t\t\t\t    {\n\t\t\t\t    \tvar value = state.style[i];\n\t\t\n\t\t\t\t    \t// Tries to turn objects and functions into strings\n\t\t\t\t\t    if (typeof(value) == 'function' &&\n\t\t\t\t\t\t\ttypeof(value) == 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t    \tvalue = mxStyleRegistry.getName(value);\n\t\t\t\t        }\n\t\t\t\t    \t\n\t\t\t\t    \tif (value != null &&\n\t\t\t\t    \t\ttypeof(value) != 'function' &&\n\t\t\t\t\t\t\ttypeof(value) != 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute(i, value);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t\tvar abs = state.absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the list of points into one attribute\n\t\t\t\t\tif (abs != null && abs.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pts = Math.round(abs[0].x) + ',' + Math.round(abs[0].y);\n\t\t\n\t\t\t\t\t\tfor (var i=1; i<abs.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts += ' ' + Math.round(abs[i].x) + ',' +\n\t\t\t\t\t\t\t\tMath.round(abs[i].y);\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\tnode.setAttribute('points', pts);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Writes the bounds into 4 attributes\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(state.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(state.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(state.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(state.height));\t\t\t\t\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar offset = state.absoluteOffset;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the offset into 2 attributes\n\t\t\t\t\tif (offset != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (offset.x != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dx', Math.round(offset.x));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (offset.y != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dy', Math.round(offset.y));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tfor (var i=0; i<childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar childNode = this.encodeCell(enc,\n\t\t\t\t\t\t\tview, model.getChildAt(cell, i));\n\t\t\t\t\t\n\t\t\t\t\tif (childNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxGraphViewCodec = typeof mxGraphViewCodec !== 'undefined' ? mxGraphViewCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheetCodec\n *\n * Codec for <mxStylesheet>s. This class is created and registered\n * dynamically at load time and used implicitly via <mxCodec>\n * and the <mxCodecRegistry>.\n */\nvar mxStylesheetCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxStylesheet());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes a stylesheet. See <decode> for a description of the\n\t * format.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\tvar node = enc.document.createElement(this.getName());\n\t\t\n\t\tfor (var i in obj.styles)\n\t\t{\n\t\t\tvar style = obj.styles[i];\n\t\t\tvar styleNode = enc.document.createElement('add');\n\t\t\t\n\t\t\tif (i != null)\n\t\t\t{\n\t\t\t\tstyleNode.setAttribute('as', i);\n\t\t\t\t\n\t\t\t\tfor (var j in style)\n\t\t\t\t{\n\t\t\t\t\tvar value = this.getStringValue(j, style[j]);\n\t\t\t\t\t\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar entry = enc.document.createElement('add');\n\t\t\t\t\t\tentry.setAttribute('value', value);\n\t\t\t\t\t\tentry.setAttribute('as', j);\n\t\t\t\t\t\tstyleNode.appendChild(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (styleNode.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tnode.appendChild(styleNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t    return node;\n\t};\n\n\t/**\n\t * Function: getStringValue\n\t *\n\t * Returns the string for encoding the given value.\n\t */\n\tcodec.getStringValue = function(key, value)\n\t{\n\t\tvar type = typeof(value);\n\t\t\n\t\tif (type == 'function')\n\t\t{\n\t\t\tvalue = mxStyleRegistry.getName(value);\n\t\t}\n\t\telse if (type == 'object')\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new style.\n\t *\n\t * Attributes:\n\t *\n\t * as - Name of the style.\n\t * extend - Name of the style to inherit from.\n\t *\n\t * Each node contains another sequence of add and remove nodes with the following\n\t * attributes:\n\t *\n\t * as - Name of the style (see <mxConstants>).\n\t * value - Value for the style.\n\t *\n\t * Instead of the value-attribute, one can put Javascript expressions into\n\t * the node as follows if <mxStylesheetCodec.allowEval> is true:\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t *\n\t * A remove node will remove the entry with the name given in the as-attribute\n\t * from the style.\n\t * \n\t * Example:\n\t *\n\t * (code)\n\t * <mxStylesheet as=\"stylesheet\">\n\t *   <add as=\"text\">\n\t *     <add as=\"fontSize\" value=\"12\"/>\n\t *   </add>\n\t *   <add as=\"defaultVertex\" extend=\"text\">\n\t *     <add as=\"shape\" value=\"rectangle\"/>\n\t *   </add>\n\t * </mxStylesheet>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar obj = into || new this.template.constructor();\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.objects[id] = obj;\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tif (!this.processInclude(dec, node, obj) && node.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\n\t\t\t\tif (as != null)\n\t\t\t\t{\n\t\t\t\t\tvar extend = node.getAttribute('extend');\n\t\t\t\t\tvar style = (extend != null) ? mxUtils.clone(obj.styles[extend]) : null;\n\t\t\t\t\t\n\t\t\t\t\tif (style == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (extend != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxLog.warn('mxStylesheetCodec.decode: stylesheet ' +\n\t\t\t\t\t\t\t\textend + ' not found to extend');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstyle = new Object();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar entry = node.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (entry != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (entry.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t \tvar key = entry.getAttribute('as');\n\t\t\t\t\t\t \t\n\t\t\t\t\t\t \tif (entry.nodeName == 'add')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \tvar text = mxUtils.getTextContent(entry);\n\t\t\t\t\t\t\t \tvar value = null;\n\t\t\t\t\t\t\t \t\n\t\t\t\t\t\t\t \tif (text != null && text.length > 0 && mxStylesheetCodec.allowEval)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = mxUtils.eval(text);\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t \telse\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = entry.getAttribute('value');\n\t\t\t\t\t\t\t \t\t\n\t\t\t\t\t\t\t \t\tif (mxUtils.isNumeric(value))\n\t\t\t\t\t\t\t \t\t{\n\t\t\t\t\t\t\t\t\t\tvalue = parseFloat(value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t \t}\n\n\t\t\t\t\t\t\t \tif (value != null)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tstyle[key] = value;\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \telse if (entry.nodeName == 'remove')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t \t\tdelete style[key];\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tentry = entry.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj.putCellStyle(as, style);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input.\n */\nmxStylesheetCodec.allowEval = true;\n\n__mxOutput.mxStylesheetCodec = typeof mxStylesheetCodec !== 'undefined' ? mxStylesheetCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultKeyHandlerCodec\n\t *\n\t * Custom codec for configuring <mxDefaultKeyHandler>s. This class is created\n\t * and registered dynamically at load time and used implicitly via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing key handlers, it does not encode or create key handlers.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultKeyHandler());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Binds a keystroke to an actionname.\n\t *\n\t * Attributes:\n\t *\n\t * as - Keycode.\n\t * action - Actionname to execute in editor.\n\t * control - Optional boolean indicating if\n\t * \t\tthe control key must be pressed.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <mxDefaultKeyHandler as=\"keyHandler\">\n\t *   <add as=\"88\" control=\"true\" action=\"cut\"/>\n\t *   <add as=\"67\" control=\"true\" action=\"copy\"/>\n\t *   <add as=\"86\" control=\"true\" action=\"paste\"/>\n\t * </mxDefaultKeyHandler>\n\t * (end)\n\t *\n\t * The keycodes are for the x, c and v keys.\n\t *\n\t * See also: <mxDefaultKeyHandler.bindAction>,\n\t * http://www.js-examples.com/page/tutorials__key_codes.html\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (!this.processInclude(dec, node, into) &&\n\t\t\t\t\tnode.nodeName == 'add')\n\t\t\t\t{\n\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\tvar control = node.getAttribute('control');\n\t\t\t\t\t\n\t\t\t\t\tinto.bindAction(as, action, control);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultKeyHandlerCodec = typeof mxDefaultKeyHandlerCodec !== 'undefined' ? mxDefaultKeyHandlerCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbarCodec\n *\n * Custom codec for configuring <mxDefaultToolbar>s. This class is created\n * and registered dynamically at load time and used implicitly via\n * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n * data for existing toolbars handlers, it does not encode or create toolbars.\n */\nvar mxDefaultToolbarCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxDefaultToolbar());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new item to the toolbar. See below for attributes.\n\t * separator - Adds a vertical separator. No attributes.\n\t * hr - Adds a horizontal separator. No attributes.\n\t * br - Adds a linefeed. No attributes. \n\t *\n\t * Attributes:\n\t *\n\t * as - Resource key for the label.\n\t * action - Name of the action to execute in enclosing editor.\n\t * mode - Modename (see below).\n\t * template - Template name for cell insertion.\n\t * style - Optional style to override the template style.\n\t * icon - Icon (relative/absolute URL).\n\t * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n\t * id - Optional ID to be used for the created DOM element.\n\t * toggle - Optional 0 or 1 to disable toggling of the element. Default is\n\t * 1 (true).\n\t *\n\t * The action, mode and template attributes are mutually exclusive. The\n\t * style can only be used with the template attribute. The add node may\n\t * contain another sequence of add nodes with as and action attributes\n\t * to create a combo box in the toolbar. If the icon is specified then\n\t * a list of the child node is expected to have its template attribute\n\t * set and the action is ignored instead.\n\t * \n\t * Nodes with a specified template may define a function to be used for\n\t * inserting the cloned template into the graph. Here is an example of such\n\t * a node:\n\t * \n\t * (code)\n\t * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n\t *   function (editor, cell, evt, targetCell)\n\t *   {\n\t *     var pt = mxUtils.convertPoint(\n\t *       editor.graph.container, mxEvent.getClientX(evt),\n\t *         mxEvent.getClientY(evt));\n\t *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * In the above function, editor is the enclosing <mxEditor> instance, cell\n\t * is the clone of the template, evt is the mouse event that represents the\n\t * drop and targetCell is the cell under the mousepointer where the drop\n\t * occurred. The targetCell is retrieved using <mxGraph.getCellAt>.\n\t *\n\t * Futhermore, nodes with the mode attribute may define a function to\n\t * be executed upon selection of the respective toolbar icon. In the\n\t * example below, the default edge style is set when this specific\n\t * connect-mode is activated:\n\t *\n\t * (code)\n\t * <add as=\"connect\" mode=\"connect\"><![CDATA[\n\t *   function (editor)\n\t *   {\n\t *     if (editor.defaultEdge != null)\n\t *     {\n\t *       editor.defaultEdge.style = 'straightEdge';\n\t *     }\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * Both functions require <mxDefaultToolbarCodec.allowEval> to be set to true.\n\t *\n\t * Modes:\n\t *\n\t * select - Left mouse button used for rubberband- & cell-selection.\n\t * connect - Allows connecting vertices by inserting new edges.\n\t * pan - Disables selection and switches to panning on the left button.\n\t *\n\t * Example:\n\t *\n\t * To add items to the toolbar:\n\t * \n\t * (code)\n\t * <mxDefaultToolbar as=\"toolbar\">\n\t *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n\t *   <br/><hr/>\n\t *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n\t *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n\t * </mxDefaultToolbar>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\tif (!this.processInclude(dec, node, into))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (node.nodeName == 'separator')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.addSeparator();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'br')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addBreak();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'hr')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addLine();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'add')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\t\t\t\tvar icon = node.getAttribute('icon');\n\t\t\t\t\t\t\tvar pressedIcon = node.getAttribute('pressedIcon');\n\t\t\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\t\t\tvar mode = node.getAttribute('mode');\n\t\t\t\t\t\t\tvar template = node.getAttribute('template');\n\t\t\t\t\t\t\tvar toggle = node.getAttribute('toggle') != '0';\n\t\t\t\t\t\t\tvar text = mxUtils.getTextContent(node);\n\t\t\t\t\t\t\tvar elt = null;\n\n\t\t\t\t\t\t\tif (action != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telt = into.addItem(as, icon, action, pressedIcon);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (mode != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar funct = (mxDefaultToolbarCodec.allowEval) ? mxUtils.eval(text) : null;\n\t\t\t\t\t\t\t\telt = into.addMode(as, icon, mode, pressedIcon, funct);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (template != null || (text != null && text.length > 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar cell = editor.templates[template];\n\t\t\t\t\t\t\t\tvar style = node.getAttribute('style');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (cell != null && style != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcell = editor.graph.cloneCell(cell);\n\t\t\t\t\t\t\t\t\tcell.setStyle(style);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar insertFunction = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (text != null && text.length > 0 && mxDefaultToolbarCodec.allowEval)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tinsertFunction = mxUtils.eval(text);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\telt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar children = mxUtils.getChildNodes(node);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (children.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (icon == null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar combo = into.addActionCombo(as);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(combo, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar act = child.getAttribute('action');\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addActionOption(combo, lab, act);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar select = null;\n\t\t\t\t\t\t\t\t\t\tvar create = function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar template = editor.templates[select.value];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (template != null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar clone = template.clone();\n\t\t\t\t\t\t\t\t\t\t\t\tvar style = select.options[select.selectedIndex].cellStyle;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif (style != null)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tclone.setStyle(style);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn clone;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmxLog.warn('Template '+template+' not found');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar img = into.addPrototype(as, icon, create, null, null, toggle);\n\t\t\t\t\t\t\t\t\t\tselect = into.addCombo();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Selects the toolbar icon if a selection change\n\t\t\t\t\t\t\t\t\t\t// is made in the corresponding combobox.\n\t\t\t\t\t\t\t\t\t\tmxEvent.addListener(select, 'change', function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.selectMode(img, function(evt)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar pt = mxUtils.convertPoint(editor.graph.container,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn editor.addVertex(null, funct(), pt.x, pt.y);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.noReset = false;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Adds the entries to the combobox\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(select, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = child.getAttribute('template');\n\t\t\t\t\t\t\t\t\t\t\t\tvar option = into.addOption(select, lab, tmp || template);\n\t\t\t\t\t\t\t\t\t\t\t\toption.cellStyle = child.getAttribute('style');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Assigns an ID to the created element to access it later.\n\t\t\t\t\t\t\tif (elt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar id = node.getAttribute('id');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (id != null && id.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\telt.setAttribute('id', id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input\n */\nmxDefaultToolbarCodec.allowEval = true;\n\n__mxOutput.mxDefaultToolbarCodec = typeof mxDefaultToolbarCodec !== 'undefined' ? mxDefaultToolbarCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultPopupMenuCodec\n\t *\n\t * Custom codec for configuring <mxDefaultPopupMenu>s. This class is created\n\t * and registered dynamically at load time and used implicitly via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing popup menus, it does not encode or create menus. Note\n\t * that this codec only passes the configuration node to the popup menu,\n\t * which uses the config to dynamically create menus. See\n\t * <mxDefaultPopupMenu.createMenu>.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultPopupMenu());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Uses the given node as the config for <mxDefaultPopupMenu>.\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar inc = node.getElementsByTagName('include')[0];\n\t\t\n\t\tif (inc != null)\n\t\t{\n\t\t\tthis.processInclude(dec, inc, into);\n\t\t}\n\t\telse if (into != null)\n\t\t{\n\t\t\tinto.config = node;\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxDefaultPopupMenuCodec = typeof mxDefaultPopupMenuCodec !== 'undefined' ? mxDefaultPopupMenuCodec : undefined;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxEditorCodec\n\t *\n\t * Codec for <mxEditor>s. This class is created and registered\n\t * dynamically at load time and used implicitly via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - modified\n\t * - lastSnapshot\n\t * - ignoredChanges\n\t * - undoManager\n\t * - graphContainer\n\t * - toolbarContainer\n\t */\n\tvar codec = new mxObjectCodec(new mxEditor(),\n\t\t['modified', 'lastSnapshot', 'ignoredChanges',\n\t\t'undoManager', 'graphContainer', 'toolbarContainer']);\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the ui-part of the configuration node by reading\n\t * a sequence of the following child nodes and attributes\n\t * and passes the control to the default decoding mechanism:\n\t *\n\t * Child Nodes:\n\t *\n\t * stylesheet - Adds a CSS stylesheet to the document.\n\t * resource - Adds the basename of a resource bundle.\n\t * add - Creates or configures a known UI element.\n\t *\n\t * These elements may appear in any order given that the\n\t * graph UI element is added before the toolbar element\n\t * (see Known Keys).\n\t *\n\t * Attributes:\n\t *\n\t * as - Key for the UI element (see below).\n\t * element - ID for the element in the document.\n\t * style - CSS style to be used for the element or window.\n\t * x - X coordinate for the new window.\n\t * y - Y coordinate for the new window.\n\t * width - Width for the new window.\n\t * height - Optional height for the new window.\n\t * name - Name of the stylesheet (absolute/relative URL).\n\t * basename - Basename of the resource bundle (see <mxResources>).\n\t *\n\t * The x, y, width and height attributes are used to create a new\n\t * <mxWindow> if the element attribute is not specified in an add\n\t * node. The name and basename are only used in the stylesheet and\n\t * resource nodes, respectively.\n\t *\n\t * Known Keys:\n\t *\n\t * graph - Main graph element (see <mxEditor.setGraphContainer>).\n\t * title - Title element (see <mxEditor.setTitleContainer>).\n\t * toolbar - Toolbar element (see <mxEditor.setToolbarContainer>).\n\t * status - Status bar element (see <mxEditor.setStatusContainer>).\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <ui>\n\t *   <stylesheet name=\"css/process.css\"/>\n\t *   <resource basename=\"resources/app\"/>\n\t *   <add as=\"graph\" element=\"graph\"\n\t *     style=\"left:70px;right:20px;top:20px;bottom:40px\"/>\n\t *   <add as=\"status\" element=\"status\"/>\n\t *   <add as=\"toolbar\" x=\"10\" y=\"20\" width=\"54\"/>\n\t * </ui>\n\t * (end)\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Assigns the specified templates for edges\n\t\tvar defaultEdge = node.getAttribute('defaultEdge');\n\t\t\n\t\tif (defaultEdge != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultEdge');\n\t\t\tobj.defaultEdge = obj.templates[defaultEdge];\n\t\t}\n\n\t\t// Assigns the specified templates for groups\n\t\tvar defaultGroup = node.getAttribute('defaultGroup');\n\t\t\n\t\tif (defaultGroup != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultGroup');\n\t\t\tobj.defaultGroup = obj.templates[defaultGroup];\n\t\t}\n\n\t\treturn obj;\n\t};\n\t\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'Array')\n\t\t{\n\t\t\tvar role = child.getAttribute('as');\n\t\t\t\n\t\t\tif (role == 'templates')\n\t\t\t{\n\t\t\t\tthis.decodeTemplates(dec, child, obj);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (child.nodeName == 'ui')\n\t\t{\n\t\t\tthis.decodeUi(dec, child, obj);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t};\n\t\t\n\t/**\n\t * Function: decodeUi\n\t *\n\t * Decodes the ui elements from the given node.\n\t */\n\tcodec.decodeUi = function(dec, node, editor)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = tmp.getAttribute('as');\n\t\t\t\tvar elt = tmp.getAttribute('element');\n\t\t\t\tvar style = tmp.getAttribute('style');\n\t\t\t\tvar element = null;\n\n\t\t\t\tif (elt != null)\n\t\t\t\t{\n\t\t\t\t\telement = document.getElementById(elt);\n\t\t\t\t\t\n\t\t\t\t\tif (element != null && style != null)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.style.cssText += ';' + style;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar x = parseInt(tmp.getAttribute('x'));\n\t\t\t\t\tvar y = parseInt(tmp.getAttribute('y'));\n\t\t\t\t\tvar width = tmp.getAttribute('width');\n\t\t\t\t\tvar height = tmp.getAttribute('height');\n\n\t\t\t\t\t// Creates a new window around the element\n\t\t\t\t\telement = document.createElement('div');\n\t\t\t\t\telement.style.cssText = style;\n\t\t\t\t\t\n\t\t\t\t\tvar wnd = new mxWindow(mxResources.get(as) || as,\n\t\t\t\t\t\telement, x, y, width, height, false, true);\n\t\t\t\t\twnd.setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// TODO: Make more generic\n\t\t\t\tif (as == 'graph')\n\t\t\t\t{\n\t\t\t\t\teditor.setGraphContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'toolbar')\n\t\t\t\t{\n\t\t\t\t\teditor.setToolbarContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'title')\n\t\t\t\t{\n\t\t\t\t\teditor.setTitleContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'status')\n\t\t\t\t{\n\t\t\t\t\teditor.setStatusContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'map')\n\t\t\t\t{\n\t\t\t\t\teditor.setMapContainer(element);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'resource')\n\t\t\t{\n\t\t\t\tmxResources.add(tmp.getAttribute('basename'));\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'stylesheet')\n\t\t\t{\n\t\t\t\tmxClient.link('stylesheet', tmp.getAttribute('name'));\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\t\n\t};\n\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeTemplates = function(dec, node, editor)\n\t{\n\t\tif (editor.templates == null)\n\t\t{\n\t\t\teditor.templates = [];\n\t\t}\n\t\t\n\t\tvar children = mxUtils.getChildNodes(node);\n\t\tfor (var j=0; j<children.length; j++)\n\t\t{\n\t\t\tvar name = children[j].getAttribute('as');\n\t\t\tvar child = children[j].firstChild;\n\t\t\t\n\t\t\twhile (child != null && child.nodeType != 1)\n\t\t\t{\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\t// LATER: Only single cells means you need\n\t\t\t\t// to group multiple cells within another\n\t\t\t\t// cell. This should be changed to support\n\t\t\t\t// arrays of cells, or the wrapper must\n\t\t\t\t// be automatically handled in this class.\n\t\t\t\teditor.templates[name] = dec.decodeCell(child);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n__mxOutput.mxEditorCodec = typeof mxEditorCodec !== 'undefined' ? mxEditorCodec : undefined;\nreturn __mxOutput;\n};\n}));","'use strict';\n// TODO: Remove from `core-js@4` since it's moved to entry points\nrequire('../modules/es.regexp.exec');\nvar redefine = require('../internals/redefine');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar regexpExec = require('../internals/regexp-exec');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nvar SPECIES = wellKnownSymbol('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\n// IE <= 11 replaces $0 with the whole match, as if it was $&\n// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0\nvar REPLACE_KEEPS_$0 = (function () {\n  return 'a'.replace(/./, '$0') === '$0';\n})();\n\nvar REPLACE = wellKnownSymbol('replace');\n// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string\nvar REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {\n  if (/./[REPLACE]) {\n    return /./[REPLACE]('a', '$0') === '';\n  }\n  return false;\n})();\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  // eslint-disable-next-line regexp/no-empty-group -- required for testing\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\nmodule.exports = function (KEY, length, exec, sham) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {};\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () { execCalled = true; return null; };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !(\n      REPLACE_SUPPORTS_NAMED_GROUPS &&\n      REPLACE_KEEPS_$0 &&\n      !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\n    )) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      if (regexp.exec === regexpExec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n        }\n        return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n      }\n      return { done: false };\n    }, {\n      REPLACE_KEEPS_$0: REPLACE_KEEPS_$0,\n      REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE\n    });\n    var stringMethod = methods[0];\n    var regexMethod = methods[1];\n\n    redefine(String.prototype, KEY, stringMethod);\n    redefine(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return regexMethod.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return regexMethod.call(string, this); }\n    );\n  }\n\n  if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);\n};\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","var classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.es/ecma262/#sec-isarray\nmodule.exports = Array.isArray || function isArray(arg) {\n  return classof(arg) == 'Array';\n};\n","/*\n * @Descripttion: \n * @version: \n * @Author: Jason chen\n * @Date: 2020-07-09 17:04:43\n * @LastEditors: Jason chen\n * @LastEditTime: 2021-08-31 11:14:26\n */\nconst mx = require('mxgraph')\n\nconst mxgraph = mx({\n  // 核心中所有图像url的Basepath，不带斜杠。在mxClient.imageBasePath中指定路径.\n  mxImageBasePath: 'mxgraph/images',\n  // 核心中的所有url的Basepath，不带斜杠。在mxClient.basePath中指定路径。\n  // 指向的路径一定要是一个可以通过 url 访问的静态资源目录\n  mxBasePath: 'mxgraph',\n  // 可选的全局配置变量。切换加载mxGraph和mxEditor中的两个资源文件。\n  // 默认值是true。在主线程警告上禁用同步XMLHttpRequest\n  mxLoadResources: true\n  // 指定是否应加载任何样式表。 默认值是true。\n  // mxLoadStylesheets: false,\n  // 可选的全局配置变量，在开发模式下强制加载JavaScript文件。\n  // mxForceIncludes: true,\n  // 可选的全局配置变量来指定资源文件的扩展名。\n  // mxResourceExtension: '.txt'\n})\n\nconst MxCell = mxgraph.mxCell\nconst MxConstants = mxgraph.mxConstants\nconst MxEvent = mxgraph.mxEvent\nconst MxGraph = mxgraph.mxGraph\n\nconst MxRubberBand = mxgraph.mxRubberband\n\nconst MxUtils = mxgraph.mxUtils\nconst MxCodec = mxgraph.mxCodec\nconst MxGeometry = mxgraph.mxGeometry\nconst MxEditor = mxgraph.mxEditor\nconst MxGraphHandler = mxgraph.mxGraphHandler\nconst MxRectangleShape = mxgraph.mxRectangleShape\nconst MxCellTracker = mxgraph.mxCellTracker\nconst MxClient = mxgraph.mxClient\nconst MxPerimeter = mxgraph.mxPerimeter\nconst MxEventObject = mxgraph.mxEventObject\nconst ActiveXObject = mxgraph.activeXObject\n\n\nMxRubberBand.prototype.defaultOpacity = 30\n\nexport {\n  MxEvent,\n  MxGraph,\n  MxEditor,\n  MxUtils,\n  MxGraphHandler,\n  MxConstants,\n  MxCodec,\n  MxRectangleShape,\n  MxCellTracker,\n  MxClient,\n  MxPerimeter,\n  MxEventObject,\n  MxGeometry,\n  MxCell,\n  ActiveXObject\n}"],"sourceRoot":""}